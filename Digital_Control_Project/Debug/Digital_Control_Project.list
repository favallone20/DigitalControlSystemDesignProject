
Digital_Control_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a70c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800a8b0  0800a8b0  0001a8b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adec  0800adec  00020268  2**0
                  CONTENTS
  4 .ARM          00000008  0800adec  0800adec  0001adec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adf4  0800adf4  00020268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adf4  0800adf4  0001adf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adf8  0800adf8  0001adf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  0800adfc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000268  0800b064  00020268  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  0800b064  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fca1  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d93  00000000  00000000  0002ff39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  00031cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  000329a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a287  00000000  00000000  000335f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ddb9  00000000  00000000  0004d877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093211  00000000  00000000  0005b630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee841  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fa8  00000000  00000000  000ee894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000268 	.word	0x20000268
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a894 	.word	0x0800a894

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000026c 	.word	0x2000026c
 80001dc:	0800a894 	.word	0x0800a894

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	ed87 0b00 	vstr	d0, [r7]
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800101a:	ec43 2b17 	vmov	d7, r2, r3
 800101e:	eeb0 0a47 	vmov.f32	s0, s14
 8001022:	eef0 0a67 	vmov.f32	s1, s15
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <_Z7cb_initP15circular_bufferjj>:
	void *head;       // pointer to head
	void *tail;       // pointer to tail
	bool writing;  // signals if the buffer is being written
} circular_buffer;

void cb_init(circular_buffer *cb, size_t capacity, size_t sz) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
	cb->buffer = calloc(capacity, sz);
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	68b8      	ldr	r0, [r7, #8]
 8001040:	f004 ff60 	bl	8005f04 <calloc>
 8001044:	4603      	mov	r3, r0
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	601a      	str	r2, [r3, #0]
	if (cb->buffer == NULL)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d102      	bne.n	800105a <_Z7cb_initP15circular_bufferjj+0x2a>
		printf("ALLOCATED NULL\n\r");
 8001054:	4811      	ldr	r0, [pc, #68]	; (800109c <_Z7cb_initP15circular_bufferjj+0x6c>)
 8001056:	f005 ff29 	bl	8006eac <iprintf>
	// handle error
	cb->buffer_end = (char*) cb->buffer + capacity * sz;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	fb01 f303 	mul.w	r3, r1, r3
 8001066:	441a      	add	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	605a      	str	r2, [r3, #4]
	cb->capacity = capacity;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	609a      	str	r2, [r3, #8]
	cb->count = 0;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
	cb->sz = sz;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	611a      	str	r2, [r3, #16]
	cb->head = cb->buffer;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	615a      	str	r2, [r3, #20]
	cb->tail = cb->buffer;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	619a      	str	r2, [r3, #24]
	cb->writing = false;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2200      	movs	r2, #0
 8001092:	771a      	strb	r2, [r3, #28]

}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	0800a8b0 	.word	0x0800a8b0

080010a0 <_Z12cb_push_backP15circular_bufferPKv>:
void cb_free(circular_buffer *cb) {
	free(cb->buffer);
	// clear out other fields too, just to be safe
}

void cb_push_back(circular_buffer *cb, const void *item) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
	if (cb->count == cb->capacity) {
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d102      	bne.n	80010bc <_Z12cb_push_backP15circular_bufferPKv+0x1c>
		printf("ERROR PUSH BACK \n\r");
 80010b6:	4815      	ldr	r0, [pc, #84]	; (800110c <_Z12cb_push_backP15circular_bufferPKv+0x6c>)
 80010b8:	f005 fef8 	bl	8006eac <iprintf>
		// handle error
	}
	cb->writing = true;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2201      	movs	r2, #1
 80010c0:	771a      	strb	r2, [r3, #28]
	memmove(cb->head, item, cb->sz);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6958      	ldr	r0, [r3, #20]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	461a      	mov	r2, r3
 80010cc:	6839      	ldr	r1, [r7, #0]
 80010ce:	f004 ff5b 	bl	8005f88 <memmove>
	cb->head = (char*) cb->head + cb->sz;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	695a      	ldr	r2, [r3, #20]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	441a      	add	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	615a      	str	r2, [r3, #20]
	if (cb->head == cb->buffer_end)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	695a      	ldr	r2, [r3, #20]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d103      	bne.n	80010f4 <_Z12cb_push_backP15circular_bufferPKv+0x54>
		cb->head = cb->buffer;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	615a      	str	r2, [r3, #20]
	cb->count++;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	1c5a      	adds	r2, r3, #1
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	60da      	str	r2, [r3, #12]
	cb->writing = false;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	771a      	strb	r2, [r3, #28]
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	0800a8c4 	.word	0x0800a8c4

08001110 <_Z12cb_pop_frontP15circular_bufferPv>:

void cb_pop_front(circular_buffer *cb, void *item) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
	if (cb->count == 0) {
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d102      	bne.n	8001128 <_Z12cb_pop_frontP15circular_bufferPv+0x18>
		printf("ERROR PUSH BACK \n\r");
 8001122:	4815      	ldr	r0, [pc, #84]	; (8001178 <_Z12cb_pop_frontP15circular_bufferPv+0x68>)
 8001124:	f005 fec2 	bl	8006eac <iprintf>
		// handle error
	}
	memmove(item, cb->tail, cb->sz);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6999      	ldr	r1, [r3, #24]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	461a      	mov	r2, r3
 8001132:	6838      	ldr	r0, [r7, #0]
 8001134:	f004 ff28 	bl	8005f88 <memmove>
	cb->tail = (char*) cb->tail + cb->sz;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	699a      	ldr	r2, [r3, #24]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	441a      	add	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	619a      	str	r2, [r3, #24]
	if (cb->tail == cb->buffer_end)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	699a      	ldr	r2, [r3, #24]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	429a      	cmp	r2, r3
 8001150:	d103      	bne.n	800115a <_Z12cb_pop_frontP15circular_bufferPv+0x4a>
		cb->tail = cb->buffer;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	619a      	str	r2, [r3, #24]
	while ((cb->writing))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	7f1b      	ldrb	r3, [r3, #28]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d000      	beq.n	8001164 <_Z12cb_pop_frontP15circular_bufferPv+0x54>
 8001162:	e7fa      	b.n	800115a <_Z12cb_pop_frontP15circular_bufferPv+0x4a>
		;
	cb->count--;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	1e5a      	subs	r2, r3, #1
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	60da      	str	r2, [r3, #12]
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	0800a8c4 	.word	0x0800a8c4

0800117c <_Z21setPulseFromDutyValued>:

	// return # of bytes written - as best we can tell
	return (status == HAL_OK ? len : 0);
}

void setPulseFromDutyValue(double dutyVal) {
 800117c:	b5b0      	push	{r4, r5, r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	ed87 0b00 	vstr	d0, [r7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); // enable the motor driver
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800118c:	4869      	ldr	r0, [pc, #420]	; (8001334 <_Z21setPulseFromDutyValued+0x1b8>)
 800118e:	f001 ff23 	bl	8002fd8 <HAL_GPIO_WritePin>

	uint16_t channelToModulate;
	uint16_t channelToStop;

	if (dutyVal > 0) {
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800119e:	f7ff fcc3 	bl	8000b28 <__aeabi_dcmpgt>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d004      	beq.n	80011b2 <_Z21setPulseFromDutyValued+0x36>
		channelToModulate = TIM_CHANNEL_1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	81fb      	strh	r3, [r7, #14]
		channelToStop = TIM_CHANNEL_2;
 80011ac:	2304      	movs	r3, #4
 80011ae:	81bb      	strh	r3, [r7, #12]
 80011b0:	e003      	b.n	80011ba <_Z21setPulseFromDutyValued+0x3e>
	} else {
		channelToModulate = TIM_CHANNEL_2;
 80011b2:	2304      	movs	r3, #4
 80011b4:	81fb      	strh	r3, [r7, #14]
		channelToStop = TIM_CHANNEL_1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim3, channelToStop, 0);
 80011ba:	89bb      	ldrh	r3, [r7, #12]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d104      	bne.n	80011ca <_Z21setPulseFromDutyValued+0x4e>
 80011c0:	4b5d      	ldr	r3, [pc, #372]	; (8001338 <_Z21setPulseFromDutyValued+0x1bc>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2200      	movs	r2, #0
 80011c6:	635a      	str	r2, [r3, #52]	; 0x34
 80011c8:	e013      	b.n	80011f2 <_Z21setPulseFromDutyValued+0x76>
 80011ca:	89bb      	ldrh	r3, [r7, #12]
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	d104      	bne.n	80011da <_Z21setPulseFromDutyValued+0x5e>
 80011d0:	4b59      	ldr	r3, [pc, #356]	; (8001338 <_Z21setPulseFromDutyValued+0x1bc>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2200      	movs	r2, #0
 80011d6:	639a      	str	r2, [r3, #56]	; 0x38
 80011d8:	e00b      	b.n	80011f2 <_Z21setPulseFromDutyValued+0x76>
 80011da:	89bb      	ldrh	r3, [r7, #12]
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d104      	bne.n	80011ea <_Z21setPulseFromDutyValued+0x6e>
 80011e0:	4b55      	ldr	r3, [pc, #340]	; (8001338 <_Z21setPulseFromDutyValued+0x1bc>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2200      	movs	r2, #0
 80011e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80011e8:	e003      	b.n	80011f2 <_Z21setPulseFromDutyValued+0x76>
 80011ea:	4b53      	ldr	r3, [pc, #332]	; (8001338 <_Z21setPulseFromDutyValued+0x1bc>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2200      	movs	r2, #0
 80011f0:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim3, channelToModulate,
 80011f2:	89fb      	ldrh	r3, [r7, #14]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d124      	bne.n	8001242 <_Z21setPulseFromDutyValued+0xc6>
 80011f8:	ed97 0b00 	vldr	d0, [r7]
 80011fc:	f7ff ff04 	bl	8001008 <_ZSt3absd>
 8001200:	ec55 4b10 	vmov	r4, r5, d0
 8001204:	4b4c      	ldr	r3, [pc, #304]	; (8001338 <_Z21setPulseFromDutyValued+0x1bc>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f983 	bl	8000514 <__aeabi_ui2d>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4620      	mov	r0, r4
 8001214:	4629      	mov	r1, r5
 8001216:	f7ff f9f7 	bl	8000608 <__aeabi_dmul>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	4b45      	ldr	r3, [pc, #276]	; (800133c <_Z21setPulseFromDutyValued+0x1c0>)
 8001228:	f7ff fb18 	bl	800085c <__aeabi_ddiv>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4941      	ldr	r1, [pc, #260]	; (8001338 <_Z21setPulseFromDutyValued+0x1bc>)
 8001232:	680c      	ldr	r4, [r1, #0]
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	f7ff fcbe 	bl	8000bb8 <__aeabi_d2uiz>
 800123c:	4603      	mov	r3, r0
 800123e:	6363      	str	r3, [r4, #52]	; 0x34
			(abs(dutyVal) * ((double )htim3.Init.Period)) / 100); //cast integer value to double to correctly perform division between decimal numbers
}
 8001240:	e073      	b.n	800132a <_Z21setPulseFromDutyValued+0x1ae>
	__HAL_TIM_SET_COMPARE(&htim3, channelToModulate,
 8001242:	89fb      	ldrh	r3, [r7, #14]
 8001244:	2b04      	cmp	r3, #4
 8001246:	d124      	bne.n	8001292 <_Z21setPulseFromDutyValued+0x116>
 8001248:	ed97 0b00 	vldr	d0, [r7]
 800124c:	f7ff fedc 	bl	8001008 <_ZSt3absd>
 8001250:	ec55 4b10 	vmov	r4, r5, d0
 8001254:	4b38      	ldr	r3, [pc, #224]	; (8001338 <_Z21setPulseFromDutyValued+0x1bc>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f95b 	bl	8000514 <__aeabi_ui2d>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4620      	mov	r0, r4
 8001264:	4629      	mov	r1, r5
 8001266:	f7ff f9cf 	bl	8000608 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	4b31      	ldr	r3, [pc, #196]	; (800133c <_Z21setPulseFromDutyValued+0x1c0>)
 8001278:	f7ff faf0 	bl	800085c <__aeabi_ddiv>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	492d      	ldr	r1, [pc, #180]	; (8001338 <_Z21setPulseFromDutyValued+0x1bc>)
 8001282:	680c      	ldr	r4, [r1, #0]
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f7ff fc96 	bl	8000bb8 <__aeabi_d2uiz>
 800128c:	4603      	mov	r3, r0
 800128e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001290:	e04b      	b.n	800132a <_Z21setPulseFromDutyValued+0x1ae>
	__HAL_TIM_SET_COMPARE(&htim3, channelToModulate,
 8001292:	89fb      	ldrh	r3, [r7, #14]
 8001294:	2b08      	cmp	r3, #8
 8001296:	d124      	bne.n	80012e2 <_Z21setPulseFromDutyValued+0x166>
 8001298:	ed97 0b00 	vldr	d0, [r7]
 800129c:	f7ff feb4 	bl	8001008 <_ZSt3absd>
 80012a0:	ec55 4b10 	vmov	r4, r5, d0
 80012a4:	4b24      	ldr	r3, [pc, #144]	; (8001338 <_Z21setPulseFromDutyValued+0x1bc>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f933 	bl	8000514 <__aeabi_ui2d>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4620      	mov	r0, r4
 80012b4:	4629      	mov	r1, r5
 80012b6:	f7ff f9a7 	bl	8000608 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <_Z21setPulseFromDutyValued+0x1c0>)
 80012c8:	f7ff fac8 	bl	800085c <__aeabi_ddiv>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4919      	ldr	r1, [pc, #100]	; (8001338 <_Z21setPulseFromDutyValued+0x1bc>)
 80012d2:	680c      	ldr	r4, [r1, #0]
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f7ff fc6e 	bl	8000bb8 <__aeabi_d2uiz>
 80012dc:	4603      	mov	r3, r0
 80012de:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 80012e0:	e023      	b.n	800132a <_Z21setPulseFromDutyValued+0x1ae>
	__HAL_TIM_SET_COMPARE(&htim3, channelToModulate,
 80012e2:	ed97 0b00 	vldr	d0, [r7]
 80012e6:	f7ff fe8f 	bl	8001008 <_ZSt3absd>
 80012ea:	ec55 4b10 	vmov	r4, r5, d0
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <_Z21setPulseFromDutyValued+0x1bc>)
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f90e 	bl	8000514 <__aeabi_ui2d>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4620      	mov	r0, r4
 80012fe:	4629      	mov	r1, r5
 8001300:	f7ff f982 	bl	8000608 <__aeabi_dmul>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <_Z21setPulseFromDutyValued+0x1c0>)
 8001312:	f7ff faa3 	bl	800085c <__aeabi_ddiv>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4907      	ldr	r1, [pc, #28]	; (8001338 <_Z21setPulseFromDutyValued+0x1bc>)
 800131c:	680c      	ldr	r4, [r1, #0]
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f7ff fc49 	bl	8000bb8 <__aeabi_d2uiz>
 8001326:	4603      	mov	r3, r0
 8001328:	6423      	str	r3, [r4, #64]	; 0x40
}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bdb0      	pop	{r4, r5, r7, pc}
 8001332:	bf00      	nop
 8001334:	40020000 	.word	0x40020000
 8001338:	200002cc 	.word	0x200002cc
 800133c:	40590000 	.word	0x40590000

08001340 <_Z15getSpeedByDeltadd>:

double getSpeedByDelta(double ticksDelta, double Ts) {
 8001340:	b5b0      	push	{r4, r5, r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	ed87 0b02 	vstr	d0, [r7, #8]
 800134a:	ed87 1b00 	vstr	d1, [r7]
	return ticksDelta * 60 / (3591.84 * Ts);
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <_Z15getSpeedByDeltadd+0x60>)
 8001354:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001358:	f7ff f956 	bl	8000608 <__aeabi_dmul>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4614      	mov	r4, r2
 8001362:	461d      	mov	r5, r3
 8001364:	a30c      	add	r3, pc, #48	; (adr r3, 8001398 <_Z15getSpeedByDeltadd+0x58>)
 8001366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800136e:	f7ff f94b 	bl	8000608 <__aeabi_dmul>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4620      	mov	r0, r4
 8001378:	4629      	mov	r1, r5
 800137a:	f7ff fa6f 	bl	800085c <__aeabi_ddiv>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	ec43 2b17 	vmov	d7, r2, r3
}
 8001386:	eeb0 0a47 	vmov.f32	s0, s14
 800138a:	eef0 0a67 	vmov.f32	s1, s15
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bdb0      	pop	{r4, r5, r7, pc}
 8001394:	f3af 8000 	nop.w
 8001398:	147ae148 	.word	0x147ae148
 800139c:	40ac0fae 	.word	0x40ac0fae
 80013a0:	404e0000 	.word	0x404e0000
 80013a4:	00000000 	.word	0x00000000

080013a8 <_Z13getTicksDeltaddd>:

double getTicksDelta(double currentTicks, double lastTicks, double Ts) {
 80013a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013aa:	b089      	sub	sp, #36	; 0x24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	ed87 0b04 	vstr	d0, [r7, #16]
 80013b2:	ed87 1b02 	vstr	d1, [r7, #8]
 80013b6:	ed87 2b00 	vstr	d2, [r7]
	double delta;

	if (abs(currentTicks - lastTicks) <= ceil(8400 * Ts))
 80013ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013c2:	f7fe ff69 	bl	8000298 <__aeabi_dsub>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	ec43 2b17 	vmov	d7, r2, r3
 80013ce:	eeb0 0a47 	vmov.f32	s0, s14
 80013d2:	eef0 0a67 	vmov.f32	s1, s15
 80013d6:	f7ff fe17 	bl	8001008 <_ZSt3absd>
 80013da:	ec55 4b10 	vmov	r4, r5, d0
 80013de:	a341      	add	r3, pc, #260	; (adr r3, 80014e4 <_Z13getTicksDeltaddd+0x13c>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013e8:	f7ff f90e 	bl	8000608 <__aeabi_dmul>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	ec43 2b17 	vmov	d7, r2, r3
 80013f4:	eeb0 0a47 	vmov.f32	s0, s14
 80013f8:	eef0 0a67 	vmov.f32	s1, s15
 80013fc:	f003 fde4 	bl	8004fc8 <ceil>
 8001400:	ec53 2b10 	vmov	r2, r3, d0
 8001404:	2101      	movs	r1, #1
 8001406:	460e      	mov	r6, r1
 8001408:	4620      	mov	r0, r4
 800140a:	4629      	mov	r1, r5
 800140c:	f7ff fb78 	bl	8000b00 <__aeabi_dcmple>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <_Z13getTicksDeltaddd+0x72>
 8001416:	2300      	movs	r3, #0
 8001418:	461e      	mov	r6, r3
 800141a:	b2f3      	uxtb	r3, r6
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00a      	beq.n	8001436 <_Z13getTicksDeltaddd+0x8e>
		delta = currentTicks - lastTicks;
 8001420:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001424:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001428:	f7fe ff36 	bl	8000298 <__aeabi_dsub>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001434:	e047      	b.n	80014c6 <_Z13getTicksDeltaddd+0x11e>
	else {
		if (lastTicks > currentTicks)
 8001436:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800143a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800143e:	f7ff fb73 	bl	8000b28 <__aeabi_dcmpgt>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d01f      	beq.n	8001488 <_Z13getTicksDeltaddd+0xe0>
			delta = currentTicks + pow(2, 16) - 1 - lastTicks;
 8001448:	2110      	movs	r1, #16
 800144a:	2002      	movs	r0, #2
 800144c:	f001 f811 	bl	8002472 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001450:	ec51 0b10 	vmov	r0, r1, d0
 8001454:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001458:	f7fe ff20 	bl	800029c <__adddf3>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <_Z13getTicksDeltaddd+0x138>)
 800146a:	f7fe ff15 	bl	8000298 <__aeabi_dsub>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800147a:	f7fe ff0d 	bl	8000298 <__aeabi_dsub>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001486:	e01e      	b.n	80014c6 <_Z13getTicksDeltaddd+0x11e>
		else
			delta = currentTicks - pow(2, 16) + 1 - lastTicks;
 8001488:	2110      	movs	r1, #16
 800148a:	2002      	movs	r0, #2
 800148c:	f000 fff1 	bl	8002472 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001490:	ec53 2b10 	vmov	r2, r3, d0
 8001494:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001498:	f7fe fefe 	bl	8000298 <__aeabi_dsub>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <_Z13getTicksDeltaddd+0x138>)
 80014aa:	f7fe fef7 	bl	800029c <__adddf3>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014ba:	f7fe feed 	bl	8000298 <__aeabi_dsub>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	}
	return delta;
 80014c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014ca:	ec43 2b17 	vmov	d7, r2, r3
}
 80014ce:	eeb0 0a47 	vmov.f32	s0, s14
 80014d2:	eef0 0a67 	vmov.f32	s1, s15
 80014d6:	3724      	adds	r7, #36	; 0x24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014dc:	f3af 8000 	nop.w
 80014e0:	3ff00000 	.word	0x3ff00000
 80014e4:	00000000 	.word	0x00000000
 80014e8:	40c06800 	.word	0x40c06800

080014ec <_Z12createMatrixii>:
int y_k_expected_rows = 1;
int y_k_expected_columns = 1;
int u_rows = 1;
int u_columns = 1;

double** createMatrix(int n, int m) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
	double *values = (double*) calloc(m * n, sizeof(double));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	2108      	movs	r1, #8
 8001500:	4618      	mov	r0, r3
 8001502:	f004 fcff 	bl	8005f04 <calloc>
 8001506:	4603      	mov	r3, r0
 8001508:	613b      	str	r3, [r7, #16]
	double **rows = (double**) malloc(n * sizeof(double*));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4618      	mov	r0, r3
 8001510:	f004 fd2a 	bl	8005f68 <malloc>
 8001514:	4603      	mov	r3, r0
 8001516:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < n; ++i) {
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	da0f      	bge.n	8001544 <_Z12createMatrixii+0x58>
		rows[i] = values + i * m;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	fb02 f303 	mul.w	r3, r2, r3
 800152c:	00da      	lsls	r2, r3, #3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	68f9      	ldr	r1, [r7, #12]
 8001534:	440b      	add	r3, r1
 8001536:	6939      	ldr	r1, [r7, #16]
 8001538:	440a      	add	r2, r1
 800153a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < n; ++i) {
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	3301      	adds	r3, #1
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	e7eb      	b.n	800151c <_Z12createMatrixii+0x30>
	}
	return rows;
 8001544:	68fb      	ldr	r3, [r7, #12]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <_Z18multiply_matriciesPPdS0_iiiiS0_>:

void multiply_matricies(double **m1, double **m2, int m1_rows, int m1_columns,
		int m2_rows, int m2_columns, double **m3) {
 800154e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001550:	b089      	sub	sp, #36	; 0x24
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	603b      	str	r3, [r7, #0]

	for (int i = 0; i < m1_rows; i++) {
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	69fa      	ldr	r2, [r7, #28]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	429a      	cmp	r2, r3
 8001566:	da5b      	bge.n	8001620 <_Z18multiply_matriciesPPdS0_iiiiS0_+0xd2>
		for (int j = 0; j < m2_columns; j++) {
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001570:	429a      	cmp	r2, r3
 8001572:	da51      	bge.n	8001618 <_Z18multiply_matriciesPPdS0_iiiiS0_+0xca>
			m3[i][j] = 0;
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800157a:	4413      	add	r3, r2
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	18d1      	adds	r1, r2, r3
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	f04f 0300 	mov.w	r3, #0
 800158c:	e9c1 2300 	strd	r2, r3, [r1]
			for (int k = 0; k < m1_rows; k++) {
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	429a      	cmp	r2, r3
 800159a:	da39      	bge.n	8001610 <_Z18multiply_matriciesPPdS0_iiiiS0_+0xc2>
				m3[i][j] += m1[i][k] * m2[k][j];
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015a2:	4413      	add	r3, r2
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	4413      	add	r3, r2
 80015ac:	e9d3 4500 	ldrd	r4, r5, [r3]
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	4413      	add	r3, r2
 80015c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	4413      	add	r3, r2
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4413      	add	r3, r2
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	f7ff f816 	bl	8000608 <__aeabi_dmul>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015ea:	4413      	add	r3, r2
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	18d6      	adds	r6, r2, r3
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4620      	mov	r0, r4
 80015fa:	4629      	mov	r1, r5
 80015fc:	f7fe fe4e 	bl	800029c <__adddf3>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	e9c6 2300 	strd	r2, r3, [r6]
			for (int k = 0; k < m1_rows; k++) {
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	3301      	adds	r3, #1
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	e7c1      	b.n	8001594 <_Z18multiply_matriciesPPdS0_iiiiS0_+0x46>
		for (int j = 0; j < m2_columns; j++) {
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	3301      	adds	r3, #1
 8001614:	61bb      	str	r3, [r7, #24]
 8001616:	e7a9      	b.n	800156c <_Z18multiply_matriciesPPdS0_iiiiS0_+0x1e>
	for (int i = 0; i < m1_rows; i++) {
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	3301      	adds	r3, #1
 800161c:	61fb      	str	r3, [r7, #28]
 800161e:	e79f      	b.n	8001560 <_Z18multiply_matriciesPPdS0_iiiiS0_+0x12>
			}
		}
	}
}
 8001620:	bf00      	nop
 8001622:	3724      	adds	r7, #36	; 0x24
 8001624:	46bd      	mov	sp, r7
 8001626:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001628 <_Z12destroyArrayPPd>:

void destroyArray(double **arr) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	free(*arr);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f004 fc9f 	bl	8005f78 <free>
	free(arr);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f004 fc9c 	bl	8005f78 <free>
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <_Z21matrix_inizializationv>:

void matrix_inizialization() {
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	Ad = createMatrix(Ad_rows, Ad_columns);
 800164c:	4b62      	ldr	r3, [pc, #392]	; (80017d8 <_Z21matrix_inizializationv+0x190>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a62      	ldr	r2, [pc, #392]	; (80017dc <_Z21matrix_inizializationv+0x194>)
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	4611      	mov	r1, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff ff48 	bl	80014ec <_Z12createMatrixii>
 800165c:	4603      	mov	r3, r0
 800165e:	4a60      	ldr	r2, [pc, #384]	; (80017e0 <_Z21matrix_inizializationv+0x198>)
 8001660:	6013      	str	r3, [r2, #0]
	Ad[0][0] = 0.8645;
 8001662:	4b5f      	ldr	r3, [pc, #380]	; (80017e0 <_Z21matrix_inizializationv+0x198>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6819      	ldr	r1, [r3, #0]
 8001668:	a34f      	add	r3, pc, #316	; (adr r3, 80017a8 <_Z21matrix_inizializationv+0x160>)
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166e:	e9c1 2300 	strd	r2, r3, [r1]
	Ad[0][1] = -0.0565;
 8001672:	4b5b      	ldr	r3, [pc, #364]	; (80017e0 <_Z21matrix_inizializationv+0x198>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f103 0108 	add.w	r1, r3, #8
 800167c:	a34c      	add	r3, pc, #304	; (adr r3, 80017b0 <_Z21matrix_inizializationv+0x168>)
 800167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001682:	e9c1 2300 	strd	r2, r3, [r1]
	Ad[1][0] = 1.0;
 8001686:	4b56      	ldr	r3, [pc, #344]	; (80017e0 <_Z21matrix_inizializationv+0x198>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	3304      	adds	r3, #4
 800168c:	6819      	ldr	r1, [r3, #0]
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	4b54      	ldr	r3, [pc, #336]	; (80017e4 <_Z21matrix_inizializationv+0x19c>)
 8001694:	e9c1 2300 	strd	r2, r3, [r1]
	Ad[1][1] = 0;
 8001698:	4b51      	ldr	r3, [pc, #324]	; (80017e0 <_Z21matrix_inizializationv+0x198>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	3304      	adds	r3, #4
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f103 0108 	add.w	r1, r3, #8
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	e9c1 2300 	strd	r2, r3, [r1]

	Bd = createMatrix(Bd_rows, Bd_columns);
 80016b0:	4b4d      	ldr	r3, [pc, #308]	; (80017e8 <_Z21matrix_inizializationv+0x1a0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a4d      	ldr	r2, [pc, #308]	; (80017ec <_Z21matrix_inizializationv+0x1a4>)
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff ff16 	bl	80014ec <_Z12createMatrixii>
 80016c0:	4603      	mov	r3, r0
 80016c2:	4a4b      	ldr	r2, [pc, #300]	; (80017f0 <_Z21matrix_inizializationv+0x1a8>)
 80016c4:	6013      	str	r3, [r2, #0]
	Bd[0][0] = 1;
 80016c6:	4b4a      	ldr	r3, [pc, #296]	; (80017f0 <_Z21matrix_inizializationv+0x1a8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6819      	ldr	r1, [r3, #0]
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	4b44      	ldr	r3, [pc, #272]	; (80017e4 <_Z21matrix_inizializationv+0x19c>)
 80016d2:	e9c1 2300 	strd	r2, r3, [r1]
	Bd[1][0] = 0;
 80016d6:	4b46      	ldr	r3, [pc, #280]	; (80017f0 <_Z21matrix_inizializationv+0x1a8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	3304      	adds	r3, #4
 80016dc:	6819      	ldr	r1, [r3, #0]
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	e9c1 2300 	strd	r2, r3, [r1]

	Cd = createMatrix(Cd_rows, Cd_columns);
 80016ea:	4b42      	ldr	r3, [pc, #264]	; (80017f4 <_Z21matrix_inizializationv+0x1ac>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a42      	ldr	r2, [pc, #264]	; (80017f8 <_Z21matrix_inizializationv+0x1b0>)
 80016f0:	6812      	ldr	r2, [r2, #0]
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fef9 	bl	80014ec <_Z12createMatrixii>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4a3f      	ldr	r2, [pc, #252]	; (80017fc <_Z21matrix_inizializationv+0x1b4>)
 80016fe:	6013      	str	r3, [r2, #0]
	Cd[0][0] = 1.4424;
 8001700:	4b3e      	ldr	r3, [pc, #248]	; (80017fc <_Z21matrix_inizializationv+0x1b4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6819      	ldr	r1, [r3, #0]
 8001706:	a32c      	add	r3, pc, #176	; (adr r3, 80017b8 <_Z21matrix_inizializationv+0x170>)
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	e9c1 2300 	strd	r2, r3, [r1]
	Cd[0][1] = 0.4751;
 8001710:	4b3a      	ldr	r3, [pc, #232]	; (80017fc <_Z21matrix_inizializationv+0x1b4>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f103 0108 	add.w	r1, r3, #8
 800171a:	a329      	add	r3, pc, #164	; (adr r3, 80017c0 <_Z21matrix_inizializationv+0x178>)
 800171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001720:	e9c1 2300 	strd	r2, r3, [r1]

	L = createMatrix(L_rows, L_columns);
 8001724:	4b36      	ldr	r3, [pc, #216]	; (8001800 <_Z21matrix_inizializationv+0x1b8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a36      	ldr	r2, [pc, #216]	; (8001804 <_Z21matrix_inizializationv+0x1bc>)
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fedc 	bl	80014ec <_Z12createMatrixii>
 8001734:	4603      	mov	r3, r0
 8001736:	4a34      	ldr	r2, [pc, #208]	; (8001808 <_Z21matrix_inizializationv+0x1c0>)
 8001738:	6013      	str	r3, [r2, #0]
	L[0][0] = 0.3789;
 800173a:	4b33      	ldr	r3, [pc, #204]	; (8001808 <_Z21matrix_inizializationv+0x1c0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6819      	ldr	r1, [r3, #0]
 8001740:	a321      	add	r3, pc, #132	; (adr r3, 80017c8 <_Z21matrix_inizializationv+0x180>)
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	e9c1 2300 	strd	r2, r3, [r1]
	L[1][0] = 0.4549;
 800174a:	4b2f      	ldr	r3, [pc, #188]	; (8001808 <_Z21matrix_inizializationv+0x1c0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	3304      	adds	r3, #4
 8001750:	6819      	ldr	r1, [r3, #0]
 8001752:	a31f      	add	r3, pc, #124	; (adr r3, 80017d0 <_Z21matrix_inizializationv+0x188>)
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	e9c1 2300 	strd	r2, r3, [r1]

	state_kplus1 = createMatrix(state_rows, state_columns);
 800175c:	4b2b      	ldr	r3, [pc, #172]	; (800180c <_Z21matrix_inizializationv+0x1c4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a2b      	ldr	r2, [pc, #172]	; (8001810 <_Z21matrix_inizializationv+0x1c8>)
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	4611      	mov	r1, r2
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fec0 	bl	80014ec <_Z12createMatrixii>
 800176c:	4603      	mov	r3, r0
 800176e:	4a29      	ldr	r2, [pc, #164]	; (8001814 <_Z21matrix_inizializationv+0x1cc>)
 8001770:	6013      	str	r3, [r2, #0]
	state_k = createMatrix(state_rows, state_columns);
 8001772:	4b26      	ldr	r3, [pc, #152]	; (800180c <_Z21matrix_inizializationv+0x1c4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a26      	ldr	r2, [pc, #152]	; (8001810 <_Z21matrix_inizializationv+0x1c8>)
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff feb5 	bl	80014ec <_Z12createMatrixii>
 8001782:	4603      	mov	r3, r0
 8001784:	4a24      	ldr	r2, [pc, #144]	; (8001818 <_Z21matrix_inizializationv+0x1d0>)
 8001786:	6013      	str	r3, [r2, #0]
	y_k_expected = createMatrix(y_k_expected_rows, y_k_expected_columns);
 8001788:	4b24      	ldr	r3, [pc, #144]	; (800181c <_Z21matrix_inizializationv+0x1d4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a24      	ldr	r2, [pc, #144]	; (8001820 <_Z21matrix_inizializationv+0x1d8>)
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff feaa 	bl	80014ec <_Z12createMatrixii>
 8001798:	4603      	mov	r3, r0
 800179a:	4a22      	ldr	r2, [pc, #136]	; (8001824 <_Z21matrix_inizializationv+0x1dc>)
 800179c:	6013      	str	r3, [r2, #0]

}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	f3af 8000 	nop.w
 80017a8:	e76c8b44 	.word	0xe76c8b44
 80017ac:	3feba9fb 	.word	0x3feba9fb
 80017b0:	6872b021 	.word	0x6872b021
 80017b4:	bfaced91 	.word	0xbfaced91
 80017b8:	05bc01a3 	.word	0x05bc01a3
 80017bc:	3ff71412 	.word	0x3ff71412
 80017c0:	d495182b 	.word	0xd495182b
 80017c4:	3fde6809 	.word	0x3fde6809
 80017c8:	c91d14e4 	.word	0xc91d14e4
 80017cc:	3fd83fe5 	.word	0x3fd83fe5
 80017d0:	e3bcd35b 	.word	0xe3bcd35b
 80017d4:	3fdd1d14 	.word	0x3fdd1d14
 80017d8:	20000050 	.word	0x20000050
 80017dc:	20000054 	.word	0x20000054
 80017e0:	20000414 	.word	0x20000414
 80017e4:	3ff00000 	.word	0x3ff00000
 80017e8:	20000058 	.word	0x20000058
 80017ec:	2000005c 	.word	0x2000005c
 80017f0:	20000418 	.word	0x20000418
 80017f4:	20000060 	.word	0x20000060
 80017f8:	20000064 	.word	0x20000064
 80017fc:	2000041c 	.word	0x2000041c
 8001800:	20000068 	.word	0x20000068
 8001804:	2000006c 	.word	0x2000006c
 8001808:	2000042c 	.word	0x2000042c
 800180c:	20000070 	.word	0x20000070
 8001810:	20000074 	.word	0x20000074
 8001814:	20000420 	.word	0x20000420
 8001818:	20000424 	.word	0x20000424
 800181c:	20000078 	.word	0x20000078
 8001820:	2000007c 	.word	0x2000007c
 8001824:	20000428 	.word	0x20000428

08001828 <_Z10matrix_sumPPdS0_dd>:

/**
 * Return the result in the matrix m1
 */
void matrix_sum(double **m1, double **m2, double rows, double columns) {
 8001828:	b5b0      	push	{r4, r5, r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	6178      	str	r0, [r7, #20]
 8001830:	6139      	str	r1, [r7, #16]
 8001832:	ed87 0b02 	vstr	d0, [r7, #8]
 8001836:	ed87 1b00 	vstr	d1, [r7]

	for (int i = 0; i < rows; i++) {
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	69f8      	ldr	r0, [r7, #28]
 8001840:	f7fe fe78 	bl	8000534 <__aeabi_i2d>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800184c:	f7ff f96c 	bl	8000b28 <__aeabi_dcmpgt>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d100      	bne.n	8001858 <_Z10matrix_sumPPdS0_dd+0x30>
		for (int j = 0; j < columns; j++) {
			m1[i][j] = m1[i][j] + m2[i][j];
		}
	}
}
 8001856:	e037      	b.n	80018c8 <_Z10matrix_sumPPdS0_dd+0xa0>
		for (int j = 0; j < columns; j++) {
 8001858:	2300      	movs	r3, #0
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	69b8      	ldr	r0, [r7, #24]
 800185e:	f7fe fe69 	bl	8000534 <__aeabi_i2d>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	e9d7 0100 	ldrd	r0, r1, [r7]
 800186a:	f7ff f95d 	bl	8000b28 <__aeabi_dcmpgt>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d025      	beq.n	80018c0 <_Z10matrix_sumPPdS0_dd+0x98>
			m1[i][j] = m1[i][j] + m2[i][j];
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	4413      	add	r3, r2
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	4413      	add	r3, r2
 8001884:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4413      	add	r3, r2
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4413      	add	r3, r2
 8001898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189c:	69fc      	ldr	r4, [r7, #28]
 800189e:	00a4      	lsls	r4, r4, #2
 80018a0:	697d      	ldr	r5, [r7, #20]
 80018a2:	442c      	add	r4, r5
 80018a4:	6825      	ldr	r5, [r4, #0]
 80018a6:	69bc      	ldr	r4, [r7, #24]
 80018a8:	00e4      	lsls	r4, r4, #3
 80018aa:	442c      	add	r4, r5
 80018ac:	f7fe fcf6 	bl	800029c <__adddf3>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	e9c4 2300 	strd	r2, r3, [r4]
		for (int j = 0; j < columns; j++) {
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	3301      	adds	r3, #1
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	e7cd      	b.n	800185c <_Z10matrix_sumPPdS0_dd+0x34>
	for (int i = 0; i < rows; i++) {
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	3301      	adds	r3, #1
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	e7ba      	b.n	800183e <_Z10matrix_sumPPdS0_dd+0x16>
}
 80018c8:	3720      	adds	r7, #32
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080018d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80018d0:	b5b0      	push	{r4, r5, r7, lr}
 80018d2:	b090      	sub	sp, #64	; 0x40
 80018d4:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN 1 */
	/* USER CODE END 1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80018d6:	f001 f853 	bl	8002980 <HAL_Init>

	/* USER CODE BEGIN Init */
	size_t bufferSize = (size_t) ceil(2 * WAITING / (Ts * samplingPrescaler));
 80018da:	4b44      	ldr	r3, [pc, #272]	; (80019ec <main+0x11c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fe28 	bl	8000534 <__aeabi_i2d>
 80018e4:	4b42      	ldr	r3, [pc, #264]	; (80019f0 <main+0x120>)
 80018e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ea:	f7fe fe8d 	bl	8000608 <__aeabi_dmul>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	f04f 0000 	mov.w	r0, #0
 80018f6:	493f      	ldr	r1, [pc, #252]	; (80019f4 <main+0x124>)
 80018f8:	f7fe ffb0 	bl	800085c <__aeabi_ddiv>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	ec43 2b17 	vmov	d7, r2, r3
 8001904:	eeb0 0a47 	vmov.f32	s0, s14
 8001908:	eef0 0a67 	vmov.f32	s1, s15
 800190c:	f003 fb5c 	bl	8004fc8 <ceil>
 8001910:	ec53 2b10 	vmov	r2, r3, d0
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	f7ff f94e 	bl	8000bb8 <__aeabi_d2uiz>
 800191c:	4603      	mov	r3, r0
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
	cb_init(&myBuff, bufferSize, sizeof(record));
 8001920:	2220      	movs	r2, #32
 8001922:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001924:	4834      	ldr	r0, [pc, #208]	; (80019f8 <main+0x128>)
 8001926:	f7ff fb83 	bl	8001030 <_Z7cb_initP15circular_bufferjj>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800192a:	f000 f875 	bl	8001a18 <_Z18SystemClock_Configv>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800192e:	f000 fa75 	bl	8001e1c <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 8001932:	f000 fa45 	bl	8001dc0 <_ZL19MX_USART2_UART_Initv>
	MX_TIM3_Init();
 8001936:	f000 f947 	bl	8001bc8 <_ZL12MX_TIM3_Initv>
	MX_TIM1_Init();
 800193a:	f000 f8e3 	bl	8001b04 <_ZL12MX_TIM1_Initv>
	MX_TIM4_Init();
 800193e:	f000 f9e3 	bl	8001d08 <_ZL12MX_TIM4_Initv>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001942:	2100      	movs	r1, #0
 8001944:	482d      	ldr	r0, [pc, #180]	; (80019fc <main+0x12c>)
 8001946:	f002 f91f 	bl	8003b88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800194a:	2104      	movs	r1, #4
 800194c:	482b      	ldr	r0, [pc, #172]	; (80019fc <main+0x12c>)
 800194e:	f002 f91b 	bl	8003b88 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim1);
 8001952:	482b      	ldr	r0, [pc, #172]	; (8001a00 <main+0x130>)
 8001954:	f002 f802 	bl	800395c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 8001958:	482a      	ldr	r0, [pc, #168]	; (8001a04 <main+0x134>)
 800195a:	f002 f859 	bl	8003a10 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	matrix_inizialization();
 800195e:	f7ff fe73 	bl	8001648 <_Z21matrix_inizializationv>

	int referenceIndex = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	62fb      	str	r3, [r7, #44]	; 0x2c

	referenceVal = referenceVals[referenceIndex];
 8001966:	4a28      	ldr	r2, [pc, #160]	; (8001a08 <main+0x138>)
 8001968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4413      	add	r3, r2
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001972:	4926      	ldr	r1, [pc, #152]	; (8001a0c <main+0x13c>)
 8001974:	e9c1 2300 	strd	r2, r3, [r1]
	printf("INIT\n\r"); // initialize the Matlab tool for COM data acquiring
 8001978:	4825      	ldr	r0, [pc, #148]	; (8001a10 <main+0x140>)
 800197a:	f005 fa97 	bl	8006eac <iprintf>

	while (1) {
		size_t nEntriesToSend = myBuff.count; //number of samples not read yet
 800197e:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <main+0x128>)
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	623b      	str	r3, [r7, #32]
		record retrieved; //buffer entry

		for (size_t count = 0; count < nEntriesToSend; count++) {
 8001984:	2300      	movs	r3, #0
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
 8001988:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	429a      	cmp	r2, r3
 800198e:	d217      	bcs.n	80019c0 <main+0xf0>
			cb_pop_front(&myBuff, &retrieved); //take entry from the buffer
 8001990:	463b      	mov	r3, r7
 8001992:	4619      	mov	r1, r3
 8001994:	4818      	ldr	r0, [pc, #96]	; (80019f8 <main+0x128>)
 8001996:	f7ff fbbb 	bl	8001110 <_Z12cb_pop_frontP15circular_bufferPv>
			printf("%lu, %f, %f, %lu\n\r", retrieved.currentTimestamp,
 800199a:	69bd      	ldr	r5, [r7, #24]
 800199c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019a4:	693c      	ldr	r4, [r7, #16]
 80019a6:	9402      	str	r4, [sp, #8]
 80019a8:	e9cd 2300 	strd	r2, r3, [sp]
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4629      	mov	r1, r5
 80019b2:	4818      	ldr	r0, [pc, #96]	; (8001a14 <main+0x144>)
 80019b4:	f005 fa7a 	bl	8006eac <iprintf>
		for (size_t count = 0; count < nEntriesToSend; count++) {
 80019b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ba:	3301      	adds	r3, #1
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80019be:	e7e3      	b.n	8001988 <main+0xb8>
					retrieved.current_u, retrieved.current_y,
					retrieved.cycleCoreDuration); // send values via USART using format: value1, value2, value3, ... valuen \n \r
		}
		referenceVal = referenceVals[referenceIndex];
 80019c0:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <main+0x138>)
 80019c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	4413      	add	r3, r2
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	490f      	ldr	r1, [pc, #60]	; (8001a0c <main+0x13c>)
 80019ce:	e9c1 2300 	strd	r2, r3, [r1]
		referenceIndex = referenceIndex + 1;
 80019d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d4:	3301      	adds	r3, #1
 80019d6:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_Delay(WAITING * 1000); // takes a time value in ms
 80019d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019dc:	f001 f842 	bl	8002a64 <HAL_Delay>
		if (referenceIndex > 7)
 80019e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e2:	2b07      	cmp	r3, #7
 80019e4:	ddcb      	ble.n	800197e <main+0xae>
			referenceIndex = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
 80019ea:	e7c8      	b.n	800197e <main+0xae>
 80019ec:	2000004c 	.word	0x2000004c
 80019f0:	20000000 	.word	0x20000000
 80019f4:	40100000 	.word	0x40100000
 80019f8:	200003a0 	.word	0x200003a0
 80019fc:	200002cc 	.word	0x200002cc
 8001a00:	20000284 	.word	0x20000284
 8001a04:	20000314 	.word	0x20000314
 8001a08:	20000008 	.word	0x20000008
 8001a0c:	20000408 	.word	0x20000408
 8001a10:	0800a8d8 	.word	0x0800a8d8
 8001a14:	0800a8e0 	.word	0x0800a8e0

08001a18 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b094      	sub	sp, #80	; 0x50
 8001a1c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001a1e:	f107 0320 	add.w	r3, r7, #32
 8001a22:	2230      	movs	r2, #48	; 0x30
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f004 fac8 	bl	8005fbc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	4b2e      	ldr	r3, [pc, #184]	; (8001afc <_Z18SystemClock_Configv+0xe4>)
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	4a2d      	ldr	r2, [pc, #180]	; (8001afc <_Z18SystemClock_Configv+0xe4>)
 8001a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4c:	4b2b      	ldr	r3, [pc, #172]	; (8001afc <_Z18SystemClock_Configv+0xe4>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a58:	2300      	movs	r3, #0
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	4b28      	ldr	r3, [pc, #160]	; (8001b00 <_Z18SystemClock_Configv+0xe8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a64:	4a26      	ldr	r2, [pc, #152]	; (8001b00 <_Z18SystemClock_Configv+0xe8>)
 8001a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <_Z18SystemClock_Configv+0xe8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a80:	2310      	movs	r3, #16
 8001a82:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a84:	2302      	movs	r3, #2
 8001a86:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001a8c:	2310      	movs	r3, #16
 8001a8e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001a90:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001a94:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a96:	2304      	movs	r3, #4
 8001a98:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001a9e:	f107 0320 	add.w	r3, r7, #32
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f001 fab2 	bl	800300c <HAL_RCC_OscConfig>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	bf14      	ite	ne
 8001aae:	2301      	movne	r3, #1
 8001ab0:	2300      	moveq	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <_Z18SystemClock_Configv+0xa4>
		Error_Handler();
 8001ab8:	f000 fcd6 	bl	8002468 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001abc:	230f      	movs	r3, #15
 8001abe:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001acc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001ad2:	f107 030c 	add.w	r3, r7, #12
 8001ad6:	2102      	movs	r1, #2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f001 fd0f 	bl	80034fc <HAL_RCC_ClockConfig>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	bf14      	ite	ne
 8001ae4:	2301      	movne	r3, #1
 8001ae6:	2300      	moveq	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <_Z18SystemClock_Configv+0xda>
		Error_Handler();
 8001aee:	f000 fcbb 	bl	8002468 <Error_Handler>
	}
}
 8001af2:	bf00      	nop
 8001af4:	3750      	adds	r7, #80	; 0x50
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40007000 	.word	0x40007000

08001b04 <_ZL12MX_TIM1_Initv>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08c      	sub	sp, #48	; 0x30
 8001b08:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001b0a:	f107 030c 	add.w	r3, r7, #12
 8001b0e:	2224      	movs	r2, #36	; 0x24
 8001b10:	2100      	movs	r1, #0
 8001b12:	4618      	mov	r0, r3
 8001b14:	f004 fa52 	bl	8005fbc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001b20:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <_ZL12MX_TIM1_Initv+0xbc>)
 8001b22:	4a28      	ldr	r2, [pc, #160]	; (8001bc4 <_ZL12MX_TIM1_Initv+0xc0>)
 8001b24:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001b26:	4b26      	ldr	r3, [pc, #152]	; (8001bc0 <_ZL12MX_TIM1_Initv+0xbc>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b2c:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <_ZL12MX_TIM1_Initv+0xbc>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001b32:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <_ZL12MX_TIM1_Initv+0xbc>)
 8001b34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b38:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3a:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <_ZL12MX_TIM1_Initv+0xbc>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001b40:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <_ZL12MX_TIM1_Initv+0xbc>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b46:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <_ZL12MX_TIM1_Initv+0xbc>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b54:	2301      	movs	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b60:	2300      	movs	r3, #0
 8001b62:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b64:	2301      	movs	r3, #1
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 8001b70:	f107 030c 	add.w	r3, r7, #12
 8001b74:	4619      	mov	r1, r3
 8001b76:	4812      	ldr	r0, [pc, #72]	; (8001bc0 <_ZL12MX_TIM1_Initv+0xbc>)
 8001b78:	f002 f8b6 	bl	8003ce8 <HAL_TIM_Encoder_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	bf14      	ite	ne
 8001b82:	2301      	movne	r3, #1
 8001b84:	2300      	moveq	r3, #0
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <_ZL12MX_TIM1_Initv+0x8c>
		Error_Handler();
 8001b8c:	f000 fc6c 	bl	8002468 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b90:	2300      	movs	r3, #0
 8001b92:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4808      	ldr	r0, [pc, #32]	; (8001bc0 <_ZL12MX_TIM1_Initv+0xbc>)
 8001b9e:	f002 fecf 	bl	8004940 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba2:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	bf14      	ite	ne
 8001ba8:	2301      	movne	r3, #1
 8001baa:	2300      	moveq	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <_ZL12MX_TIM1_Initv+0xb2>
		Error_Handler();
 8001bb2:	f000 fc59 	bl	8002468 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001bb6:	bf00      	nop
 8001bb8:	3730      	adds	r7, #48	; 0x30
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000284 	.word	0x20000284
 8001bc4:	40010000 	.word	0x40010000

08001bc8 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08e      	sub	sp, #56	; 0x38
 8001bcc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001bce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001bdc:	f107 0320 	add.w	r3, r7, #32
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
 8001bf4:	615a      	str	r2, [r3, #20]
 8001bf6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001bf8:	4b41      	ldr	r3, [pc, #260]	; (8001d00 <_ZL12MX_TIM3_Initv+0x138>)
 8001bfa:	4a42      	ldr	r2, [pc, #264]	; (8001d04 <_ZL12MX_TIM3_Initv+0x13c>)
 8001bfc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 84 - 1;
 8001bfe:	4b40      	ldr	r3, [pc, #256]	; (8001d00 <_ZL12MX_TIM3_Initv+0x138>)
 8001c00:	2253      	movs	r2, #83	; 0x53
 8001c02:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c04:	4b3e      	ldr	r3, [pc, #248]	; (8001d00 <_ZL12MX_TIM3_Initv+0x138>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 500 - 1;
 8001c0a:	4b3d      	ldr	r3, [pc, #244]	; (8001d00 <_ZL12MX_TIM3_Initv+0x138>)
 8001c0c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001c10:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c12:	4b3b      	ldr	r3, [pc, #236]	; (8001d00 <_ZL12MX_TIM3_Initv+0x138>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c18:	4b39      	ldr	r3, [pc, #228]	; (8001d00 <_ZL12MX_TIM3_Initv+0x138>)
 8001c1a:	2280      	movs	r2, #128	; 0x80
 8001c1c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001c1e:	4838      	ldr	r0, [pc, #224]	; (8001d00 <_ZL12MX_TIM3_Initv+0x138>)
 8001c20:	f001 fe4c 	bl	80038bc <HAL_TIM_Base_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	bf14      	ite	ne
 8001c2a:	2301      	movne	r3, #1
 8001c2c:	2300      	moveq	r3, #0
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <_ZL12MX_TIM3_Initv+0x70>
		Error_Handler();
 8001c34:	f000 fc18 	bl	8002468 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001c3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c42:	4619      	mov	r1, r3
 8001c44:	482e      	ldr	r0, [pc, #184]	; (8001d00 <_ZL12MX_TIM3_Initv+0x138>)
 8001c46:	f002 fabf 	bl	80041c8 <HAL_TIM_ConfigClockSource>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	bf14      	ite	ne
 8001c50:	2301      	movne	r3, #1
 8001c52:	2300      	moveq	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <_ZL12MX_TIM3_Initv+0x96>
		Error_Handler();
 8001c5a:	f000 fc05 	bl	8002468 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001c5e:	4828      	ldr	r0, [pc, #160]	; (8001d00 <_ZL12MX_TIM3_Initv+0x138>)
 8001c60:	f001 ff38 	bl	8003ad4 <HAL_TIM_PWM_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	bf14      	ite	ne
 8001c6a:	2301      	movne	r3, #1
 8001c6c:	2300      	moveq	r3, #0
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <_ZL12MX_TIM3_Initv+0xb0>
		Error_Handler();
 8001c74:	f000 fbf8 	bl	8002468 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001c80:	f107 0320 	add.w	r3, r7, #32
 8001c84:	4619      	mov	r1, r3
 8001c86:	481e      	ldr	r0, [pc, #120]	; (8001d00 <_ZL12MX_TIM3_Initv+0x138>)
 8001c88:	f002 fe5a 	bl	8004940 <HAL_TIMEx_MasterConfigSynchronization>
 8001c8c:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	bf14      	ite	ne
 8001c92:	2301      	movne	r3, #1
 8001c94:	2300      	moveq	r3, #0
 8001c96:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <_ZL12MX_TIM3_Initv+0xd8>
		Error_Handler();
 8001c9c:	f000 fbe4 	bl	8002468 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ca0:	2360      	movs	r3, #96	; 0x60
 8001ca2:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4812      	ldr	r0, [pc, #72]	; (8001d00 <_ZL12MX_TIM3_Initv+0x138>)
 8001cb8:	f002 f9c4 	bl	8004044 <HAL_TIM_PWM_ConfigChannel>
 8001cbc:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	bf14      	ite	ne
 8001cc2:	2301      	movne	r3, #1
 8001cc4:	2300      	moveq	r3, #0
 8001cc6:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <_ZL12MX_TIM3_Initv+0x108>
		Error_Handler();
 8001ccc:	f000 fbcc 	bl	8002468 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	480a      	ldr	r0, [pc, #40]	; (8001d00 <_ZL12MX_TIM3_Initv+0x138>)
 8001cd8:	f002 f9b4 	bl	8004044 <HAL_TIM_PWM_ConfigChannel>
 8001cdc:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	bf14      	ite	ne
 8001ce2:	2301      	movne	r3, #1
 8001ce4:	2300      	moveq	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <_ZL12MX_TIM3_Initv+0x128>
		Error_Handler();
 8001cec:	f000 fbbc 	bl	8002468 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001cf0:	4803      	ldr	r0, [pc, #12]	; (8001d00 <_ZL12MX_TIM3_Initv+0x138>)
 8001cf2:	f000 fc8d 	bl	8002610 <HAL_TIM_MspPostInit>

}
 8001cf6:	bf00      	nop
 8001cf8:	3738      	adds	r7, #56	; 0x38
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	200002cc 	.word	0x200002cc
 8001d04:	40000400 	.word	0x40000400

08001d08 <_ZL12MX_TIM4_Initv>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001d0e:	f107 0308 	add.w	r3, r7, #8
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001d1c:	463b      	mov	r3, r7
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001d24:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <_ZL12MX_TIM4_Initv+0xb0>)
 8001d26:	4a25      	ldr	r2, [pc, #148]	; (8001dbc <_ZL12MX_TIM4_Initv+0xb4>)
 8001d28:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 84 - 1;
 8001d2a:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <_ZL12MX_TIM4_Initv+0xb0>)
 8001d2c:	2253      	movs	r2, #83	; 0x53
 8001d2e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d30:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <_ZL12MX_TIM4_Initv+0xb0>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 5000 - 1;
 8001d36:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <_ZL12MX_TIM4_Initv+0xb0>)
 8001d38:	f241 3287 	movw	r2, #4999	; 0x1387
 8001d3c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d3e:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <_ZL12MX_TIM4_Initv+0xb0>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d44:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <_ZL12MX_TIM4_Initv+0xb0>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001d4a:	481b      	ldr	r0, [pc, #108]	; (8001db8 <_ZL12MX_TIM4_Initv+0xb0>)
 8001d4c:	f001 fdb6 	bl	80038bc <HAL_TIM_Base_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	bf14      	ite	ne
 8001d56:	2301      	movne	r3, #1
 8001d58:	2300      	moveq	r3, #0
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <_ZL12MX_TIM4_Initv+0x5c>
		Error_Handler();
 8001d60:	f000 fb82 	bl	8002468 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d68:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4811      	ldr	r0, [pc, #68]	; (8001db8 <_ZL12MX_TIM4_Initv+0xb0>)
 8001d72:	f002 fa29 	bl	80041c8 <HAL_TIM_ConfigClockSource>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	bf14      	ite	ne
 8001d7c:	2301      	movne	r3, #1
 8001d7e:	2300      	moveq	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <_ZL12MX_TIM4_Initv+0x82>
		Error_Handler();
 8001d86:	f000 fb6f 	bl	8002468 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001d92:	463b      	mov	r3, r7
 8001d94:	4619      	mov	r1, r3
 8001d96:	4808      	ldr	r0, [pc, #32]	; (8001db8 <_ZL12MX_TIM4_Initv+0xb0>)
 8001d98:	f002 fdd2 	bl	8004940 <HAL_TIMEx_MasterConfigSynchronization>
 8001d9c:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	bf14      	ite	ne
 8001da2:	2301      	movne	r3, #1
 8001da4:	2300      	moveq	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <_ZL12MX_TIM4_Initv+0xa8>
		Error_Handler();
 8001dac:	f000 fb5c 	bl	8002468 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001db0:	bf00      	nop
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000314 	.word	0x20000314
 8001dbc:	40000800 	.word	0x40000800

08001dc0 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001dc4:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001dc6:	4a14      	ldr	r2, [pc, #80]	; (8001e18 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001dc8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001dca:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001dcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dd0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001dde:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001de6:	220c      	movs	r2, #12
 8001de8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dea:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001df6:	4807      	ldr	r0, [pc, #28]	; (8001e14 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001df8:	f002 fe24 	bl	8004a44 <HAL_UART_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	bf14      	ite	ne
 8001e02:	2301      	movne	r3, #1
 8001e04:	2300      	moveq	r3, #0
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <_ZL19MX_USART2_UART_Initv+0x50>
		Error_Handler();
 8001e0c:	f000 fb2c 	bl	8002468 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	2000035c 	.word	0x2000035c
 8001e18:	40004400 	.word	0x40004400

08001e1c <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001e22:	f107 030c 	add.w	r3, r7, #12
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
 8001e30:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <_ZL12MX_GPIO_Initv+0x80>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a18      	ldr	r2, [pc, #96]	; (8001e9c <_ZL12MX_GPIO_Initv+0x80>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <_ZL12MX_GPIO_Initv+0x80>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <_ZL12MX_GPIO_Initv+0x80>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a11      	ldr	r2, [pc, #68]	; (8001e9c <_ZL12MX_GPIO_Initv+0x80>)
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <_ZL12MX_GPIO_Initv+0x80>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e70:	480b      	ldr	r0, [pc, #44]	; (8001ea0 <_ZL12MX_GPIO_Initv+0x84>)
 8001e72:	f001 f8b1 	bl	8002fd8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e7a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e88:	f107 030c 	add.w	r3, r7, #12
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4804      	ldr	r0, [pc, #16]	; (8001ea0 <_ZL12MX_GPIO_Initv+0x84>)
 8001e90:	f000 ff1e 	bl	8002cd0 <HAL_GPIO_Init>

}
 8001e94:	bf00      	nop
 8001e96:	3720      	adds	r7, #32
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40020000 	.word	0x40020000

08001ea4 <_Z19luenberger_observerdd>:

void luenberger_observer(double u_last, double y) {
 8001ea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ea8:	b08f      	sub	sp, #60	; 0x3c
 8001eaa:	af04      	add	r7, sp, #16
 8001eac:	ed87 0b02 	vstr	d0, [r7, #8]
 8001eb0:	ed87 1b00 	vstr	d1, [r7]

	state_kplus1 = createMatrix(state_rows, state_rows);
 8001eb4:	4b6c      	ldr	r3, [pc, #432]	; (8002068 <_Z19luenberger_observerdd+0x1c4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a6b      	ldr	r2, [pc, #428]	; (8002068 <_Z19luenberger_observerdd+0x1c4>)
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fb14 	bl	80014ec <_Z12createMatrixii>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4a69      	ldr	r2, [pc, #420]	; (800206c <_Z19luenberger_observerdd+0x1c8>)
 8001ec8:	6013      	str	r3, [r2, #0]

	double **u_matrix = createMatrix(u_rows, u_columns);
 8001eca:	4b69      	ldr	r3, [pc, #420]	; (8002070 <_Z19luenberger_observerdd+0x1cc>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a69      	ldr	r2, [pc, #420]	; (8002074 <_Z19luenberger_observerdd+0x1d0>)
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fb09 	bl	80014ec <_Z12createMatrixii>
 8001eda:	6278      	str	r0, [r7, #36]	; 0x24
	u_matrix[0][0] = u_last;
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	6819      	ldr	r1, [r3, #0]
 8001ee0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ee4:	e9c1 2300 	strd	r2, r3, [r1]

	double **sum_center = createMatrix(Bd_rows, u_columns);
 8001ee8:	4b63      	ldr	r3, [pc, #396]	; (8002078 <_Z19luenberger_observerdd+0x1d4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a61      	ldr	r2, [pc, #388]	; (8002074 <_Z19luenberger_observerdd+0x1d0>)
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fafa 	bl	80014ec <_Z12createMatrixii>
 8001ef8:	6238      	str	r0, [r7, #32]
	multiply_matricies(Bd, u_matrix, Bd_rows, Bd_columns, 1, 1, sum_center);
 8001efa:	4b60      	ldr	r3, [pc, #384]	; (800207c <_Z19luenberger_observerdd+0x1d8>)
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	4b5e      	ldr	r3, [pc, #376]	; (8002078 <_Z19luenberger_observerdd+0x1d4>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	4b5f      	ldr	r3, [pc, #380]	; (8002080 <_Z19luenberger_observerdd+0x1dc>)
 8001f04:	6819      	ldr	r1, [r3, #0]
 8001f06:	6a3b      	ldr	r3, [r7, #32]
 8001f08:	9302      	str	r3, [sp, #8]
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	9301      	str	r3, [sp, #4]
 8001f0e:	2301      	movs	r3, #1
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	460b      	mov	r3, r1
 8001f14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f16:	f7ff fb1a 	bl	800154e <_Z18multiply_matriciesPPdS0_iiiiS0_>

	double **sub_y = createMatrix(y_k_expected_rows, y_k_expected_columns);
 8001f1a:	4b5a      	ldr	r3, [pc, #360]	; (8002084 <_Z19luenberger_observerdd+0x1e0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a5a      	ldr	r2, [pc, #360]	; (8002088 <_Z19luenberger_observerdd+0x1e4>)
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff fae1 	bl	80014ec <_Z12createMatrixii>
 8001f2a:	61f8      	str	r0, [r7, #28]
	sub_y[0][0] = y - y_k_expected[0][0];
 8001f2c:	4b57      	ldr	r3, [pc, #348]	; (800208c <_Z19luenberger_observerdd+0x1e8>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f36:	69f9      	ldr	r1, [r7, #28]
 8001f38:	680c      	ldr	r4, [r1, #0]
 8001f3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f3e:	f7fe f9ab 	bl	8000298 <__aeabi_dsub>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	e9c4 2300 	strd	r2, r3, [r4]

	double **sum_top = createMatrix(L_rows, y_k_expected_columns);
 8001f4a:	4b51      	ldr	r3, [pc, #324]	; (8002090 <_Z19luenberger_observerdd+0x1ec>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a4e      	ldr	r2, [pc, #312]	; (8002088 <_Z19luenberger_observerdd+0x1e4>)
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	4611      	mov	r1, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fac9 	bl	80014ec <_Z12createMatrixii>
 8001f5a:	61b8      	str	r0, [r7, #24]
	multiply_matricies(L, sub_y, L_rows, L_columns, y_k_expected_rows,
 8001f5c:	4b4d      	ldr	r3, [pc, #308]	; (8002094 <_Z19luenberger_observerdd+0x1f0>)
 8001f5e:	6818      	ldr	r0, [r3, #0]
 8001f60:	4b4b      	ldr	r3, [pc, #300]	; (8002090 <_Z19luenberger_observerdd+0x1ec>)
 8001f62:	681c      	ldr	r4, [r3, #0]
 8001f64:	4b4c      	ldr	r3, [pc, #304]	; (8002098 <_Z19luenberger_observerdd+0x1f4>)
 8001f66:	681d      	ldr	r5, [r3, #0]
 8001f68:	4b46      	ldr	r3, [pc, #280]	; (8002084 <_Z19luenberger_observerdd+0x1e0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a46      	ldr	r2, [pc, #280]	; (8002088 <_Z19luenberger_observerdd+0x1e4>)
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	69b9      	ldr	r1, [r7, #24]
 8001f72:	9102      	str	r1, [sp, #8]
 8001f74:	9201      	str	r2, [sp, #4]
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	462b      	mov	r3, r5
 8001f7a:	4622      	mov	r2, r4
 8001f7c:	69f9      	ldr	r1, [r7, #28]
 8001f7e:	f7ff fae6 	bl	800154e <_Z18multiply_matriciesPPdS0_iiiiS0_>
			y_k_expected_columns, sum_top);

	double **sum_bottom = createMatrix(Ad_rows, state_columns);
 8001f82:	4b46      	ldr	r3, [pc, #280]	; (800209c <_Z19luenberger_observerdd+0x1f8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a46      	ldr	r2, [pc, #280]	; (80020a0 <_Z19luenberger_observerdd+0x1fc>)
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff faad 	bl	80014ec <_Z12createMatrixii>
 8001f92:	6178      	str	r0, [r7, #20]
	multiply_matricies(Ad, state_k, Ad_rows,Ad_columns, state_rows, state_columns, sum_bottom);
 8001f94:	4b43      	ldr	r3, [pc, #268]	; (80020a4 <_Z19luenberger_observerdd+0x200>)
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	4b43      	ldr	r3, [pc, #268]	; (80020a8 <_Z19luenberger_observerdd+0x204>)
 8001f9a:	681c      	ldr	r4, [r3, #0]
 8001f9c:	4b3f      	ldr	r3, [pc, #252]	; (800209c <_Z19luenberger_observerdd+0x1f8>)
 8001f9e:	681d      	ldr	r5, [r3, #0]
 8001fa0:	4b42      	ldr	r3, [pc, #264]	; (80020ac <_Z19luenberger_observerdd+0x208>)
 8001fa2:	681e      	ldr	r6, [r3, #0]
 8001fa4:	4b30      	ldr	r3, [pc, #192]	; (8002068 <_Z19luenberger_observerdd+0x1c4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a3d      	ldr	r2, [pc, #244]	; (80020a0 <_Z19luenberger_observerdd+0x1fc>)
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	6979      	ldr	r1, [r7, #20]
 8001fae:	9102      	str	r1, [sp, #8]
 8001fb0:	9201      	str	r2, [sp, #4]
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	4633      	mov	r3, r6
 8001fb6:	462a      	mov	r2, r5
 8001fb8:	4621      	mov	r1, r4
 8001fba:	f7ff fac8 	bl	800154e <_Z18multiply_matriciesPPdS0_iiiiS0_>

	matrix_sum(state_kplus1, sum_top, L_rows, y_k_expected_columns);
 8001fbe:	4b2b      	ldr	r3, [pc, #172]	; (800206c <_Z19luenberger_observerdd+0x1c8>)
 8001fc0:	681c      	ldr	r4, [r3, #0]
 8001fc2:	4b33      	ldr	r3, [pc, #204]	; (8002090 <_Z19luenberger_observerdd+0x1ec>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe fab4 	bl	8000534 <__aeabi_i2d>
 8001fcc:	4680      	mov	r8, r0
 8001fce:	4689      	mov	r9, r1
 8001fd0:	4b2d      	ldr	r3, [pc, #180]	; (8002088 <_Z19luenberger_observerdd+0x1e4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe faad 	bl	8000534 <__aeabi_i2d>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	ec43 2b11 	vmov	d1, r2, r3
 8001fe2:	ec49 8b10 	vmov	d0, r8, r9
 8001fe6:	69b9      	ldr	r1, [r7, #24]
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f7ff fc1d 	bl	8001828 <_Z10matrix_sumPPdS0_dd>
	matrix_sum(state_kplus1, sum_center, L_rows, y_k_expected_columns);
 8001fee:	4b1f      	ldr	r3, [pc, #124]	; (800206c <_Z19luenberger_observerdd+0x1c8>)
 8001ff0:	681c      	ldr	r4, [r3, #0]
 8001ff2:	4b27      	ldr	r3, [pc, #156]	; (8002090 <_Z19luenberger_observerdd+0x1ec>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fa9c 	bl	8000534 <__aeabi_i2d>
 8001ffc:	4680      	mov	r8, r0
 8001ffe:	4689      	mov	r9, r1
 8002000:	4b21      	ldr	r3, [pc, #132]	; (8002088 <_Z19luenberger_observerdd+0x1e4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fa95 	bl	8000534 <__aeabi_i2d>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	ec43 2b11 	vmov	d1, r2, r3
 8002012:	ec49 8b10 	vmov	d0, r8, r9
 8002016:	6a39      	ldr	r1, [r7, #32]
 8002018:	4620      	mov	r0, r4
 800201a:	f7ff fc05 	bl	8001828 <_Z10matrix_sumPPdS0_dd>
	matrix_sum(sum_top, sum_bottom, L_rows, y_k_expected_columns);
 800201e:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <_Z19luenberger_observerdd+0x1ec>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fa86 	bl	8000534 <__aeabi_i2d>
 8002028:	4604      	mov	r4, r0
 800202a:	460d      	mov	r5, r1
 800202c:	4b16      	ldr	r3, [pc, #88]	; (8002088 <_Z19luenberger_observerdd+0x1e4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe fa7f 	bl	8000534 <__aeabi_i2d>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	ec43 2b11 	vmov	d1, r2, r3
 800203e:	ec45 4b10 	vmov	d0, r4, r5
 8002042:	6979      	ldr	r1, [r7, #20]
 8002044:	69b8      	ldr	r0, [r7, #24]
 8002046:	f7ff fbef 	bl	8001828 <_Z10matrix_sumPPdS0_dd>

	//Now in sum_top there is the result of the summarization


	destroyArray(sub_y);
 800204a:	69f8      	ldr	r0, [r7, #28]
 800204c:	f7ff faec 	bl	8001628 <_Z12destroyArrayPPd>
	destroyArray(sum_top);
 8002050:	69b8      	ldr	r0, [r7, #24]
 8002052:	f7ff fae9 	bl	8001628 <_Z12destroyArrayPPd>
	destroyArray(sum_center);
 8002056:	6a38      	ldr	r0, [r7, #32]
 8002058:	f7ff fae6 	bl	8001628 <_Z12destroyArrayPPd>

}
 800205c:	bf00      	nop
 800205e:	372c      	adds	r7, #44	; 0x2c
 8002060:	46bd      	mov	sp, r7
 8002062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002066:	bf00      	nop
 8002068:	20000070 	.word	0x20000070
 800206c:	20000420 	.word	0x20000420
 8002070:	20000080 	.word	0x20000080
 8002074:	20000084 	.word	0x20000084
 8002078:	20000058 	.word	0x20000058
 800207c:	20000418 	.word	0x20000418
 8002080:	2000005c 	.word	0x2000005c
 8002084:	20000078 	.word	0x20000078
 8002088:	2000007c 	.word	0x2000007c
 800208c:	20000428 	.word	0x20000428
 8002090:	20000068 	.word	0x20000068
 8002094:	2000042c 	.word	0x2000042c
 8002098:	2000006c 	.word	0x2000006c
 800209c:	20000050 	.word	0x20000050
 80020a0:	20000074 	.word	0x20000074
 80020a4:	20000414 	.word	0x20000414
 80020a8:	20000424 	.word	0x20000424
 80020ac:	20000054 	.word	0x20000054

080020b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80020b0:	b5b0      	push	{r4, r5, r7, lr}
 80020b2:	b098      	sub	sp, #96	; 0x60
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
	if (htim == &htim4) {
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a5d      	ldr	r2, [pc, #372]	; (8002230 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	f040 81a1 	bne.w	8002404 <HAL_TIM_PeriodElapsedCallback+0x354>
		k_controller = k_controller + 1;
 80020c2:	4b5c      	ldr	r3, [pc, #368]	; (8002234 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	3301      	adds	r3, #1
 80020c8:	4a5a      	ldr	r2, [pc, #360]	; (8002234 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80020ca:	6013      	str	r3, [r2, #0]
		if (k_controller == 0) {
 80020cc:	4b59      	ldr	r3, [pc, #356]	; (8002234 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d104      	bne.n	80020de <HAL_TIM_PeriodElapsedCallback+0x2e>
			ticControlStep = HAL_GetTick();
 80020d4:	f000 fcba 	bl	8002a4c <HAL_GetTick>
 80020d8:	4603      	mov	r3, r0
 80020da:	4a57      	ldr	r2, [pc, #348]	; (8002238 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80020dc:	6013      	str	r3, [r2, #0]
		}
		tocControlStep = HAL_GetTick();
 80020de:	f000 fcb5 	bl	8002a4c <HAL_GetTick>
 80020e2:	4603      	mov	r3, r0
 80020e4:	4a55      	ldr	r2, [pc, #340]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80020e6:	6013      	str	r3, [r2, #0]

		currentTicks = (double) __HAL_TIM_GET_COUNTER(&htim1); //take current value of ticks counting the encoder edges
 80020e8:	4b55      	ldr	r3, [pc, #340]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe fa10 	bl	8000514 <__aeabi_ui2d>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4952      	ldr	r1, [pc, #328]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80020fa:	e9c1 2300 	strd	r2, r3, [r1]

		//take the current motor speed
		double speed = getSpeedByDelta(
 80020fe:	4b51      	ldr	r3, [pc, #324]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002100:	ed93 7b00 	vldr	d7, [r3]
 8002104:	4b50      	ldr	r3, [pc, #320]	; (8002248 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002106:	ed93 6b00 	vldr	d6, [r3]
 800210a:	4b50      	ldr	r3, [pc, #320]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800210c:	ed93 5b00 	vldr	d5, [r3]
 8002110:	eeb0 2a45 	vmov.f32	s4, s10
 8002114:	eef0 2a65 	vmov.f32	s5, s11
 8002118:	eeb0 1a46 	vmov.f32	s2, s12
 800211c:	eef0 1a66 	vmov.f32	s3, s13
 8002120:	eeb0 0a47 	vmov.f32	s0, s14
 8002124:	eef0 0a67 	vmov.f32	s1, s15
 8002128:	f7ff f93e 	bl	80013a8 <_Z13getTicksDeltaddd>
 800212c:	eeb0 6a40 	vmov.f32	s12, s0
 8002130:	eef0 6a60 	vmov.f32	s13, s1
 8002134:	4b45      	ldr	r3, [pc, #276]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002136:	ed93 7b00 	vldr	d7, [r3]
 800213a:	eeb0 1a47 	vmov.f32	s2, s14
 800213e:	eef0 1a67 	vmov.f32	s3, s15
 8002142:	eeb0 0a46 	vmov.f32	s0, s12
 8002146:	eef0 0a66 	vmov.f32	s1, s13
 800214a:	f7ff f8f9 	bl	8001340 <_Z15getSpeedByDeltadd>
 800214e:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58
				getTicksDelta(currentTicks, lastTicks, Ts), Ts);

		// state estimation with Luenberger observer
		luenberger_observer(u_last, speed);
 8002152:	4b3f      	ldr	r3, [pc, #252]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002154:	ed93 7b00 	vldr	d7, [r3]
 8002158:	ed97 1b16 	vldr	d1, [r7, #88]	; 0x58
 800215c:	eeb0 0a47 	vmov.f32	s0, s14
 8002160:	eef0 0a67 	vmov.f32	s1, s15
 8002164:	f7ff fe9e 	bl	8001ea4 <_Z19luenberger_observerdd>

		double e = referenceVal - speed;
 8002168:	4b3a      	ldr	r3, [pc, #232]	; (8002254 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800216a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800216e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002172:	f7fe f891 	bl	8000298 <__aeabi_dsub>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		double q_gamma_z = 0.13 * e - 0.1056 * e_last;
 800217e:	a328      	add	r3, pc, #160	; (adr r3, 8002220 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002184:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002188:	f7fe fa3e 	bl	8000608 <__aeabi_dmul>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4614      	mov	r4, r2
 8002192:	461d      	mov	r5, r3
 8002194:	4b30      	ldr	r3, [pc, #192]	; (8002258 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002196:	e9d3 0100 	ldrd	r0, r1, [r3]
 800219a:	a323      	add	r3, pc, #140	; (adr r3, 8002228 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800219c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a0:	f7fe fa32 	bl	8000608 <__aeabi_dmul>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4620      	mov	r0, r4
 80021aa:	4629      	mov	r1, r5
 80021ac:	f7fe f874 	bl	8000298 <__aeabi_dsub>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		double z = z_last;
 80021b8:	4b28      	ldr	r3, [pc, #160]	; (800225c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80021ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021be:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

		double u1 = (q_gamma_z + z) > 12 ? 12 : q_gamma_z + z;
 80021c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80021ca:	f7fe f867 	bl	800029c <__adddf3>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4610      	mov	r0, r2
 80021d4:	4619      	mov	r1, r3
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	4b21      	ldr	r3, [pc, #132]	; (8002260 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80021dc:	f7fe fca4 	bl	8000b28 <__aeabi_dcmpgt>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_TIM_PeriodElapsedCallback+0x13e>
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80021ec:	e007      	b.n	80021fe <HAL_TIM_PeriodElapsedCallback+0x14e>
 80021ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021f2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80021f6:	f7fe f851 	bl	800029c <__adddf3>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		u1 = u1 < -12 ? -12 : u1;
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002208:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800220c:	f7fe fc6e 	bl	8000aec <__aeabi_dcmplt>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d028      	beq.n	8002268 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800221c:	e026      	b.n	800226c <HAL_TIM_PeriodElapsedCallback+0x1bc>
 800221e:	bf00      	nop
 8002220:	0a3d70a4 	.word	0x0a3d70a4
 8002224:	3fc0a3d7 	.word	0x3fc0a3d7
 8002228:	02752546 	.word	0x02752546
 800222c:	3fbb089a 	.word	0x3fbb089a
 8002230:	20000314 	.word	0x20000314
 8002234:	20000048 	.word	0x20000048
 8002238:	200003d0 	.word	0x200003d0
 800223c:	200003d4 	.word	0x200003d4
 8002240:	20000284 	.word	0x20000284
 8002244:	200003c8 	.word	0x200003c8
 8002248:	200003c0 	.word	0x200003c0
 800224c:	20000000 	.word	0x20000000
 8002250:	200003e0 	.word	0x200003e0
 8002254:	20000408 	.word	0x20000408
 8002258:	200003e8 	.word	0x200003e8
 800225c:	200003f0 	.word	0x200003f0
 8002260:	40280000 	.word	0x40280000
 8002264:	c0280000 	.word	0xc0280000
 8002268:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800226c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

		double u2 = -0.6324 * u2_last + 0.1083 * speed - 0.1083 * speed_last;
 8002270:	4b6b      	ldr	r3, [pc, #428]	; (8002420 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8002272:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002276:	a366      	add	r3, pc, #408	; (adr r3, 8002410 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227c:	f7fe f9c4 	bl	8000608 <__aeabi_dmul>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4614      	mov	r4, r2
 8002286:	461d      	mov	r5, r3
 8002288:	a363      	add	r3, pc, #396	; (adr r3, 8002418 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800228a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002292:	f7fe f9b9 	bl	8000608 <__aeabi_dmul>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4620      	mov	r0, r4
 800229c:	4629      	mov	r1, r5
 800229e:	f7fd fffd 	bl	800029c <__adddf3>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4614      	mov	r4, r2
 80022a8:	461d      	mov	r5, r3
 80022aa:	4b5e      	ldr	r3, [pc, #376]	; (8002424 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80022ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022b0:	a359      	add	r3, pc, #356	; (adr r3, 8002418 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80022b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b6:	f7fe f9a7 	bl	8000608 <__aeabi_dmul>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	4620      	mov	r0, r4
 80022c0:	4629      	mov	r1, r5
 80022c2:	f7fd ffe9 	bl	8000298 <__aeabi_dsub>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		double u = u1 - u2;
 80022ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80022d2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80022d6:	f7fd ffdf 	bl	8000298 <__aeabi_dsub>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		setPulseFromDutyValue(u * 100 / 12);
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	4b50      	ldr	r3, [pc, #320]	; (8002428 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80022e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80022ec:	f7fe f98c 	bl	8000608 <__aeabi_dmul>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4610      	mov	r0, r2
 80022f6:	4619      	mov	r1, r3
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	4b4b      	ldr	r3, [pc, #300]	; (800242c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80022fe:	f7fe faad 	bl	800085c <__aeabi_ddiv>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	ec43 2b17 	vmov	d7, r2, r3
 800230a:	eeb0 0a47 	vmov.f32	s0, s14
 800230e:	eef0 0a67 	vmov.f32	s1, s15
 8002312:	f7fe ff33 	bl	800117c <_Z21setPulseFromDutyValued>

		u_last = u;
 8002316:	4946      	ldr	r1, [pc, #280]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8002318:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800231c:	e9c1 2300 	strd	r2, r3, [r1]
		e_last = e;
 8002320:	4944      	ldr	r1, [pc, #272]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8002322:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002326:	e9c1 2300 	strd	r2, r3, [r1]
		z_last = u1;
 800232a:	4943      	ldr	r1, [pc, #268]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800232c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002330:	e9c1 2300 	strd	r2, r3, [r1]
		speed_last = speed;
 8002334:	493b      	ldr	r1, [pc, #236]	; (8002424 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8002336:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800233a:	e9c1 2300 	strd	r2, r3, [r1]
		u2_last = u2;
 800233e:	4938      	ldr	r1, [pc, #224]	; (8002420 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8002340:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002344:	e9c1 2300 	strd	r2, r3, [r1]

		controlComputationDuration = HAL_GetTick() - tocControlStep;
 8002348:	f000 fb80 	bl	8002a4c <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	4b3b      	ldr	r3, [pc, #236]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	4a3a      	ldr	r2, [pc, #232]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8002356:	6013      	str	r3, [r2, #0]
		lastTicks = currentTicks;
 8002358:	4b3a      	ldr	r3, [pc, #232]	; (8002444 <HAL_TIM_PeriodElapsedCallback+0x394>)
 800235a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235e:	493a      	ldr	r1, [pc, #232]	; (8002448 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8002360:	e9c1 2300 	strd	r2, r3, [r1]
		// recording data in the buffer
		record r;
		r.current_u = u1;
 8002364:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002368:	e9c7 2302 	strd	r2, r3, [r7, #8]
		r.current_y = speed;
 800236c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002370:	e9c7 2304 	strd	r2, r3, [r7, #16]
		r.cycleCoreDuration = controlComputationDuration;
 8002374:	4b32      	ldr	r3, [pc, #200]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	61bb      	str	r3, [r7, #24]
		r.cycleBeginDelay = tocControlStep - ticControlStep
 800237a:	4b30      	ldr	r3, [pc, #192]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	4b33      	ldr	r3, [pc, #204]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	1ad3      	subs	r3, r2, r3
				- (k_controller * Ts * 1000);
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe f8c5 	bl	8000514 <__aeabi_ui2d>
 800238a:	4604      	mov	r4, r0
 800238c:	460d      	mov	r5, r1
 800238e:	4b30      	ldr	r3, [pc, #192]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe f8be 	bl	8000514 <__aeabi_ui2d>
 8002398:	4b2e      	ldr	r3, [pc, #184]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800239a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239e:	f7fe f933 	bl	8000608 <__aeabi_dmul>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4610      	mov	r0, r2
 80023a8:	4619      	mov	r1, r3
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	4b2a      	ldr	r3, [pc, #168]	; (8002458 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80023b0:	f7fe f92a 	bl	8000608 <__aeabi_dmul>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4620      	mov	r0, r4
 80023ba:	4629      	mov	r1, r5
 80023bc:	f7fd ff6c 	bl	8000298 <__aeabi_dsub>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
		r.cycleBeginDelay = tocControlStep - ticControlStep
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	f7fe fbf6 	bl	8000bb8 <__aeabi_d2uiz>
 80023cc:	4603      	mov	r3, r0
 80023ce:	61fb      	str	r3, [r7, #28]
		r.currentTimestamp = HAL_GetTick();
 80023d0:	f000 fb3c 	bl	8002a4c <HAL_GetTick>
 80023d4:	4603      	mov	r3, r0
 80023d6:	623b      	str	r3, [r7, #32]
		if (samplingPrescalerCounter == (samplingPrescaler - 1)) {
 80023d8:	4b20      	ldr	r3, [pc, #128]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	1e5a      	subs	r2, r3, #1
 80023de:	4b20      	ldr	r3, [pc, #128]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d109      	bne.n	80023fa <HAL_TIM_PeriodElapsedCallback+0x34a>
			cb_push_back(&myBuff, &r);
 80023e6:	f107 0308 	add.w	r3, r7, #8
 80023ea:	4619      	mov	r1, r3
 80023ec:	481d      	ldr	r0, [pc, #116]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80023ee:	f7fe fe57 	bl	80010a0 <_Z12cb_push_backP15circular_bufferPKv>
			samplingPrescalerCounter = -1;
 80023f2:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 80023f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023f8:	601a      	str	r2, [r3, #0]
		}
		samplingPrescalerCounter++;
 80023fa:	4b19      	ldr	r3, [pc, #100]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	3301      	adds	r3, #1
 8002400:	4a17      	ldr	r2, [pc, #92]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8002402:	6013      	str	r3, [r2, #0]
	}
}
 8002404:	bf00      	nop
 8002406:	3760      	adds	r7, #96	; 0x60
 8002408:	46bd      	mov	sp, r7
 800240a:	bdb0      	pop	{r4, r5, r7, pc}
 800240c:	f3af 8000 	nop.w
 8002410:	ecbfb15b 	.word	0xecbfb15b
 8002414:	bfe43c9e 	.word	0xbfe43c9e
 8002418:	7e28240b 	.word	0x7e28240b
 800241c:	3fbbb98c 	.word	0x3fbbb98c
 8002420:	20000400 	.word	0x20000400
 8002424:	200003f8 	.word	0x200003f8
 8002428:	40590000 	.word	0x40590000
 800242c:	40280000 	.word	0x40280000
 8002430:	200003e0 	.word	0x200003e0
 8002434:	200003e8 	.word	0x200003e8
 8002438:	200003f0 	.word	0x200003f0
 800243c:	200003d4 	.word	0x200003d4
 8002440:	200003d8 	.word	0x200003d8
 8002444:	200003c8 	.word	0x200003c8
 8002448:	200003c0 	.word	0x200003c0
 800244c:	200003d0 	.word	0x200003d0
 8002450:	20000048 	.word	0x20000048
 8002454:	20000000 	.word	0x20000000
 8002458:	408f4000 	.word	0x408f4000
 800245c:	2000004c 	.word	0x2000004c
 8002460:	20000410 	.word	0x20000410
 8002464:	200003a0 	.word	0x200003a0

08002468 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800246c:	b672      	cpsid	i
}
 800246e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002470:	e7fe      	b.n	8002470 <Error_Handler+0x8>

08002472 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8002472:	b5b0      	push	{r4, r5, r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7fe f859 	bl	8000534 <__aeabi_i2d>
 8002482:	4604      	mov	r4, r0
 8002484:	460d      	mov	r5, r1
 8002486:	6838      	ldr	r0, [r7, #0]
 8002488:	f7fe f854 	bl	8000534 <__aeabi_i2d>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	ec43 2b11 	vmov	d1, r2, r3
 8002494:	ec45 4b10 	vmov	d0, r4, r5
 8002498:	f002 fe1a 	bl	80050d0 <pow>
 800249c:	eeb0 7a40 	vmov.f32	s14, s0
 80024a0:	eef0 7a60 	vmov.f32	s15, s1
    }
 80024a4:	eeb0 0a47 	vmov.f32	s0, s14
 80024a8:	eef0 0a67 	vmov.f32	s1, s15
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080024b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	607b      	str	r3, [r7, #4]
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <HAL_MspInit+0x4c>)
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	4a0f      	ldr	r2, [pc, #60]	; (8002500 <HAL_MspInit+0x4c>)
 80024c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ca:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <HAL_MspInit+0x4c>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d2:	607b      	str	r3, [r7, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	603b      	str	r3, [r7, #0]
 80024da:	4b09      	ldr	r3, [pc, #36]	; (8002500 <HAL_MspInit+0x4c>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	4a08      	ldr	r2, [pc, #32]	; (8002500 <HAL_MspInit+0x4c>)
 80024e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e4:	6413      	str	r3, [r2, #64]	; 0x40
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <HAL_MspInit+0x4c>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800

08002504 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08a      	sub	sp, #40	; 0x28
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a19      	ldr	r2, [pc, #100]	; (8002588 <HAL_TIM_Encoder_MspInit+0x84>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d12c      	bne.n	8002580 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	4b18      	ldr	r3, [pc, #96]	; (800258c <HAL_TIM_Encoder_MspInit+0x88>)
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	4a17      	ldr	r2, [pc, #92]	; (800258c <HAL_TIM_Encoder_MspInit+0x88>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6453      	str	r3, [r2, #68]	; 0x44
 8002536:	4b15      	ldr	r3, [pc, #84]	; (800258c <HAL_TIM_Encoder_MspInit+0x88>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	4b11      	ldr	r3, [pc, #68]	; (800258c <HAL_TIM_Encoder_MspInit+0x88>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	4a10      	ldr	r2, [pc, #64]	; (800258c <HAL_TIM_Encoder_MspInit+0x88>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	6313      	str	r3, [r2, #48]	; 0x30
 8002552:	4b0e      	ldr	r3, [pc, #56]	; (800258c <HAL_TIM_Encoder_MspInit+0x88>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800255e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002564:	2302      	movs	r3, #2
 8002566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256c:	2300      	movs	r3, #0
 800256e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002570:	2301      	movs	r3, #1
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002574:	f107 0314 	add.w	r3, r7, #20
 8002578:	4619      	mov	r1, r3
 800257a:	4805      	ldr	r0, [pc, #20]	; (8002590 <HAL_TIM_Encoder_MspInit+0x8c>)
 800257c:	f000 fba8 	bl	8002cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002580:	bf00      	nop
 8002582:	3728      	adds	r7, #40	; 0x28
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40010000 	.word	0x40010000
 800258c:	40023800 	.word	0x40023800
 8002590:	40020000 	.word	0x40020000

08002594 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a18      	ldr	r2, [pc, #96]	; (8002604 <HAL_TIM_Base_MspInit+0x70>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d10e      	bne.n	80025c4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	4b17      	ldr	r3, [pc, #92]	; (8002608 <HAL_TIM_Base_MspInit+0x74>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	4a16      	ldr	r2, [pc, #88]	; (8002608 <HAL_TIM_Base_MspInit+0x74>)
 80025b0:	f043 0302 	orr.w	r3, r3, #2
 80025b4:	6413      	str	r3, [r2, #64]	; 0x40
 80025b6:	4b14      	ldr	r3, [pc, #80]	; (8002608 <HAL_TIM_Base_MspInit+0x74>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80025c2:	e01a      	b.n	80025fa <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a10      	ldr	r2, [pc, #64]	; (800260c <HAL_TIM_Base_MspInit+0x78>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d115      	bne.n	80025fa <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <HAL_TIM_Base_MspInit+0x74>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	4a0c      	ldr	r2, [pc, #48]	; (8002608 <HAL_TIM_Base_MspInit+0x74>)
 80025d8:	f043 0304 	orr.w	r3, r3, #4
 80025dc:	6413      	str	r3, [r2, #64]	; 0x40
 80025de:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <HAL_TIM_Base_MspInit+0x74>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	60bb      	str	r3, [r7, #8]
 80025e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2100      	movs	r1, #0
 80025ee:	201e      	movs	r0, #30
 80025f0:	f000 fb37 	bl	8002c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80025f4:	201e      	movs	r0, #30
 80025f6:	f000 fb50 	bl	8002c9a <HAL_NVIC_EnableIRQ>
}
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40000400 	.word	0x40000400
 8002608:	40023800 	.word	0x40023800
 800260c:	40000800 	.word	0x40000800

08002610 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 030c 	add.w	r3, r7, #12
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a12      	ldr	r2, [pc, #72]	; (8002678 <HAL_TIM_MspPostInit+0x68>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d11d      	bne.n	800266e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	4b11      	ldr	r3, [pc, #68]	; (800267c <HAL_TIM_MspPostInit+0x6c>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	4a10      	ldr	r2, [pc, #64]	; (800267c <HAL_TIM_MspPostInit+0x6c>)
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	6313      	str	r3, [r2, #48]	; 0x30
 8002642:	4b0e      	ldr	r3, [pc, #56]	; (800267c <HAL_TIM_MspPostInit+0x6c>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800264e:	2330      	movs	r3, #48	; 0x30
 8002650:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002652:	2302      	movs	r3, #2
 8002654:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265a:	2300      	movs	r3, #0
 800265c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800265e:	2302      	movs	r3, #2
 8002660:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002662:	f107 030c 	add.w	r3, r7, #12
 8002666:	4619      	mov	r1, r3
 8002668:	4805      	ldr	r0, [pc, #20]	; (8002680 <HAL_TIM_MspPostInit+0x70>)
 800266a:	f000 fb31 	bl	8002cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800266e:	bf00      	nop
 8002670:	3720      	adds	r7, #32
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40000400 	.word	0x40000400
 800267c:	40023800 	.word	0x40023800
 8002680:	40020400 	.word	0x40020400

08002684 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a19      	ldr	r2, [pc, #100]	; (8002708 <HAL_UART_MspInit+0x84>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d12b      	bne.n	80026fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	4b18      	ldr	r3, [pc, #96]	; (800270c <HAL_UART_MspInit+0x88>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	4a17      	ldr	r2, [pc, #92]	; (800270c <HAL_UART_MspInit+0x88>)
 80026b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b4:	6413      	str	r3, [r2, #64]	; 0x40
 80026b6:	4b15      	ldr	r3, [pc, #84]	; (800270c <HAL_UART_MspInit+0x88>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	4b11      	ldr	r3, [pc, #68]	; (800270c <HAL_UART_MspInit+0x88>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	4a10      	ldr	r2, [pc, #64]	; (800270c <HAL_UART_MspInit+0x88>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6313      	str	r3, [r2, #48]	; 0x30
 80026d2:	4b0e      	ldr	r3, [pc, #56]	; (800270c <HAL_UART_MspInit+0x88>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026de:	230c      	movs	r3, #12
 80026e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e2:	2302      	movs	r3, #2
 80026e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ea:	2303      	movs	r3, #3
 80026ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026ee:	2307      	movs	r3, #7
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f2:	f107 0314 	add.w	r3, r7, #20
 80026f6:	4619      	mov	r1, r3
 80026f8:	4805      	ldr	r0, [pc, #20]	; (8002710 <HAL_UART_MspInit+0x8c>)
 80026fa:	f000 fae9 	bl	8002cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026fe:	bf00      	nop
 8002700:	3728      	adds	r7, #40	; 0x28
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40004400 	.word	0x40004400
 800270c:	40023800 	.word	0x40023800
 8002710:	40020000 	.word	0x40020000

08002714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002718:	e7fe      	b.n	8002718 <NMI_Handler+0x4>

0800271a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800271e:	e7fe      	b.n	800271e <HardFault_Handler+0x4>

08002720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002724:	e7fe      	b.n	8002724 <MemManage_Handler+0x4>

08002726 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002726:	b480      	push	{r7}
 8002728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800272a:	e7fe      	b.n	800272a <BusFault_Handler+0x4>

0800272c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002730:	e7fe      	b.n	8002730 <UsageFault_Handler+0x4>

08002732 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002760:	f000 f960 	bl	8002a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002764:	bf00      	nop
 8002766:	bd80      	pop	{r7, pc}

08002768 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800276c:	4802      	ldr	r0, [pc, #8]	; (8002778 <TIM4_IRQHandler+0x10>)
 800276e:	f001 fb61 	bl	8003e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000314 	.word	0x20000314

0800277c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
	return 1;
 8002780:	2301      	movs	r3, #1
}
 8002782:	4618      	mov	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <_kill>:

int _kill(int pid, int sig)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002796:	f003 fbbd 	bl	8005f14 <__errno>
 800279a:	4603      	mov	r3, r0
 800279c:	2216      	movs	r2, #22
 800279e:	601a      	str	r2, [r3, #0]
	return -1;
 80027a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <_exit>:

void _exit (int status)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff ffe7 	bl	800278c <_kill>
	while (1) {}		/* Make sure we hang here */
 80027be:	e7fe      	b.n	80027be <_exit+0x12>

080027c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	e00a      	b.n	80027e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027d2:	f3af 8000 	nop.w
 80027d6:	4601      	mov	r1, r0
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	60ba      	str	r2, [r7, #8]
 80027de:	b2ca      	uxtb	r2, r1
 80027e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	3301      	adds	r3, #1
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	dbf0      	blt.n	80027d2 <_read+0x12>
	}

return len;
 80027f0:	687b      	ldr	r3, [r7, #4]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b086      	sub	sp, #24
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	e009      	b.n	8002820 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	60ba      	str	r2, [r7, #8]
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	3301      	adds	r3, #1
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	429a      	cmp	r2, r3
 8002826:	dbf1      	blt.n	800280c <_write+0x12>
	}
	return len;
 8002828:	687b      	ldr	r3, [r7, #4]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <_close>:

int _close(int file)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
	return -1;
 800283a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800283e:	4618      	mov	r0, r3
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800285a:	605a      	str	r2, [r3, #4]
	return 0;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <_isatty>:

int _isatty(int file)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
	return 1;
 8002872:	2301      	movs	r3, #1
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
	return 0;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028a4:	4a14      	ldr	r2, [pc, #80]	; (80028f8 <_sbrk+0x5c>)
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <_sbrk+0x60>)
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028b0:	4b13      	ldr	r3, [pc, #76]	; (8002900 <_sbrk+0x64>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d102      	bne.n	80028be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <_sbrk+0x64>)
 80028ba:	4a12      	ldr	r2, [pc, #72]	; (8002904 <_sbrk+0x68>)
 80028bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <_sbrk+0x64>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4413      	add	r3, r2
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d207      	bcs.n	80028dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028cc:	f003 fb22 	bl	8005f14 <__errno>
 80028d0:	4603      	mov	r3, r0
 80028d2:	220c      	movs	r2, #12
 80028d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028da:	e009      	b.n	80028f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <_sbrk+0x64>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028e2:	4b07      	ldr	r3, [pc, #28]	; (8002900 <_sbrk+0x64>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	4a05      	ldr	r2, [pc, #20]	; (8002900 <_sbrk+0x64>)
 80028ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ee:	68fb      	ldr	r3, [r7, #12]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20018000 	.word	0x20018000
 80028fc:	00000400 	.word	0x00000400
 8002900:	20000430 	.word	0x20000430
 8002904:	20000448 	.word	0x20000448

08002908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <SystemInit+0x20>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	4a05      	ldr	r2, [pc, #20]	; (8002928 <SystemInit+0x20>)
 8002914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800292c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002964 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002930:	480d      	ldr	r0, [pc, #52]	; (8002968 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002932:	490e      	ldr	r1, [pc, #56]	; (800296c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002934:	4a0e      	ldr	r2, [pc, #56]	; (8002970 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002938:	e002      	b.n	8002940 <LoopCopyDataInit>

0800293a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800293a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800293c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800293e:	3304      	adds	r3, #4

08002940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002944:	d3f9      	bcc.n	800293a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002946:	4a0b      	ldr	r2, [pc, #44]	; (8002974 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002948:	4c0b      	ldr	r4, [pc, #44]	; (8002978 <LoopFillZerobss+0x26>)
  movs r3, #0
 800294a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800294c:	e001      	b.n	8002952 <LoopFillZerobss>

0800294e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800294e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002950:	3204      	adds	r2, #4

08002952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002954:	d3fb      	bcc.n	800294e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002956:	f7ff ffd7 	bl	8002908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800295a:	f003 fae1 	bl	8005f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800295e:	f7fe ffb7 	bl	80018d0 <main>
  bx  lr    
 8002962:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002964:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800296c:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 8002970:	0800adfc 	.word	0x0800adfc
  ldr r2, =_sbss
 8002974:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 8002978:	20000448 	.word	0x20000448

0800297c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800297c:	e7fe      	b.n	800297c <ADC_IRQHandler>
	...

08002980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002984:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <HAL_Init+0x40>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0d      	ldr	r2, [pc, #52]	; (80029c0 <HAL_Init+0x40>)
 800298a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800298e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <HAL_Init+0x40>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <HAL_Init+0x40>)
 8002996:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800299a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800299c:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <HAL_Init+0x40>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a07      	ldr	r2, [pc, #28]	; (80029c0 <HAL_Init+0x40>)
 80029a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029a8:	2003      	movs	r0, #3
 80029aa:	f000 f94f 	bl	8002c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ae:	200f      	movs	r0, #15
 80029b0:	f000 f808 	bl	80029c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029b4:	f7ff fd7e 	bl	80024b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40023c00 	.word	0x40023c00

080029c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029cc:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HAL_InitTick+0x54>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <HAL_InitTick+0x58>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	4619      	mov	r1, r3
 80029d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029da:	fbb3 f3f1 	udiv	r3, r3, r1
 80029de:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 f967 	bl	8002cb6 <HAL_SYSTICK_Config>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e00e      	b.n	8002a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b0f      	cmp	r3, #15
 80029f6:	d80a      	bhi.n	8002a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029f8:	2200      	movs	r2, #0
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a00:	f000 f92f 	bl	8002c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a04:	4a06      	ldr	r2, [pc, #24]	; (8002a20 <HAL_InitTick+0x5c>)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e000      	b.n	8002a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20000088 	.word	0x20000088
 8002a1c:	20000090 	.word	0x20000090
 8002a20:	2000008c 	.word	0x2000008c

08002a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_IncTick+0x20>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_IncTick+0x24>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4413      	add	r3, r2
 8002a34:	4a04      	ldr	r2, [pc, #16]	; (8002a48 <HAL_IncTick+0x24>)
 8002a36:	6013      	str	r3, [r2, #0]
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	20000090 	.word	0x20000090
 8002a48:	20000434 	.word	0x20000434

08002a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a50:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <HAL_GetTick+0x14>)
 8002a52:	681b      	ldr	r3, [r3, #0]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	20000434 	.word	0x20000434

08002a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a6c:	f7ff ffee 	bl	8002a4c <HAL_GetTick>
 8002a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a7c:	d005      	beq.n	8002a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <HAL_Delay+0x44>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4413      	add	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a8a:	bf00      	nop
 8002a8c:	f7ff ffde 	bl	8002a4c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d8f7      	bhi.n	8002a8c <HAL_Delay+0x28>
  {
  }
}
 8002a9c:	bf00      	nop
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000090 	.word	0x20000090

08002aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <__NVIC_SetPriorityGrouping+0x44>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ac8:	4013      	ands	r3, r2
 8002aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ade:	4a04      	ldr	r2, [pc, #16]	; (8002af0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	60d3      	str	r3, [r2, #12]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af8:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <__NVIC_GetPriorityGrouping+0x18>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	0a1b      	lsrs	r3, r3, #8
 8002afe:	f003 0307 	and.w	r3, r3, #7
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	db0b      	blt.n	8002b3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	f003 021f 	and.w	r2, r3, #31
 8002b28:	4907      	ldr	r1, [pc, #28]	; (8002b48 <__NVIC_EnableIRQ+0x38>)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	2001      	movs	r0, #1
 8002b32:	fa00 f202 	lsl.w	r2, r0, r2
 8002b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	e000e100 	.word	0xe000e100

08002b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	6039      	str	r1, [r7, #0]
 8002b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	db0a      	blt.n	8002b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	490c      	ldr	r1, [pc, #48]	; (8002b98 <__NVIC_SetPriority+0x4c>)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	0112      	lsls	r2, r2, #4
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	440b      	add	r3, r1
 8002b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b74:	e00a      	b.n	8002b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	4908      	ldr	r1, [pc, #32]	; (8002b9c <__NVIC_SetPriority+0x50>)
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	3b04      	subs	r3, #4
 8002b84:	0112      	lsls	r2, r2, #4
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	440b      	add	r3, r1
 8002b8a:	761a      	strb	r2, [r3, #24]
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e000e100 	.word	0xe000e100
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b089      	sub	sp, #36	; 0x24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f1c3 0307 	rsb	r3, r3, #7
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	bf28      	it	cs
 8002bbe:	2304      	movcs	r3, #4
 8002bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	2b06      	cmp	r3, #6
 8002bc8:	d902      	bls.n	8002bd0 <NVIC_EncodePriority+0x30>
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3b03      	subs	r3, #3
 8002bce:	e000      	b.n	8002bd2 <NVIC_EncodePriority+0x32>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43da      	mvns	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	401a      	ands	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf2:	43d9      	mvns	r1, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf8:	4313      	orrs	r3, r2
         );
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3724      	adds	r7, #36	; 0x24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c18:	d301      	bcc.n	8002c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e00f      	b.n	8002c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c1e:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <SysTick_Config+0x40>)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c26:	210f      	movs	r1, #15
 8002c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c2c:	f7ff ff8e 	bl	8002b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c30:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <SysTick_Config+0x40>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c36:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <SysTick_Config+0x40>)
 8002c38:	2207      	movs	r2, #7
 8002c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	e000e010 	.word	0xe000e010

08002c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff ff29 	bl	8002aac <__NVIC_SetPriorityGrouping>
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b086      	sub	sp, #24
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	4603      	mov	r3, r0
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
 8002c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c74:	f7ff ff3e 	bl	8002af4 <__NVIC_GetPriorityGrouping>
 8002c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	6978      	ldr	r0, [r7, #20]
 8002c80:	f7ff ff8e 	bl	8002ba0 <NVIC_EncodePriority>
 8002c84:	4602      	mov	r2, r0
 8002c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff ff5d 	bl	8002b4c <__NVIC_SetPriority>
}
 8002c92:	bf00      	nop
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff ff31 	bl	8002b10 <__NVIC_EnableIRQ>
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff ffa2 	bl	8002c08 <SysTick_Config>
 8002cc4:	4603      	mov	r3, r0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b089      	sub	sp, #36	; 0x24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
 8002cea:	e159      	b.n	8002fa0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cec:	2201      	movs	r2, #1
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	f040 8148 	bne.w	8002f9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d005      	beq.n	8002d22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d130      	bne.n	8002d84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4013      	ands	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d58:	2201      	movs	r2, #1
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	f003 0201 	and.w	r2, r3, #1
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d017      	beq.n	8002dc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d123      	bne.n	8002e14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	08da      	lsrs	r2, r3, #3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3208      	adds	r2, #8
 8002dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	220f      	movs	r2, #15
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	08da      	lsrs	r2, r3, #3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3208      	adds	r2, #8
 8002e0e:	69b9      	ldr	r1, [r7, #24]
 8002e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	2203      	movs	r2, #3
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 0203 	and.w	r2, r3, #3
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 80a2 	beq.w	8002f9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	4b57      	ldr	r3, [pc, #348]	; (8002fb8 <HAL_GPIO_Init+0x2e8>)
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5e:	4a56      	ldr	r2, [pc, #344]	; (8002fb8 <HAL_GPIO_Init+0x2e8>)
 8002e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e64:	6453      	str	r3, [r2, #68]	; 0x44
 8002e66:	4b54      	ldr	r3, [pc, #336]	; (8002fb8 <HAL_GPIO_Init+0x2e8>)
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e72:	4a52      	ldr	r2, [pc, #328]	; (8002fbc <HAL_GPIO_Init+0x2ec>)
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	089b      	lsrs	r3, r3, #2
 8002e78:	3302      	adds	r3, #2
 8002e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	220f      	movs	r2, #15
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a49      	ldr	r2, [pc, #292]	; (8002fc0 <HAL_GPIO_Init+0x2f0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d019      	beq.n	8002ed2 <HAL_GPIO_Init+0x202>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a48      	ldr	r2, [pc, #288]	; (8002fc4 <HAL_GPIO_Init+0x2f4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d013      	beq.n	8002ece <HAL_GPIO_Init+0x1fe>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a47      	ldr	r2, [pc, #284]	; (8002fc8 <HAL_GPIO_Init+0x2f8>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00d      	beq.n	8002eca <HAL_GPIO_Init+0x1fa>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a46      	ldr	r2, [pc, #280]	; (8002fcc <HAL_GPIO_Init+0x2fc>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d007      	beq.n	8002ec6 <HAL_GPIO_Init+0x1f6>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a45      	ldr	r2, [pc, #276]	; (8002fd0 <HAL_GPIO_Init+0x300>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d101      	bne.n	8002ec2 <HAL_GPIO_Init+0x1f2>
 8002ebe:	2304      	movs	r3, #4
 8002ec0:	e008      	b.n	8002ed4 <HAL_GPIO_Init+0x204>
 8002ec2:	2307      	movs	r3, #7
 8002ec4:	e006      	b.n	8002ed4 <HAL_GPIO_Init+0x204>
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e004      	b.n	8002ed4 <HAL_GPIO_Init+0x204>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e002      	b.n	8002ed4 <HAL_GPIO_Init+0x204>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <HAL_GPIO_Init+0x204>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	69fa      	ldr	r2, [r7, #28]
 8002ed6:	f002 0203 	and.w	r2, r2, #3
 8002eda:	0092      	lsls	r2, r2, #2
 8002edc:	4093      	lsls	r3, r2
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ee4:	4935      	ldr	r1, [pc, #212]	; (8002fbc <HAL_GPIO_Init+0x2ec>)
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	089b      	lsrs	r3, r3, #2
 8002eea:	3302      	adds	r3, #2
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ef2:	4b38      	ldr	r3, [pc, #224]	; (8002fd4 <HAL_GPIO_Init+0x304>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f16:	4a2f      	ldr	r2, [pc, #188]	; (8002fd4 <HAL_GPIO_Init+0x304>)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f1c:	4b2d      	ldr	r3, [pc, #180]	; (8002fd4 <HAL_GPIO_Init+0x304>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f40:	4a24      	ldr	r2, [pc, #144]	; (8002fd4 <HAL_GPIO_Init+0x304>)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f46:	4b23      	ldr	r3, [pc, #140]	; (8002fd4 <HAL_GPIO_Init+0x304>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4013      	ands	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f6a:	4a1a      	ldr	r2, [pc, #104]	; (8002fd4 <HAL_GPIO_Init+0x304>)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f70:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <HAL_GPIO_Init+0x304>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f94:	4a0f      	ldr	r2, [pc, #60]	; (8002fd4 <HAL_GPIO_Init+0x304>)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	61fb      	str	r3, [r7, #28]
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	2b0f      	cmp	r3, #15
 8002fa4:	f67f aea2 	bls.w	8002cec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fa8:	bf00      	nop
 8002faa:	bf00      	nop
 8002fac:	3724      	adds	r7, #36	; 0x24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	40013800 	.word	0x40013800
 8002fc0:	40020000 	.word	0x40020000
 8002fc4:	40020400 	.word	0x40020400
 8002fc8:	40020800 	.word	0x40020800
 8002fcc:	40020c00 	.word	0x40020c00
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40013c00 	.word	0x40013c00

08002fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	807b      	strh	r3, [r7, #2]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fe8:	787b      	ldrb	r3, [r7, #1]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fee:	887a      	ldrh	r2, [r7, #2]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ff4:	e003      	b.n	8002ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ff6:	887b      	ldrh	r3, [r7, #2]
 8002ff8:	041a      	lsls	r2, r3, #16
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	619a      	str	r2, [r3, #24]
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
	...

0800300c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e267      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d075      	beq.n	8003116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800302a:	4b88      	ldr	r3, [pc, #544]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b04      	cmp	r3, #4
 8003034:	d00c      	beq.n	8003050 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003036:	4b85      	ldr	r3, [pc, #532]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800303e:	2b08      	cmp	r3, #8
 8003040:	d112      	bne.n	8003068 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003042:	4b82      	ldr	r3, [pc, #520]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800304e:	d10b      	bne.n	8003068 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	4b7e      	ldr	r3, [pc, #504]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d05b      	beq.n	8003114 <HAL_RCC_OscConfig+0x108>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d157      	bne.n	8003114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e242      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003070:	d106      	bne.n	8003080 <HAL_RCC_OscConfig+0x74>
 8003072:	4b76      	ldr	r3, [pc, #472]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a75      	ldr	r2, [pc, #468]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e01d      	b.n	80030bc <HAL_RCC_OscConfig+0xb0>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x98>
 800308a:	4b70      	ldr	r3, [pc, #448]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a6f      	ldr	r2, [pc, #444]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	4b6d      	ldr	r3, [pc, #436]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a6c      	ldr	r2, [pc, #432]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800309c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e00b      	b.n	80030bc <HAL_RCC_OscConfig+0xb0>
 80030a4:	4b69      	ldr	r3, [pc, #420]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a68      	ldr	r2, [pc, #416]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80030aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	4b66      	ldr	r3, [pc, #408]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a65      	ldr	r2, [pc, #404]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80030b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d013      	beq.n	80030ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7ff fcc2 	bl	8002a4c <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030cc:	f7ff fcbe 	bl	8002a4c <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e207      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	4b5b      	ldr	r3, [pc, #364]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0xc0>
 80030ea:	e014      	b.n	8003116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ec:	f7ff fcae 	bl	8002a4c <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f4:	f7ff fcaa 	bl	8002a4c <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	; 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e1f3      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003106:	4b51      	ldr	r3, [pc, #324]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0xe8>
 8003112:	e000      	b.n	8003116 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d063      	beq.n	80031ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003122:	4b4a      	ldr	r3, [pc, #296]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800312e:	4b47      	ldr	r3, [pc, #284]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003136:	2b08      	cmp	r3, #8
 8003138:	d11c      	bne.n	8003174 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313a:	4b44      	ldr	r3, [pc, #272]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d116      	bne.n	8003174 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003146:	4b41      	ldr	r3, [pc, #260]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_RCC_OscConfig+0x152>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d001      	beq.n	800315e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e1c7      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315e:	4b3b      	ldr	r3, [pc, #236]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4937      	ldr	r1, [pc, #220]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003172:	e03a      	b.n	80031ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d020      	beq.n	80031be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800317c:	4b34      	ldr	r3, [pc, #208]	; (8003250 <HAL_RCC_OscConfig+0x244>)
 800317e:	2201      	movs	r2, #1
 8003180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003182:	f7ff fc63 	bl	8002a4c <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800318a:	f7ff fc5f 	bl	8002a4c <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e1a8      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319c:	4b2b      	ldr	r3, [pc, #172]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a8:	4b28      	ldr	r3, [pc, #160]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4925      	ldr	r1, [pc, #148]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	600b      	str	r3, [r1, #0]
 80031bc:	e015      	b.n	80031ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031be:	4b24      	ldr	r3, [pc, #144]	; (8003250 <HAL_RCC_OscConfig+0x244>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7ff fc42 	bl	8002a4c <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031cc:	f7ff fc3e 	bl	8002a4c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e187      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031de:	4b1b      	ldr	r3, [pc, #108]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d036      	beq.n	8003264 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d016      	beq.n	800322c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031fe:	4b15      	ldr	r3, [pc, #84]	; (8003254 <HAL_RCC_OscConfig+0x248>)
 8003200:	2201      	movs	r2, #1
 8003202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003204:	f7ff fc22 	bl	8002a4c <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800320c:	f7ff fc1e 	bl	8002a4c <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e167      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321e:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x200>
 800322a:	e01b      	b.n	8003264 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800322c:	4b09      	ldr	r3, [pc, #36]	; (8003254 <HAL_RCC_OscConfig+0x248>)
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003232:	f7ff fc0b 	bl	8002a4c <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003238:	e00e      	b.n	8003258 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800323a:	f7ff fc07 	bl	8002a4c <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d907      	bls.n	8003258 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e150      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
 800324c:	40023800 	.word	0x40023800
 8003250:	42470000 	.word	0x42470000
 8003254:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003258:	4b88      	ldr	r3, [pc, #544]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800325a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1ea      	bne.n	800323a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 8097 	beq.w	80033a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003272:	2300      	movs	r3, #0
 8003274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003276:	4b81      	ldr	r3, [pc, #516]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10f      	bne.n	80032a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	4b7d      	ldr	r3, [pc, #500]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	4a7c      	ldr	r2, [pc, #496]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800328c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003290:	6413      	str	r3, [r2, #64]	; 0x40
 8003292:	4b7a      	ldr	r3, [pc, #488]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329e:	2301      	movs	r3, #1
 80032a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a2:	4b77      	ldr	r3, [pc, #476]	; (8003480 <HAL_RCC_OscConfig+0x474>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d118      	bne.n	80032e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ae:	4b74      	ldr	r3, [pc, #464]	; (8003480 <HAL_RCC_OscConfig+0x474>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a73      	ldr	r2, [pc, #460]	; (8003480 <HAL_RCC_OscConfig+0x474>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ba:	f7ff fbc7 	bl	8002a4c <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c2:	f7ff fbc3 	bl	8002a4c <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e10c      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d4:	4b6a      	ldr	r3, [pc, #424]	; (8003480 <HAL_RCC_OscConfig+0x474>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d106      	bne.n	80032f6 <HAL_RCC_OscConfig+0x2ea>
 80032e8:	4b64      	ldr	r3, [pc, #400]	; (800347c <HAL_RCC_OscConfig+0x470>)
 80032ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ec:	4a63      	ldr	r2, [pc, #396]	; (800347c <HAL_RCC_OscConfig+0x470>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	6713      	str	r3, [r2, #112]	; 0x70
 80032f4:	e01c      	b.n	8003330 <HAL_RCC_OscConfig+0x324>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2b05      	cmp	r3, #5
 80032fc:	d10c      	bne.n	8003318 <HAL_RCC_OscConfig+0x30c>
 80032fe:	4b5f      	ldr	r3, [pc, #380]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	4a5e      	ldr	r2, [pc, #376]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003304:	f043 0304 	orr.w	r3, r3, #4
 8003308:	6713      	str	r3, [r2, #112]	; 0x70
 800330a:	4b5c      	ldr	r3, [pc, #368]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330e:	4a5b      	ldr	r2, [pc, #364]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	6713      	str	r3, [r2, #112]	; 0x70
 8003316:	e00b      	b.n	8003330 <HAL_RCC_OscConfig+0x324>
 8003318:	4b58      	ldr	r3, [pc, #352]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800331a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331c:	4a57      	ldr	r2, [pc, #348]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800331e:	f023 0301 	bic.w	r3, r3, #1
 8003322:	6713      	str	r3, [r2, #112]	; 0x70
 8003324:	4b55      	ldr	r3, [pc, #340]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003328:	4a54      	ldr	r2, [pc, #336]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800332a:	f023 0304 	bic.w	r3, r3, #4
 800332e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d015      	beq.n	8003364 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7ff fb88 	bl	8002a4c <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333e:	e00a      	b.n	8003356 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003340:	f7ff fb84 	bl	8002a4c <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	; 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e0cb      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003356:	4b49      	ldr	r3, [pc, #292]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0ee      	beq.n	8003340 <HAL_RCC_OscConfig+0x334>
 8003362:	e014      	b.n	800338e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003364:	f7ff fb72 	bl	8002a4c <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336a:	e00a      	b.n	8003382 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800336c:	f7ff fb6e 	bl	8002a4c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	; 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e0b5      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003382:	4b3e      	ldr	r3, [pc, #248]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1ee      	bne.n	800336c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800338e:	7dfb      	ldrb	r3, [r7, #23]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d105      	bne.n	80033a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003394:	4b39      	ldr	r3, [pc, #228]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	4a38      	ldr	r2, [pc, #224]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800339a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800339e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 80a1 	beq.w	80034ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033aa:	4b34      	ldr	r3, [pc, #208]	; (800347c <HAL_RCC_OscConfig+0x470>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d05c      	beq.n	8003470 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d141      	bne.n	8003442 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033be:	4b31      	ldr	r3, [pc, #196]	; (8003484 <HAL_RCC_OscConfig+0x478>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7ff fb42 	bl	8002a4c <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033cc:	f7ff fb3e 	bl	8002a4c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e087      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033de:	4b27      	ldr	r3, [pc, #156]	; (800347c <HAL_RCC_OscConfig+0x470>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69da      	ldr	r2, [r3, #28]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	019b      	lsls	r3, r3, #6
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	085b      	lsrs	r3, r3, #1
 8003402:	3b01      	subs	r3, #1
 8003404:	041b      	lsls	r3, r3, #16
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	061b      	lsls	r3, r3, #24
 800340e:	491b      	ldr	r1, [pc, #108]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003410:	4313      	orrs	r3, r2
 8003412:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003414:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <HAL_RCC_OscConfig+0x478>)
 8003416:	2201      	movs	r2, #1
 8003418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341a:	f7ff fb17 	bl	8002a4c <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003422:	f7ff fb13 	bl	8002a4c <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e05c      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003434:	4b11      	ldr	r3, [pc, #68]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0f0      	beq.n	8003422 <HAL_RCC_OscConfig+0x416>
 8003440:	e054      	b.n	80034ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003442:	4b10      	ldr	r3, [pc, #64]	; (8003484 <HAL_RCC_OscConfig+0x478>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7ff fb00 	bl	8002a4c <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003450:	f7ff fafc 	bl	8002a4c <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e045      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	4b06      	ldr	r3, [pc, #24]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x444>
 800346e:	e03d      	b.n	80034ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d107      	bne.n	8003488 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e038      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
 800347c:	40023800 	.word	0x40023800
 8003480:	40007000 	.word	0x40007000
 8003484:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003488:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <HAL_RCC_OscConfig+0x4ec>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d028      	beq.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d121      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d11a      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034b8:	4013      	ands	r3, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d111      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ce:	085b      	lsrs	r3, r3, #1
 80034d0:	3b01      	subs	r3, #1
 80034d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d107      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800

080034fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0cc      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003510:	4b68      	ldr	r3, [pc, #416]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d90c      	bls.n	8003538 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b65      	ldr	r3, [pc, #404]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b63      	ldr	r3, [pc, #396]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0b8      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d020      	beq.n	8003586 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003550:	4b59      	ldr	r3, [pc, #356]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4a58      	ldr	r2, [pc, #352]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800355a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003568:	4b53      	ldr	r3, [pc, #332]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	4a52      	ldr	r2, [pc, #328]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003572:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003574:	4b50      	ldr	r3, [pc, #320]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	494d      	ldr	r1, [pc, #308]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	4313      	orrs	r3, r2
 8003584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d044      	beq.n	800361c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d107      	bne.n	80035aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	4b47      	ldr	r3, [pc, #284]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d119      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e07f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d003      	beq.n	80035ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d107      	bne.n	80035ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ba:	4b3f      	ldr	r3, [pc, #252]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e06f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ca:	4b3b      	ldr	r3, [pc, #236]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e067      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035da:	4b37      	ldr	r3, [pc, #220]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f023 0203 	bic.w	r2, r3, #3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4934      	ldr	r1, [pc, #208]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035ec:	f7ff fa2e 	bl	8002a4c <HAL_GetTick>
 80035f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	e00a      	b.n	800360a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f4:	f7ff fa2a 	bl	8002a4c <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e04f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360a:	4b2b      	ldr	r3, [pc, #172]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 020c 	and.w	r2, r3, #12
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	429a      	cmp	r2, r3
 800361a:	d1eb      	bne.n	80035f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800361c:	4b25      	ldr	r3, [pc, #148]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d20c      	bcs.n	8003644 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362a:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003632:	4b20      	ldr	r3, [pc, #128]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d001      	beq.n	8003644 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e032      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003650:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4916      	ldr	r1, [pc, #88]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	4313      	orrs	r3, r2
 8003660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d009      	beq.n	8003682 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800366e:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	490e      	ldr	r1, [pc, #56]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	4313      	orrs	r3, r2
 8003680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003682:	f000 f821 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 8003686:	4602      	mov	r2, r0
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	490a      	ldr	r1, [pc, #40]	; (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 8003694:	5ccb      	ldrb	r3, [r1, r3]
 8003696:	fa22 f303 	lsr.w	r3, r2, r3
 800369a:	4a09      	ldr	r2, [pc, #36]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 800369c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800369e:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff f98e 	bl	80029c4 <HAL_InitTick>

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40023c00 	.word	0x40023c00
 80036b8:	40023800 	.word	0x40023800
 80036bc:	0800a8f4 	.word	0x0800a8f4
 80036c0:	20000088 	.word	0x20000088
 80036c4:	2000008c 	.word	0x2000008c

080036c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036cc:	b090      	sub	sp, #64	; 0x40
 80036ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	637b      	str	r3, [r7, #52]	; 0x34
 80036d4:	2300      	movs	r3, #0
 80036d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036d8:	2300      	movs	r3, #0
 80036da:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036e0:	4b59      	ldr	r3, [pc, #356]	; (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 030c 	and.w	r3, r3, #12
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d00d      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0x40>
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	f200 80a1 	bhi.w	8003834 <HAL_RCC_GetSysClockFreq+0x16c>
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0x34>
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d003      	beq.n	8003702 <HAL_RCC_GetSysClockFreq+0x3a>
 80036fa:	e09b      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036fc:	4b53      	ldr	r3, [pc, #332]	; (800384c <HAL_RCC_GetSysClockFreq+0x184>)
 80036fe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003700:	e09b      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003702:	4b53      	ldr	r3, [pc, #332]	; (8003850 <HAL_RCC_GetSysClockFreq+0x188>)
 8003704:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003706:	e098      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003708:	4b4f      	ldr	r3, [pc, #316]	; (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003710:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003712:	4b4d      	ldr	r3, [pc, #308]	; (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d028      	beq.n	8003770 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371e:	4b4a      	ldr	r3, [pc, #296]	; (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	099b      	lsrs	r3, r3, #6
 8003724:	2200      	movs	r2, #0
 8003726:	623b      	str	r3, [r7, #32]
 8003728:	627a      	str	r2, [r7, #36]	; 0x24
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003730:	2100      	movs	r1, #0
 8003732:	4b47      	ldr	r3, [pc, #284]	; (8003850 <HAL_RCC_GetSysClockFreq+0x188>)
 8003734:	fb03 f201 	mul.w	r2, r3, r1
 8003738:	2300      	movs	r3, #0
 800373a:	fb00 f303 	mul.w	r3, r0, r3
 800373e:	4413      	add	r3, r2
 8003740:	4a43      	ldr	r2, [pc, #268]	; (8003850 <HAL_RCC_GetSysClockFreq+0x188>)
 8003742:	fba0 1202 	umull	r1, r2, r0, r2
 8003746:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003748:	460a      	mov	r2, r1
 800374a:	62ba      	str	r2, [r7, #40]	; 0x28
 800374c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800374e:	4413      	add	r3, r2
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003754:	2200      	movs	r2, #0
 8003756:	61bb      	str	r3, [r7, #24]
 8003758:	61fa      	str	r2, [r7, #28]
 800375a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800375e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003762:	f7fd fa99 	bl	8000c98 <__aeabi_uldivmod>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	4613      	mov	r3, r2
 800376c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800376e:	e053      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003770:	4b35      	ldr	r3, [pc, #212]	; (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	099b      	lsrs	r3, r3, #6
 8003776:	2200      	movs	r2, #0
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	617a      	str	r2, [r7, #20]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003782:	f04f 0b00 	mov.w	fp, #0
 8003786:	4652      	mov	r2, sl
 8003788:	465b      	mov	r3, fp
 800378a:	f04f 0000 	mov.w	r0, #0
 800378e:	f04f 0100 	mov.w	r1, #0
 8003792:	0159      	lsls	r1, r3, #5
 8003794:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003798:	0150      	lsls	r0, r2, #5
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	ebb2 080a 	subs.w	r8, r2, sl
 80037a2:	eb63 090b 	sbc.w	r9, r3, fp
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037ba:	ebb2 0408 	subs.w	r4, r2, r8
 80037be:	eb63 0509 	sbc.w	r5, r3, r9
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	00eb      	lsls	r3, r5, #3
 80037cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037d0:	00e2      	lsls	r2, r4, #3
 80037d2:	4614      	mov	r4, r2
 80037d4:	461d      	mov	r5, r3
 80037d6:	eb14 030a 	adds.w	r3, r4, sl
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	eb45 030b 	adc.w	r3, r5, fp
 80037e0:	607b      	str	r3, [r7, #4]
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037ee:	4629      	mov	r1, r5
 80037f0:	028b      	lsls	r3, r1, #10
 80037f2:	4621      	mov	r1, r4
 80037f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037f8:	4621      	mov	r1, r4
 80037fa:	028a      	lsls	r2, r1, #10
 80037fc:	4610      	mov	r0, r2
 80037fe:	4619      	mov	r1, r3
 8003800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003802:	2200      	movs	r2, #0
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	60fa      	str	r2, [r7, #12]
 8003808:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800380c:	f7fd fa44 	bl	8000c98 <__aeabi_uldivmod>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4613      	mov	r3, r2
 8003816:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	0c1b      	lsrs	r3, r3, #16
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	3301      	adds	r3, #1
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003828:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003830:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003832:	e002      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <HAL_RCC_GetSysClockFreq+0x184>)
 8003836:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800383a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800383c:	4618      	mov	r0, r3
 800383e:	3740      	adds	r7, #64	; 0x40
 8003840:	46bd      	mov	sp, r7
 8003842:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003846:	bf00      	nop
 8003848:	40023800 	.word	0x40023800
 800384c:	00f42400 	.word	0x00f42400
 8003850:	017d7840 	.word	0x017d7840

08003854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003858:	4b03      	ldr	r3, [pc, #12]	; (8003868 <HAL_RCC_GetHCLKFreq+0x14>)
 800385a:	681b      	ldr	r3, [r3, #0]
}
 800385c:	4618      	mov	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20000088 	.word	0x20000088

0800386c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003870:	f7ff fff0 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 8003874:	4602      	mov	r2, r0
 8003876:	4b05      	ldr	r3, [pc, #20]	; (800388c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	0a9b      	lsrs	r3, r3, #10
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	4903      	ldr	r1, [pc, #12]	; (8003890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003882:	5ccb      	ldrb	r3, [r1, r3]
 8003884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003888:	4618      	mov	r0, r3
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40023800 	.word	0x40023800
 8003890:	0800a904 	.word	0x0800a904

08003894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003898:	f7ff ffdc 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 800389c:	4602      	mov	r2, r0
 800389e:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	0b5b      	lsrs	r3, r3, #13
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	4903      	ldr	r1, [pc, #12]	; (80038b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038aa:	5ccb      	ldrb	r3, [r1, r3]
 80038ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40023800 	.word	0x40023800
 80038b8:	0800a904 	.word	0x0800a904

080038bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e041      	b.n	8003952 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d106      	bne.n	80038e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fe fe56 	bl	8002594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3304      	adds	r3, #4
 80038f8:	4619      	mov	r1, r3
 80038fa:	4610      	mov	r0, r2
 80038fc:	f000 fd54 	bl	80043a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b01      	cmp	r3, #1
 800396e:	d001      	beq.n	8003974 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e03c      	b.n	80039ee <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a1e      	ldr	r2, [pc, #120]	; (80039fc <HAL_TIM_Base_Start+0xa0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d018      	beq.n	80039b8 <HAL_TIM_Base_Start+0x5c>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800398e:	d013      	beq.n	80039b8 <HAL_TIM_Base_Start+0x5c>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1a      	ldr	r2, [pc, #104]	; (8003a00 <HAL_TIM_Base_Start+0xa4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d00e      	beq.n	80039b8 <HAL_TIM_Base_Start+0x5c>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a19      	ldr	r2, [pc, #100]	; (8003a04 <HAL_TIM_Base_Start+0xa8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d009      	beq.n	80039b8 <HAL_TIM_Base_Start+0x5c>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a17      	ldr	r2, [pc, #92]	; (8003a08 <HAL_TIM_Base_Start+0xac>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d004      	beq.n	80039b8 <HAL_TIM_Base_Start+0x5c>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a16      	ldr	r2, [pc, #88]	; (8003a0c <HAL_TIM_Base_Start+0xb0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d111      	bne.n	80039dc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b06      	cmp	r3, #6
 80039c8:	d010      	beq.n	80039ec <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f042 0201 	orr.w	r2, r2, #1
 80039d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039da:	e007      	b.n	80039ec <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40010000 	.word	0x40010000
 8003a00:	40000400 	.word	0x40000400
 8003a04:	40000800 	.word	0x40000800
 8003a08:	40000c00 	.word	0x40000c00
 8003a0c:	40014000 	.word	0x40014000

08003a10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d001      	beq.n	8003a28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e044      	b.n	8003ab2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a1e      	ldr	r2, [pc, #120]	; (8003ac0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d018      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x6c>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a52:	d013      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x6c>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a1a      	ldr	r2, [pc, #104]	; (8003ac4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d00e      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x6c>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a19      	ldr	r2, [pc, #100]	; (8003ac8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d009      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x6c>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a17      	ldr	r2, [pc, #92]	; (8003acc <HAL_TIM_Base_Start_IT+0xbc>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d004      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x6c>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a16      	ldr	r2, [pc, #88]	; (8003ad0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d111      	bne.n	8003aa0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2b06      	cmp	r3, #6
 8003a8c:	d010      	beq.n	8003ab0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f042 0201 	orr.w	r2, r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9e:	e007      	b.n	8003ab0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40010000 	.word	0x40010000
 8003ac4:	40000400 	.word	0x40000400
 8003ac8:	40000800 	.word	0x40000800
 8003acc:	40000c00 	.word	0x40000c00
 8003ad0:	40014000 	.word	0x40014000

08003ad4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e041      	b.n	8003b6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f839 	bl	8003b72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	4619      	mov	r1, r3
 8003b12:	4610      	mov	r0, r2
 8003b14:	f000 fc48 	bl	80043a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
	...

08003b88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d109      	bne.n	8003bac <HAL_TIM_PWM_Start+0x24>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	bf14      	ite	ne
 8003ba4:	2301      	movne	r3, #1
 8003ba6:	2300      	moveq	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	e022      	b.n	8003bf2 <HAL_TIM_PWM_Start+0x6a>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d109      	bne.n	8003bc6 <HAL_TIM_PWM_Start+0x3e>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	bf14      	ite	ne
 8003bbe:	2301      	movne	r3, #1
 8003bc0:	2300      	moveq	r3, #0
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	e015      	b.n	8003bf2 <HAL_TIM_PWM_Start+0x6a>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d109      	bne.n	8003be0 <HAL_TIM_PWM_Start+0x58>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	bf14      	ite	ne
 8003bd8:	2301      	movne	r3, #1
 8003bda:	2300      	moveq	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	e008      	b.n	8003bf2 <HAL_TIM_PWM_Start+0x6a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	bf14      	ite	ne
 8003bec:	2301      	movne	r3, #1
 8003bee:	2300      	moveq	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e068      	b.n	8003ccc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d104      	bne.n	8003c0a <HAL_TIM_PWM_Start+0x82>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c08:	e013      	b.n	8003c32 <HAL_TIM_PWM_Start+0xaa>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d104      	bne.n	8003c1a <HAL_TIM_PWM_Start+0x92>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c18:	e00b      	b.n	8003c32 <HAL_TIM_PWM_Start+0xaa>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d104      	bne.n	8003c2a <HAL_TIM_PWM_Start+0xa2>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c28:	e003      	b.n	8003c32 <HAL_TIM_PWM_Start+0xaa>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2201      	movs	r2, #1
 8003c38:	6839      	ldr	r1, [r7, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fe5a 	bl	80048f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a23      	ldr	r2, [pc, #140]	; (8003cd4 <HAL_TIM_PWM_Start+0x14c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d107      	bne.n	8003c5a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1d      	ldr	r2, [pc, #116]	; (8003cd4 <HAL_TIM_PWM_Start+0x14c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d018      	beq.n	8003c96 <HAL_TIM_PWM_Start+0x10e>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c6c:	d013      	beq.n	8003c96 <HAL_TIM_PWM_Start+0x10e>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a19      	ldr	r2, [pc, #100]	; (8003cd8 <HAL_TIM_PWM_Start+0x150>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00e      	beq.n	8003c96 <HAL_TIM_PWM_Start+0x10e>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a17      	ldr	r2, [pc, #92]	; (8003cdc <HAL_TIM_PWM_Start+0x154>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d009      	beq.n	8003c96 <HAL_TIM_PWM_Start+0x10e>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a16      	ldr	r2, [pc, #88]	; (8003ce0 <HAL_TIM_PWM_Start+0x158>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d004      	beq.n	8003c96 <HAL_TIM_PWM_Start+0x10e>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a14      	ldr	r2, [pc, #80]	; (8003ce4 <HAL_TIM_PWM_Start+0x15c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d111      	bne.n	8003cba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b06      	cmp	r3, #6
 8003ca6:	d010      	beq.n	8003cca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb8:	e007      	b.n	8003cca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0201 	orr.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40010000 	.word	0x40010000
 8003cd8:	40000400 	.word	0x40000400
 8003cdc:	40000800 	.word	0x40000800
 8003ce0:	40000c00 	.word	0x40000c00
 8003ce4:	40014000 	.word	0x40014000

08003ce8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e097      	b.n	8003e2c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d106      	bne.n	8003d16 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7fe fbf7 	bl	8002504 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2202      	movs	r2, #2
 8003d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d2c:	f023 0307 	bic.w	r3, r3, #7
 8003d30:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	f000 fb33 	bl	80043a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d6a:	f023 0303 	bic.w	r3, r3, #3
 8003d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	021b      	lsls	r3, r3, #8
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003d88:	f023 030c 	bic.w	r3, r3, #12
 8003d8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	021b      	lsls	r3, r3, #8
 8003da4:	4313      	orrs	r3, r2
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	011a      	lsls	r2, r3, #4
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	031b      	lsls	r3, r3, #12
 8003db8:	4313      	orrs	r3, r2
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003dc6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003dce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d122      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d11b      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f06f 0202 	mvn.w	r2, #2
 8003e60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fa77 	bl	800436a <HAL_TIM_IC_CaptureCallback>
 8003e7c:	e005      	b.n	8003e8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fa69 	bl	8004356 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 fa7a 	bl	800437e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d122      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d11b      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f06f 0204 	mvn.w	r2, #4
 8003eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2202      	movs	r2, #2
 8003eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fa4d 	bl	800436a <HAL_TIM_IC_CaptureCallback>
 8003ed0:	e005      	b.n	8003ede <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fa3f 	bl	8004356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 fa50 	bl	800437e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d122      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0308 	and.w	r3, r3, #8
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d11b      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0208 	mvn.w	r2, #8
 8003f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2204      	movs	r2, #4
 8003f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fa23 	bl	800436a <HAL_TIM_IC_CaptureCallback>
 8003f24:	e005      	b.n	8003f32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 fa15 	bl	8004356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 fa26 	bl	800437e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f003 0310 	and.w	r3, r3, #16
 8003f42:	2b10      	cmp	r3, #16
 8003f44:	d122      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f003 0310 	and.w	r3, r3, #16
 8003f50:	2b10      	cmp	r3, #16
 8003f52:	d11b      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0210 	mvn.w	r2, #16
 8003f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2208      	movs	r2, #8
 8003f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f9f9 	bl	800436a <HAL_TIM_IC_CaptureCallback>
 8003f78:	e005      	b.n	8003f86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f9eb 	bl	8004356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f9fc 	bl	800437e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d10e      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d107      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0201 	mvn.w	r2, #1
 8003fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fe f87c 	bl	80020b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc2:	2b80      	cmp	r3, #128	; 0x80
 8003fc4:	d10e      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd0:	2b80      	cmp	r3, #128	; 0x80
 8003fd2:	d107      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 fd26 	bl	8004a30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fee:	2b40      	cmp	r3, #64	; 0x40
 8003ff0:	d10e      	bne.n	8004010 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffc:	2b40      	cmp	r3, #64	; 0x40
 8003ffe:	d107      	bne.n	8004010 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f9c1 	bl	8004392 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b20      	cmp	r3, #32
 800401c:	d10e      	bne.n	800403c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f003 0320 	and.w	r3, r3, #32
 8004028:	2b20      	cmp	r3, #32
 800402a:	d107      	bne.n	800403c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0220 	mvn.w	r2, #32
 8004034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fcf0 	bl	8004a1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800403c:	bf00      	nop
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800405e:	2302      	movs	r3, #2
 8004060:	e0ae      	b.n	80041c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b0c      	cmp	r3, #12
 800406e:	f200 809f 	bhi.w	80041b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004072:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004078:	080040ad 	.word	0x080040ad
 800407c:	080041b1 	.word	0x080041b1
 8004080:	080041b1 	.word	0x080041b1
 8004084:	080041b1 	.word	0x080041b1
 8004088:	080040ed 	.word	0x080040ed
 800408c:	080041b1 	.word	0x080041b1
 8004090:	080041b1 	.word	0x080041b1
 8004094:	080041b1 	.word	0x080041b1
 8004098:	0800412f 	.word	0x0800412f
 800409c:	080041b1 	.word	0x080041b1
 80040a0:	080041b1 	.word	0x080041b1
 80040a4:	080041b1 	.word	0x080041b1
 80040a8:	0800416f 	.word	0x0800416f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68b9      	ldr	r1, [r7, #8]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 f9f8 	bl	80044a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0208 	orr.w	r2, r2, #8
 80040c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699a      	ldr	r2, [r3, #24]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0204 	bic.w	r2, r2, #4
 80040d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6999      	ldr	r1, [r3, #24]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	691a      	ldr	r2, [r3, #16]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	619a      	str	r2, [r3, #24]
      break;
 80040ea:	e064      	b.n	80041b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68b9      	ldr	r1, [r7, #8]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fa3e 	bl	8004574 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	699a      	ldr	r2, [r3, #24]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699a      	ldr	r2, [r3, #24]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6999      	ldr	r1, [r3, #24]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	021a      	lsls	r2, r3, #8
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	619a      	str	r2, [r3, #24]
      break;
 800412c:	e043      	b.n	80041b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68b9      	ldr	r1, [r7, #8]
 8004134:	4618      	mov	r0, r3
 8004136:	f000 fa89 	bl	800464c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69da      	ldr	r2, [r3, #28]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 0208 	orr.w	r2, r2, #8
 8004148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69da      	ldr	r2, [r3, #28]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0204 	bic.w	r2, r2, #4
 8004158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69d9      	ldr	r1, [r3, #28]
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	61da      	str	r2, [r3, #28]
      break;
 800416c:	e023      	b.n	80041b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68b9      	ldr	r1, [r7, #8]
 8004174:	4618      	mov	r0, r3
 8004176:	f000 fad3 	bl	8004720 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	69da      	ldr	r2, [r3, #28]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004188:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	69da      	ldr	r2, [r3, #28]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004198:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69d9      	ldr	r1, [r3, #28]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	021a      	lsls	r2, r3, #8
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	61da      	str	r2, [r3, #28]
      break;
 80041ae:	e002      	b.n	80041b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	75fb      	strb	r3, [r7, #23]
      break;
 80041b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041be:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_TIM_ConfigClockSource+0x1c>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e0b4      	b.n	800434e <HAL_TIM_ConfigClockSource+0x186>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004202:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800420a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800421c:	d03e      	beq.n	800429c <HAL_TIM_ConfigClockSource+0xd4>
 800421e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004222:	f200 8087 	bhi.w	8004334 <HAL_TIM_ConfigClockSource+0x16c>
 8004226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800422a:	f000 8086 	beq.w	800433a <HAL_TIM_ConfigClockSource+0x172>
 800422e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004232:	d87f      	bhi.n	8004334 <HAL_TIM_ConfigClockSource+0x16c>
 8004234:	2b70      	cmp	r3, #112	; 0x70
 8004236:	d01a      	beq.n	800426e <HAL_TIM_ConfigClockSource+0xa6>
 8004238:	2b70      	cmp	r3, #112	; 0x70
 800423a:	d87b      	bhi.n	8004334 <HAL_TIM_ConfigClockSource+0x16c>
 800423c:	2b60      	cmp	r3, #96	; 0x60
 800423e:	d050      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x11a>
 8004240:	2b60      	cmp	r3, #96	; 0x60
 8004242:	d877      	bhi.n	8004334 <HAL_TIM_ConfigClockSource+0x16c>
 8004244:	2b50      	cmp	r3, #80	; 0x50
 8004246:	d03c      	beq.n	80042c2 <HAL_TIM_ConfigClockSource+0xfa>
 8004248:	2b50      	cmp	r3, #80	; 0x50
 800424a:	d873      	bhi.n	8004334 <HAL_TIM_ConfigClockSource+0x16c>
 800424c:	2b40      	cmp	r3, #64	; 0x40
 800424e:	d058      	beq.n	8004302 <HAL_TIM_ConfigClockSource+0x13a>
 8004250:	2b40      	cmp	r3, #64	; 0x40
 8004252:	d86f      	bhi.n	8004334 <HAL_TIM_ConfigClockSource+0x16c>
 8004254:	2b30      	cmp	r3, #48	; 0x30
 8004256:	d064      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0x15a>
 8004258:	2b30      	cmp	r3, #48	; 0x30
 800425a:	d86b      	bhi.n	8004334 <HAL_TIM_ConfigClockSource+0x16c>
 800425c:	2b20      	cmp	r3, #32
 800425e:	d060      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0x15a>
 8004260:	2b20      	cmp	r3, #32
 8004262:	d867      	bhi.n	8004334 <HAL_TIM_ConfigClockSource+0x16c>
 8004264:	2b00      	cmp	r3, #0
 8004266:	d05c      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0x15a>
 8004268:	2b10      	cmp	r3, #16
 800426a:	d05a      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0x15a>
 800426c:	e062      	b.n	8004334 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	6899      	ldr	r1, [r3, #8]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f000 fb19 	bl	80048b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004290:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	609a      	str	r2, [r3, #8]
      break;
 800429a:	e04f      	b.n	800433c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6818      	ldr	r0, [r3, #0]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	6899      	ldr	r1, [r3, #8]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f000 fb02 	bl	80048b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042be:	609a      	str	r2, [r3, #8]
      break;
 80042c0:	e03c      	b.n	800433c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	6859      	ldr	r1, [r3, #4]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	461a      	mov	r2, r3
 80042d0:	f000 fa76 	bl	80047c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2150      	movs	r1, #80	; 0x50
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 facf 	bl	800487e <TIM_ITRx_SetConfig>
      break;
 80042e0:	e02c      	b.n	800433c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6818      	ldr	r0, [r3, #0]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	6859      	ldr	r1, [r3, #4]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	461a      	mov	r2, r3
 80042f0:	f000 fa95 	bl	800481e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2160      	movs	r1, #96	; 0x60
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fabf 	bl	800487e <TIM_ITRx_SetConfig>
      break;
 8004300:	e01c      	b.n	800433c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6818      	ldr	r0, [r3, #0]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	6859      	ldr	r1, [r3, #4]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	461a      	mov	r2, r3
 8004310:	f000 fa56 	bl	80047c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2140      	movs	r1, #64	; 0x40
 800431a:	4618      	mov	r0, r3
 800431c:	f000 faaf 	bl	800487e <TIM_ITRx_SetConfig>
      break;
 8004320:	e00c      	b.n	800433c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4619      	mov	r1, r3
 800432c:	4610      	mov	r0, r2
 800432e:	f000 faa6 	bl	800487e <TIM_ITRx_SetConfig>
      break;
 8004332:	e003      	b.n	800433c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	73fb      	strb	r3, [r7, #15]
      break;
 8004338:	e000      	b.n	800433c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800433a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800434c:	7bfb      	ldrb	r3, [r7, #15]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
	...

080043a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a34      	ldr	r2, [pc, #208]	; (800448c <TIM_Base_SetConfig+0xe4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d00f      	beq.n	80043e0 <TIM_Base_SetConfig+0x38>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c6:	d00b      	beq.n	80043e0 <TIM_Base_SetConfig+0x38>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a31      	ldr	r2, [pc, #196]	; (8004490 <TIM_Base_SetConfig+0xe8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d007      	beq.n	80043e0 <TIM_Base_SetConfig+0x38>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a30      	ldr	r2, [pc, #192]	; (8004494 <TIM_Base_SetConfig+0xec>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d003      	beq.n	80043e0 <TIM_Base_SetConfig+0x38>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a2f      	ldr	r2, [pc, #188]	; (8004498 <TIM_Base_SetConfig+0xf0>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d108      	bne.n	80043f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a25      	ldr	r2, [pc, #148]	; (800448c <TIM_Base_SetConfig+0xe4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d01b      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004400:	d017      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a22      	ldr	r2, [pc, #136]	; (8004490 <TIM_Base_SetConfig+0xe8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d013      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a21      	ldr	r2, [pc, #132]	; (8004494 <TIM_Base_SetConfig+0xec>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d00f      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a20      	ldr	r2, [pc, #128]	; (8004498 <TIM_Base_SetConfig+0xf0>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d00b      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a1f      	ldr	r2, [pc, #124]	; (800449c <TIM_Base_SetConfig+0xf4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d007      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a1e      	ldr	r2, [pc, #120]	; (80044a0 <TIM_Base_SetConfig+0xf8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d003      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a1d      	ldr	r2, [pc, #116]	; (80044a4 <TIM_Base_SetConfig+0xfc>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d108      	bne.n	8004444 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4313      	orrs	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a08      	ldr	r2, [pc, #32]	; (800448c <TIM_Base_SetConfig+0xe4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d103      	bne.n	8004478 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	691a      	ldr	r2, [r3, #16]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	615a      	str	r2, [r3, #20]
}
 800447e:	bf00      	nop
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40010000 	.word	0x40010000
 8004490:	40000400 	.word	0x40000400
 8004494:	40000800 	.word	0x40000800
 8004498:	40000c00 	.word	0x40000c00
 800449c:	40014000 	.word	0x40014000
 80044a0:	40014400 	.word	0x40014400
 80044a4:	40014800 	.word	0x40014800

080044a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	f023 0201 	bic.w	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0303 	bic.w	r3, r3, #3
 80044de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f023 0302 	bic.w	r3, r3, #2
 80044f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a1c      	ldr	r2, [pc, #112]	; (8004570 <TIM_OC1_SetConfig+0xc8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d10c      	bne.n	800451e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f023 0308 	bic.w	r3, r3, #8
 800450a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f023 0304 	bic.w	r3, r3, #4
 800451c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a13      	ldr	r2, [pc, #76]	; (8004570 <TIM_OC1_SetConfig+0xc8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d111      	bne.n	800454a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800452c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	621a      	str	r2, [r3, #32]
}
 8004564:	bf00      	nop
 8004566:	371c      	adds	r7, #28
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	40010000 	.word	0x40010000

08004574 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	f023 0210 	bic.w	r2, r3, #16
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	021b      	lsls	r3, r3, #8
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f023 0320 	bic.w	r3, r3, #32
 80045be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a1e      	ldr	r2, [pc, #120]	; (8004648 <TIM_OC2_SetConfig+0xd4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d10d      	bne.n	80045f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a15      	ldr	r2, [pc, #84]	; (8004648 <TIM_OC2_SetConfig+0xd4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d113      	bne.n	8004620 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004606:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	621a      	str	r2, [r3, #32]
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40010000 	.word	0x40010000

0800464c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0303 	bic.w	r3, r3, #3
 8004682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a1d      	ldr	r2, [pc, #116]	; (800471c <TIM_OC3_SetConfig+0xd0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d10d      	bne.n	80046c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	021b      	lsls	r3, r3, #8
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a14      	ldr	r2, [pc, #80]	; (800471c <TIM_OC3_SetConfig+0xd0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d113      	bne.n	80046f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	621a      	str	r2, [r3, #32]
}
 8004710:	bf00      	nop
 8004712:	371c      	adds	r7, #28
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	40010000 	.word	0x40010000

08004720 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800474e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	021b      	lsls	r3, r3, #8
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4313      	orrs	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800476a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	031b      	lsls	r3, r3, #12
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a10      	ldr	r2, [pc, #64]	; (80047bc <TIM_OC4_SetConfig+0x9c>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d109      	bne.n	8004794 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004786:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	019b      	lsls	r3, r3, #6
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	621a      	str	r2, [r3, #32]
}
 80047ae:	bf00      	nop
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	40010000 	.word	0x40010000

080047c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	f023 0201 	bic.w	r2, r3, #1
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f023 030a 	bic.w	r3, r3, #10
 80047fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	4313      	orrs	r3, r2
 8004804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	621a      	str	r2, [r3, #32]
}
 8004812:	bf00      	nop
 8004814:	371c      	adds	r7, #28
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800481e:	b480      	push	{r7}
 8004820:	b087      	sub	sp, #28
 8004822:	af00      	add	r7, sp, #0
 8004824:	60f8      	str	r0, [r7, #12]
 8004826:	60b9      	str	r1, [r7, #8]
 8004828:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	f023 0210 	bic.w	r2, r3, #16
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004848:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	031b      	lsls	r3, r3, #12
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800485a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	621a      	str	r2, [r3, #32]
}
 8004872:	bf00      	nop
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800487e:	b480      	push	{r7}
 8004880:	b085      	sub	sp, #20
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	f043 0307 	orr.w	r3, r3, #7
 80048a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	609a      	str	r2, [r3, #8]
}
 80048a8:	bf00      	nop
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	021a      	lsls	r2, r3, #8
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	431a      	orrs	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4313      	orrs	r3, r2
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	4313      	orrs	r3, r2
 80048e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	609a      	str	r2, [r3, #8]
}
 80048e8:	bf00      	nop
 80048ea:	371c      	adds	r7, #28
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f003 031f 	and.w	r3, r3, #31
 8004906:	2201      	movs	r2, #1
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6a1a      	ldr	r2, [r3, #32]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	43db      	mvns	r3, r3
 8004916:	401a      	ands	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a1a      	ldr	r2, [r3, #32]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f003 031f 	and.w	r3, r3, #31
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	fa01 f303 	lsl.w	r3, r1, r3
 800492c:	431a      	orrs	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	621a      	str	r2, [r3, #32]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
	...

08004940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004954:	2302      	movs	r3, #2
 8004956:	e050      	b.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a1c      	ldr	r2, [pc, #112]	; (8004a08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d018      	beq.n	80049ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a4:	d013      	beq.n	80049ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a18      	ldr	r2, [pc, #96]	; (8004a0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00e      	beq.n	80049ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a16      	ldr	r2, [pc, #88]	; (8004a10 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d009      	beq.n	80049ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a15      	ldr	r2, [pc, #84]	; (8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d004      	beq.n	80049ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a13      	ldr	r2, [pc, #76]	; (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d10c      	bne.n	80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	4313      	orrs	r3, r2
 80049de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	40010000 	.word	0x40010000
 8004a0c:	40000400 	.word	0x40000400
 8004a10:	40000800 	.word	0x40000800
 8004a14:	40000c00 	.word	0x40000c00
 8004a18:	40014000 	.word	0x40014000

08004a1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e03f      	b.n	8004ad6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7fd fe0a 	bl	8002684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2224      	movs	r2, #36	; 0x24
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f829 	bl	8004ae0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695a      	ldr	r2, [r3, #20]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004aac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004abc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
	...

08004ae0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ae4:	b0c0      	sub	sp, #256	; 0x100
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afc:	68d9      	ldr	r1, [r3, #12]
 8004afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	ea40 0301 	orr.w	r3, r0, r1
 8004b08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b38:	f021 010c 	bic.w	r1, r1, #12
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b46:	430b      	orrs	r3, r1
 8004b48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5a:	6999      	ldr	r1, [r3, #24]
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	ea40 0301 	orr.w	r3, r0, r1
 8004b66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	4b8f      	ldr	r3, [pc, #572]	; (8004dac <UART_SetConfig+0x2cc>)
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d005      	beq.n	8004b80 <UART_SetConfig+0xa0>
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4b8d      	ldr	r3, [pc, #564]	; (8004db0 <UART_SetConfig+0x2d0>)
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d104      	bne.n	8004b8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b80:	f7fe fe88 	bl	8003894 <HAL_RCC_GetPCLK2Freq>
 8004b84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b88:	e003      	b.n	8004b92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b8a:	f7fe fe6f 	bl	800386c <HAL_RCC_GetPCLK1Freq>
 8004b8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b9c:	f040 810c 	bne.w	8004db8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004baa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004bae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004bb2:	4622      	mov	r2, r4
 8004bb4:	462b      	mov	r3, r5
 8004bb6:	1891      	adds	r1, r2, r2
 8004bb8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bba:	415b      	adcs	r3, r3
 8004bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	eb12 0801 	adds.w	r8, r2, r1
 8004bc8:	4629      	mov	r1, r5
 8004bca:	eb43 0901 	adc.w	r9, r3, r1
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	f04f 0300 	mov.w	r3, #0
 8004bd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004be2:	4690      	mov	r8, r2
 8004be4:	4699      	mov	r9, r3
 8004be6:	4623      	mov	r3, r4
 8004be8:	eb18 0303 	adds.w	r3, r8, r3
 8004bec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bf0:	462b      	mov	r3, r5
 8004bf2:	eb49 0303 	adc.w	r3, r9, r3
 8004bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c0e:	460b      	mov	r3, r1
 8004c10:	18db      	adds	r3, r3, r3
 8004c12:	653b      	str	r3, [r7, #80]	; 0x50
 8004c14:	4613      	mov	r3, r2
 8004c16:	eb42 0303 	adc.w	r3, r2, r3
 8004c1a:	657b      	str	r3, [r7, #84]	; 0x54
 8004c1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c24:	f7fc f838 	bl	8000c98 <__aeabi_uldivmod>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4b61      	ldr	r3, [pc, #388]	; (8004db4 <UART_SetConfig+0x2d4>)
 8004c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c32:	095b      	lsrs	r3, r3, #5
 8004c34:	011c      	lsls	r4, r3, #4
 8004c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c48:	4642      	mov	r2, r8
 8004c4a:	464b      	mov	r3, r9
 8004c4c:	1891      	adds	r1, r2, r2
 8004c4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c50:	415b      	adcs	r3, r3
 8004c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c58:	4641      	mov	r1, r8
 8004c5a:	eb12 0a01 	adds.w	sl, r2, r1
 8004c5e:	4649      	mov	r1, r9
 8004c60:	eb43 0b01 	adc.w	fp, r3, r1
 8004c64:	f04f 0200 	mov.w	r2, #0
 8004c68:	f04f 0300 	mov.w	r3, #0
 8004c6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c78:	4692      	mov	sl, r2
 8004c7a:	469b      	mov	fp, r3
 8004c7c:	4643      	mov	r3, r8
 8004c7e:	eb1a 0303 	adds.w	r3, sl, r3
 8004c82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c86:	464b      	mov	r3, r9
 8004c88:	eb4b 0303 	adc.w	r3, fp, r3
 8004c8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ca0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	18db      	adds	r3, r3, r3
 8004ca8:	643b      	str	r3, [r7, #64]	; 0x40
 8004caa:	4613      	mov	r3, r2
 8004cac:	eb42 0303 	adc.w	r3, r2, r3
 8004cb0:	647b      	str	r3, [r7, #68]	; 0x44
 8004cb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004cb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004cba:	f7fb ffed 	bl	8000c98 <__aeabi_uldivmod>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	4b3b      	ldr	r3, [pc, #236]	; (8004db4 <UART_SetConfig+0x2d4>)
 8004cc6:	fba3 2301 	umull	r2, r3, r3, r1
 8004cca:	095b      	lsrs	r3, r3, #5
 8004ccc:	2264      	movs	r2, #100	; 0x64
 8004cce:	fb02 f303 	mul.w	r3, r2, r3
 8004cd2:	1acb      	subs	r3, r1, r3
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004cda:	4b36      	ldr	r3, [pc, #216]	; (8004db4 <UART_SetConfig+0x2d4>)
 8004cdc:	fba3 2302 	umull	r2, r3, r3, r2
 8004ce0:	095b      	lsrs	r3, r3, #5
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ce8:	441c      	add	r4, r3
 8004cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cf4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cf8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cfc:	4642      	mov	r2, r8
 8004cfe:	464b      	mov	r3, r9
 8004d00:	1891      	adds	r1, r2, r2
 8004d02:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d04:	415b      	adcs	r3, r3
 8004d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d0c:	4641      	mov	r1, r8
 8004d0e:	1851      	adds	r1, r2, r1
 8004d10:	6339      	str	r1, [r7, #48]	; 0x30
 8004d12:	4649      	mov	r1, r9
 8004d14:	414b      	adcs	r3, r1
 8004d16:	637b      	str	r3, [r7, #52]	; 0x34
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	f04f 0300 	mov.w	r3, #0
 8004d20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d24:	4659      	mov	r1, fp
 8004d26:	00cb      	lsls	r3, r1, #3
 8004d28:	4651      	mov	r1, sl
 8004d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d2e:	4651      	mov	r1, sl
 8004d30:	00ca      	lsls	r2, r1, #3
 8004d32:	4610      	mov	r0, r2
 8004d34:	4619      	mov	r1, r3
 8004d36:	4603      	mov	r3, r0
 8004d38:	4642      	mov	r2, r8
 8004d3a:	189b      	adds	r3, r3, r2
 8004d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d40:	464b      	mov	r3, r9
 8004d42:	460a      	mov	r2, r1
 8004d44:	eb42 0303 	adc.w	r3, r2, r3
 8004d48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d60:	460b      	mov	r3, r1
 8004d62:	18db      	adds	r3, r3, r3
 8004d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d66:	4613      	mov	r3, r2
 8004d68:	eb42 0303 	adc.w	r3, r2, r3
 8004d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d76:	f7fb ff8f 	bl	8000c98 <__aeabi_uldivmod>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	; (8004db4 <UART_SetConfig+0x2d4>)
 8004d80:	fba3 1302 	umull	r1, r3, r3, r2
 8004d84:	095b      	lsrs	r3, r3, #5
 8004d86:	2164      	movs	r1, #100	; 0x64
 8004d88:	fb01 f303 	mul.w	r3, r1, r3
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	3332      	adds	r3, #50	; 0x32
 8004d92:	4a08      	ldr	r2, [pc, #32]	; (8004db4 <UART_SetConfig+0x2d4>)
 8004d94:	fba2 2303 	umull	r2, r3, r2, r3
 8004d98:	095b      	lsrs	r3, r3, #5
 8004d9a:	f003 0207 	and.w	r2, r3, #7
 8004d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4422      	add	r2, r4
 8004da6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004da8:	e105      	b.n	8004fb6 <UART_SetConfig+0x4d6>
 8004daa:	bf00      	nop
 8004dac:	40011000 	.word	0x40011000
 8004db0:	40011400 	.word	0x40011400
 8004db4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004dc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004dca:	4642      	mov	r2, r8
 8004dcc:	464b      	mov	r3, r9
 8004dce:	1891      	adds	r1, r2, r2
 8004dd0:	6239      	str	r1, [r7, #32]
 8004dd2:	415b      	adcs	r3, r3
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dda:	4641      	mov	r1, r8
 8004ddc:	1854      	adds	r4, r2, r1
 8004dde:	4649      	mov	r1, r9
 8004de0:	eb43 0501 	adc.w	r5, r3, r1
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	00eb      	lsls	r3, r5, #3
 8004dee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004df2:	00e2      	lsls	r2, r4, #3
 8004df4:	4614      	mov	r4, r2
 8004df6:	461d      	mov	r5, r3
 8004df8:	4643      	mov	r3, r8
 8004dfa:	18e3      	adds	r3, r4, r3
 8004dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e00:	464b      	mov	r3, r9
 8004e02:	eb45 0303 	adc.w	r3, r5, r3
 8004e06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e26:	4629      	mov	r1, r5
 8004e28:	008b      	lsls	r3, r1, #2
 8004e2a:	4621      	mov	r1, r4
 8004e2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e30:	4621      	mov	r1, r4
 8004e32:	008a      	lsls	r2, r1, #2
 8004e34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e38:	f7fb ff2e 	bl	8000c98 <__aeabi_uldivmod>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4b60      	ldr	r3, [pc, #384]	; (8004fc4 <UART_SetConfig+0x4e4>)
 8004e42:	fba3 2302 	umull	r2, r3, r3, r2
 8004e46:	095b      	lsrs	r3, r3, #5
 8004e48:	011c      	lsls	r4, r3, #4
 8004e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e5c:	4642      	mov	r2, r8
 8004e5e:	464b      	mov	r3, r9
 8004e60:	1891      	adds	r1, r2, r2
 8004e62:	61b9      	str	r1, [r7, #24]
 8004e64:	415b      	adcs	r3, r3
 8004e66:	61fb      	str	r3, [r7, #28]
 8004e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e6c:	4641      	mov	r1, r8
 8004e6e:	1851      	adds	r1, r2, r1
 8004e70:	6139      	str	r1, [r7, #16]
 8004e72:	4649      	mov	r1, r9
 8004e74:	414b      	adcs	r3, r1
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e84:	4659      	mov	r1, fp
 8004e86:	00cb      	lsls	r3, r1, #3
 8004e88:	4651      	mov	r1, sl
 8004e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e8e:	4651      	mov	r1, sl
 8004e90:	00ca      	lsls	r2, r1, #3
 8004e92:	4610      	mov	r0, r2
 8004e94:	4619      	mov	r1, r3
 8004e96:	4603      	mov	r3, r0
 8004e98:	4642      	mov	r2, r8
 8004e9a:	189b      	adds	r3, r3, r2
 8004e9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ea0:	464b      	mov	r3, r9
 8004ea2:	460a      	mov	r2, r1
 8004ea4:	eb42 0303 	adc.w	r3, r2, r3
 8004ea8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004eb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ec4:	4649      	mov	r1, r9
 8004ec6:	008b      	lsls	r3, r1, #2
 8004ec8:	4641      	mov	r1, r8
 8004eca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ece:	4641      	mov	r1, r8
 8004ed0:	008a      	lsls	r2, r1, #2
 8004ed2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ed6:	f7fb fedf 	bl	8000c98 <__aeabi_uldivmod>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4b39      	ldr	r3, [pc, #228]	; (8004fc4 <UART_SetConfig+0x4e4>)
 8004ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ee4:	095b      	lsrs	r3, r3, #5
 8004ee6:	2164      	movs	r1, #100	; 0x64
 8004ee8:	fb01 f303 	mul.w	r3, r1, r3
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	011b      	lsls	r3, r3, #4
 8004ef0:	3332      	adds	r3, #50	; 0x32
 8004ef2:	4a34      	ldr	r2, [pc, #208]	; (8004fc4 <UART_SetConfig+0x4e4>)
 8004ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef8:	095b      	lsrs	r3, r3, #5
 8004efa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004efe:	441c      	add	r4, r3
 8004f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f04:	2200      	movs	r2, #0
 8004f06:	673b      	str	r3, [r7, #112]	; 0x70
 8004f08:	677a      	str	r2, [r7, #116]	; 0x74
 8004f0a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f0e:	4642      	mov	r2, r8
 8004f10:	464b      	mov	r3, r9
 8004f12:	1891      	adds	r1, r2, r2
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	415b      	adcs	r3, r3
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f1e:	4641      	mov	r1, r8
 8004f20:	1851      	adds	r1, r2, r1
 8004f22:	6039      	str	r1, [r7, #0]
 8004f24:	4649      	mov	r1, r9
 8004f26:	414b      	adcs	r3, r1
 8004f28:	607b      	str	r3, [r7, #4]
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f36:	4659      	mov	r1, fp
 8004f38:	00cb      	lsls	r3, r1, #3
 8004f3a:	4651      	mov	r1, sl
 8004f3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f40:	4651      	mov	r1, sl
 8004f42:	00ca      	lsls	r2, r1, #3
 8004f44:	4610      	mov	r0, r2
 8004f46:	4619      	mov	r1, r3
 8004f48:	4603      	mov	r3, r0
 8004f4a:	4642      	mov	r2, r8
 8004f4c:	189b      	adds	r3, r3, r2
 8004f4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f50:	464b      	mov	r3, r9
 8004f52:	460a      	mov	r2, r1
 8004f54:	eb42 0303 	adc.w	r3, r2, r3
 8004f58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	663b      	str	r3, [r7, #96]	; 0x60
 8004f64:	667a      	str	r2, [r7, #100]	; 0x64
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	f04f 0300 	mov.w	r3, #0
 8004f6e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f72:	4649      	mov	r1, r9
 8004f74:	008b      	lsls	r3, r1, #2
 8004f76:	4641      	mov	r1, r8
 8004f78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f7c:	4641      	mov	r1, r8
 8004f7e:	008a      	lsls	r2, r1, #2
 8004f80:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f84:	f7fb fe88 	bl	8000c98 <__aeabi_uldivmod>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4b0d      	ldr	r3, [pc, #52]	; (8004fc4 <UART_SetConfig+0x4e4>)
 8004f8e:	fba3 1302 	umull	r1, r3, r3, r2
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	2164      	movs	r1, #100	; 0x64
 8004f96:	fb01 f303 	mul.w	r3, r1, r3
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	011b      	lsls	r3, r3, #4
 8004f9e:	3332      	adds	r3, #50	; 0x32
 8004fa0:	4a08      	ldr	r2, [pc, #32]	; (8004fc4 <UART_SetConfig+0x4e4>)
 8004fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa6:	095b      	lsrs	r3, r3, #5
 8004fa8:	f003 020f 	and.w	r2, r3, #15
 8004fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4422      	add	r2, r4
 8004fb4:	609a      	str	r2, [r3, #8]
}
 8004fb6:	bf00      	nop
 8004fb8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fc2:	bf00      	nop
 8004fc4:	51eb851f 	.word	0x51eb851f

08004fc8 <ceil>:
 8004fc8:	ec51 0b10 	vmov	r0, r1, d0
 8004fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fd0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004fd4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004fd8:	2e13      	cmp	r6, #19
 8004fda:	ee10 5a10 	vmov	r5, s0
 8004fde:	ee10 8a10 	vmov	r8, s0
 8004fe2:	460c      	mov	r4, r1
 8004fe4:	dc30      	bgt.n	8005048 <ceil+0x80>
 8004fe6:	2e00      	cmp	r6, #0
 8004fe8:	da12      	bge.n	8005010 <ceil+0x48>
 8004fea:	a335      	add	r3, pc, #212	; (adr r3, 80050c0 <ceil+0xf8>)
 8004fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff0:	f7fb f954 	bl	800029c <__adddf3>
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f7fb fd96 	bl	8000b28 <__aeabi_dcmpgt>
 8004ffc:	b128      	cbz	r0, 800500a <ceil+0x42>
 8004ffe:	2c00      	cmp	r4, #0
 8005000:	db55      	blt.n	80050ae <ceil+0xe6>
 8005002:	432c      	orrs	r4, r5
 8005004:	d057      	beq.n	80050b6 <ceil+0xee>
 8005006:	4c30      	ldr	r4, [pc, #192]	; (80050c8 <ceil+0x100>)
 8005008:	2500      	movs	r5, #0
 800500a:	4621      	mov	r1, r4
 800500c:	4628      	mov	r0, r5
 800500e:	e025      	b.n	800505c <ceil+0x94>
 8005010:	4f2e      	ldr	r7, [pc, #184]	; (80050cc <ceil+0x104>)
 8005012:	4137      	asrs	r7, r6
 8005014:	ea01 0307 	and.w	r3, r1, r7
 8005018:	4303      	orrs	r3, r0
 800501a:	d01f      	beq.n	800505c <ceil+0x94>
 800501c:	a328      	add	r3, pc, #160	; (adr r3, 80050c0 <ceil+0xf8>)
 800501e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005022:	f7fb f93b 	bl	800029c <__adddf3>
 8005026:	2200      	movs	r2, #0
 8005028:	2300      	movs	r3, #0
 800502a:	f7fb fd7d 	bl	8000b28 <__aeabi_dcmpgt>
 800502e:	2800      	cmp	r0, #0
 8005030:	d0eb      	beq.n	800500a <ceil+0x42>
 8005032:	2c00      	cmp	r4, #0
 8005034:	bfc2      	ittt	gt
 8005036:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800503a:	fa43 f606 	asrgt.w	r6, r3, r6
 800503e:	19a4      	addgt	r4, r4, r6
 8005040:	ea24 0407 	bic.w	r4, r4, r7
 8005044:	2500      	movs	r5, #0
 8005046:	e7e0      	b.n	800500a <ceil+0x42>
 8005048:	2e33      	cmp	r6, #51	; 0x33
 800504a:	dd0b      	ble.n	8005064 <ceil+0x9c>
 800504c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005050:	d104      	bne.n	800505c <ceil+0x94>
 8005052:	ee10 2a10 	vmov	r2, s0
 8005056:	460b      	mov	r3, r1
 8005058:	f7fb f920 	bl	800029c <__adddf3>
 800505c:	ec41 0b10 	vmov	d0, r0, r1
 8005060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005064:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005068:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800506c:	fa23 f707 	lsr.w	r7, r3, r7
 8005070:	4207      	tst	r7, r0
 8005072:	d0f3      	beq.n	800505c <ceil+0x94>
 8005074:	a312      	add	r3, pc, #72	; (adr r3, 80050c0 <ceil+0xf8>)
 8005076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507a:	f7fb f90f 	bl	800029c <__adddf3>
 800507e:	2200      	movs	r2, #0
 8005080:	2300      	movs	r3, #0
 8005082:	f7fb fd51 	bl	8000b28 <__aeabi_dcmpgt>
 8005086:	2800      	cmp	r0, #0
 8005088:	d0bf      	beq.n	800500a <ceil+0x42>
 800508a:	2c00      	cmp	r4, #0
 800508c:	dd02      	ble.n	8005094 <ceil+0xcc>
 800508e:	2e14      	cmp	r6, #20
 8005090:	d103      	bne.n	800509a <ceil+0xd2>
 8005092:	3401      	adds	r4, #1
 8005094:	ea25 0507 	bic.w	r5, r5, r7
 8005098:	e7b7      	b.n	800500a <ceil+0x42>
 800509a:	2301      	movs	r3, #1
 800509c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80050a0:	fa03 f606 	lsl.w	r6, r3, r6
 80050a4:	4435      	add	r5, r6
 80050a6:	4545      	cmp	r5, r8
 80050a8:	bf38      	it	cc
 80050aa:	18e4      	addcc	r4, r4, r3
 80050ac:	e7f2      	b.n	8005094 <ceil+0xcc>
 80050ae:	2500      	movs	r5, #0
 80050b0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80050b4:	e7a9      	b.n	800500a <ceil+0x42>
 80050b6:	4625      	mov	r5, r4
 80050b8:	e7a7      	b.n	800500a <ceil+0x42>
 80050ba:	bf00      	nop
 80050bc:	f3af 8000 	nop.w
 80050c0:	8800759c 	.word	0x8800759c
 80050c4:	7e37e43c 	.word	0x7e37e43c
 80050c8:	3ff00000 	.word	0x3ff00000
 80050cc:	000fffff 	.word	0x000fffff

080050d0 <pow>:
 80050d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d2:	ed2d 8b02 	vpush	{d8}
 80050d6:	eeb0 8a40 	vmov.f32	s16, s0
 80050da:	eef0 8a60 	vmov.f32	s17, s1
 80050de:	ec55 4b11 	vmov	r4, r5, d1
 80050e2:	f000 f865 	bl	80051b0 <__ieee754_pow>
 80050e6:	4622      	mov	r2, r4
 80050e8:	462b      	mov	r3, r5
 80050ea:	4620      	mov	r0, r4
 80050ec:	4629      	mov	r1, r5
 80050ee:	ec57 6b10 	vmov	r6, r7, d0
 80050f2:	f7fb fd23 	bl	8000b3c <__aeabi_dcmpun>
 80050f6:	2800      	cmp	r0, #0
 80050f8:	d13b      	bne.n	8005172 <pow+0xa2>
 80050fa:	ec51 0b18 	vmov	r0, r1, d8
 80050fe:	2200      	movs	r2, #0
 8005100:	2300      	movs	r3, #0
 8005102:	f7fb fce9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005106:	b1b8      	cbz	r0, 8005138 <pow+0x68>
 8005108:	2200      	movs	r2, #0
 800510a:	2300      	movs	r3, #0
 800510c:	4620      	mov	r0, r4
 800510e:	4629      	mov	r1, r5
 8005110:	f7fb fce2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005114:	2800      	cmp	r0, #0
 8005116:	d146      	bne.n	80051a6 <pow+0xd6>
 8005118:	ec45 4b10 	vmov	d0, r4, r5
 800511c:	f000 fe61 	bl	8005de2 <finite>
 8005120:	b338      	cbz	r0, 8005172 <pow+0xa2>
 8005122:	2200      	movs	r2, #0
 8005124:	2300      	movs	r3, #0
 8005126:	4620      	mov	r0, r4
 8005128:	4629      	mov	r1, r5
 800512a:	f7fb fcdf 	bl	8000aec <__aeabi_dcmplt>
 800512e:	b300      	cbz	r0, 8005172 <pow+0xa2>
 8005130:	f000 fef0 	bl	8005f14 <__errno>
 8005134:	2322      	movs	r3, #34	; 0x22
 8005136:	e01b      	b.n	8005170 <pow+0xa0>
 8005138:	ec47 6b10 	vmov	d0, r6, r7
 800513c:	f000 fe51 	bl	8005de2 <finite>
 8005140:	b9e0      	cbnz	r0, 800517c <pow+0xac>
 8005142:	eeb0 0a48 	vmov.f32	s0, s16
 8005146:	eef0 0a68 	vmov.f32	s1, s17
 800514a:	f000 fe4a 	bl	8005de2 <finite>
 800514e:	b1a8      	cbz	r0, 800517c <pow+0xac>
 8005150:	ec45 4b10 	vmov	d0, r4, r5
 8005154:	f000 fe45 	bl	8005de2 <finite>
 8005158:	b180      	cbz	r0, 800517c <pow+0xac>
 800515a:	4632      	mov	r2, r6
 800515c:	463b      	mov	r3, r7
 800515e:	4630      	mov	r0, r6
 8005160:	4639      	mov	r1, r7
 8005162:	f7fb fceb 	bl	8000b3c <__aeabi_dcmpun>
 8005166:	2800      	cmp	r0, #0
 8005168:	d0e2      	beq.n	8005130 <pow+0x60>
 800516a:	f000 fed3 	bl	8005f14 <__errno>
 800516e:	2321      	movs	r3, #33	; 0x21
 8005170:	6003      	str	r3, [r0, #0]
 8005172:	ecbd 8b02 	vpop	{d8}
 8005176:	ec47 6b10 	vmov	d0, r6, r7
 800517a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800517c:	2200      	movs	r2, #0
 800517e:	2300      	movs	r3, #0
 8005180:	4630      	mov	r0, r6
 8005182:	4639      	mov	r1, r7
 8005184:	f7fb fca8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005188:	2800      	cmp	r0, #0
 800518a:	d0f2      	beq.n	8005172 <pow+0xa2>
 800518c:	eeb0 0a48 	vmov.f32	s0, s16
 8005190:	eef0 0a68 	vmov.f32	s1, s17
 8005194:	f000 fe25 	bl	8005de2 <finite>
 8005198:	2800      	cmp	r0, #0
 800519a:	d0ea      	beq.n	8005172 <pow+0xa2>
 800519c:	ec45 4b10 	vmov	d0, r4, r5
 80051a0:	f000 fe1f 	bl	8005de2 <finite>
 80051a4:	e7c3      	b.n	800512e <pow+0x5e>
 80051a6:	4f01      	ldr	r7, [pc, #4]	; (80051ac <pow+0xdc>)
 80051a8:	2600      	movs	r6, #0
 80051aa:	e7e2      	b.n	8005172 <pow+0xa2>
 80051ac:	3ff00000 	.word	0x3ff00000

080051b0 <__ieee754_pow>:
 80051b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b4:	ed2d 8b06 	vpush	{d8-d10}
 80051b8:	b089      	sub	sp, #36	; 0x24
 80051ba:	ed8d 1b00 	vstr	d1, [sp]
 80051be:	e9dd 2900 	ldrd	r2, r9, [sp]
 80051c2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80051c6:	ea58 0102 	orrs.w	r1, r8, r2
 80051ca:	ec57 6b10 	vmov	r6, r7, d0
 80051ce:	d115      	bne.n	80051fc <__ieee754_pow+0x4c>
 80051d0:	19b3      	adds	r3, r6, r6
 80051d2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80051d6:	4152      	adcs	r2, r2
 80051d8:	4299      	cmp	r1, r3
 80051da:	4b89      	ldr	r3, [pc, #548]	; (8005400 <__ieee754_pow+0x250>)
 80051dc:	4193      	sbcs	r3, r2
 80051de:	f080 84d2 	bcs.w	8005b86 <__ieee754_pow+0x9d6>
 80051e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051e6:	4630      	mov	r0, r6
 80051e8:	4639      	mov	r1, r7
 80051ea:	f7fb f857 	bl	800029c <__adddf3>
 80051ee:	ec41 0b10 	vmov	d0, r0, r1
 80051f2:	b009      	add	sp, #36	; 0x24
 80051f4:	ecbd 8b06 	vpop	{d8-d10}
 80051f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051fc:	4b81      	ldr	r3, [pc, #516]	; (8005404 <__ieee754_pow+0x254>)
 80051fe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005202:	429c      	cmp	r4, r3
 8005204:	ee10 aa10 	vmov	sl, s0
 8005208:	463d      	mov	r5, r7
 800520a:	dc06      	bgt.n	800521a <__ieee754_pow+0x6a>
 800520c:	d101      	bne.n	8005212 <__ieee754_pow+0x62>
 800520e:	2e00      	cmp	r6, #0
 8005210:	d1e7      	bne.n	80051e2 <__ieee754_pow+0x32>
 8005212:	4598      	cmp	r8, r3
 8005214:	dc01      	bgt.n	800521a <__ieee754_pow+0x6a>
 8005216:	d10f      	bne.n	8005238 <__ieee754_pow+0x88>
 8005218:	b172      	cbz	r2, 8005238 <__ieee754_pow+0x88>
 800521a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800521e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005222:	ea55 050a 	orrs.w	r5, r5, sl
 8005226:	d1dc      	bne.n	80051e2 <__ieee754_pow+0x32>
 8005228:	e9dd 3200 	ldrd	r3, r2, [sp]
 800522c:	18db      	adds	r3, r3, r3
 800522e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005232:	4152      	adcs	r2, r2
 8005234:	429d      	cmp	r5, r3
 8005236:	e7d0      	b.n	80051da <__ieee754_pow+0x2a>
 8005238:	2d00      	cmp	r5, #0
 800523a:	da3b      	bge.n	80052b4 <__ieee754_pow+0x104>
 800523c:	4b72      	ldr	r3, [pc, #456]	; (8005408 <__ieee754_pow+0x258>)
 800523e:	4598      	cmp	r8, r3
 8005240:	dc51      	bgt.n	80052e6 <__ieee754_pow+0x136>
 8005242:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005246:	4598      	cmp	r8, r3
 8005248:	f340 84ac 	ble.w	8005ba4 <__ieee754_pow+0x9f4>
 800524c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005250:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005254:	2b14      	cmp	r3, #20
 8005256:	dd0f      	ble.n	8005278 <__ieee754_pow+0xc8>
 8005258:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800525c:	fa22 f103 	lsr.w	r1, r2, r3
 8005260:	fa01 f303 	lsl.w	r3, r1, r3
 8005264:	4293      	cmp	r3, r2
 8005266:	f040 849d 	bne.w	8005ba4 <__ieee754_pow+0x9f4>
 800526a:	f001 0101 	and.w	r1, r1, #1
 800526e:	f1c1 0302 	rsb	r3, r1, #2
 8005272:	9304      	str	r3, [sp, #16]
 8005274:	b182      	cbz	r2, 8005298 <__ieee754_pow+0xe8>
 8005276:	e05f      	b.n	8005338 <__ieee754_pow+0x188>
 8005278:	2a00      	cmp	r2, #0
 800527a:	d15b      	bne.n	8005334 <__ieee754_pow+0x184>
 800527c:	f1c3 0314 	rsb	r3, r3, #20
 8005280:	fa48 f103 	asr.w	r1, r8, r3
 8005284:	fa01 f303 	lsl.w	r3, r1, r3
 8005288:	4543      	cmp	r3, r8
 800528a:	f040 8488 	bne.w	8005b9e <__ieee754_pow+0x9ee>
 800528e:	f001 0101 	and.w	r1, r1, #1
 8005292:	f1c1 0302 	rsb	r3, r1, #2
 8005296:	9304      	str	r3, [sp, #16]
 8005298:	4b5c      	ldr	r3, [pc, #368]	; (800540c <__ieee754_pow+0x25c>)
 800529a:	4598      	cmp	r8, r3
 800529c:	d132      	bne.n	8005304 <__ieee754_pow+0x154>
 800529e:	f1b9 0f00 	cmp.w	r9, #0
 80052a2:	f280 8478 	bge.w	8005b96 <__ieee754_pow+0x9e6>
 80052a6:	4959      	ldr	r1, [pc, #356]	; (800540c <__ieee754_pow+0x25c>)
 80052a8:	4632      	mov	r2, r6
 80052aa:	463b      	mov	r3, r7
 80052ac:	2000      	movs	r0, #0
 80052ae:	f7fb fad5 	bl	800085c <__aeabi_ddiv>
 80052b2:	e79c      	b.n	80051ee <__ieee754_pow+0x3e>
 80052b4:	2300      	movs	r3, #0
 80052b6:	9304      	str	r3, [sp, #16]
 80052b8:	2a00      	cmp	r2, #0
 80052ba:	d13d      	bne.n	8005338 <__ieee754_pow+0x188>
 80052bc:	4b51      	ldr	r3, [pc, #324]	; (8005404 <__ieee754_pow+0x254>)
 80052be:	4598      	cmp	r8, r3
 80052c0:	d1ea      	bne.n	8005298 <__ieee754_pow+0xe8>
 80052c2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80052c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80052ca:	ea53 030a 	orrs.w	r3, r3, sl
 80052ce:	f000 845a 	beq.w	8005b86 <__ieee754_pow+0x9d6>
 80052d2:	4b4f      	ldr	r3, [pc, #316]	; (8005410 <__ieee754_pow+0x260>)
 80052d4:	429c      	cmp	r4, r3
 80052d6:	dd08      	ble.n	80052ea <__ieee754_pow+0x13a>
 80052d8:	f1b9 0f00 	cmp.w	r9, #0
 80052dc:	f2c0 8457 	blt.w	8005b8e <__ieee754_pow+0x9de>
 80052e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052e4:	e783      	b.n	80051ee <__ieee754_pow+0x3e>
 80052e6:	2302      	movs	r3, #2
 80052e8:	e7e5      	b.n	80052b6 <__ieee754_pow+0x106>
 80052ea:	f1b9 0f00 	cmp.w	r9, #0
 80052ee:	f04f 0000 	mov.w	r0, #0
 80052f2:	f04f 0100 	mov.w	r1, #0
 80052f6:	f6bf af7a 	bge.w	80051ee <__ieee754_pow+0x3e>
 80052fa:	e9dd 0300 	ldrd	r0, r3, [sp]
 80052fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005302:	e774      	b.n	80051ee <__ieee754_pow+0x3e>
 8005304:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005308:	d106      	bne.n	8005318 <__ieee754_pow+0x168>
 800530a:	4632      	mov	r2, r6
 800530c:	463b      	mov	r3, r7
 800530e:	4630      	mov	r0, r6
 8005310:	4639      	mov	r1, r7
 8005312:	f7fb f979 	bl	8000608 <__aeabi_dmul>
 8005316:	e76a      	b.n	80051ee <__ieee754_pow+0x3e>
 8005318:	4b3e      	ldr	r3, [pc, #248]	; (8005414 <__ieee754_pow+0x264>)
 800531a:	4599      	cmp	r9, r3
 800531c:	d10c      	bne.n	8005338 <__ieee754_pow+0x188>
 800531e:	2d00      	cmp	r5, #0
 8005320:	db0a      	blt.n	8005338 <__ieee754_pow+0x188>
 8005322:	ec47 6b10 	vmov	d0, r6, r7
 8005326:	b009      	add	sp, #36	; 0x24
 8005328:	ecbd 8b06 	vpop	{d8-d10}
 800532c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005330:	f000 bc6c 	b.w	8005c0c <__ieee754_sqrt>
 8005334:	2300      	movs	r3, #0
 8005336:	9304      	str	r3, [sp, #16]
 8005338:	ec47 6b10 	vmov	d0, r6, r7
 800533c:	f000 fd48 	bl	8005dd0 <fabs>
 8005340:	ec51 0b10 	vmov	r0, r1, d0
 8005344:	f1ba 0f00 	cmp.w	sl, #0
 8005348:	d129      	bne.n	800539e <__ieee754_pow+0x1ee>
 800534a:	b124      	cbz	r4, 8005356 <__ieee754_pow+0x1a6>
 800534c:	4b2f      	ldr	r3, [pc, #188]	; (800540c <__ieee754_pow+0x25c>)
 800534e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005352:	429a      	cmp	r2, r3
 8005354:	d123      	bne.n	800539e <__ieee754_pow+0x1ee>
 8005356:	f1b9 0f00 	cmp.w	r9, #0
 800535a:	da05      	bge.n	8005368 <__ieee754_pow+0x1b8>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	2000      	movs	r0, #0
 8005362:	492a      	ldr	r1, [pc, #168]	; (800540c <__ieee754_pow+0x25c>)
 8005364:	f7fb fa7a 	bl	800085c <__aeabi_ddiv>
 8005368:	2d00      	cmp	r5, #0
 800536a:	f6bf af40 	bge.w	80051ee <__ieee754_pow+0x3e>
 800536e:	9b04      	ldr	r3, [sp, #16]
 8005370:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005374:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005378:	4323      	orrs	r3, r4
 800537a:	d108      	bne.n	800538e <__ieee754_pow+0x1de>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4610      	mov	r0, r2
 8005382:	4619      	mov	r1, r3
 8005384:	f7fa ff88 	bl	8000298 <__aeabi_dsub>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	e78f      	b.n	80052ae <__ieee754_pow+0xfe>
 800538e:	9b04      	ldr	r3, [sp, #16]
 8005390:	2b01      	cmp	r3, #1
 8005392:	f47f af2c 	bne.w	80051ee <__ieee754_pow+0x3e>
 8005396:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800539a:	4619      	mov	r1, r3
 800539c:	e727      	b.n	80051ee <__ieee754_pow+0x3e>
 800539e:	0feb      	lsrs	r3, r5, #31
 80053a0:	3b01      	subs	r3, #1
 80053a2:	9306      	str	r3, [sp, #24]
 80053a4:	9a06      	ldr	r2, [sp, #24]
 80053a6:	9b04      	ldr	r3, [sp, #16]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	d102      	bne.n	80053b2 <__ieee754_pow+0x202>
 80053ac:	4632      	mov	r2, r6
 80053ae:	463b      	mov	r3, r7
 80053b0:	e7e6      	b.n	8005380 <__ieee754_pow+0x1d0>
 80053b2:	4b19      	ldr	r3, [pc, #100]	; (8005418 <__ieee754_pow+0x268>)
 80053b4:	4598      	cmp	r8, r3
 80053b6:	f340 80fb 	ble.w	80055b0 <__ieee754_pow+0x400>
 80053ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80053be:	4598      	cmp	r8, r3
 80053c0:	4b13      	ldr	r3, [pc, #76]	; (8005410 <__ieee754_pow+0x260>)
 80053c2:	dd0c      	ble.n	80053de <__ieee754_pow+0x22e>
 80053c4:	429c      	cmp	r4, r3
 80053c6:	dc0f      	bgt.n	80053e8 <__ieee754_pow+0x238>
 80053c8:	f1b9 0f00 	cmp.w	r9, #0
 80053cc:	da0f      	bge.n	80053ee <__ieee754_pow+0x23e>
 80053ce:	2000      	movs	r0, #0
 80053d0:	b009      	add	sp, #36	; 0x24
 80053d2:	ecbd 8b06 	vpop	{d8-d10}
 80053d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053da:	f000 bcf0 	b.w	8005dbe <__math_oflow>
 80053de:	429c      	cmp	r4, r3
 80053e0:	dbf2      	blt.n	80053c8 <__ieee754_pow+0x218>
 80053e2:	4b0a      	ldr	r3, [pc, #40]	; (800540c <__ieee754_pow+0x25c>)
 80053e4:	429c      	cmp	r4, r3
 80053e6:	dd19      	ble.n	800541c <__ieee754_pow+0x26c>
 80053e8:	f1b9 0f00 	cmp.w	r9, #0
 80053ec:	dcef      	bgt.n	80053ce <__ieee754_pow+0x21e>
 80053ee:	2000      	movs	r0, #0
 80053f0:	b009      	add	sp, #36	; 0x24
 80053f2:	ecbd 8b06 	vpop	{d8-d10}
 80053f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053fa:	f000 bcd7 	b.w	8005dac <__math_uflow>
 80053fe:	bf00      	nop
 8005400:	fff00000 	.word	0xfff00000
 8005404:	7ff00000 	.word	0x7ff00000
 8005408:	433fffff 	.word	0x433fffff
 800540c:	3ff00000 	.word	0x3ff00000
 8005410:	3fefffff 	.word	0x3fefffff
 8005414:	3fe00000 	.word	0x3fe00000
 8005418:	41e00000 	.word	0x41e00000
 800541c:	4b60      	ldr	r3, [pc, #384]	; (80055a0 <__ieee754_pow+0x3f0>)
 800541e:	2200      	movs	r2, #0
 8005420:	f7fa ff3a 	bl	8000298 <__aeabi_dsub>
 8005424:	a354      	add	r3, pc, #336	; (adr r3, 8005578 <__ieee754_pow+0x3c8>)
 8005426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542a:	4604      	mov	r4, r0
 800542c:	460d      	mov	r5, r1
 800542e:	f7fb f8eb 	bl	8000608 <__aeabi_dmul>
 8005432:	a353      	add	r3, pc, #332	; (adr r3, 8005580 <__ieee754_pow+0x3d0>)
 8005434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005438:	4606      	mov	r6, r0
 800543a:	460f      	mov	r7, r1
 800543c:	4620      	mov	r0, r4
 800543e:	4629      	mov	r1, r5
 8005440:	f7fb f8e2 	bl	8000608 <__aeabi_dmul>
 8005444:	4b57      	ldr	r3, [pc, #348]	; (80055a4 <__ieee754_pow+0x3f4>)
 8005446:	4682      	mov	sl, r0
 8005448:	468b      	mov	fp, r1
 800544a:	2200      	movs	r2, #0
 800544c:	4620      	mov	r0, r4
 800544e:	4629      	mov	r1, r5
 8005450:	f7fb f8da 	bl	8000608 <__aeabi_dmul>
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	a14b      	add	r1, pc, #300	; (adr r1, 8005588 <__ieee754_pow+0x3d8>)
 800545a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800545e:	f7fa ff1b 	bl	8000298 <__aeabi_dsub>
 8005462:	4622      	mov	r2, r4
 8005464:	462b      	mov	r3, r5
 8005466:	f7fb f8cf 	bl	8000608 <__aeabi_dmul>
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	2000      	movs	r0, #0
 8005470:	494d      	ldr	r1, [pc, #308]	; (80055a8 <__ieee754_pow+0x3f8>)
 8005472:	f7fa ff11 	bl	8000298 <__aeabi_dsub>
 8005476:	4622      	mov	r2, r4
 8005478:	4680      	mov	r8, r0
 800547a:	4689      	mov	r9, r1
 800547c:	462b      	mov	r3, r5
 800547e:	4620      	mov	r0, r4
 8005480:	4629      	mov	r1, r5
 8005482:	f7fb f8c1 	bl	8000608 <__aeabi_dmul>
 8005486:	4602      	mov	r2, r0
 8005488:	460b      	mov	r3, r1
 800548a:	4640      	mov	r0, r8
 800548c:	4649      	mov	r1, r9
 800548e:	f7fb f8bb 	bl	8000608 <__aeabi_dmul>
 8005492:	a33f      	add	r3, pc, #252	; (adr r3, 8005590 <__ieee754_pow+0x3e0>)
 8005494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005498:	f7fb f8b6 	bl	8000608 <__aeabi_dmul>
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4650      	mov	r0, sl
 80054a2:	4659      	mov	r1, fp
 80054a4:	f7fa fef8 	bl	8000298 <__aeabi_dsub>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4680      	mov	r8, r0
 80054ae:	4689      	mov	r9, r1
 80054b0:	4630      	mov	r0, r6
 80054b2:	4639      	mov	r1, r7
 80054b4:	f7fa fef2 	bl	800029c <__adddf3>
 80054b8:	2000      	movs	r0, #0
 80054ba:	4632      	mov	r2, r6
 80054bc:	463b      	mov	r3, r7
 80054be:	4604      	mov	r4, r0
 80054c0:	460d      	mov	r5, r1
 80054c2:	f7fa fee9 	bl	8000298 <__aeabi_dsub>
 80054c6:	4602      	mov	r2, r0
 80054c8:	460b      	mov	r3, r1
 80054ca:	4640      	mov	r0, r8
 80054cc:	4649      	mov	r1, r9
 80054ce:	f7fa fee3 	bl	8000298 <__aeabi_dsub>
 80054d2:	9b04      	ldr	r3, [sp, #16]
 80054d4:	9a06      	ldr	r2, [sp, #24]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	4313      	orrs	r3, r2
 80054da:	4682      	mov	sl, r0
 80054dc:	468b      	mov	fp, r1
 80054de:	f040 81e7 	bne.w	80058b0 <__ieee754_pow+0x700>
 80054e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005598 <__ieee754_pow+0x3e8>
 80054e6:	eeb0 8a47 	vmov.f32	s16, s14
 80054ea:	eef0 8a67 	vmov.f32	s17, s15
 80054ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80054f2:	2600      	movs	r6, #0
 80054f4:	4632      	mov	r2, r6
 80054f6:	463b      	mov	r3, r7
 80054f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054fc:	f7fa fecc 	bl	8000298 <__aeabi_dsub>
 8005500:	4622      	mov	r2, r4
 8005502:	462b      	mov	r3, r5
 8005504:	f7fb f880 	bl	8000608 <__aeabi_dmul>
 8005508:	e9dd 2300 	ldrd	r2, r3, [sp]
 800550c:	4680      	mov	r8, r0
 800550e:	4689      	mov	r9, r1
 8005510:	4650      	mov	r0, sl
 8005512:	4659      	mov	r1, fp
 8005514:	f7fb f878 	bl	8000608 <__aeabi_dmul>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4640      	mov	r0, r8
 800551e:	4649      	mov	r1, r9
 8005520:	f7fa febc 	bl	800029c <__adddf3>
 8005524:	4632      	mov	r2, r6
 8005526:	463b      	mov	r3, r7
 8005528:	4680      	mov	r8, r0
 800552a:	4689      	mov	r9, r1
 800552c:	4620      	mov	r0, r4
 800552e:	4629      	mov	r1, r5
 8005530:	f7fb f86a 	bl	8000608 <__aeabi_dmul>
 8005534:	460b      	mov	r3, r1
 8005536:	4604      	mov	r4, r0
 8005538:	460d      	mov	r5, r1
 800553a:	4602      	mov	r2, r0
 800553c:	4649      	mov	r1, r9
 800553e:	4640      	mov	r0, r8
 8005540:	f7fa feac 	bl	800029c <__adddf3>
 8005544:	4b19      	ldr	r3, [pc, #100]	; (80055ac <__ieee754_pow+0x3fc>)
 8005546:	4299      	cmp	r1, r3
 8005548:	ec45 4b19 	vmov	d9, r4, r5
 800554c:	4606      	mov	r6, r0
 800554e:	460f      	mov	r7, r1
 8005550:	468b      	mov	fp, r1
 8005552:	f340 82f1 	ble.w	8005b38 <__ieee754_pow+0x988>
 8005556:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800555a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800555e:	4303      	orrs	r3, r0
 8005560:	f000 81e4 	beq.w	800592c <__ieee754_pow+0x77c>
 8005564:	ec51 0b18 	vmov	r0, r1, d8
 8005568:	2200      	movs	r2, #0
 800556a:	2300      	movs	r3, #0
 800556c:	f7fb fabe 	bl	8000aec <__aeabi_dcmplt>
 8005570:	3800      	subs	r0, #0
 8005572:	bf18      	it	ne
 8005574:	2001      	movne	r0, #1
 8005576:	e72b      	b.n	80053d0 <__ieee754_pow+0x220>
 8005578:	60000000 	.word	0x60000000
 800557c:	3ff71547 	.word	0x3ff71547
 8005580:	f85ddf44 	.word	0xf85ddf44
 8005584:	3e54ae0b 	.word	0x3e54ae0b
 8005588:	55555555 	.word	0x55555555
 800558c:	3fd55555 	.word	0x3fd55555
 8005590:	652b82fe 	.word	0x652b82fe
 8005594:	3ff71547 	.word	0x3ff71547
 8005598:	00000000 	.word	0x00000000
 800559c:	bff00000 	.word	0xbff00000
 80055a0:	3ff00000 	.word	0x3ff00000
 80055a4:	3fd00000 	.word	0x3fd00000
 80055a8:	3fe00000 	.word	0x3fe00000
 80055ac:	408fffff 	.word	0x408fffff
 80055b0:	4bd5      	ldr	r3, [pc, #852]	; (8005908 <__ieee754_pow+0x758>)
 80055b2:	402b      	ands	r3, r5
 80055b4:	2200      	movs	r2, #0
 80055b6:	b92b      	cbnz	r3, 80055c4 <__ieee754_pow+0x414>
 80055b8:	4bd4      	ldr	r3, [pc, #848]	; (800590c <__ieee754_pow+0x75c>)
 80055ba:	f7fb f825 	bl	8000608 <__aeabi_dmul>
 80055be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80055c2:	460c      	mov	r4, r1
 80055c4:	1523      	asrs	r3, r4, #20
 80055c6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80055ca:	4413      	add	r3, r2
 80055cc:	9305      	str	r3, [sp, #20]
 80055ce:	4bd0      	ldr	r3, [pc, #832]	; (8005910 <__ieee754_pow+0x760>)
 80055d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80055d4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80055d8:	429c      	cmp	r4, r3
 80055da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80055de:	dd08      	ble.n	80055f2 <__ieee754_pow+0x442>
 80055e0:	4bcc      	ldr	r3, [pc, #816]	; (8005914 <__ieee754_pow+0x764>)
 80055e2:	429c      	cmp	r4, r3
 80055e4:	f340 8162 	ble.w	80058ac <__ieee754_pow+0x6fc>
 80055e8:	9b05      	ldr	r3, [sp, #20]
 80055ea:	3301      	adds	r3, #1
 80055ec:	9305      	str	r3, [sp, #20]
 80055ee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80055f2:	2400      	movs	r4, #0
 80055f4:	00e3      	lsls	r3, r4, #3
 80055f6:	9307      	str	r3, [sp, #28]
 80055f8:	4bc7      	ldr	r3, [pc, #796]	; (8005918 <__ieee754_pow+0x768>)
 80055fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80055fe:	ed93 7b00 	vldr	d7, [r3]
 8005602:	4629      	mov	r1, r5
 8005604:	ec53 2b17 	vmov	r2, r3, d7
 8005608:	eeb0 9a47 	vmov.f32	s18, s14
 800560c:	eef0 9a67 	vmov.f32	s19, s15
 8005610:	4682      	mov	sl, r0
 8005612:	f7fa fe41 	bl	8000298 <__aeabi_dsub>
 8005616:	4652      	mov	r2, sl
 8005618:	4606      	mov	r6, r0
 800561a:	460f      	mov	r7, r1
 800561c:	462b      	mov	r3, r5
 800561e:	ec51 0b19 	vmov	r0, r1, d9
 8005622:	f7fa fe3b 	bl	800029c <__adddf3>
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	2000      	movs	r0, #0
 800562c:	49bb      	ldr	r1, [pc, #748]	; (800591c <__ieee754_pow+0x76c>)
 800562e:	f7fb f915 	bl	800085c <__aeabi_ddiv>
 8005632:	ec41 0b1a 	vmov	d10, r0, r1
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	4630      	mov	r0, r6
 800563c:	4639      	mov	r1, r7
 800563e:	f7fa ffe3 	bl	8000608 <__aeabi_dmul>
 8005642:	2300      	movs	r3, #0
 8005644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005648:	9302      	str	r3, [sp, #8]
 800564a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800564e:	46ab      	mov	fp, r5
 8005650:	106d      	asrs	r5, r5, #1
 8005652:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005656:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800565a:	ec41 0b18 	vmov	d8, r0, r1
 800565e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005662:	2200      	movs	r2, #0
 8005664:	4640      	mov	r0, r8
 8005666:	4649      	mov	r1, r9
 8005668:	4614      	mov	r4, r2
 800566a:	461d      	mov	r5, r3
 800566c:	f7fa ffcc 	bl	8000608 <__aeabi_dmul>
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	4630      	mov	r0, r6
 8005676:	4639      	mov	r1, r7
 8005678:	f7fa fe0e 	bl	8000298 <__aeabi_dsub>
 800567c:	ec53 2b19 	vmov	r2, r3, d9
 8005680:	4606      	mov	r6, r0
 8005682:	460f      	mov	r7, r1
 8005684:	4620      	mov	r0, r4
 8005686:	4629      	mov	r1, r5
 8005688:	f7fa fe06 	bl	8000298 <__aeabi_dsub>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4650      	mov	r0, sl
 8005692:	4659      	mov	r1, fp
 8005694:	f7fa fe00 	bl	8000298 <__aeabi_dsub>
 8005698:	4642      	mov	r2, r8
 800569a:	464b      	mov	r3, r9
 800569c:	f7fa ffb4 	bl	8000608 <__aeabi_dmul>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4630      	mov	r0, r6
 80056a6:	4639      	mov	r1, r7
 80056a8:	f7fa fdf6 	bl	8000298 <__aeabi_dsub>
 80056ac:	ec53 2b1a 	vmov	r2, r3, d10
 80056b0:	f7fa ffaa 	bl	8000608 <__aeabi_dmul>
 80056b4:	ec53 2b18 	vmov	r2, r3, d8
 80056b8:	ec41 0b19 	vmov	d9, r0, r1
 80056bc:	ec51 0b18 	vmov	r0, r1, d8
 80056c0:	f7fa ffa2 	bl	8000608 <__aeabi_dmul>
 80056c4:	a37c      	add	r3, pc, #496	; (adr r3, 80058b8 <__ieee754_pow+0x708>)
 80056c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ca:	4604      	mov	r4, r0
 80056cc:	460d      	mov	r5, r1
 80056ce:	f7fa ff9b 	bl	8000608 <__aeabi_dmul>
 80056d2:	a37b      	add	r3, pc, #492	; (adr r3, 80058c0 <__ieee754_pow+0x710>)
 80056d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d8:	f7fa fde0 	bl	800029c <__adddf3>
 80056dc:	4622      	mov	r2, r4
 80056de:	462b      	mov	r3, r5
 80056e0:	f7fa ff92 	bl	8000608 <__aeabi_dmul>
 80056e4:	a378      	add	r3, pc, #480	; (adr r3, 80058c8 <__ieee754_pow+0x718>)
 80056e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ea:	f7fa fdd7 	bl	800029c <__adddf3>
 80056ee:	4622      	mov	r2, r4
 80056f0:	462b      	mov	r3, r5
 80056f2:	f7fa ff89 	bl	8000608 <__aeabi_dmul>
 80056f6:	a376      	add	r3, pc, #472	; (adr r3, 80058d0 <__ieee754_pow+0x720>)
 80056f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fc:	f7fa fdce 	bl	800029c <__adddf3>
 8005700:	4622      	mov	r2, r4
 8005702:	462b      	mov	r3, r5
 8005704:	f7fa ff80 	bl	8000608 <__aeabi_dmul>
 8005708:	a373      	add	r3, pc, #460	; (adr r3, 80058d8 <__ieee754_pow+0x728>)
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	f7fa fdc5 	bl	800029c <__adddf3>
 8005712:	4622      	mov	r2, r4
 8005714:	462b      	mov	r3, r5
 8005716:	f7fa ff77 	bl	8000608 <__aeabi_dmul>
 800571a:	a371      	add	r3, pc, #452	; (adr r3, 80058e0 <__ieee754_pow+0x730>)
 800571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005720:	f7fa fdbc 	bl	800029c <__adddf3>
 8005724:	4622      	mov	r2, r4
 8005726:	4606      	mov	r6, r0
 8005728:	460f      	mov	r7, r1
 800572a:	462b      	mov	r3, r5
 800572c:	4620      	mov	r0, r4
 800572e:	4629      	mov	r1, r5
 8005730:	f7fa ff6a 	bl	8000608 <__aeabi_dmul>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	4630      	mov	r0, r6
 800573a:	4639      	mov	r1, r7
 800573c:	f7fa ff64 	bl	8000608 <__aeabi_dmul>
 8005740:	4642      	mov	r2, r8
 8005742:	4604      	mov	r4, r0
 8005744:	460d      	mov	r5, r1
 8005746:	464b      	mov	r3, r9
 8005748:	ec51 0b18 	vmov	r0, r1, d8
 800574c:	f7fa fda6 	bl	800029c <__adddf3>
 8005750:	ec53 2b19 	vmov	r2, r3, d9
 8005754:	f7fa ff58 	bl	8000608 <__aeabi_dmul>
 8005758:	4622      	mov	r2, r4
 800575a:	462b      	mov	r3, r5
 800575c:	f7fa fd9e 	bl	800029c <__adddf3>
 8005760:	4642      	mov	r2, r8
 8005762:	4682      	mov	sl, r0
 8005764:	468b      	mov	fp, r1
 8005766:	464b      	mov	r3, r9
 8005768:	4640      	mov	r0, r8
 800576a:	4649      	mov	r1, r9
 800576c:	f7fa ff4c 	bl	8000608 <__aeabi_dmul>
 8005770:	4b6b      	ldr	r3, [pc, #428]	; (8005920 <__ieee754_pow+0x770>)
 8005772:	2200      	movs	r2, #0
 8005774:	4606      	mov	r6, r0
 8005776:	460f      	mov	r7, r1
 8005778:	f7fa fd90 	bl	800029c <__adddf3>
 800577c:	4652      	mov	r2, sl
 800577e:	465b      	mov	r3, fp
 8005780:	f7fa fd8c 	bl	800029c <__adddf3>
 8005784:	2000      	movs	r0, #0
 8005786:	4604      	mov	r4, r0
 8005788:	460d      	mov	r5, r1
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	4640      	mov	r0, r8
 8005790:	4649      	mov	r1, r9
 8005792:	f7fa ff39 	bl	8000608 <__aeabi_dmul>
 8005796:	4b62      	ldr	r3, [pc, #392]	; (8005920 <__ieee754_pow+0x770>)
 8005798:	4680      	mov	r8, r0
 800579a:	4689      	mov	r9, r1
 800579c:	2200      	movs	r2, #0
 800579e:	4620      	mov	r0, r4
 80057a0:	4629      	mov	r1, r5
 80057a2:	f7fa fd79 	bl	8000298 <__aeabi_dsub>
 80057a6:	4632      	mov	r2, r6
 80057a8:	463b      	mov	r3, r7
 80057aa:	f7fa fd75 	bl	8000298 <__aeabi_dsub>
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	4650      	mov	r0, sl
 80057b4:	4659      	mov	r1, fp
 80057b6:	f7fa fd6f 	bl	8000298 <__aeabi_dsub>
 80057ba:	ec53 2b18 	vmov	r2, r3, d8
 80057be:	f7fa ff23 	bl	8000608 <__aeabi_dmul>
 80057c2:	4622      	mov	r2, r4
 80057c4:	4606      	mov	r6, r0
 80057c6:	460f      	mov	r7, r1
 80057c8:	462b      	mov	r3, r5
 80057ca:	ec51 0b19 	vmov	r0, r1, d9
 80057ce:	f7fa ff1b 	bl	8000608 <__aeabi_dmul>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	4630      	mov	r0, r6
 80057d8:	4639      	mov	r1, r7
 80057da:	f7fa fd5f 	bl	800029c <__adddf3>
 80057de:	4606      	mov	r6, r0
 80057e0:	460f      	mov	r7, r1
 80057e2:	4602      	mov	r2, r0
 80057e4:	460b      	mov	r3, r1
 80057e6:	4640      	mov	r0, r8
 80057e8:	4649      	mov	r1, r9
 80057ea:	f7fa fd57 	bl	800029c <__adddf3>
 80057ee:	a33e      	add	r3, pc, #248	; (adr r3, 80058e8 <__ieee754_pow+0x738>)
 80057f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f4:	2000      	movs	r0, #0
 80057f6:	4604      	mov	r4, r0
 80057f8:	460d      	mov	r5, r1
 80057fa:	f7fa ff05 	bl	8000608 <__aeabi_dmul>
 80057fe:	4642      	mov	r2, r8
 8005800:	ec41 0b18 	vmov	d8, r0, r1
 8005804:	464b      	mov	r3, r9
 8005806:	4620      	mov	r0, r4
 8005808:	4629      	mov	r1, r5
 800580a:	f7fa fd45 	bl	8000298 <__aeabi_dsub>
 800580e:	4602      	mov	r2, r0
 8005810:	460b      	mov	r3, r1
 8005812:	4630      	mov	r0, r6
 8005814:	4639      	mov	r1, r7
 8005816:	f7fa fd3f 	bl	8000298 <__aeabi_dsub>
 800581a:	a335      	add	r3, pc, #212	; (adr r3, 80058f0 <__ieee754_pow+0x740>)
 800581c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005820:	f7fa fef2 	bl	8000608 <__aeabi_dmul>
 8005824:	a334      	add	r3, pc, #208	; (adr r3, 80058f8 <__ieee754_pow+0x748>)
 8005826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582a:	4606      	mov	r6, r0
 800582c:	460f      	mov	r7, r1
 800582e:	4620      	mov	r0, r4
 8005830:	4629      	mov	r1, r5
 8005832:	f7fa fee9 	bl	8000608 <__aeabi_dmul>
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	4630      	mov	r0, r6
 800583c:	4639      	mov	r1, r7
 800583e:	f7fa fd2d 	bl	800029c <__adddf3>
 8005842:	9a07      	ldr	r2, [sp, #28]
 8005844:	4b37      	ldr	r3, [pc, #220]	; (8005924 <__ieee754_pow+0x774>)
 8005846:	4413      	add	r3, r2
 8005848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584c:	f7fa fd26 	bl	800029c <__adddf3>
 8005850:	4682      	mov	sl, r0
 8005852:	9805      	ldr	r0, [sp, #20]
 8005854:	468b      	mov	fp, r1
 8005856:	f7fa fe6d 	bl	8000534 <__aeabi_i2d>
 800585a:	9a07      	ldr	r2, [sp, #28]
 800585c:	4b32      	ldr	r3, [pc, #200]	; (8005928 <__ieee754_pow+0x778>)
 800585e:	4413      	add	r3, r2
 8005860:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005864:	4606      	mov	r6, r0
 8005866:	460f      	mov	r7, r1
 8005868:	4652      	mov	r2, sl
 800586a:	465b      	mov	r3, fp
 800586c:	ec51 0b18 	vmov	r0, r1, d8
 8005870:	f7fa fd14 	bl	800029c <__adddf3>
 8005874:	4642      	mov	r2, r8
 8005876:	464b      	mov	r3, r9
 8005878:	f7fa fd10 	bl	800029c <__adddf3>
 800587c:	4632      	mov	r2, r6
 800587e:	463b      	mov	r3, r7
 8005880:	f7fa fd0c 	bl	800029c <__adddf3>
 8005884:	2000      	movs	r0, #0
 8005886:	4632      	mov	r2, r6
 8005888:	463b      	mov	r3, r7
 800588a:	4604      	mov	r4, r0
 800588c:	460d      	mov	r5, r1
 800588e:	f7fa fd03 	bl	8000298 <__aeabi_dsub>
 8005892:	4642      	mov	r2, r8
 8005894:	464b      	mov	r3, r9
 8005896:	f7fa fcff 	bl	8000298 <__aeabi_dsub>
 800589a:	ec53 2b18 	vmov	r2, r3, d8
 800589e:	f7fa fcfb 	bl	8000298 <__aeabi_dsub>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	4650      	mov	r0, sl
 80058a8:	4659      	mov	r1, fp
 80058aa:	e610      	b.n	80054ce <__ieee754_pow+0x31e>
 80058ac:	2401      	movs	r4, #1
 80058ae:	e6a1      	b.n	80055f4 <__ieee754_pow+0x444>
 80058b0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005900 <__ieee754_pow+0x750>
 80058b4:	e617      	b.n	80054e6 <__ieee754_pow+0x336>
 80058b6:	bf00      	nop
 80058b8:	4a454eef 	.word	0x4a454eef
 80058bc:	3fca7e28 	.word	0x3fca7e28
 80058c0:	93c9db65 	.word	0x93c9db65
 80058c4:	3fcd864a 	.word	0x3fcd864a
 80058c8:	a91d4101 	.word	0xa91d4101
 80058cc:	3fd17460 	.word	0x3fd17460
 80058d0:	518f264d 	.word	0x518f264d
 80058d4:	3fd55555 	.word	0x3fd55555
 80058d8:	db6fabff 	.word	0xdb6fabff
 80058dc:	3fdb6db6 	.word	0x3fdb6db6
 80058e0:	33333303 	.word	0x33333303
 80058e4:	3fe33333 	.word	0x3fe33333
 80058e8:	e0000000 	.word	0xe0000000
 80058ec:	3feec709 	.word	0x3feec709
 80058f0:	dc3a03fd 	.word	0xdc3a03fd
 80058f4:	3feec709 	.word	0x3feec709
 80058f8:	145b01f5 	.word	0x145b01f5
 80058fc:	be3e2fe0 	.word	0xbe3e2fe0
 8005900:	00000000 	.word	0x00000000
 8005904:	3ff00000 	.word	0x3ff00000
 8005908:	7ff00000 	.word	0x7ff00000
 800590c:	43400000 	.word	0x43400000
 8005910:	0003988e 	.word	0x0003988e
 8005914:	000bb679 	.word	0x000bb679
 8005918:	0800a910 	.word	0x0800a910
 800591c:	3ff00000 	.word	0x3ff00000
 8005920:	40080000 	.word	0x40080000
 8005924:	0800a930 	.word	0x0800a930
 8005928:	0800a920 	.word	0x0800a920
 800592c:	a3b5      	add	r3, pc, #724	; (adr r3, 8005c04 <__ieee754_pow+0xa54>)
 800592e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005932:	4640      	mov	r0, r8
 8005934:	4649      	mov	r1, r9
 8005936:	f7fa fcb1 	bl	800029c <__adddf3>
 800593a:	4622      	mov	r2, r4
 800593c:	ec41 0b1a 	vmov	d10, r0, r1
 8005940:	462b      	mov	r3, r5
 8005942:	4630      	mov	r0, r6
 8005944:	4639      	mov	r1, r7
 8005946:	f7fa fca7 	bl	8000298 <__aeabi_dsub>
 800594a:	4602      	mov	r2, r0
 800594c:	460b      	mov	r3, r1
 800594e:	ec51 0b1a 	vmov	r0, r1, d10
 8005952:	f7fb f8e9 	bl	8000b28 <__aeabi_dcmpgt>
 8005956:	2800      	cmp	r0, #0
 8005958:	f47f ae04 	bne.w	8005564 <__ieee754_pow+0x3b4>
 800595c:	4aa4      	ldr	r2, [pc, #656]	; (8005bf0 <__ieee754_pow+0xa40>)
 800595e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005962:	4293      	cmp	r3, r2
 8005964:	f340 8108 	ble.w	8005b78 <__ieee754_pow+0x9c8>
 8005968:	151b      	asrs	r3, r3, #20
 800596a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800596e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005972:	fa4a f303 	asr.w	r3, sl, r3
 8005976:	445b      	add	r3, fp
 8005978:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800597c:	4e9d      	ldr	r6, [pc, #628]	; (8005bf4 <__ieee754_pow+0xa44>)
 800597e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005982:	4116      	asrs	r6, r2
 8005984:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005988:	2000      	movs	r0, #0
 800598a:	ea23 0106 	bic.w	r1, r3, r6
 800598e:	f1c2 0214 	rsb	r2, r2, #20
 8005992:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005996:	fa4a fa02 	asr.w	sl, sl, r2
 800599a:	f1bb 0f00 	cmp.w	fp, #0
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	4620      	mov	r0, r4
 80059a4:	4629      	mov	r1, r5
 80059a6:	bfb8      	it	lt
 80059a8:	f1ca 0a00 	rsblt	sl, sl, #0
 80059ac:	f7fa fc74 	bl	8000298 <__aeabi_dsub>
 80059b0:	ec41 0b19 	vmov	d9, r0, r1
 80059b4:	4642      	mov	r2, r8
 80059b6:	464b      	mov	r3, r9
 80059b8:	ec51 0b19 	vmov	r0, r1, d9
 80059bc:	f7fa fc6e 	bl	800029c <__adddf3>
 80059c0:	a37b      	add	r3, pc, #492	; (adr r3, 8005bb0 <__ieee754_pow+0xa00>)
 80059c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c6:	2000      	movs	r0, #0
 80059c8:	4604      	mov	r4, r0
 80059ca:	460d      	mov	r5, r1
 80059cc:	f7fa fe1c 	bl	8000608 <__aeabi_dmul>
 80059d0:	ec53 2b19 	vmov	r2, r3, d9
 80059d4:	4606      	mov	r6, r0
 80059d6:	460f      	mov	r7, r1
 80059d8:	4620      	mov	r0, r4
 80059da:	4629      	mov	r1, r5
 80059dc:	f7fa fc5c 	bl	8000298 <__aeabi_dsub>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4640      	mov	r0, r8
 80059e6:	4649      	mov	r1, r9
 80059e8:	f7fa fc56 	bl	8000298 <__aeabi_dsub>
 80059ec:	a372      	add	r3, pc, #456	; (adr r3, 8005bb8 <__ieee754_pow+0xa08>)
 80059ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f2:	f7fa fe09 	bl	8000608 <__aeabi_dmul>
 80059f6:	a372      	add	r3, pc, #456	; (adr r3, 8005bc0 <__ieee754_pow+0xa10>)
 80059f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fc:	4680      	mov	r8, r0
 80059fe:	4689      	mov	r9, r1
 8005a00:	4620      	mov	r0, r4
 8005a02:	4629      	mov	r1, r5
 8005a04:	f7fa fe00 	bl	8000608 <__aeabi_dmul>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4640      	mov	r0, r8
 8005a0e:	4649      	mov	r1, r9
 8005a10:	f7fa fc44 	bl	800029c <__adddf3>
 8005a14:	4604      	mov	r4, r0
 8005a16:	460d      	mov	r5, r1
 8005a18:	4602      	mov	r2, r0
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	4639      	mov	r1, r7
 8005a20:	f7fa fc3c 	bl	800029c <__adddf3>
 8005a24:	4632      	mov	r2, r6
 8005a26:	463b      	mov	r3, r7
 8005a28:	4680      	mov	r8, r0
 8005a2a:	4689      	mov	r9, r1
 8005a2c:	f7fa fc34 	bl	8000298 <__aeabi_dsub>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4620      	mov	r0, r4
 8005a36:	4629      	mov	r1, r5
 8005a38:	f7fa fc2e 	bl	8000298 <__aeabi_dsub>
 8005a3c:	4642      	mov	r2, r8
 8005a3e:	4606      	mov	r6, r0
 8005a40:	460f      	mov	r7, r1
 8005a42:	464b      	mov	r3, r9
 8005a44:	4640      	mov	r0, r8
 8005a46:	4649      	mov	r1, r9
 8005a48:	f7fa fdde 	bl	8000608 <__aeabi_dmul>
 8005a4c:	a35e      	add	r3, pc, #376	; (adr r3, 8005bc8 <__ieee754_pow+0xa18>)
 8005a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a52:	4604      	mov	r4, r0
 8005a54:	460d      	mov	r5, r1
 8005a56:	f7fa fdd7 	bl	8000608 <__aeabi_dmul>
 8005a5a:	a35d      	add	r3, pc, #372	; (adr r3, 8005bd0 <__ieee754_pow+0xa20>)
 8005a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a60:	f7fa fc1a 	bl	8000298 <__aeabi_dsub>
 8005a64:	4622      	mov	r2, r4
 8005a66:	462b      	mov	r3, r5
 8005a68:	f7fa fdce 	bl	8000608 <__aeabi_dmul>
 8005a6c:	a35a      	add	r3, pc, #360	; (adr r3, 8005bd8 <__ieee754_pow+0xa28>)
 8005a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a72:	f7fa fc13 	bl	800029c <__adddf3>
 8005a76:	4622      	mov	r2, r4
 8005a78:	462b      	mov	r3, r5
 8005a7a:	f7fa fdc5 	bl	8000608 <__aeabi_dmul>
 8005a7e:	a358      	add	r3, pc, #352	; (adr r3, 8005be0 <__ieee754_pow+0xa30>)
 8005a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a84:	f7fa fc08 	bl	8000298 <__aeabi_dsub>
 8005a88:	4622      	mov	r2, r4
 8005a8a:	462b      	mov	r3, r5
 8005a8c:	f7fa fdbc 	bl	8000608 <__aeabi_dmul>
 8005a90:	a355      	add	r3, pc, #340	; (adr r3, 8005be8 <__ieee754_pow+0xa38>)
 8005a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a96:	f7fa fc01 	bl	800029c <__adddf3>
 8005a9a:	4622      	mov	r2, r4
 8005a9c:	462b      	mov	r3, r5
 8005a9e:	f7fa fdb3 	bl	8000608 <__aeabi_dmul>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	4640      	mov	r0, r8
 8005aa8:	4649      	mov	r1, r9
 8005aaa:	f7fa fbf5 	bl	8000298 <__aeabi_dsub>
 8005aae:	4604      	mov	r4, r0
 8005ab0:	460d      	mov	r5, r1
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4640      	mov	r0, r8
 8005ab8:	4649      	mov	r1, r9
 8005aba:	f7fa fda5 	bl	8000608 <__aeabi_dmul>
 8005abe:	2200      	movs	r2, #0
 8005ac0:	ec41 0b19 	vmov	d9, r0, r1
 8005ac4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ac8:	4620      	mov	r0, r4
 8005aca:	4629      	mov	r1, r5
 8005acc:	f7fa fbe4 	bl	8000298 <__aeabi_dsub>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	ec51 0b19 	vmov	r0, r1, d9
 8005ad8:	f7fa fec0 	bl	800085c <__aeabi_ddiv>
 8005adc:	4632      	mov	r2, r6
 8005ade:	4604      	mov	r4, r0
 8005ae0:	460d      	mov	r5, r1
 8005ae2:	463b      	mov	r3, r7
 8005ae4:	4640      	mov	r0, r8
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	f7fa fd8e 	bl	8000608 <__aeabi_dmul>
 8005aec:	4632      	mov	r2, r6
 8005aee:	463b      	mov	r3, r7
 8005af0:	f7fa fbd4 	bl	800029c <__adddf3>
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	4620      	mov	r0, r4
 8005afa:	4629      	mov	r1, r5
 8005afc:	f7fa fbcc 	bl	8000298 <__aeabi_dsub>
 8005b00:	4642      	mov	r2, r8
 8005b02:	464b      	mov	r3, r9
 8005b04:	f7fa fbc8 	bl	8000298 <__aeabi_dsub>
 8005b08:	460b      	mov	r3, r1
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	493a      	ldr	r1, [pc, #232]	; (8005bf8 <__ieee754_pow+0xa48>)
 8005b0e:	2000      	movs	r0, #0
 8005b10:	f7fa fbc2 	bl	8000298 <__aeabi_dsub>
 8005b14:	ec41 0b10 	vmov	d0, r0, r1
 8005b18:	ee10 3a90 	vmov	r3, s1
 8005b1c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005b20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b24:	da2b      	bge.n	8005b7e <__ieee754_pow+0x9ce>
 8005b26:	4650      	mov	r0, sl
 8005b28:	f000 f966 	bl	8005df8 <scalbn>
 8005b2c:	ec51 0b10 	vmov	r0, r1, d0
 8005b30:	ec53 2b18 	vmov	r2, r3, d8
 8005b34:	f7ff bbed 	b.w	8005312 <__ieee754_pow+0x162>
 8005b38:	4b30      	ldr	r3, [pc, #192]	; (8005bfc <__ieee754_pow+0xa4c>)
 8005b3a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005b3e:	429e      	cmp	r6, r3
 8005b40:	f77f af0c 	ble.w	800595c <__ieee754_pow+0x7ac>
 8005b44:	4b2e      	ldr	r3, [pc, #184]	; (8005c00 <__ieee754_pow+0xa50>)
 8005b46:	440b      	add	r3, r1
 8005b48:	4303      	orrs	r3, r0
 8005b4a:	d009      	beq.n	8005b60 <__ieee754_pow+0x9b0>
 8005b4c:	ec51 0b18 	vmov	r0, r1, d8
 8005b50:	2200      	movs	r2, #0
 8005b52:	2300      	movs	r3, #0
 8005b54:	f7fa ffca 	bl	8000aec <__aeabi_dcmplt>
 8005b58:	3800      	subs	r0, #0
 8005b5a:	bf18      	it	ne
 8005b5c:	2001      	movne	r0, #1
 8005b5e:	e447      	b.n	80053f0 <__ieee754_pow+0x240>
 8005b60:	4622      	mov	r2, r4
 8005b62:	462b      	mov	r3, r5
 8005b64:	f7fa fb98 	bl	8000298 <__aeabi_dsub>
 8005b68:	4642      	mov	r2, r8
 8005b6a:	464b      	mov	r3, r9
 8005b6c:	f7fa ffd2 	bl	8000b14 <__aeabi_dcmpge>
 8005b70:	2800      	cmp	r0, #0
 8005b72:	f43f aef3 	beq.w	800595c <__ieee754_pow+0x7ac>
 8005b76:	e7e9      	b.n	8005b4c <__ieee754_pow+0x99c>
 8005b78:	f04f 0a00 	mov.w	sl, #0
 8005b7c:	e71a      	b.n	80059b4 <__ieee754_pow+0x804>
 8005b7e:	ec51 0b10 	vmov	r0, r1, d0
 8005b82:	4619      	mov	r1, r3
 8005b84:	e7d4      	b.n	8005b30 <__ieee754_pow+0x980>
 8005b86:	491c      	ldr	r1, [pc, #112]	; (8005bf8 <__ieee754_pow+0xa48>)
 8005b88:	2000      	movs	r0, #0
 8005b8a:	f7ff bb30 	b.w	80051ee <__ieee754_pow+0x3e>
 8005b8e:	2000      	movs	r0, #0
 8005b90:	2100      	movs	r1, #0
 8005b92:	f7ff bb2c 	b.w	80051ee <__ieee754_pow+0x3e>
 8005b96:	4630      	mov	r0, r6
 8005b98:	4639      	mov	r1, r7
 8005b9a:	f7ff bb28 	b.w	80051ee <__ieee754_pow+0x3e>
 8005b9e:	9204      	str	r2, [sp, #16]
 8005ba0:	f7ff bb7a 	b.w	8005298 <__ieee754_pow+0xe8>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f7ff bb64 	b.w	8005272 <__ieee754_pow+0xc2>
 8005baa:	bf00      	nop
 8005bac:	f3af 8000 	nop.w
 8005bb0:	00000000 	.word	0x00000000
 8005bb4:	3fe62e43 	.word	0x3fe62e43
 8005bb8:	fefa39ef 	.word	0xfefa39ef
 8005bbc:	3fe62e42 	.word	0x3fe62e42
 8005bc0:	0ca86c39 	.word	0x0ca86c39
 8005bc4:	be205c61 	.word	0xbe205c61
 8005bc8:	72bea4d0 	.word	0x72bea4d0
 8005bcc:	3e663769 	.word	0x3e663769
 8005bd0:	c5d26bf1 	.word	0xc5d26bf1
 8005bd4:	3ebbbd41 	.word	0x3ebbbd41
 8005bd8:	af25de2c 	.word	0xaf25de2c
 8005bdc:	3f11566a 	.word	0x3f11566a
 8005be0:	16bebd93 	.word	0x16bebd93
 8005be4:	3f66c16c 	.word	0x3f66c16c
 8005be8:	5555553e 	.word	0x5555553e
 8005bec:	3fc55555 	.word	0x3fc55555
 8005bf0:	3fe00000 	.word	0x3fe00000
 8005bf4:	000fffff 	.word	0x000fffff
 8005bf8:	3ff00000 	.word	0x3ff00000
 8005bfc:	4090cbff 	.word	0x4090cbff
 8005c00:	3f6f3400 	.word	0x3f6f3400
 8005c04:	652b82fe 	.word	0x652b82fe
 8005c08:	3c971547 	.word	0x3c971547

08005c0c <__ieee754_sqrt>:
 8005c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c10:	ec55 4b10 	vmov	r4, r5, d0
 8005c14:	4e55      	ldr	r6, [pc, #340]	; (8005d6c <__ieee754_sqrt+0x160>)
 8005c16:	43ae      	bics	r6, r5
 8005c18:	ee10 0a10 	vmov	r0, s0
 8005c1c:	ee10 3a10 	vmov	r3, s0
 8005c20:	462a      	mov	r2, r5
 8005c22:	4629      	mov	r1, r5
 8005c24:	d110      	bne.n	8005c48 <__ieee754_sqrt+0x3c>
 8005c26:	ee10 2a10 	vmov	r2, s0
 8005c2a:	462b      	mov	r3, r5
 8005c2c:	f7fa fcec 	bl	8000608 <__aeabi_dmul>
 8005c30:	4602      	mov	r2, r0
 8005c32:	460b      	mov	r3, r1
 8005c34:	4620      	mov	r0, r4
 8005c36:	4629      	mov	r1, r5
 8005c38:	f7fa fb30 	bl	800029c <__adddf3>
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	460d      	mov	r5, r1
 8005c40:	ec45 4b10 	vmov	d0, r4, r5
 8005c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c48:	2d00      	cmp	r5, #0
 8005c4a:	dc10      	bgt.n	8005c6e <__ieee754_sqrt+0x62>
 8005c4c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005c50:	4330      	orrs	r0, r6
 8005c52:	d0f5      	beq.n	8005c40 <__ieee754_sqrt+0x34>
 8005c54:	b15d      	cbz	r5, 8005c6e <__ieee754_sqrt+0x62>
 8005c56:	ee10 2a10 	vmov	r2, s0
 8005c5a:	462b      	mov	r3, r5
 8005c5c:	ee10 0a10 	vmov	r0, s0
 8005c60:	f7fa fb1a 	bl	8000298 <__aeabi_dsub>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	f7fa fdf8 	bl	800085c <__aeabi_ddiv>
 8005c6c:	e7e6      	b.n	8005c3c <__ieee754_sqrt+0x30>
 8005c6e:	1512      	asrs	r2, r2, #20
 8005c70:	d074      	beq.n	8005d5c <__ieee754_sqrt+0x150>
 8005c72:	07d4      	lsls	r4, r2, #31
 8005c74:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005c78:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8005c7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005c80:	bf5e      	ittt	pl
 8005c82:	0fda      	lsrpl	r2, r3, #31
 8005c84:	005b      	lslpl	r3, r3, #1
 8005c86:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8005c8a:	2400      	movs	r4, #0
 8005c8c:	0fda      	lsrs	r2, r3, #31
 8005c8e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005c92:	107f      	asrs	r7, r7, #1
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	2516      	movs	r5, #22
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005c9e:	1886      	adds	r6, r0, r2
 8005ca0:	428e      	cmp	r6, r1
 8005ca2:	bfde      	ittt	le
 8005ca4:	1b89      	suble	r1, r1, r6
 8005ca6:	18b0      	addle	r0, r6, r2
 8005ca8:	18a4      	addle	r4, r4, r2
 8005caa:	0049      	lsls	r1, r1, #1
 8005cac:	3d01      	subs	r5, #1
 8005cae:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8005cb2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005cb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005cba:	d1f0      	bne.n	8005c9e <__ieee754_sqrt+0x92>
 8005cbc:	462a      	mov	r2, r5
 8005cbe:	f04f 0e20 	mov.w	lr, #32
 8005cc2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005cc6:	4281      	cmp	r1, r0
 8005cc8:	eb06 0c05 	add.w	ip, r6, r5
 8005ccc:	dc02      	bgt.n	8005cd4 <__ieee754_sqrt+0xc8>
 8005cce:	d113      	bne.n	8005cf8 <__ieee754_sqrt+0xec>
 8005cd0:	459c      	cmp	ip, r3
 8005cd2:	d811      	bhi.n	8005cf8 <__ieee754_sqrt+0xec>
 8005cd4:	f1bc 0f00 	cmp.w	ip, #0
 8005cd8:	eb0c 0506 	add.w	r5, ip, r6
 8005cdc:	da43      	bge.n	8005d66 <__ieee754_sqrt+0x15a>
 8005cde:	2d00      	cmp	r5, #0
 8005ce0:	db41      	blt.n	8005d66 <__ieee754_sqrt+0x15a>
 8005ce2:	f100 0801 	add.w	r8, r0, #1
 8005ce6:	1a09      	subs	r1, r1, r0
 8005ce8:	459c      	cmp	ip, r3
 8005cea:	bf88      	it	hi
 8005cec:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8005cf0:	eba3 030c 	sub.w	r3, r3, ip
 8005cf4:	4432      	add	r2, r6
 8005cf6:	4640      	mov	r0, r8
 8005cf8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005cfc:	f1be 0e01 	subs.w	lr, lr, #1
 8005d00:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8005d04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005d08:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005d0c:	d1db      	bne.n	8005cc6 <__ieee754_sqrt+0xba>
 8005d0e:	430b      	orrs	r3, r1
 8005d10:	d006      	beq.n	8005d20 <__ieee754_sqrt+0x114>
 8005d12:	1c50      	adds	r0, r2, #1
 8005d14:	bf13      	iteet	ne
 8005d16:	3201      	addne	r2, #1
 8005d18:	3401      	addeq	r4, #1
 8005d1a:	4672      	moveq	r2, lr
 8005d1c:	f022 0201 	bicne.w	r2, r2, #1
 8005d20:	1063      	asrs	r3, r4, #1
 8005d22:	0852      	lsrs	r2, r2, #1
 8005d24:	07e1      	lsls	r1, r4, #31
 8005d26:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005d2a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005d2e:	bf48      	it	mi
 8005d30:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005d34:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005d38:	4614      	mov	r4, r2
 8005d3a:	e781      	b.n	8005c40 <__ieee754_sqrt+0x34>
 8005d3c:	0ad9      	lsrs	r1, r3, #11
 8005d3e:	3815      	subs	r0, #21
 8005d40:	055b      	lsls	r3, r3, #21
 8005d42:	2900      	cmp	r1, #0
 8005d44:	d0fa      	beq.n	8005d3c <__ieee754_sqrt+0x130>
 8005d46:	02cd      	lsls	r5, r1, #11
 8005d48:	d50a      	bpl.n	8005d60 <__ieee754_sqrt+0x154>
 8005d4a:	f1c2 0420 	rsb	r4, r2, #32
 8005d4e:	fa23 f404 	lsr.w	r4, r3, r4
 8005d52:	1e55      	subs	r5, r2, #1
 8005d54:	4093      	lsls	r3, r2
 8005d56:	4321      	orrs	r1, r4
 8005d58:	1b42      	subs	r2, r0, r5
 8005d5a:	e78a      	b.n	8005c72 <__ieee754_sqrt+0x66>
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	e7f0      	b.n	8005d42 <__ieee754_sqrt+0x136>
 8005d60:	0049      	lsls	r1, r1, #1
 8005d62:	3201      	adds	r2, #1
 8005d64:	e7ef      	b.n	8005d46 <__ieee754_sqrt+0x13a>
 8005d66:	4680      	mov	r8, r0
 8005d68:	e7bd      	b.n	8005ce6 <__ieee754_sqrt+0xda>
 8005d6a:	bf00      	nop
 8005d6c:	7ff00000 	.word	0x7ff00000

08005d70 <with_errno>:
 8005d70:	b570      	push	{r4, r5, r6, lr}
 8005d72:	4604      	mov	r4, r0
 8005d74:	460d      	mov	r5, r1
 8005d76:	4616      	mov	r6, r2
 8005d78:	f000 f8cc 	bl	8005f14 <__errno>
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	6006      	str	r6, [r0, #0]
 8005d80:	4620      	mov	r0, r4
 8005d82:	bd70      	pop	{r4, r5, r6, pc}

08005d84 <xflow>:
 8005d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d86:	4614      	mov	r4, r2
 8005d88:	461d      	mov	r5, r3
 8005d8a:	b108      	cbz	r0, 8005d90 <xflow+0xc>
 8005d8c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005d90:	e9cd 2300 	strd	r2, r3, [sp]
 8005d94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d98:	4620      	mov	r0, r4
 8005d9a:	4629      	mov	r1, r5
 8005d9c:	f7fa fc34 	bl	8000608 <__aeabi_dmul>
 8005da0:	2222      	movs	r2, #34	; 0x22
 8005da2:	b003      	add	sp, #12
 8005da4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005da8:	f7ff bfe2 	b.w	8005d70 <with_errno>

08005dac <__math_uflow>:
 8005dac:	b508      	push	{r3, lr}
 8005dae:	2200      	movs	r2, #0
 8005db0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005db4:	f7ff ffe6 	bl	8005d84 <xflow>
 8005db8:	ec41 0b10 	vmov	d0, r0, r1
 8005dbc:	bd08      	pop	{r3, pc}

08005dbe <__math_oflow>:
 8005dbe:	b508      	push	{r3, lr}
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005dc6:	f7ff ffdd 	bl	8005d84 <xflow>
 8005dca:	ec41 0b10 	vmov	d0, r0, r1
 8005dce:	bd08      	pop	{r3, pc}

08005dd0 <fabs>:
 8005dd0:	ec51 0b10 	vmov	r0, r1, d0
 8005dd4:	ee10 2a10 	vmov	r2, s0
 8005dd8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005ddc:	ec43 2b10 	vmov	d0, r2, r3
 8005de0:	4770      	bx	lr

08005de2 <finite>:
 8005de2:	b082      	sub	sp, #8
 8005de4:	ed8d 0b00 	vstr	d0, [sp]
 8005de8:	9801      	ldr	r0, [sp, #4]
 8005dea:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005dee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005df2:	0fc0      	lsrs	r0, r0, #31
 8005df4:	b002      	add	sp, #8
 8005df6:	4770      	bx	lr

08005df8 <scalbn>:
 8005df8:	b570      	push	{r4, r5, r6, lr}
 8005dfa:	ec55 4b10 	vmov	r4, r5, d0
 8005dfe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005e02:	4606      	mov	r6, r0
 8005e04:	462b      	mov	r3, r5
 8005e06:	b99a      	cbnz	r2, 8005e30 <scalbn+0x38>
 8005e08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005e0c:	4323      	orrs	r3, r4
 8005e0e:	d036      	beq.n	8005e7e <scalbn+0x86>
 8005e10:	4b39      	ldr	r3, [pc, #228]	; (8005ef8 <scalbn+0x100>)
 8005e12:	4629      	mov	r1, r5
 8005e14:	ee10 0a10 	vmov	r0, s0
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f7fa fbf5 	bl	8000608 <__aeabi_dmul>
 8005e1e:	4b37      	ldr	r3, [pc, #220]	; (8005efc <scalbn+0x104>)
 8005e20:	429e      	cmp	r6, r3
 8005e22:	4604      	mov	r4, r0
 8005e24:	460d      	mov	r5, r1
 8005e26:	da10      	bge.n	8005e4a <scalbn+0x52>
 8005e28:	a32b      	add	r3, pc, #172	; (adr r3, 8005ed8 <scalbn+0xe0>)
 8005e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2e:	e03a      	b.n	8005ea6 <scalbn+0xae>
 8005e30:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005e34:	428a      	cmp	r2, r1
 8005e36:	d10c      	bne.n	8005e52 <scalbn+0x5a>
 8005e38:	ee10 2a10 	vmov	r2, s0
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	4629      	mov	r1, r5
 8005e40:	f7fa fa2c 	bl	800029c <__adddf3>
 8005e44:	4604      	mov	r4, r0
 8005e46:	460d      	mov	r5, r1
 8005e48:	e019      	b.n	8005e7e <scalbn+0x86>
 8005e4a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005e4e:	460b      	mov	r3, r1
 8005e50:	3a36      	subs	r2, #54	; 0x36
 8005e52:	4432      	add	r2, r6
 8005e54:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005e58:	428a      	cmp	r2, r1
 8005e5a:	dd08      	ble.n	8005e6e <scalbn+0x76>
 8005e5c:	2d00      	cmp	r5, #0
 8005e5e:	a120      	add	r1, pc, #128	; (adr r1, 8005ee0 <scalbn+0xe8>)
 8005e60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e64:	da1c      	bge.n	8005ea0 <scalbn+0xa8>
 8005e66:	a120      	add	r1, pc, #128	; (adr r1, 8005ee8 <scalbn+0xf0>)
 8005e68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e6c:	e018      	b.n	8005ea0 <scalbn+0xa8>
 8005e6e:	2a00      	cmp	r2, #0
 8005e70:	dd08      	ble.n	8005e84 <scalbn+0x8c>
 8005e72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005e76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005e7e:	ec45 4b10 	vmov	d0, r4, r5
 8005e82:	bd70      	pop	{r4, r5, r6, pc}
 8005e84:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005e88:	da19      	bge.n	8005ebe <scalbn+0xc6>
 8005e8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005e8e:	429e      	cmp	r6, r3
 8005e90:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005e94:	dd0a      	ble.n	8005eac <scalbn+0xb4>
 8005e96:	a112      	add	r1, pc, #72	; (adr r1, 8005ee0 <scalbn+0xe8>)
 8005e98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1e2      	bne.n	8005e66 <scalbn+0x6e>
 8005ea0:	a30f      	add	r3, pc, #60	; (adr r3, 8005ee0 <scalbn+0xe8>)
 8005ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea6:	f7fa fbaf 	bl	8000608 <__aeabi_dmul>
 8005eaa:	e7cb      	b.n	8005e44 <scalbn+0x4c>
 8005eac:	a10a      	add	r1, pc, #40	; (adr r1, 8005ed8 <scalbn+0xe0>)
 8005eae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0b8      	beq.n	8005e28 <scalbn+0x30>
 8005eb6:	a10e      	add	r1, pc, #56	; (adr r1, 8005ef0 <scalbn+0xf8>)
 8005eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ebc:	e7b4      	b.n	8005e28 <scalbn+0x30>
 8005ebe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005ec2:	3236      	adds	r2, #54	; 0x36
 8005ec4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ec8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005ecc:	4620      	mov	r0, r4
 8005ece:	4b0c      	ldr	r3, [pc, #48]	; (8005f00 <scalbn+0x108>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	e7e8      	b.n	8005ea6 <scalbn+0xae>
 8005ed4:	f3af 8000 	nop.w
 8005ed8:	c2f8f359 	.word	0xc2f8f359
 8005edc:	01a56e1f 	.word	0x01a56e1f
 8005ee0:	8800759c 	.word	0x8800759c
 8005ee4:	7e37e43c 	.word	0x7e37e43c
 8005ee8:	8800759c 	.word	0x8800759c
 8005eec:	fe37e43c 	.word	0xfe37e43c
 8005ef0:	c2f8f359 	.word	0xc2f8f359
 8005ef4:	81a56e1f 	.word	0x81a56e1f
 8005ef8:	43500000 	.word	0x43500000
 8005efc:	ffff3cb0 	.word	0xffff3cb0
 8005f00:	3c900000 	.word	0x3c900000

08005f04 <calloc>:
 8005f04:	4b02      	ldr	r3, [pc, #8]	; (8005f10 <calloc+0xc>)
 8005f06:	460a      	mov	r2, r1
 8005f08:	4601      	mov	r1, r0
 8005f0a:	6818      	ldr	r0, [r3, #0]
 8005f0c:	f000 b85e 	b.w	8005fcc <_calloc_r>
 8005f10:	20000094 	.word	0x20000094

08005f14 <__errno>:
 8005f14:	4b01      	ldr	r3, [pc, #4]	; (8005f1c <__errno+0x8>)
 8005f16:	6818      	ldr	r0, [r3, #0]
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	20000094 	.word	0x20000094

08005f20 <__libc_init_array>:
 8005f20:	b570      	push	{r4, r5, r6, lr}
 8005f22:	4d0d      	ldr	r5, [pc, #52]	; (8005f58 <__libc_init_array+0x38>)
 8005f24:	4c0d      	ldr	r4, [pc, #52]	; (8005f5c <__libc_init_array+0x3c>)
 8005f26:	1b64      	subs	r4, r4, r5
 8005f28:	10a4      	asrs	r4, r4, #2
 8005f2a:	2600      	movs	r6, #0
 8005f2c:	42a6      	cmp	r6, r4
 8005f2e:	d109      	bne.n	8005f44 <__libc_init_array+0x24>
 8005f30:	4d0b      	ldr	r5, [pc, #44]	; (8005f60 <__libc_init_array+0x40>)
 8005f32:	4c0c      	ldr	r4, [pc, #48]	; (8005f64 <__libc_init_array+0x44>)
 8005f34:	f004 fcae 	bl	800a894 <_init>
 8005f38:	1b64      	subs	r4, r4, r5
 8005f3a:	10a4      	asrs	r4, r4, #2
 8005f3c:	2600      	movs	r6, #0
 8005f3e:	42a6      	cmp	r6, r4
 8005f40:	d105      	bne.n	8005f4e <__libc_init_array+0x2e>
 8005f42:	bd70      	pop	{r4, r5, r6, pc}
 8005f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f48:	4798      	blx	r3
 8005f4a:	3601      	adds	r6, #1
 8005f4c:	e7ee      	b.n	8005f2c <__libc_init_array+0xc>
 8005f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f52:	4798      	blx	r3
 8005f54:	3601      	adds	r6, #1
 8005f56:	e7f2      	b.n	8005f3e <__libc_init_array+0x1e>
 8005f58:	0800adf4 	.word	0x0800adf4
 8005f5c:	0800adf4 	.word	0x0800adf4
 8005f60:	0800adf4 	.word	0x0800adf4
 8005f64:	0800adf8 	.word	0x0800adf8

08005f68 <malloc>:
 8005f68:	4b02      	ldr	r3, [pc, #8]	; (8005f74 <malloc+0xc>)
 8005f6a:	4601      	mov	r1, r0
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	f000 b8af 	b.w	80060d0 <_malloc_r>
 8005f72:	bf00      	nop
 8005f74:	20000094 	.word	0x20000094

08005f78 <free>:
 8005f78:	4b02      	ldr	r3, [pc, #8]	; (8005f84 <free+0xc>)
 8005f7a:	4601      	mov	r1, r0
 8005f7c:	6818      	ldr	r0, [r3, #0]
 8005f7e:	f000 b83b 	b.w	8005ff8 <_free_r>
 8005f82:	bf00      	nop
 8005f84:	20000094 	.word	0x20000094

08005f88 <memmove>:
 8005f88:	4288      	cmp	r0, r1
 8005f8a:	b510      	push	{r4, lr}
 8005f8c:	eb01 0402 	add.w	r4, r1, r2
 8005f90:	d902      	bls.n	8005f98 <memmove+0x10>
 8005f92:	4284      	cmp	r4, r0
 8005f94:	4623      	mov	r3, r4
 8005f96:	d807      	bhi.n	8005fa8 <memmove+0x20>
 8005f98:	1e43      	subs	r3, r0, #1
 8005f9a:	42a1      	cmp	r1, r4
 8005f9c:	d008      	beq.n	8005fb0 <memmove+0x28>
 8005f9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fa6:	e7f8      	b.n	8005f9a <memmove+0x12>
 8005fa8:	4402      	add	r2, r0
 8005faa:	4601      	mov	r1, r0
 8005fac:	428a      	cmp	r2, r1
 8005fae:	d100      	bne.n	8005fb2 <memmove+0x2a>
 8005fb0:	bd10      	pop	{r4, pc}
 8005fb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fba:	e7f7      	b.n	8005fac <memmove+0x24>

08005fbc <memset>:
 8005fbc:	4402      	add	r2, r0
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d100      	bne.n	8005fc6 <memset+0xa>
 8005fc4:	4770      	bx	lr
 8005fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8005fca:	e7f9      	b.n	8005fc0 <memset+0x4>

08005fcc <_calloc_r>:
 8005fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fce:	fba1 2402 	umull	r2, r4, r1, r2
 8005fd2:	b94c      	cbnz	r4, 8005fe8 <_calloc_r+0x1c>
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	9201      	str	r2, [sp, #4]
 8005fd8:	f000 f87a 	bl	80060d0 <_malloc_r>
 8005fdc:	9a01      	ldr	r2, [sp, #4]
 8005fde:	4605      	mov	r5, r0
 8005fe0:	b930      	cbnz	r0, 8005ff0 <_calloc_r+0x24>
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	b003      	add	sp, #12
 8005fe6:	bd30      	pop	{r4, r5, pc}
 8005fe8:	220c      	movs	r2, #12
 8005fea:	6002      	str	r2, [r0, #0]
 8005fec:	2500      	movs	r5, #0
 8005fee:	e7f8      	b.n	8005fe2 <_calloc_r+0x16>
 8005ff0:	4621      	mov	r1, r4
 8005ff2:	f7ff ffe3 	bl	8005fbc <memset>
 8005ff6:	e7f4      	b.n	8005fe2 <_calloc_r+0x16>

08005ff8 <_free_r>:
 8005ff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ffa:	2900      	cmp	r1, #0
 8005ffc:	d044      	beq.n	8006088 <_free_r+0x90>
 8005ffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006002:	9001      	str	r0, [sp, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	f1a1 0404 	sub.w	r4, r1, #4
 800600a:	bfb8      	it	lt
 800600c:	18e4      	addlt	r4, r4, r3
 800600e:	f003 f94d 	bl	80092ac <__malloc_lock>
 8006012:	4a1e      	ldr	r2, [pc, #120]	; (800608c <_free_r+0x94>)
 8006014:	9801      	ldr	r0, [sp, #4]
 8006016:	6813      	ldr	r3, [r2, #0]
 8006018:	b933      	cbnz	r3, 8006028 <_free_r+0x30>
 800601a:	6063      	str	r3, [r4, #4]
 800601c:	6014      	str	r4, [r2, #0]
 800601e:	b003      	add	sp, #12
 8006020:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006024:	f003 b948 	b.w	80092b8 <__malloc_unlock>
 8006028:	42a3      	cmp	r3, r4
 800602a:	d908      	bls.n	800603e <_free_r+0x46>
 800602c:	6825      	ldr	r5, [r4, #0]
 800602e:	1961      	adds	r1, r4, r5
 8006030:	428b      	cmp	r3, r1
 8006032:	bf01      	itttt	eq
 8006034:	6819      	ldreq	r1, [r3, #0]
 8006036:	685b      	ldreq	r3, [r3, #4]
 8006038:	1949      	addeq	r1, r1, r5
 800603a:	6021      	streq	r1, [r4, #0]
 800603c:	e7ed      	b.n	800601a <_free_r+0x22>
 800603e:	461a      	mov	r2, r3
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	b10b      	cbz	r3, 8006048 <_free_r+0x50>
 8006044:	42a3      	cmp	r3, r4
 8006046:	d9fa      	bls.n	800603e <_free_r+0x46>
 8006048:	6811      	ldr	r1, [r2, #0]
 800604a:	1855      	adds	r5, r2, r1
 800604c:	42a5      	cmp	r5, r4
 800604e:	d10b      	bne.n	8006068 <_free_r+0x70>
 8006050:	6824      	ldr	r4, [r4, #0]
 8006052:	4421      	add	r1, r4
 8006054:	1854      	adds	r4, r2, r1
 8006056:	42a3      	cmp	r3, r4
 8006058:	6011      	str	r1, [r2, #0]
 800605a:	d1e0      	bne.n	800601e <_free_r+0x26>
 800605c:	681c      	ldr	r4, [r3, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	6053      	str	r3, [r2, #4]
 8006062:	4421      	add	r1, r4
 8006064:	6011      	str	r1, [r2, #0]
 8006066:	e7da      	b.n	800601e <_free_r+0x26>
 8006068:	d902      	bls.n	8006070 <_free_r+0x78>
 800606a:	230c      	movs	r3, #12
 800606c:	6003      	str	r3, [r0, #0]
 800606e:	e7d6      	b.n	800601e <_free_r+0x26>
 8006070:	6825      	ldr	r5, [r4, #0]
 8006072:	1961      	adds	r1, r4, r5
 8006074:	428b      	cmp	r3, r1
 8006076:	bf04      	itt	eq
 8006078:	6819      	ldreq	r1, [r3, #0]
 800607a:	685b      	ldreq	r3, [r3, #4]
 800607c:	6063      	str	r3, [r4, #4]
 800607e:	bf04      	itt	eq
 8006080:	1949      	addeq	r1, r1, r5
 8006082:	6021      	streq	r1, [r4, #0]
 8006084:	6054      	str	r4, [r2, #4]
 8006086:	e7ca      	b.n	800601e <_free_r+0x26>
 8006088:	b003      	add	sp, #12
 800608a:	bd30      	pop	{r4, r5, pc}
 800608c:	20000438 	.word	0x20000438

08006090 <sbrk_aligned>:
 8006090:	b570      	push	{r4, r5, r6, lr}
 8006092:	4e0e      	ldr	r6, [pc, #56]	; (80060cc <sbrk_aligned+0x3c>)
 8006094:	460c      	mov	r4, r1
 8006096:	6831      	ldr	r1, [r6, #0]
 8006098:	4605      	mov	r5, r0
 800609a:	b911      	cbnz	r1, 80060a2 <sbrk_aligned+0x12>
 800609c:	f000 ff1e 	bl	8006edc <_sbrk_r>
 80060a0:	6030      	str	r0, [r6, #0]
 80060a2:	4621      	mov	r1, r4
 80060a4:	4628      	mov	r0, r5
 80060a6:	f000 ff19 	bl	8006edc <_sbrk_r>
 80060aa:	1c43      	adds	r3, r0, #1
 80060ac:	d00a      	beq.n	80060c4 <sbrk_aligned+0x34>
 80060ae:	1cc4      	adds	r4, r0, #3
 80060b0:	f024 0403 	bic.w	r4, r4, #3
 80060b4:	42a0      	cmp	r0, r4
 80060b6:	d007      	beq.n	80060c8 <sbrk_aligned+0x38>
 80060b8:	1a21      	subs	r1, r4, r0
 80060ba:	4628      	mov	r0, r5
 80060bc:	f000 ff0e 	bl	8006edc <_sbrk_r>
 80060c0:	3001      	adds	r0, #1
 80060c2:	d101      	bne.n	80060c8 <sbrk_aligned+0x38>
 80060c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80060c8:	4620      	mov	r0, r4
 80060ca:	bd70      	pop	{r4, r5, r6, pc}
 80060cc:	2000043c 	.word	0x2000043c

080060d0 <_malloc_r>:
 80060d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060d4:	1ccd      	adds	r5, r1, #3
 80060d6:	f025 0503 	bic.w	r5, r5, #3
 80060da:	3508      	adds	r5, #8
 80060dc:	2d0c      	cmp	r5, #12
 80060de:	bf38      	it	cc
 80060e0:	250c      	movcc	r5, #12
 80060e2:	2d00      	cmp	r5, #0
 80060e4:	4607      	mov	r7, r0
 80060e6:	db01      	blt.n	80060ec <_malloc_r+0x1c>
 80060e8:	42a9      	cmp	r1, r5
 80060ea:	d905      	bls.n	80060f8 <_malloc_r+0x28>
 80060ec:	230c      	movs	r3, #12
 80060ee:	603b      	str	r3, [r7, #0]
 80060f0:	2600      	movs	r6, #0
 80060f2:	4630      	mov	r0, r6
 80060f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060f8:	4e2e      	ldr	r6, [pc, #184]	; (80061b4 <_malloc_r+0xe4>)
 80060fa:	f003 f8d7 	bl	80092ac <__malloc_lock>
 80060fe:	6833      	ldr	r3, [r6, #0]
 8006100:	461c      	mov	r4, r3
 8006102:	bb34      	cbnz	r4, 8006152 <_malloc_r+0x82>
 8006104:	4629      	mov	r1, r5
 8006106:	4638      	mov	r0, r7
 8006108:	f7ff ffc2 	bl	8006090 <sbrk_aligned>
 800610c:	1c43      	adds	r3, r0, #1
 800610e:	4604      	mov	r4, r0
 8006110:	d14d      	bne.n	80061ae <_malloc_r+0xde>
 8006112:	6834      	ldr	r4, [r6, #0]
 8006114:	4626      	mov	r6, r4
 8006116:	2e00      	cmp	r6, #0
 8006118:	d140      	bne.n	800619c <_malloc_r+0xcc>
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	4631      	mov	r1, r6
 800611e:	4638      	mov	r0, r7
 8006120:	eb04 0803 	add.w	r8, r4, r3
 8006124:	f000 feda 	bl	8006edc <_sbrk_r>
 8006128:	4580      	cmp	r8, r0
 800612a:	d13a      	bne.n	80061a2 <_malloc_r+0xd2>
 800612c:	6821      	ldr	r1, [r4, #0]
 800612e:	3503      	adds	r5, #3
 8006130:	1a6d      	subs	r5, r5, r1
 8006132:	f025 0503 	bic.w	r5, r5, #3
 8006136:	3508      	adds	r5, #8
 8006138:	2d0c      	cmp	r5, #12
 800613a:	bf38      	it	cc
 800613c:	250c      	movcc	r5, #12
 800613e:	4629      	mov	r1, r5
 8006140:	4638      	mov	r0, r7
 8006142:	f7ff ffa5 	bl	8006090 <sbrk_aligned>
 8006146:	3001      	adds	r0, #1
 8006148:	d02b      	beq.n	80061a2 <_malloc_r+0xd2>
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	442b      	add	r3, r5
 800614e:	6023      	str	r3, [r4, #0]
 8006150:	e00e      	b.n	8006170 <_malloc_r+0xa0>
 8006152:	6822      	ldr	r2, [r4, #0]
 8006154:	1b52      	subs	r2, r2, r5
 8006156:	d41e      	bmi.n	8006196 <_malloc_r+0xc6>
 8006158:	2a0b      	cmp	r2, #11
 800615a:	d916      	bls.n	800618a <_malloc_r+0xba>
 800615c:	1961      	adds	r1, r4, r5
 800615e:	42a3      	cmp	r3, r4
 8006160:	6025      	str	r5, [r4, #0]
 8006162:	bf18      	it	ne
 8006164:	6059      	strne	r1, [r3, #4]
 8006166:	6863      	ldr	r3, [r4, #4]
 8006168:	bf08      	it	eq
 800616a:	6031      	streq	r1, [r6, #0]
 800616c:	5162      	str	r2, [r4, r5]
 800616e:	604b      	str	r3, [r1, #4]
 8006170:	4638      	mov	r0, r7
 8006172:	f104 060b 	add.w	r6, r4, #11
 8006176:	f003 f89f 	bl	80092b8 <__malloc_unlock>
 800617a:	f026 0607 	bic.w	r6, r6, #7
 800617e:	1d23      	adds	r3, r4, #4
 8006180:	1af2      	subs	r2, r6, r3
 8006182:	d0b6      	beq.n	80060f2 <_malloc_r+0x22>
 8006184:	1b9b      	subs	r3, r3, r6
 8006186:	50a3      	str	r3, [r4, r2]
 8006188:	e7b3      	b.n	80060f2 <_malloc_r+0x22>
 800618a:	6862      	ldr	r2, [r4, #4]
 800618c:	42a3      	cmp	r3, r4
 800618e:	bf0c      	ite	eq
 8006190:	6032      	streq	r2, [r6, #0]
 8006192:	605a      	strne	r2, [r3, #4]
 8006194:	e7ec      	b.n	8006170 <_malloc_r+0xa0>
 8006196:	4623      	mov	r3, r4
 8006198:	6864      	ldr	r4, [r4, #4]
 800619a:	e7b2      	b.n	8006102 <_malloc_r+0x32>
 800619c:	4634      	mov	r4, r6
 800619e:	6876      	ldr	r6, [r6, #4]
 80061a0:	e7b9      	b.n	8006116 <_malloc_r+0x46>
 80061a2:	230c      	movs	r3, #12
 80061a4:	603b      	str	r3, [r7, #0]
 80061a6:	4638      	mov	r0, r7
 80061a8:	f003 f886 	bl	80092b8 <__malloc_unlock>
 80061ac:	e7a1      	b.n	80060f2 <_malloc_r+0x22>
 80061ae:	6025      	str	r5, [r4, #0]
 80061b0:	e7de      	b.n	8006170 <_malloc_r+0xa0>
 80061b2:	bf00      	nop
 80061b4:	20000438 	.word	0x20000438

080061b8 <__cvt>:
 80061b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061bc:	ec55 4b10 	vmov	r4, r5, d0
 80061c0:	2d00      	cmp	r5, #0
 80061c2:	460e      	mov	r6, r1
 80061c4:	4619      	mov	r1, r3
 80061c6:	462b      	mov	r3, r5
 80061c8:	bfbb      	ittet	lt
 80061ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80061ce:	461d      	movlt	r5, r3
 80061d0:	2300      	movge	r3, #0
 80061d2:	232d      	movlt	r3, #45	; 0x2d
 80061d4:	700b      	strb	r3, [r1, #0]
 80061d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80061dc:	4691      	mov	r9, r2
 80061de:	f023 0820 	bic.w	r8, r3, #32
 80061e2:	bfbc      	itt	lt
 80061e4:	4622      	movlt	r2, r4
 80061e6:	4614      	movlt	r4, r2
 80061e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061ec:	d005      	beq.n	80061fa <__cvt+0x42>
 80061ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80061f2:	d100      	bne.n	80061f6 <__cvt+0x3e>
 80061f4:	3601      	adds	r6, #1
 80061f6:	2102      	movs	r1, #2
 80061f8:	e000      	b.n	80061fc <__cvt+0x44>
 80061fa:	2103      	movs	r1, #3
 80061fc:	ab03      	add	r3, sp, #12
 80061fe:	9301      	str	r3, [sp, #4]
 8006200:	ab02      	add	r3, sp, #8
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	ec45 4b10 	vmov	d0, r4, r5
 8006208:	4653      	mov	r3, sl
 800620a:	4632      	mov	r2, r6
 800620c:	f001 fdd4 	bl	8007db8 <_dtoa_r>
 8006210:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006214:	4607      	mov	r7, r0
 8006216:	d102      	bne.n	800621e <__cvt+0x66>
 8006218:	f019 0f01 	tst.w	r9, #1
 800621c:	d022      	beq.n	8006264 <__cvt+0xac>
 800621e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006222:	eb07 0906 	add.w	r9, r7, r6
 8006226:	d110      	bne.n	800624a <__cvt+0x92>
 8006228:	783b      	ldrb	r3, [r7, #0]
 800622a:	2b30      	cmp	r3, #48	; 0x30
 800622c:	d10a      	bne.n	8006244 <__cvt+0x8c>
 800622e:	2200      	movs	r2, #0
 8006230:	2300      	movs	r3, #0
 8006232:	4620      	mov	r0, r4
 8006234:	4629      	mov	r1, r5
 8006236:	f7fa fc4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800623a:	b918      	cbnz	r0, 8006244 <__cvt+0x8c>
 800623c:	f1c6 0601 	rsb	r6, r6, #1
 8006240:	f8ca 6000 	str.w	r6, [sl]
 8006244:	f8da 3000 	ldr.w	r3, [sl]
 8006248:	4499      	add	r9, r3
 800624a:	2200      	movs	r2, #0
 800624c:	2300      	movs	r3, #0
 800624e:	4620      	mov	r0, r4
 8006250:	4629      	mov	r1, r5
 8006252:	f7fa fc41 	bl	8000ad8 <__aeabi_dcmpeq>
 8006256:	b108      	cbz	r0, 800625c <__cvt+0xa4>
 8006258:	f8cd 900c 	str.w	r9, [sp, #12]
 800625c:	2230      	movs	r2, #48	; 0x30
 800625e:	9b03      	ldr	r3, [sp, #12]
 8006260:	454b      	cmp	r3, r9
 8006262:	d307      	bcc.n	8006274 <__cvt+0xbc>
 8006264:	9b03      	ldr	r3, [sp, #12]
 8006266:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006268:	1bdb      	subs	r3, r3, r7
 800626a:	4638      	mov	r0, r7
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	b004      	add	sp, #16
 8006270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006274:	1c59      	adds	r1, r3, #1
 8006276:	9103      	str	r1, [sp, #12]
 8006278:	701a      	strb	r2, [r3, #0]
 800627a:	e7f0      	b.n	800625e <__cvt+0xa6>

0800627c <__exponent>:
 800627c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800627e:	4603      	mov	r3, r0
 8006280:	2900      	cmp	r1, #0
 8006282:	bfb8      	it	lt
 8006284:	4249      	neglt	r1, r1
 8006286:	f803 2b02 	strb.w	r2, [r3], #2
 800628a:	bfb4      	ite	lt
 800628c:	222d      	movlt	r2, #45	; 0x2d
 800628e:	222b      	movge	r2, #43	; 0x2b
 8006290:	2909      	cmp	r1, #9
 8006292:	7042      	strb	r2, [r0, #1]
 8006294:	dd2a      	ble.n	80062ec <__exponent+0x70>
 8006296:	f10d 0407 	add.w	r4, sp, #7
 800629a:	46a4      	mov	ip, r4
 800629c:	270a      	movs	r7, #10
 800629e:	46a6      	mov	lr, r4
 80062a0:	460a      	mov	r2, r1
 80062a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80062a6:	fb07 1516 	mls	r5, r7, r6, r1
 80062aa:	3530      	adds	r5, #48	; 0x30
 80062ac:	2a63      	cmp	r2, #99	; 0x63
 80062ae:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80062b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80062b6:	4631      	mov	r1, r6
 80062b8:	dcf1      	bgt.n	800629e <__exponent+0x22>
 80062ba:	3130      	adds	r1, #48	; 0x30
 80062bc:	f1ae 0502 	sub.w	r5, lr, #2
 80062c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80062c4:	1c44      	adds	r4, r0, #1
 80062c6:	4629      	mov	r1, r5
 80062c8:	4561      	cmp	r1, ip
 80062ca:	d30a      	bcc.n	80062e2 <__exponent+0x66>
 80062cc:	f10d 0209 	add.w	r2, sp, #9
 80062d0:	eba2 020e 	sub.w	r2, r2, lr
 80062d4:	4565      	cmp	r5, ip
 80062d6:	bf88      	it	hi
 80062d8:	2200      	movhi	r2, #0
 80062da:	4413      	add	r3, r2
 80062dc:	1a18      	subs	r0, r3, r0
 80062de:	b003      	add	sp, #12
 80062e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80062ea:	e7ed      	b.n	80062c8 <__exponent+0x4c>
 80062ec:	2330      	movs	r3, #48	; 0x30
 80062ee:	3130      	adds	r1, #48	; 0x30
 80062f0:	7083      	strb	r3, [r0, #2]
 80062f2:	70c1      	strb	r1, [r0, #3]
 80062f4:	1d03      	adds	r3, r0, #4
 80062f6:	e7f1      	b.n	80062dc <__exponent+0x60>

080062f8 <_printf_float>:
 80062f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062fc:	ed2d 8b02 	vpush	{d8}
 8006300:	b08d      	sub	sp, #52	; 0x34
 8006302:	460c      	mov	r4, r1
 8006304:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006308:	4616      	mov	r6, r2
 800630a:	461f      	mov	r7, r3
 800630c:	4605      	mov	r5, r0
 800630e:	f002 ffa5 	bl	800925c <_localeconv_r>
 8006312:	f8d0 a000 	ldr.w	sl, [r0]
 8006316:	4650      	mov	r0, sl
 8006318:	f7f9 ff62 	bl	80001e0 <strlen>
 800631c:	2300      	movs	r3, #0
 800631e:	930a      	str	r3, [sp, #40]	; 0x28
 8006320:	6823      	ldr	r3, [r4, #0]
 8006322:	9305      	str	r3, [sp, #20]
 8006324:	f8d8 3000 	ldr.w	r3, [r8]
 8006328:	f894 b018 	ldrb.w	fp, [r4, #24]
 800632c:	3307      	adds	r3, #7
 800632e:	f023 0307 	bic.w	r3, r3, #7
 8006332:	f103 0208 	add.w	r2, r3, #8
 8006336:	f8c8 2000 	str.w	r2, [r8]
 800633a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006342:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006346:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800634a:	9307      	str	r3, [sp, #28]
 800634c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006350:	ee08 0a10 	vmov	s16, r0
 8006354:	4b9f      	ldr	r3, [pc, #636]	; (80065d4 <_printf_float+0x2dc>)
 8006356:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800635a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800635e:	f7fa fbed 	bl	8000b3c <__aeabi_dcmpun>
 8006362:	bb88      	cbnz	r0, 80063c8 <_printf_float+0xd0>
 8006364:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006368:	4b9a      	ldr	r3, [pc, #616]	; (80065d4 <_printf_float+0x2dc>)
 800636a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800636e:	f7fa fbc7 	bl	8000b00 <__aeabi_dcmple>
 8006372:	bb48      	cbnz	r0, 80063c8 <_printf_float+0xd0>
 8006374:	2200      	movs	r2, #0
 8006376:	2300      	movs	r3, #0
 8006378:	4640      	mov	r0, r8
 800637a:	4649      	mov	r1, r9
 800637c:	f7fa fbb6 	bl	8000aec <__aeabi_dcmplt>
 8006380:	b110      	cbz	r0, 8006388 <_printf_float+0x90>
 8006382:	232d      	movs	r3, #45	; 0x2d
 8006384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006388:	4b93      	ldr	r3, [pc, #588]	; (80065d8 <_printf_float+0x2e0>)
 800638a:	4894      	ldr	r0, [pc, #592]	; (80065dc <_printf_float+0x2e4>)
 800638c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006390:	bf94      	ite	ls
 8006392:	4698      	movls	r8, r3
 8006394:	4680      	movhi	r8, r0
 8006396:	2303      	movs	r3, #3
 8006398:	6123      	str	r3, [r4, #16]
 800639a:	9b05      	ldr	r3, [sp, #20]
 800639c:	f023 0204 	bic.w	r2, r3, #4
 80063a0:	6022      	str	r2, [r4, #0]
 80063a2:	f04f 0900 	mov.w	r9, #0
 80063a6:	9700      	str	r7, [sp, #0]
 80063a8:	4633      	mov	r3, r6
 80063aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80063ac:	4621      	mov	r1, r4
 80063ae:	4628      	mov	r0, r5
 80063b0:	f000 f9d8 	bl	8006764 <_printf_common>
 80063b4:	3001      	adds	r0, #1
 80063b6:	f040 8090 	bne.w	80064da <_printf_float+0x1e2>
 80063ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063be:	b00d      	add	sp, #52	; 0x34
 80063c0:	ecbd 8b02 	vpop	{d8}
 80063c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c8:	4642      	mov	r2, r8
 80063ca:	464b      	mov	r3, r9
 80063cc:	4640      	mov	r0, r8
 80063ce:	4649      	mov	r1, r9
 80063d0:	f7fa fbb4 	bl	8000b3c <__aeabi_dcmpun>
 80063d4:	b140      	cbz	r0, 80063e8 <_printf_float+0xf0>
 80063d6:	464b      	mov	r3, r9
 80063d8:	2b00      	cmp	r3, #0
 80063da:	bfbc      	itt	lt
 80063dc:	232d      	movlt	r3, #45	; 0x2d
 80063de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80063e2:	487f      	ldr	r0, [pc, #508]	; (80065e0 <_printf_float+0x2e8>)
 80063e4:	4b7f      	ldr	r3, [pc, #508]	; (80065e4 <_printf_float+0x2ec>)
 80063e6:	e7d1      	b.n	800638c <_printf_float+0x94>
 80063e8:	6863      	ldr	r3, [r4, #4]
 80063ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80063ee:	9206      	str	r2, [sp, #24]
 80063f0:	1c5a      	adds	r2, r3, #1
 80063f2:	d13f      	bne.n	8006474 <_printf_float+0x17c>
 80063f4:	2306      	movs	r3, #6
 80063f6:	6063      	str	r3, [r4, #4]
 80063f8:	9b05      	ldr	r3, [sp, #20]
 80063fa:	6861      	ldr	r1, [r4, #4]
 80063fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006400:	2300      	movs	r3, #0
 8006402:	9303      	str	r3, [sp, #12]
 8006404:	ab0a      	add	r3, sp, #40	; 0x28
 8006406:	e9cd b301 	strd	fp, r3, [sp, #4]
 800640a:	ab09      	add	r3, sp, #36	; 0x24
 800640c:	ec49 8b10 	vmov	d0, r8, r9
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	6022      	str	r2, [r4, #0]
 8006414:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006418:	4628      	mov	r0, r5
 800641a:	f7ff fecd 	bl	80061b8 <__cvt>
 800641e:	9b06      	ldr	r3, [sp, #24]
 8006420:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006422:	2b47      	cmp	r3, #71	; 0x47
 8006424:	4680      	mov	r8, r0
 8006426:	d108      	bne.n	800643a <_printf_float+0x142>
 8006428:	1cc8      	adds	r0, r1, #3
 800642a:	db02      	blt.n	8006432 <_printf_float+0x13a>
 800642c:	6863      	ldr	r3, [r4, #4]
 800642e:	4299      	cmp	r1, r3
 8006430:	dd41      	ble.n	80064b6 <_printf_float+0x1be>
 8006432:	f1ab 0b02 	sub.w	fp, fp, #2
 8006436:	fa5f fb8b 	uxtb.w	fp, fp
 800643a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800643e:	d820      	bhi.n	8006482 <_printf_float+0x18a>
 8006440:	3901      	subs	r1, #1
 8006442:	465a      	mov	r2, fp
 8006444:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006448:	9109      	str	r1, [sp, #36]	; 0x24
 800644a:	f7ff ff17 	bl	800627c <__exponent>
 800644e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006450:	1813      	adds	r3, r2, r0
 8006452:	2a01      	cmp	r2, #1
 8006454:	4681      	mov	r9, r0
 8006456:	6123      	str	r3, [r4, #16]
 8006458:	dc02      	bgt.n	8006460 <_printf_float+0x168>
 800645a:	6822      	ldr	r2, [r4, #0]
 800645c:	07d2      	lsls	r2, r2, #31
 800645e:	d501      	bpl.n	8006464 <_printf_float+0x16c>
 8006460:	3301      	adds	r3, #1
 8006462:	6123      	str	r3, [r4, #16]
 8006464:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006468:	2b00      	cmp	r3, #0
 800646a:	d09c      	beq.n	80063a6 <_printf_float+0xae>
 800646c:	232d      	movs	r3, #45	; 0x2d
 800646e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006472:	e798      	b.n	80063a6 <_printf_float+0xae>
 8006474:	9a06      	ldr	r2, [sp, #24]
 8006476:	2a47      	cmp	r2, #71	; 0x47
 8006478:	d1be      	bne.n	80063f8 <_printf_float+0x100>
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1bc      	bne.n	80063f8 <_printf_float+0x100>
 800647e:	2301      	movs	r3, #1
 8006480:	e7b9      	b.n	80063f6 <_printf_float+0xfe>
 8006482:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006486:	d118      	bne.n	80064ba <_printf_float+0x1c2>
 8006488:	2900      	cmp	r1, #0
 800648a:	6863      	ldr	r3, [r4, #4]
 800648c:	dd0b      	ble.n	80064a6 <_printf_float+0x1ae>
 800648e:	6121      	str	r1, [r4, #16]
 8006490:	b913      	cbnz	r3, 8006498 <_printf_float+0x1a0>
 8006492:	6822      	ldr	r2, [r4, #0]
 8006494:	07d0      	lsls	r0, r2, #31
 8006496:	d502      	bpl.n	800649e <_printf_float+0x1a6>
 8006498:	3301      	adds	r3, #1
 800649a:	440b      	add	r3, r1
 800649c:	6123      	str	r3, [r4, #16]
 800649e:	65a1      	str	r1, [r4, #88]	; 0x58
 80064a0:	f04f 0900 	mov.w	r9, #0
 80064a4:	e7de      	b.n	8006464 <_printf_float+0x16c>
 80064a6:	b913      	cbnz	r3, 80064ae <_printf_float+0x1b6>
 80064a8:	6822      	ldr	r2, [r4, #0]
 80064aa:	07d2      	lsls	r2, r2, #31
 80064ac:	d501      	bpl.n	80064b2 <_printf_float+0x1ba>
 80064ae:	3302      	adds	r3, #2
 80064b0:	e7f4      	b.n	800649c <_printf_float+0x1a4>
 80064b2:	2301      	movs	r3, #1
 80064b4:	e7f2      	b.n	800649c <_printf_float+0x1a4>
 80064b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80064ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064bc:	4299      	cmp	r1, r3
 80064be:	db05      	blt.n	80064cc <_printf_float+0x1d4>
 80064c0:	6823      	ldr	r3, [r4, #0]
 80064c2:	6121      	str	r1, [r4, #16]
 80064c4:	07d8      	lsls	r0, r3, #31
 80064c6:	d5ea      	bpl.n	800649e <_printf_float+0x1a6>
 80064c8:	1c4b      	adds	r3, r1, #1
 80064ca:	e7e7      	b.n	800649c <_printf_float+0x1a4>
 80064cc:	2900      	cmp	r1, #0
 80064ce:	bfd4      	ite	le
 80064d0:	f1c1 0202 	rsble	r2, r1, #2
 80064d4:	2201      	movgt	r2, #1
 80064d6:	4413      	add	r3, r2
 80064d8:	e7e0      	b.n	800649c <_printf_float+0x1a4>
 80064da:	6823      	ldr	r3, [r4, #0]
 80064dc:	055a      	lsls	r2, r3, #21
 80064de:	d407      	bmi.n	80064f0 <_printf_float+0x1f8>
 80064e0:	6923      	ldr	r3, [r4, #16]
 80064e2:	4642      	mov	r2, r8
 80064e4:	4631      	mov	r1, r6
 80064e6:	4628      	mov	r0, r5
 80064e8:	47b8      	blx	r7
 80064ea:	3001      	adds	r0, #1
 80064ec:	d12c      	bne.n	8006548 <_printf_float+0x250>
 80064ee:	e764      	b.n	80063ba <_printf_float+0xc2>
 80064f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064f4:	f240 80e0 	bls.w	80066b8 <_printf_float+0x3c0>
 80064f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064fc:	2200      	movs	r2, #0
 80064fe:	2300      	movs	r3, #0
 8006500:	f7fa faea 	bl	8000ad8 <__aeabi_dcmpeq>
 8006504:	2800      	cmp	r0, #0
 8006506:	d034      	beq.n	8006572 <_printf_float+0x27a>
 8006508:	4a37      	ldr	r2, [pc, #220]	; (80065e8 <_printf_float+0x2f0>)
 800650a:	2301      	movs	r3, #1
 800650c:	4631      	mov	r1, r6
 800650e:	4628      	mov	r0, r5
 8006510:	47b8      	blx	r7
 8006512:	3001      	adds	r0, #1
 8006514:	f43f af51 	beq.w	80063ba <_printf_float+0xc2>
 8006518:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800651c:	429a      	cmp	r2, r3
 800651e:	db02      	blt.n	8006526 <_printf_float+0x22e>
 8006520:	6823      	ldr	r3, [r4, #0]
 8006522:	07d8      	lsls	r0, r3, #31
 8006524:	d510      	bpl.n	8006548 <_printf_float+0x250>
 8006526:	ee18 3a10 	vmov	r3, s16
 800652a:	4652      	mov	r2, sl
 800652c:	4631      	mov	r1, r6
 800652e:	4628      	mov	r0, r5
 8006530:	47b8      	blx	r7
 8006532:	3001      	adds	r0, #1
 8006534:	f43f af41 	beq.w	80063ba <_printf_float+0xc2>
 8006538:	f04f 0800 	mov.w	r8, #0
 800653c:	f104 091a 	add.w	r9, r4, #26
 8006540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006542:	3b01      	subs	r3, #1
 8006544:	4543      	cmp	r3, r8
 8006546:	dc09      	bgt.n	800655c <_printf_float+0x264>
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	079b      	lsls	r3, r3, #30
 800654c:	f100 8105 	bmi.w	800675a <_printf_float+0x462>
 8006550:	68e0      	ldr	r0, [r4, #12]
 8006552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006554:	4298      	cmp	r0, r3
 8006556:	bfb8      	it	lt
 8006558:	4618      	movlt	r0, r3
 800655a:	e730      	b.n	80063be <_printf_float+0xc6>
 800655c:	2301      	movs	r3, #1
 800655e:	464a      	mov	r2, r9
 8006560:	4631      	mov	r1, r6
 8006562:	4628      	mov	r0, r5
 8006564:	47b8      	blx	r7
 8006566:	3001      	adds	r0, #1
 8006568:	f43f af27 	beq.w	80063ba <_printf_float+0xc2>
 800656c:	f108 0801 	add.w	r8, r8, #1
 8006570:	e7e6      	b.n	8006540 <_printf_float+0x248>
 8006572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006574:	2b00      	cmp	r3, #0
 8006576:	dc39      	bgt.n	80065ec <_printf_float+0x2f4>
 8006578:	4a1b      	ldr	r2, [pc, #108]	; (80065e8 <_printf_float+0x2f0>)
 800657a:	2301      	movs	r3, #1
 800657c:	4631      	mov	r1, r6
 800657e:	4628      	mov	r0, r5
 8006580:	47b8      	blx	r7
 8006582:	3001      	adds	r0, #1
 8006584:	f43f af19 	beq.w	80063ba <_printf_float+0xc2>
 8006588:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800658c:	4313      	orrs	r3, r2
 800658e:	d102      	bne.n	8006596 <_printf_float+0x29e>
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	07d9      	lsls	r1, r3, #31
 8006594:	d5d8      	bpl.n	8006548 <_printf_float+0x250>
 8006596:	ee18 3a10 	vmov	r3, s16
 800659a:	4652      	mov	r2, sl
 800659c:	4631      	mov	r1, r6
 800659e:	4628      	mov	r0, r5
 80065a0:	47b8      	blx	r7
 80065a2:	3001      	adds	r0, #1
 80065a4:	f43f af09 	beq.w	80063ba <_printf_float+0xc2>
 80065a8:	f04f 0900 	mov.w	r9, #0
 80065ac:	f104 0a1a 	add.w	sl, r4, #26
 80065b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b2:	425b      	negs	r3, r3
 80065b4:	454b      	cmp	r3, r9
 80065b6:	dc01      	bgt.n	80065bc <_printf_float+0x2c4>
 80065b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065ba:	e792      	b.n	80064e2 <_printf_float+0x1ea>
 80065bc:	2301      	movs	r3, #1
 80065be:	4652      	mov	r2, sl
 80065c0:	4631      	mov	r1, r6
 80065c2:	4628      	mov	r0, r5
 80065c4:	47b8      	blx	r7
 80065c6:	3001      	adds	r0, #1
 80065c8:	f43f aef7 	beq.w	80063ba <_printf_float+0xc2>
 80065cc:	f109 0901 	add.w	r9, r9, #1
 80065d0:	e7ee      	b.n	80065b0 <_printf_float+0x2b8>
 80065d2:	bf00      	nop
 80065d4:	7fefffff 	.word	0x7fefffff
 80065d8:	0800a944 	.word	0x0800a944
 80065dc:	0800a948 	.word	0x0800a948
 80065e0:	0800a950 	.word	0x0800a950
 80065e4:	0800a94c 	.word	0x0800a94c
 80065e8:	0800a954 	.word	0x0800a954
 80065ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065f0:	429a      	cmp	r2, r3
 80065f2:	bfa8      	it	ge
 80065f4:	461a      	movge	r2, r3
 80065f6:	2a00      	cmp	r2, #0
 80065f8:	4691      	mov	r9, r2
 80065fa:	dc37      	bgt.n	800666c <_printf_float+0x374>
 80065fc:	f04f 0b00 	mov.w	fp, #0
 8006600:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006604:	f104 021a 	add.w	r2, r4, #26
 8006608:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800660a:	9305      	str	r3, [sp, #20]
 800660c:	eba3 0309 	sub.w	r3, r3, r9
 8006610:	455b      	cmp	r3, fp
 8006612:	dc33      	bgt.n	800667c <_printf_float+0x384>
 8006614:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006618:	429a      	cmp	r2, r3
 800661a:	db3b      	blt.n	8006694 <_printf_float+0x39c>
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	07da      	lsls	r2, r3, #31
 8006620:	d438      	bmi.n	8006694 <_printf_float+0x39c>
 8006622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006624:	9a05      	ldr	r2, [sp, #20]
 8006626:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006628:	1a9a      	subs	r2, r3, r2
 800662a:	eba3 0901 	sub.w	r9, r3, r1
 800662e:	4591      	cmp	r9, r2
 8006630:	bfa8      	it	ge
 8006632:	4691      	movge	r9, r2
 8006634:	f1b9 0f00 	cmp.w	r9, #0
 8006638:	dc35      	bgt.n	80066a6 <_printf_float+0x3ae>
 800663a:	f04f 0800 	mov.w	r8, #0
 800663e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006642:	f104 0a1a 	add.w	sl, r4, #26
 8006646:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800664a:	1a9b      	subs	r3, r3, r2
 800664c:	eba3 0309 	sub.w	r3, r3, r9
 8006650:	4543      	cmp	r3, r8
 8006652:	f77f af79 	ble.w	8006548 <_printf_float+0x250>
 8006656:	2301      	movs	r3, #1
 8006658:	4652      	mov	r2, sl
 800665a:	4631      	mov	r1, r6
 800665c:	4628      	mov	r0, r5
 800665e:	47b8      	blx	r7
 8006660:	3001      	adds	r0, #1
 8006662:	f43f aeaa 	beq.w	80063ba <_printf_float+0xc2>
 8006666:	f108 0801 	add.w	r8, r8, #1
 800666a:	e7ec      	b.n	8006646 <_printf_float+0x34e>
 800666c:	4613      	mov	r3, r2
 800666e:	4631      	mov	r1, r6
 8006670:	4642      	mov	r2, r8
 8006672:	4628      	mov	r0, r5
 8006674:	47b8      	blx	r7
 8006676:	3001      	adds	r0, #1
 8006678:	d1c0      	bne.n	80065fc <_printf_float+0x304>
 800667a:	e69e      	b.n	80063ba <_printf_float+0xc2>
 800667c:	2301      	movs	r3, #1
 800667e:	4631      	mov	r1, r6
 8006680:	4628      	mov	r0, r5
 8006682:	9205      	str	r2, [sp, #20]
 8006684:	47b8      	blx	r7
 8006686:	3001      	adds	r0, #1
 8006688:	f43f ae97 	beq.w	80063ba <_printf_float+0xc2>
 800668c:	9a05      	ldr	r2, [sp, #20]
 800668e:	f10b 0b01 	add.w	fp, fp, #1
 8006692:	e7b9      	b.n	8006608 <_printf_float+0x310>
 8006694:	ee18 3a10 	vmov	r3, s16
 8006698:	4652      	mov	r2, sl
 800669a:	4631      	mov	r1, r6
 800669c:	4628      	mov	r0, r5
 800669e:	47b8      	blx	r7
 80066a0:	3001      	adds	r0, #1
 80066a2:	d1be      	bne.n	8006622 <_printf_float+0x32a>
 80066a4:	e689      	b.n	80063ba <_printf_float+0xc2>
 80066a6:	9a05      	ldr	r2, [sp, #20]
 80066a8:	464b      	mov	r3, r9
 80066aa:	4442      	add	r2, r8
 80066ac:	4631      	mov	r1, r6
 80066ae:	4628      	mov	r0, r5
 80066b0:	47b8      	blx	r7
 80066b2:	3001      	adds	r0, #1
 80066b4:	d1c1      	bne.n	800663a <_printf_float+0x342>
 80066b6:	e680      	b.n	80063ba <_printf_float+0xc2>
 80066b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066ba:	2a01      	cmp	r2, #1
 80066bc:	dc01      	bgt.n	80066c2 <_printf_float+0x3ca>
 80066be:	07db      	lsls	r3, r3, #31
 80066c0:	d538      	bpl.n	8006734 <_printf_float+0x43c>
 80066c2:	2301      	movs	r3, #1
 80066c4:	4642      	mov	r2, r8
 80066c6:	4631      	mov	r1, r6
 80066c8:	4628      	mov	r0, r5
 80066ca:	47b8      	blx	r7
 80066cc:	3001      	adds	r0, #1
 80066ce:	f43f ae74 	beq.w	80063ba <_printf_float+0xc2>
 80066d2:	ee18 3a10 	vmov	r3, s16
 80066d6:	4652      	mov	r2, sl
 80066d8:	4631      	mov	r1, r6
 80066da:	4628      	mov	r0, r5
 80066dc:	47b8      	blx	r7
 80066de:	3001      	adds	r0, #1
 80066e0:	f43f ae6b 	beq.w	80063ba <_printf_float+0xc2>
 80066e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066e8:	2200      	movs	r2, #0
 80066ea:	2300      	movs	r3, #0
 80066ec:	f7fa f9f4 	bl	8000ad8 <__aeabi_dcmpeq>
 80066f0:	b9d8      	cbnz	r0, 800672a <_printf_float+0x432>
 80066f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f4:	f108 0201 	add.w	r2, r8, #1
 80066f8:	3b01      	subs	r3, #1
 80066fa:	4631      	mov	r1, r6
 80066fc:	4628      	mov	r0, r5
 80066fe:	47b8      	blx	r7
 8006700:	3001      	adds	r0, #1
 8006702:	d10e      	bne.n	8006722 <_printf_float+0x42a>
 8006704:	e659      	b.n	80063ba <_printf_float+0xc2>
 8006706:	2301      	movs	r3, #1
 8006708:	4652      	mov	r2, sl
 800670a:	4631      	mov	r1, r6
 800670c:	4628      	mov	r0, r5
 800670e:	47b8      	blx	r7
 8006710:	3001      	adds	r0, #1
 8006712:	f43f ae52 	beq.w	80063ba <_printf_float+0xc2>
 8006716:	f108 0801 	add.w	r8, r8, #1
 800671a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800671c:	3b01      	subs	r3, #1
 800671e:	4543      	cmp	r3, r8
 8006720:	dcf1      	bgt.n	8006706 <_printf_float+0x40e>
 8006722:	464b      	mov	r3, r9
 8006724:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006728:	e6dc      	b.n	80064e4 <_printf_float+0x1ec>
 800672a:	f04f 0800 	mov.w	r8, #0
 800672e:	f104 0a1a 	add.w	sl, r4, #26
 8006732:	e7f2      	b.n	800671a <_printf_float+0x422>
 8006734:	2301      	movs	r3, #1
 8006736:	4642      	mov	r2, r8
 8006738:	e7df      	b.n	80066fa <_printf_float+0x402>
 800673a:	2301      	movs	r3, #1
 800673c:	464a      	mov	r2, r9
 800673e:	4631      	mov	r1, r6
 8006740:	4628      	mov	r0, r5
 8006742:	47b8      	blx	r7
 8006744:	3001      	adds	r0, #1
 8006746:	f43f ae38 	beq.w	80063ba <_printf_float+0xc2>
 800674a:	f108 0801 	add.w	r8, r8, #1
 800674e:	68e3      	ldr	r3, [r4, #12]
 8006750:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006752:	1a5b      	subs	r3, r3, r1
 8006754:	4543      	cmp	r3, r8
 8006756:	dcf0      	bgt.n	800673a <_printf_float+0x442>
 8006758:	e6fa      	b.n	8006550 <_printf_float+0x258>
 800675a:	f04f 0800 	mov.w	r8, #0
 800675e:	f104 0919 	add.w	r9, r4, #25
 8006762:	e7f4      	b.n	800674e <_printf_float+0x456>

08006764 <_printf_common>:
 8006764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006768:	4616      	mov	r6, r2
 800676a:	4699      	mov	r9, r3
 800676c:	688a      	ldr	r2, [r1, #8]
 800676e:	690b      	ldr	r3, [r1, #16]
 8006770:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006774:	4293      	cmp	r3, r2
 8006776:	bfb8      	it	lt
 8006778:	4613      	movlt	r3, r2
 800677a:	6033      	str	r3, [r6, #0]
 800677c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006780:	4607      	mov	r7, r0
 8006782:	460c      	mov	r4, r1
 8006784:	b10a      	cbz	r2, 800678a <_printf_common+0x26>
 8006786:	3301      	adds	r3, #1
 8006788:	6033      	str	r3, [r6, #0]
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	0699      	lsls	r1, r3, #26
 800678e:	bf42      	ittt	mi
 8006790:	6833      	ldrmi	r3, [r6, #0]
 8006792:	3302      	addmi	r3, #2
 8006794:	6033      	strmi	r3, [r6, #0]
 8006796:	6825      	ldr	r5, [r4, #0]
 8006798:	f015 0506 	ands.w	r5, r5, #6
 800679c:	d106      	bne.n	80067ac <_printf_common+0x48>
 800679e:	f104 0a19 	add.w	sl, r4, #25
 80067a2:	68e3      	ldr	r3, [r4, #12]
 80067a4:	6832      	ldr	r2, [r6, #0]
 80067a6:	1a9b      	subs	r3, r3, r2
 80067a8:	42ab      	cmp	r3, r5
 80067aa:	dc26      	bgt.n	80067fa <_printf_common+0x96>
 80067ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067b0:	1e13      	subs	r3, r2, #0
 80067b2:	6822      	ldr	r2, [r4, #0]
 80067b4:	bf18      	it	ne
 80067b6:	2301      	movne	r3, #1
 80067b8:	0692      	lsls	r2, r2, #26
 80067ba:	d42b      	bmi.n	8006814 <_printf_common+0xb0>
 80067bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067c0:	4649      	mov	r1, r9
 80067c2:	4638      	mov	r0, r7
 80067c4:	47c0      	blx	r8
 80067c6:	3001      	adds	r0, #1
 80067c8:	d01e      	beq.n	8006808 <_printf_common+0xa4>
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	68e5      	ldr	r5, [r4, #12]
 80067ce:	6832      	ldr	r2, [r6, #0]
 80067d0:	f003 0306 	and.w	r3, r3, #6
 80067d4:	2b04      	cmp	r3, #4
 80067d6:	bf08      	it	eq
 80067d8:	1aad      	subeq	r5, r5, r2
 80067da:	68a3      	ldr	r3, [r4, #8]
 80067dc:	6922      	ldr	r2, [r4, #16]
 80067de:	bf0c      	ite	eq
 80067e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067e4:	2500      	movne	r5, #0
 80067e6:	4293      	cmp	r3, r2
 80067e8:	bfc4      	itt	gt
 80067ea:	1a9b      	subgt	r3, r3, r2
 80067ec:	18ed      	addgt	r5, r5, r3
 80067ee:	2600      	movs	r6, #0
 80067f0:	341a      	adds	r4, #26
 80067f2:	42b5      	cmp	r5, r6
 80067f4:	d11a      	bne.n	800682c <_printf_common+0xc8>
 80067f6:	2000      	movs	r0, #0
 80067f8:	e008      	b.n	800680c <_printf_common+0xa8>
 80067fa:	2301      	movs	r3, #1
 80067fc:	4652      	mov	r2, sl
 80067fe:	4649      	mov	r1, r9
 8006800:	4638      	mov	r0, r7
 8006802:	47c0      	blx	r8
 8006804:	3001      	adds	r0, #1
 8006806:	d103      	bne.n	8006810 <_printf_common+0xac>
 8006808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800680c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006810:	3501      	adds	r5, #1
 8006812:	e7c6      	b.n	80067a2 <_printf_common+0x3e>
 8006814:	18e1      	adds	r1, r4, r3
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	2030      	movs	r0, #48	; 0x30
 800681a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800681e:	4422      	add	r2, r4
 8006820:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006824:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006828:	3302      	adds	r3, #2
 800682a:	e7c7      	b.n	80067bc <_printf_common+0x58>
 800682c:	2301      	movs	r3, #1
 800682e:	4622      	mov	r2, r4
 8006830:	4649      	mov	r1, r9
 8006832:	4638      	mov	r0, r7
 8006834:	47c0      	blx	r8
 8006836:	3001      	adds	r0, #1
 8006838:	d0e6      	beq.n	8006808 <_printf_common+0xa4>
 800683a:	3601      	adds	r6, #1
 800683c:	e7d9      	b.n	80067f2 <_printf_common+0x8e>
	...

08006840 <_printf_i>:
 8006840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006844:	7e0f      	ldrb	r7, [r1, #24]
 8006846:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006848:	2f78      	cmp	r7, #120	; 0x78
 800684a:	4691      	mov	r9, r2
 800684c:	4680      	mov	r8, r0
 800684e:	460c      	mov	r4, r1
 8006850:	469a      	mov	sl, r3
 8006852:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006856:	d807      	bhi.n	8006868 <_printf_i+0x28>
 8006858:	2f62      	cmp	r7, #98	; 0x62
 800685a:	d80a      	bhi.n	8006872 <_printf_i+0x32>
 800685c:	2f00      	cmp	r7, #0
 800685e:	f000 80d8 	beq.w	8006a12 <_printf_i+0x1d2>
 8006862:	2f58      	cmp	r7, #88	; 0x58
 8006864:	f000 80a3 	beq.w	80069ae <_printf_i+0x16e>
 8006868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800686c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006870:	e03a      	b.n	80068e8 <_printf_i+0xa8>
 8006872:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006876:	2b15      	cmp	r3, #21
 8006878:	d8f6      	bhi.n	8006868 <_printf_i+0x28>
 800687a:	a101      	add	r1, pc, #4	; (adr r1, 8006880 <_printf_i+0x40>)
 800687c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006880:	080068d9 	.word	0x080068d9
 8006884:	080068ed 	.word	0x080068ed
 8006888:	08006869 	.word	0x08006869
 800688c:	08006869 	.word	0x08006869
 8006890:	08006869 	.word	0x08006869
 8006894:	08006869 	.word	0x08006869
 8006898:	080068ed 	.word	0x080068ed
 800689c:	08006869 	.word	0x08006869
 80068a0:	08006869 	.word	0x08006869
 80068a4:	08006869 	.word	0x08006869
 80068a8:	08006869 	.word	0x08006869
 80068ac:	080069f9 	.word	0x080069f9
 80068b0:	0800691d 	.word	0x0800691d
 80068b4:	080069db 	.word	0x080069db
 80068b8:	08006869 	.word	0x08006869
 80068bc:	08006869 	.word	0x08006869
 80068c0:	08006a1b 	.word	0x08006a1b
 80068c4:	08006869 	.word	0x08006869
 80068c8:	0800691d 	.word	0x0800691d
 80068cc:	08006869 	.word	0x08006869
 80068d0:	08006869 	.word	0x08006869
 80068d4:	080069e3 	.word	0x080069e3
 80068d8:	682b      	ldr	r3, [r5, #0]
 80068da:	1d1a      	adds	r2, r3, #4
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	602a      	str	r2, [r5, #0]
 80068e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068e8:	2301      	movs	r3, #1
 80068ea:	e0a3      	b.n	8006a34 <_printf_i+0x1f4>
 80068ec:	6820      	ldr	r0, [r4, #0]
 80068ee:	6829      	ldr	r1, [r5, #0]
 80068f0:	0606      	lsls	r6, r0, #24
 80068f2:	f101 0304 	add.w	r3, r1, #4
 80068f6:	d50a      	bpl.n	800690e <_printf_i+0xce>
 80068f8:	680e      	ldr	r6, [r1, #0]
 80068fa:	602b      	str	r3, [r5, #0]
 80068fc:	2e00      	cmp	r6, #0
 80068fe:	da03      	bge.n	8006908 <_printf_i+0xc8>
 8006900:	232d      	movs	r3, #45	; 0x2d
 8006902:	4276      	negs	r6, r6
 8006904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006908:	485e      	ldr	r0, [pc, #376]	; (8006a84 <_printf_i+0x244>)
 800690a:	230a      	movs	r3, #10
 800690c:	e019      	b.n	8006942 <_printf_i+0x102>
 800690e:	680e      	ldr	r6, [r1, #0]
 8006910:	602b      	str	r3, [r5, #0]
 8006912:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006916:	bf18      	it	ne
 8006918:	b236      	sxthne	r6, r6
 800691a:	e7ef      	b.n	80068fc <_printf_i+0xbc>
 800691c:	682b      	ldr	r3, [r5, #0]
 800691e:	6820      	ldr	r0, [r4, #0]
 8006920:	1d19      	adds	r1, r3, #4
 8006922:	6029      	str	r1, [r5, #0]
 8006924:	0601      	lsls	r1, r0, #24
 8006926:	d501      	bpl.n	800692c <_printf_i+0xec>
 8006928:	681e      	ldr	r6, [r3, #0]
 800692a:	e002      	b.n	8006932 <_printf_i+0xf2>
 800692c:	0646      	lsls	r6, r0, #25
 800692e:	d5fb      	bpl.n	8006928 <_printf_i+0xe8>
 8006930:	881e      	ldrh	r6, [r3, #0]
 8006932:	4854      	ldr	r0, [pc, #336]	; (8006a84 <_printf_i+0x244>)
 8006934:	2f6f      	cmp	r7, #111	; 0x6f
 8006936:	bf0c      	ite	eq
 8006938:	2308      	moveq	r3, #8
 800693a:	230a      	movne	r3, #10
 800693c:	2100      	movs	r1, #0
 800693e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006942:	6865      	ldr	r5, [r4, #4]
 8006944:	60a5      	str	r5, [r4, #8]
 8006946:	2d00      	cmp	r5, #0
 8006948:	bfa2      	ittt	ge
 800694a:	6821      	ldrge	r1, [r4, #0]
 800694c:	f021 0104 	bicge.w	r1, r1, #4
 8006950:	6021      	strge	r1, [r4, #0]
 8006952:	b90e      	cbnz	r6, 8006958 <_printf_i+0x118>
 8006954:	2d00      	cmp	r5, #0
 8006956:	d04d      	beq.n	80069f4 <_printf_i+0x1b4>
 8006958:	4615      	mov	r5, r2
 800695a:	fbb6 f1f3 	udiv	r1, r6, r3
 800695e:	fb03 6711 	mls	r7, r3, r1, r6
 8006962:	5dc7      	ldrb	r7, [r0, r7]
 8006964:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006968:	4637      	mov	r7, r6
 800696a:	42bb      	cmp	r3, r7
 800696c:	460e      	mov	r6, r1
 800696e:	d9f4      	bls.n	800695a <_printf_i+0x11a>
 8006970:	2b08      	cmp	r3, #8
 8006972:	d10b      	bne.n	800698c <_printf_i+0x14c>
 8006974:	6823      	ldr	r3, [r4, #0]
 8006976:	07de      	lsls	r6, r3, #31
 8006978:	d508      	bpl.n	800698c <_printf_i+0x14c>
 800697a:	6923      	ldr	r3, [r4, #16]
 800697c:	6861      	ldr	r1, [r4, #4]
 800697e:	4299      	cmp	r1, r3
 8006980:	bfde      	ittt	le
 8006982:	2330      	movle	r3, #48	; 0x30
 8006984:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006988:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800698c:	1b52      	subs	r2, r2, r5
 800698e:	6122      	str	r2, [r4, #16]
 8006990:	f8cd a000 	str.w	sl, [sp]
 8006994:	464b      	mov	r3, r9
 8006996:	aa03      	add	r2, sp, #12
 8006998:	4621      	mov	r1, r4
 800699a:	4640      	mov	r0, r8
 800699c:	f7ff fee2 	bl	8006764 <_printf_common>
 80069a0:	3001      	adds	r0, #1
 80069a2:	d14c      	bne.n	8006a3e <_printf_i+0x1fe>
 80069a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069a8:	b004      	add	sp, #16
 80069aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ae:	4835      	ldr	r0, [pc, #212]	; (8006a84 <_printf_i+0x244>)
 80069b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80069b4:	6829      	ldr	r1, [r5, #0]
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80069bc:	6029      	str	r1, [r5, #0]
 80069be:	061d      	lsls	r5, r3, #24
 80069c0:	d514      	bpl.n	80069ec <_printf_i+0x1ac>
 80069c2:	07df      	lsls	r7, r3, #31
 80069c4:	bf44      	itt	mi
 80069c6:	f043 0320 	orrmi.w	r3, r3, #32
 80069ca:	6023      	strmi	r3, [r4, #0]
 80069cc:	b91e      	cbnz	r6, 80069d6 <_printf_i+0x196>
 80069ce:	6823      	ldr	r3, [r4, #0]
 80069d0:	f023 0320 	bic.w	r3, r3, #32
 80069d4:	6023      	str	r3, [r4, #0]
 80069d6:	2310      	movs	r3, #16
 80069d8:	e7b0      	b.n	800693c <_printf_i+0xfc>
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	f043 0320 	orr.w	r3, r3, #32
 80069e0:	6023      	str	r3, [r4, #0]
 80069e2:	2378      	movs	r3, #120	; 0x78
 80069e4:	4828      	ldr	r0, [pc, #160]	; (8006a88 <_printf_i+0x248>)
 80069e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069ea:	e7e3      	b.n	80069b4 <_printf_i+0x174>
 80069ec:	0659      	lsls	r1, r3, #25
 80069ee:	bf48      	it	mi
 80069f0:	b2b6      	uxthmi	r6, r6
 80069f2:	e7e6      	b.n	80069c2 <_printf_i+0x182>
 80069f4:	4615      	mov	r5, r2
 80069f6:	e7bb      	b.n	8006970 <_printf_i+0x130>
 80069f8:	682b      	ldr	r3, [r5, #0]
 80069fa:	6826      	ldr	r6, [r4, #0]
 80069fc:	6961      	ldr	r1, [r4, #20]
 80069fe:	1d18      	adds	r0, r3, #4
 8006a00:	6028      	str	r0, [r5, #0]
 8006a02:	0635      	lsls	r5, r6, #24
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	d501      	bpl.n	8006a0c <_printf_i+0x1cc>
 8006a08:	6019      	str	r1, [r3, #0]
 8006a0a:	e002      	b.n	8006a12 <_printf_i+0x1d2>
 8006a0c:	0670      	lsls	r0, r6, #25
 8006a0e:	d5fb      	bpl.n	8006a08 <_printf_i+0x1c8>
 8006a10:	8019      	strh	r1, [r3, #0]
 8006a12:	2300      	movs	r3, #0
 8006a14:	6123      	str	r3, [r4, #16]
 8006a16:	4615      	mov	r5, r2
 8006a18:	e7ba      	b.n	8006990 <_printf_i+0x150>
 8006a1a:	682b      	ldr	r3, [r5, #0]
 8006a1c:	1d1a      	adds	r2, r3, #4
 8006a1e:	602a      	str	r2, [r5, #0]
 8006a20:	681d      	ldr	r5, [r3, #0]
 8006a22:	6862      	ldr	r2, [r4, #4]
 8006a24:	2100      	movs	r1, #0
 8006a26:	4628      	mov	r0, r5
 8006a28:	f7f9 fbe2 	bl	80001f0 <memchr>
 8006a2c:	b108      	cbz	r0, 8006a32 <_printf_i+0x1f2>
 8006a2e:	1b40      	subs	r0, r0, r5
 8006a30:	6060      	str	r0, [r4, #4]
 8006a32:	6863      	ldr	r3, [r4, #4]
 8006a34:	6123      	str	r3, [r4, #16]
 8006a36:	2300      	movs	r3, #0
 8006a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a3c:	e7a8      	b.n	8006990 <_printf_i+0x150>
 8006a3e:	6923      	ldr	r3, [r4, #16]
 8006a40:	462a      	mov	r2, r5
 8006a42:	4649      	mov	r1, r9
 8006a44:	4640      	mov	r0, r8
 8006a46:	47d0      	blx	sl
 8006a48:	3001      	adds	r0, #1
 8006a4a:	d0ab      	beq.n	80069a4 <_printf_i+0x164>
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	079b      	lsls	r3, r3, #30
 8006a50:	d413      	bmi.n	8006a7a <_printf_i+0x23a>
 8006a52:	68e0      	ldr	r0, [r4, #12]
 8006a54:	9b03      	ldr	r3, [sp, #12]
 8006a56:	4298      	cmp	r0, r3
 8006a58:	bfb8      	it	lt
 8006a5a:	4618      	movlt	r0, r3
 8006a5c:	e7a4      	b.n	80069a8 <_printf_i+0x168>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	4632      	mov	r2, r6
 8006a62:	4649      	mov	r1, r9
 8006a64:	4640      	mov	r0, r8
 8006a66:	47d0      	blx	sl
 8006a68:	3001      	adds	r0, #1
 8006a6a:	d09b      	beq.n	80069a4 <_printf_i+0x164>
 8006a6c:	3501      	adds	r5, #1
 8006a6e:	68e3      	ldr	r3, [r4, #12]
 8006a70:	9903      	ldr	r1, [sp, #12]
 8006a72:	1a5b      	subs	r3, r3, r1
 8006a74:	42ab      	cmp	r3, r5
 8006a76:	dcf2      	bgt.n	8006a5e <_printf_i+0x21e>
 8006a78:	e7eb      	b.n	8006a52 <_printf_i+0x212>
 8006a7a:	2500      	movs	r5, #0
 8006a7c:	f104 0619 	add.w	r6, r4, #25
 8006a80:	e7f5      	b.n	8006a6e <_printf_i+0x22e>
 8006a82:	bf00      	nop
 8006a84:	0800a956 	.word	0x0800a956
 8006a88:	0800a967 	.word	0x0800a967

08006a8c <_scanf_float>:
 8006a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a90:	b087      	sub	sp, #28
 8006a92:	4617      	mov	r7, r2
 8006a94:	9303      	str	r3, [sp, #12]
 8006a96:	688b      	ldr	r3, [r1, #8]
 8006a98:	1e5a      	subs	r2, r3, #1
 8006a9a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006a9e:	bf83      	ittte	hi
 8006aa0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006aa4:	195b      	addhi	r3, r3, r5
 8006aa6:	9302      	strhi	r3, [sp, #8]
 8006aa8:	2300      	movls	r3, #0
 8006aaa:	bf86      	itte	hi
 8006aac:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006ab0:	608b      	strhi	r3, [r1, #8]
 8006ab2:	9302      	strls	r3, [sp, #8]
 8006ab4:	680b      	ldr	r3, [r1, #0]
 8006ab6:	468b      	mov	fp, r1
 8006ab8:	2500      	movs	r5, #0
 8006aba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006abe:	f84b 3b1c 	str.w	r3, [fp], #28
 8006ac2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006ac6:	4680      	mov	r8, r0
 8006ac8:	460c      	mov	r4, r1
 8006aca:	465e      	mov	r6, fp
 8006acc:	46aa      	mov	sl, r5
 8006ace:	46a9      	mov	r9, r5
 8006ad0:	9501      	str	r5, [sp, #4]
 8006ad2:	68a2      	ldr	r2, [r4, #8]
 8006ad4:	b152      	cbz	r2, 8006aec <_scanf_float+0x60>
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	2b4e      	cmp	r3, #78	; 0x4e
 8006adc:	d864      	bhi.n	8006ba8 <_scanf_float+0x11c>
 8006ade:	2b40      	cmp	r3, #64	; 0x40
 8006ae0:	d83c      	bhi.n	8006b5c <_scanf_float+0xd0>
 8006ae2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006ae6:	b2c8      	uxtb	r0, r1
 8006ae8:	280e      	cmp	r0, #14
 8006aea:	d93a      	bls.n	8006b62 <_scanf_float+0xd6>
 8006aec:	f1b9 0f00 	cmp.w	r9, #0
 8006af0:	d003      	beq.n	8006afa <_scanf_float+0x6e>
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006af8:	6023      	str	r3, [r4, #0]
 8006afa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006afe:	f1ba 0f01 	cmp.w	sl, #1
 8006b02:	f200 8113 	bhi.w	8006d2c <_scanf_float+0x2a0>
 8006b06:	455e      	cmp	r6, fp
 8006b08:	f200 8105 	bhi.w	8006d16 <_scanf_float+0x28a>
 8006b0c:	2501      	movs	r5, #1
 8006b0e:	4628      	mov	r0, r5
 8006b10:	b007      	add	sp, #28
 8006b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b16:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006b1a:	2a0d      	cmp	r2, #13
 8006b1c:	d8e6      	bhi.n	8006aec <_scanf_float+0x60>
 8006b1e:	a101      	add	r1, pc, #4	; (adr r1, 8006b24 <_scanf_float+0x98>)
 8006b20:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006b24:	08006c63 	.word	0x08006c63
 8006b28:	08006aed 	.word	0x08006aed
 8006b2c:	08006aed 	.word	0x08006aed
 8006b30:	08006aed 	.word	0x08006aed
 8006b34:	08006cc3 	.word	0x08006cc3
 8006b38:	08006c9b 	.word	0x08006c9b
 8006b3c:	08006aed 	.word	0x08006aed
 8006b40:	08006aed 	.word	0x08006aed
 8006b44:	08006c71 	.word	0x08006c71
 8006b48:	08006aed 	.word	0x08006aed
 8006b4c:	08006aed 	.word	0x08006aed
 8006b50:	08006aed 	.word	0x08006aed
 8006b54:	08006aed 	.word	0x08006aed
 8006b58:	08006c29 	.word	0x08006c29
 8006b5c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006b60:	e7db      	b.n	8006b1a <_scanf_float+0x8e>
 8006b62:	290e      	cmp	r1, #14
 8006b64:	d8c2      	bhi.n	8006aec <_scanf_float+0x60>
 8006b66:	a001      	add	r0, pc, #4	; (adr r0, 8006b6c <_scanf_float+0xe0>)
 8006b68:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006b6c:	08006c1b 	.word	0x08006c1b
 8006b70:	08006aed 	.word	0x08006aed
 8006b74:	08006c1b 	.word	0x08006c1b
 8006b78:	08006caf 	.word	0x08006caf
 8006b7c:	08006aed 	.word	0x08006aed
 8006b80:	08006bc9 	.word	0x08006bc9
 8006b84:	08006c05 	.word	0x08006c05
 8006b88:	08006c05 	.word	0x08006c05
 8006b8c:	08006c05 	.word	0x08006c05
 8006b90:	08006c05 	.word	0x08006c05
 8006b94:	08006c05 	.word	0x08006c05
 8006b98:	08006c05 	.word	0x08006c05
 8006b9c:	08006c05 	.word	0x08006c05
 8006ba0:	08006c05 	.word	0x08006c05
 8006ba4:	08006c05 	.word	0x08006c05
 8006ba8:	2b6e      	cmp	r3, #110	; 0x6e
 8006baa:	d809      	bhi.n	8006bc0 <_scanf_float+0x134>
 8006bac:	2b60      	cmp	r3, #96	; 0x60
 8006bae:	d8b2      	bhi.n	8006b16 <_scanf_float+0x8a>
 8006bb0:	2b54      	cmp	r3, #84	; 0x54
 8006bb2:	d077      	beq.n	8006ca4 <_scanf_float+0x218>
 8006bb4:	2b59      	cmp	r3, #89	; 0x59
 8006bb6:	d199      	bne.n	8006aec <_scanf_float+0x60>
 8006bb8:	2d07      	cmp	r5, #7
 8006bba:	d197      	bne.n	8006aec <_scanf_float+0x60>
 8006bbc:	2508      	movs	r5, #8
 8006bbe:	e029      	b.n	8006c14 <_scanf_float+0x188>
 8006bc0:	2b74      	cmp	r3, #116	; 0x74
 8006bc2:	d06f      	beq.n	8006ca4 <_scanf_float+0x218>
 8006bc4:	2b79      	cmp	r3, #121	; 0x79
 8006bc6:	e7f6      	b.n	8006bb6 <_scanf_float+0x12a>
 8006bc8:	6821      	ldr	r1, [r4, #0]
 8006bca:	05c8      	lsls	r0, r1, #23
 8006bcc:	d51a      	bpl.n	8006c04 <_scanf_float+0x178>
 8006bce:	9b02      	ldr	r3, [sp, #8]
 8006bd0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006bd4:	6021      	str	r1, [r4, #0]
 8006bd6:	f109 0901 	add.w	r9, r9, #1
 8006bda:	b11b      	cbz	r3, 8006be4 <_scanf_float+0x158>
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	3201      	adds	r2, #1
 8006be0:	9302      	str	r3, [sp, #8]
 8006be2:	60a2      	str	r2, [r4, #8]
 8006be4:	68a3      	ldr	r3, [r4, #8]
 8006be6:	3b01      	subs	r3, #1
 8006be8:	60a3      	str	r3, [r4, #8]
 8006bea:	6923      	ldr	r3, [r4, #16]
 8006bec:	3301      	adds	r3, #1
 8006bee:	6123      	str	r3, [r4, #16]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	607b      	str	r3, [r7, #4]
 8006bf8:	f340 8084 	ble.w	8006d04 <_scanf_float+0x278>
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	603b      	str	r3, [r7, #0]
 8006c02:	e766      	b.n	8006ad2 <_scanf_float+0x46>
 8006c04:	eb1a 0f05 	cmn.w	sl, r5
 8006c08:	f47f af70 	bne.w	8006aec <_scanf_float+0x60>
 8006c0c:	6822      	ldr	r2, [r4, #0]
 8006c0e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006c12:	6022      	str	r2, [r4, #0]
 8006c14:	f806 3b01 	strb.w	r3, [r6], #1
 8006c18:	e7e4      	b.n	8006be4 <_scanf_float+0x158>
 8006c1a:	6822      	ldr	r2, [r4, #0]
 8006c1c:	0610      	lsls	r0, r2, #24
 8006c1e:	f57f af65 	bpl.w	8006aec <_scanf_float+0x60>
 8006c22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c26:	e7f4      	b.n	8006c12 <_scanf_float+0x186>
 8006c28:	f1ba 0f00 	cmp.w	sl, #0
 8006c2c:	d10e      	bne.n	8006c4c <_scanf_float+0x1c0>
 8006c2e:	f1b9 0f00 	cmp.w	r9, #0
 8006c32:	d10e      	bne.n	8006c52 <_scanf_float+0x1c6>
 8006c34:	6822      	ldr	r2, [r4, #0]
 8006c36:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c3a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c3e:	d108      	bne.n	8006c52 <_scanf_float+0x1c6>
 8006c40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c44:	6022      	str	r2, [r4, #0]
 8006c46:	f04f 0a01 	mov.w	sl, #1
 8006c4a:	e7e3      	b.n	8006c14 <_scanf_float+0x188>
 8006c4c:	f1ba 0f02 	cmp.w	sl, #2
 8006c50:	d055      	beq.n	8006cfe <_scanf_float+0x272>
 8006c52:	2d01      	cmp	r5, #1
 8006c54:	d002      	beq.n	8006c5c <_scanf_float+0x1d0>
 8006c56:	2d04      	cmp	r5, #4
 8006c58:	f47f af48 	bne.w	8006aec <_scanf_float+0x60>
 8006c5c:	3501      	adds	r5, #1
 8006c5e:	b2ed      	uxtb	r5, r5
 8006c60:	e7d8      	b.n	8006c14 <_scanf_float+0x188>
 8006c62:	f1ba 0f01 	cmp.w	sl, #1
 8006c66:	f47f af41 	bne.w	8006aec <_scanf_float+0x60>
 8006c6a:	f04f 0a02 	mov.w	sl, #2
 8006c6e:	e7d1      	b.n	8006c14 <_scanf_float+0x188>
 8006c70:	b97d      	cbnz	r5, 8006c92 <_scanf_float+0x206>
 8006c72:	f1b9 0f00 	cmp.w	r9, #0
 8006c76:	f47f af3c 	bne.w	8006af2 <_scanf_float+0x66>
 8006c7a:	6822      	ldr	r2, [r4, #0]
 8006c7c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c80:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c84:	f47f af39 	bne.w	8006afa <_scanf_float+0x6e>
 8006c88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c8c:	6022      	str	r2, [r4, #0]
 8006c8e:	2501      	movs	r5, #1
 8006c90:	e7c0      	b.n	8006c14 <_scanf_float+0x188>
 8006c92:	2d03      	cmp	r5, #3
 8006c94:	d0e2      	beq.n	8006c5c <_scanf_float+0x1d0>
 8006c96:	2d05      	cmp	r5, #5
 8006c98:	e7de      	b.n	8006c58 <_scanf_float+0x1cc>
 8006c9a:	2d02      	cmp	r5, #2
 8006c9c:	f47f af26 	bne.w	8006aec <_scanf_float+0x60>
 8006ca0:	2503      	movs	r5, #3
 8006ca2:	e7b7      	b.n	8006c14 <_scanf_float+0x188>
 8006ca4:	2d06      	cmp	r5, #6
 8006ca6:	f47f af21 	bne.w	8006aec <_scanf_float+0x60>
 8006caa:	2507      	movs	r5, #7
 8006cac:	e7b2      	b.n	8006c14 <_scanf_float+0x188>
 8006cae:	6822      	ldr	r2, [r4, #0]
 8006cb0:	0591      	lsls	r1, r2, #22
 8006cb2:	f57f af1b 	bpl.w	8006aec <_scanf_float+0x60>
 8006cb6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006cba:	6022      	str	r2, [r4, #0]
 8006cbc:	f8cd 9004 	str.w	r9, [sp, #4]
 8006cc0:	e7a8      	b.n	8006c14 <_scanf_float+0x188>
 8006cc2:	6822      	ldr	r2, [r4, #0]
 8006cc4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006cc8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006ccc:	d006      	beq.n	8006cdc <_scanf_float+0x250>
 8006cce:	0550      	lsls	r0, r2, #21
 8006cd0:	f57f af0c 	bpl.w	8006aec <_scanf_float+0x60>
 8006cd4:	f1b9 0f00 	cmp.w	r9, #0
 8006cd8:	f43f af0f 	beq.w	8006afa <_scanf_float+0x6e>
 8006cdc:	0591      	lsls	r1, r2, #22
 8006cde:	bf58      	it	pl
 8006ce0:	9901      	ldrpl	r1, [sp, #4]
 8006ce2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006ce6:	bf58      	it	pl
 8006ce8:	eba9 0101 	subpl.w	r1, r9, r1
 8006cec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006cf0:	bf58      	it	pl
 8006cf2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006cf6:	6022      	str	r2, [r4, #0]
 8006cf8:	f04f 0900 	mov.w	r9, #0
 8006cfc:	e78a      	b.n	8006c14 <_scanf_float+0x188>
 8006cfe:	f04f 0a03 	mov.w	sl, #3
 8006d02:	e787      	b.n	8006c14 <_scanf_float+0x188>
 8006d04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006d08:	4639      	mov	r1, r7
 8006d0a:	4640      	mov	r0, r8
 8006d0c:	4798      	blx	r3
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	f43f aedf 	beq.w	8006ad2 <_scanf_float+0x46>
 8006d14:	e6ea      	b.n	8006aec <_scanf_float+0x60>
 8006d16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d1e:	463a      	mov	r2, r7
 8006d20:	4640      	mov	r0, r8
 8006d22:	4798      	blx	r3
 8006d24:	6923      	ldr	r3, [r4, #16]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	6123      	str	r3, [r4, #16]
 8006d2a:	e6ec      	b.n	8006b06 <_scanf_float+0x7a>
 8006d2c:	1e6b      	subs	r3, r5, #1
 8006d2e:	2b06      	cmp	r3, #6
 8006d30:	d825      	bhi.n	8006d7e <_scanf_float+0x2f2>
 8006d32:	2d02      	cmp	r5, #2
 8006d34:	d836      	bhi.n	8006da4 <_scanf_float+0x318>
 8006d36:	455e      	cmp	r6, fp
 8006d38:	f67f aee8 	bls.w	8006b0c <_scanf_float+0x80>
 8006d3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d40:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d44:	463a      	mov	r2, r7
 8006d46:	4640      	mov	r0, r8
 8006d48:	4798      	blx	r3
 8006d4a:	6923      	ldr	r3, [r4, #16]
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	6123      	str	r3, [r4, #16]
 8006d50:	e7f1      	b.n	8006d36 <_scanf_float+0x2aa>
 8006d52:	9802      	ldr	r0, [sp, #8]
 8006d54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d58:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006d5c:	9002      	str	r0, [sp, #8]
 8006d5e:	463a      	mov	r2, r7
 8006d60:	4640      	mov	r0, r8
 8006d62:	4798      	blx	r3
 8006d64:	6923      	ldr	r3, [r4, #16]
 8006d66:	3b01      	subs	r3, #1
 8006d68:	6123      	str	r3, [r4, #16]
 8006d6a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006d6e:	fa5f fa8a 	uxtb.w	sl, sl
 8006d72:	f1ba 0f02 	cmp.w	sl, #2
 8006d76:	d1ec      	bne.n	8006d52 <_scanf_float+0x2c6>
 8006d78:	3d03      	subs	r5, #3
 8006d7a:	b2ed      	uxtb	r5, r5
 8006d7c:	1b76      	subs	r6, r6, r5
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	05da      	lsls	r2, r3, #23
 8006d82:	d52f      	bpl.n	8006de4 <_scanf_float+0x358>
 8006d84:	055b      	lsls	r3, r3, #21
 8006d86:	d510      	bpl.n	8006daa <_scanf_float+0x31e>
 8006d88:	455e      	cmp	r6, fp
 8006d8a:	f67f aebf 	bls.w	8006b0c <_scanf_float+0x80>
 8006d8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d96:	463a      	mov	r2, r7
 8006d98:	4640      	mov	r0, r8
 8006d9a:	4798      	blx	r3
 8006d9c:	6923      	ldr	r3, [r4, #16]
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	6123      	str	r3, [r4, #16]
 8006da2:	e7f1      	b.n	8006d88 <_scanf_float+0x2fc>
 8006da4:	46aa      	mov	sl, r5
 8006da6:	9602      	str	r6, [sp, #8]
 8006da8:	e7df      	b.n	8006d6a <_scanf_float+0x2de>
 8006daa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006dae:	6923      	ldr	r3, [r4, #16]
 8006db0:	2965      	cmp	r1, #101	; 0x65
 8006db2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006db6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8006dba:	6123      	str	r3, [r4, #16]
 8006dbc:	d00c      	beq.n	8006dd8 <_scanf_float+0x34c>
 8006dbe:	2945      	cmp	r1, #69	; 0x45
 8006dc0:	d00a      	beq.n	8006dd8 <_scanf_float+0x34c>
 8006dc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dc6:	463a      	mov	r2, r7
 8006dc8:	4640      	mov	r0, r8
 8006dca:	4798      	blx	r3
 8006dcc:	6923      	ldr	r3, [r4, #16]
 8006dce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	1eb5      	subs	r5, r6, #2
 8006dd6:	6123      	str	r3, [r4, #16]
 8006dd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ddc:	463a      	mov	r2, r7
 8006dde:	4640      	mov	r0, r8
 8006de0:	4798      	blx	r3
 8006de2:	462e      	mov	r6, r5
 8006de4:	6825      	ldr	r5, [r4, #0]
 8006de6:	f015 0510 	ands.w	r5, r5, #16
 8006dea:	d159      	bne.n	8006ea0 <_scanf_float+0x414>
 8006dec:	7035      	strb	r5, [r6, #0]
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006df8:	d11b      	bne.n	8006e32 <_scanf_float+0x3a6>
 8006dfa:	9b01      	ldr	r3, [sp, #4]
 8006dfc:	454b      	cmp	r3, r9
 8006dfe:	eba3 0209 	sub.w	r2, r3, r9
 8006e02:	d123      	bne.n	8006e4c <_scanf_float+0x3c0>
 8006e04:	2200      	movs	r2, #0
 8006e06:	4659      	mov	r1, fp
 8006e08:	4640      	mov	r0, r8
 8006e0a:	f000 febf 	bl	8007b8c <_strtod_r>
 8006e0e:	6822      	ldr	r2, [r4, #0]
 8006e10:	9b03      	ldr	r3, [sp, #12]
 8006e12:	f012 0f02 	tst.w	r2, #2
 8006e16:	ec57 6b10 	vmov	r6, r7, d0
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	d021      	beq.n	8006e62 <_scanf_float+0x3d6>
 8006e1e:	9903      	ldr	r1, [sp, #12]
 8006e20:	1d1a      	adds	r2, r3, #4
 8006e22:	600a      	str	r2, [r1, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	e9c3 6700 	strd	r6, r7, [r3]
 8006e2a:	68e3      	ldr	r3, [r4, #12]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	60e3      	str	r3, [r4, #12]
 8006e30:	e66d      	b.n	8006b0e <_scanf_float+0x82>
 8006e32:	9b04      	ldr	r3, [sp, #16]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d0e5      	beq.n	8006e04 <_scanf_float+0x378>
 8006e38:	9905      	ldr	r1, [sp, #20]
 8006e3a:	230a      	movs	r3, #10
 8006e3c:	462a      	mov	r2, r5
 8006e3e:	3101      	adds	r1, #1
 8006e40:	4640      	mov	r0, r8
 8006e42:	f000 ff2b 	bl	8007c9c <_strtol_r>
 8006e46:	9b04      	ldr	r3, [sp, #16]
 8006e48:	9e05      	ldr	r6, [sp, #20]
 8006e4a:	1ac2      	subs	r2, r0, r3
 8006e4c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006e50:	429e      	cmp	r6, r3
 8006e52:	bf28      	it	cs
 8006e54:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006e58:	4912      	ldr	r1, [pc, #72]	; (8006ea4 <_scanf_float+0x418>)
 8006e5a:	4630      	mov	r0, r6
 8006e5c:	f000 f854 	bl	8006f08 <siprintf>
 8006e60:	e7d0      	b.n	8006e04 <_scanf_float+0x378>
 8006e62:	9903      	ldr	r1, [sp, #12]
 8006e64:	f012 0f04 	tst.w	r2, #4
 8006e68:	f103 0204 	add.w	r2, r3, #4
 8006e6c:	600a      	str	r2, [r1, #0]
 8006e6e:	d1d9      	bne.n	8006e24 <_scanf_float+0x398>
 8006e70:	f8d3 8000 	ldr.w	r8, [r3]
 8006e74:	ee10 2a10 	vmov	r2, s0
 8006e78:	ee10 0a10 	vmov	r0, s0
 8006e7c:	463b      	mov	r3, r7
 8006e7e:	4639      	mov	r1, r7
 8006e80:	f7f9 fe5c 	bl	8000b3c <__aeabi_dcmpun>
 8006e84:	b128      	cbz	r0, 8006e92 <_scanf_float+0x406>
 8006e86:	4808      	ldr	r0, [pc, #32]	; (8006ea8 <_scanf_float+0x41c>)
 8006e88:	f000 f838 	bl	8006efc <nanf>
 8006e8c:	ed88 0a00 	vstr	s0, [r8]
 8006e90:	e7cb      	b.n	8006e2a <_scanf_float+0x39e>
 8006e92:	4630      	mov	r0, r6
 8006e94:	4639      	mov	r1, r7
 8006e96:	f7f9 feaf 	bl	8000bf8 <__aeabi_d2f>
 8006e9a:	f8c8 0000 	str.w	r0, [r8]
 8006e9e:	e7c4      	b.n	8006e2a <_scanf_float+0x39e>
 8006ea0:	2500      	movs	r5, #0
 8006ea2:	e634      	b.n	8006b0e <_scanf_float+0x82>
 8006ea4:	0800a978 	.word	0x0800a978
 8006ea8:	0800ade8 	.word	0x0800ade8

08006eac <iprintf>:
 8006eac:	b40f      	push	{r0, r1, r2, r3}
 8006eae:	4b0a      	ldr	r3, [pc, #40]	; (8006ed8 <iprintf+0x2c>)
 8006eb0:	b513      	push	{r0, r1, r4, lr}
 8006eb2:	681c      	ldr	r4, [r3, #0]
 8006eb4:	b124      	cbz	r4, 8006ec0 <iprintf+0x14>
 8006eb6:	69a3      	ldr	r3, [r4, #24]
 8006eb8:	b913      	cbnz	r3, 8006ec0 <iprintf+0x14>
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f001 fdc2 	bl	8008a44 <__sinit>
 8006ec0:	ab05      	add	r3, sp, #20
 8006ec2:	9a04      	ldr	r2, [sp, #16]
 8006ec4:	68a1      	ldr	r1, [r4, #8]
 8006ec6:	9301      	str	r3, [sp, #4]
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f003 f841 	bl	8009f50 <_vfiprintf_r>
 8006ece:	b002      	add	sp, #8
 8006ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ed4:	b004      	add	sp, #16
 8006ed6:	4770      	bx	lr
 8006ed8:	20000094 	.word	0x20000094

08006edc <_sbrk_r>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	4d06      	ldr	r5, [pc, #24]	; (8006ef8 <_sbrk_r+0x1c>)
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	602b      	str	r3, [r5, #0]
 8006ee8:	f7fb fcd8 	bl	800289c <_sbrk>
 8006eec:	1c43      	adds	r3, r0, #1
 8006eee:	d102      	bne.n	8006ef6 <_sbrk_r+0x1a>
 8006ef0:	682b      	ldr	r3, [r5, #0]
 8006ef2:	b103      	cbz	r3, 8006ef6 <_sbrk_r+0x1a>
 8006ef4:	6023      	str	r3, [r4, #0]
 8006ef6:	bd38      	pop	{r3, r4, r5, pc}
 8006ef8:	20000444 	.word	0x20000444

08006efc <nanf>:
 8006efc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006f04 <nanf+0x8>
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	7fc00000 	.word	0x7fc00000

08006f08 <siprintf>:
 8006f08:	b40e      	push	{r1, r2, r3}
 8006f0a:	b500      	push	{lr}
 8006f0c:	b09c      	sub	sp, #112	; 0x70
 8006f0e:	ab1d      	add	r3, sp, #116	; 0x74
 8006f10:	9002      	str	r0, [sp, #8]
 8006f12:	9006      	str	r0, [sp, #24]
 8006f14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f18:	4809      	ldr	r0, [pc, #36]	; (8006f40 <siprintf+0x38>)
 8006f1a:	9107      	str	r1, [sp, #28]
 8006f1c:	9104      	str	r1, [sp, #16]
 8006f1e:	4909      	ldr	r1, [pc, #36]	; (8006f44 <siprintf+0x3c>)
 8006f20:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f24:	9105      	str	r1, [sp, #20]
 8006f26:	6800      	ldr	r0, [r0, #0]
 8006f28:	9301      	str	r3, [sp, #4]
 8006f2a:	a902      	add	r1, sp, #8
 8006f2c:	f002 fee6 	bl	8009cfc <_svfiprintf_r>
 8006f30:	9b02      	ldr	r3, [sp, #8]
 8006f32:	2200      	movs	r2, #0
 8006f34:	701a      	strb	r2, [r3, #0]
 8006f36:	b01c      	add	sp, #112	; 0x70
 8006f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f3c:	b003      	add	sp, #12
 8006f3e:	4770      	bx	lr
 8006f40:	20000094 	.word	0x20000094
 8006f44:	ffff0208 	.word	0xffff0208

08006f48 <sulp>:
 8006f48:	b570      	push	{r4, r5, r6, lr}
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	460d      	mov	r5, r1
 8006f4e:	ec45 4b10 	vmov	d0, r4, r5
 8006f52:	4616      	mov	r6, r2
 8006f54:	f002 fd28 	bl	80099a8 <__ulp>
 8006f58:	ec51 0b10 	vmov	r0, r1, d0
 8006f5c:	b17e      	cbz	r6, 8006f7e <sulp+0x36>
 8006f5e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006f62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	dd09      	ble.n	8006f7e <sulp+0x36>
 8006f6a:	051b      	lsls	r3, r3, #20
 8006f6c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006f70:	2400      	movs	r4, #0
 8006f72:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006f76:	4622      	mov	r2, r4
 8006f78:	462b      	mov	r3, r5
 8006f7a:	f7f9 fb45 	bl	8000608 <__aeabi_dmul>
 8006f7e:	bd70      	pop	{r4, r5, r6, pc}

08006f80 <_strtod_l>:
 8006f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f84:	ed2d 8b02 	vpush	{d8}
 8006f88:	b09d      	sub	sp, #116	; 0x74
 8006f8a:	461f      	mov	r7, r3
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	9318      	str	r3, [sp, #96]	; 0x60
 8006f90:	4ba2      	ldr	r3, [pc, #648]	; (800721c <_strtod_l+0x29c>)
 8006f92:	9213      	str	r2, [sp, #76]	; 0x4c
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	9305      	str	r3, [sp, #20]
 8006f98:	4604      	mov	r4, r0
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	4688      	mov	r8, r1
 8006f9e:	f7f9 f91f 	bl	80001e0 <strlen>
 8006fa2:	f04f 0a00 	mov.w	sl, #0
 8006fa6:	4605      	mov	r5, r0
 8006fa8:	f04f 0b00 	mov.w	fp, #0
 8006fac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006fb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fb2:	781a      	ldrb	r2, [r3, #0]
 8006fb4:	2a2b      	cmp	r2, #43	; 0x2b
 8006fb6:	d04e      	beq.n	8007056 <_strtod_l+0xd6>
 8006fb8:	d83b      	bhi.n	8007032 <_strtod_l+0xb2>
 8006fba:	2a0d      	cmp	r2, #13
 8006fbc:	d834      	bhi.n	8007028 <_strtod_l+0xa8>
 8006fbe:	2a08      	cmp	r2, #8
 8006fc0:	d834      	bhi.n	800702c <_strtod_l+0xac>
 8006fc2:	2a00      	cmp	r2, #0
 8006fc4:	d03e      	beq.n	8007044 <_strtod_l+0xc4>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	930a      	str	r3, [sp, #40]	; 0x28
 8006fca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006fcc:	7833      	ldrb	r3, [r6, #0]
 8006fce:	2b30      	cmp	r3, #48	; 0x30
 8006fd0:	f040 80b0 	bne.w	8007134 <_strtod_l+0x1b4>
 8006fd4:	7873      	ldrb	r3, [r6, #1]
 8006fd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006fda:	2b58      	cmp	r3, #88	; 0x58
 8006fdc:	d168      	bne.n	80070b0 <_strtod_l+0x130>
 8006fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fe0:	9301      	str	r3, [sp, #4]
 8006fe2:	ab18      	add	r3, sp, #96	; 0x60
 8006fe4:	9702      	str	r7, [sp, #8]
 8006fe6:	9300      	str	r3, [sp, #0]
 8006fe8:	4a8d      	ldr	r2, [pc, #564]	; (8007220 <_strtod_l+0x2a0>)
 8006fea:	ab19      	add	r3, sp, #100	; 0x64
 8006fec:	a917      	add	r1, sp, #92	; 0x5c
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f001 fe2c 	bl	8008c4c <__gethex>
 8006ff4:	f010 0707 	ands.w	r7, r0, #7
 8006ff8:	4605      	mov	r5, r0
 8006ffa:	d005      	beq.n	8007008 <_strtod_l+0x88>
 8006ffc:	2f06      	cmp	r7, #6
 8006ffe:	d12c      	bne.n	800705a <_strtod_l+0xda>
 8007000:	3601      	adds	r6, #1
 8007002:	2300      	movs	r3, #0
 8007004:	9617      	str	r6, [sp, #92]	; 0x5c
 8007006:	930a      	str	r3, [sp, #40]	; 0x28
 8007008:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800700a:	2b00      	cmp	r3, #0
 800700c:	f040 8590 	bne.w	8007b30 <_strtod_l+0xbb0>
 8007010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007012:	b1eb      	cbz	r3, 8007050 <_strtod_l+0xd0>
 8007014:	4652      	mov	r2, sl
 8007016:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800701a:	ec43 2b10 	vmov	d0, r2, r3
 800701e:	b01d      	add	sp, #116	; 0x74
 8007020:	ecbd 8b02 	vpop	{d8}
 8007024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007028:	2a20      	cmp	r2, #32
 800702a:	d1cc      	bne.n	8006fc6 <_strtod_l+0x46>
 800702c:	3301      	adds	r3, #1
 800702e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007030:	e7be      	b.n	8006fb0 <_strtod_l+0x30>
 8007032:	2a2d      	cmp	r2, #45	; 0x2d
 8007034:	d1c7      	bne.n	8006fc6 <_strtod_l+0x46>
 8007036:	2201      	movs	r2, #1
 8007038:	920a      	str	r2, [sp, #40]	; 0x28
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	9217      	str	r2, [sp, #92]	; 0x5c
 800703e:	785b      	ldrb	r3, [r3, #1]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1c2      	bne.n	8006fca <_strtod_l+0x4a>
 8007044:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007046:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800704a:	2b00      	cmp	r3, #0
 800704c:	f040 856e 	bne.w	8007b2c <_strtod_l+0xbac>
 8007050:	4652      	mov	r2, sl
 8007052:	465b      	mov	r3, fp
 8007054:	e7e1      	b.n	800701a <_strtod_l+0x9a>
 8007056:	2200      	movs	r2, #0
 8007058:	e7ee      	b.n	8007038 <_strtod_l+0xb8>
 800705a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800705c:	b13a      	cbz	r2, 800706e <_strtod_l+0xee>
 800705e:	2135      	movs	r1, #53	; 0x35
 8007060:	a81a      	add	r0, sp, #104	; 0x68
 8007062:	f002 fdac 	bl	8009bbe <__copybits>
 8007066:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007068:	4620      	mov	r0, r4
 800706a:	f002 f96b 	bl	8009344 <_Bfree>
 800706e:	3f01      	subs	r7, #1
 8007070:	2f04      	cmp	r7, #4
 8007072:	d806      	bhi.n	8007082 <_strtod_l+0x102>
 8007074:	e8df f007 	tbb	[pc, r7]
 8007078:	1714030a 	.word	0x1714030a
 800707c:	0a          	.byte	0x0a
 800707d:	00          	.byte	0x00
 800707e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007082:	0728      	lsls	r0, r5, #28
 8007084:	d5c0      	bpl.n	8007008 <_strtod_l+0x88>
 8007086:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800708a:	e7bd      	b.n	8007008 <_strtod_l+0x88>
 800708c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007090:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007092:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007096:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800709a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800709e:	e7f0      	b.n	8007082 <_strtod_l+0x102>
 80070a0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007224 <_strtod_l+0x2a4>
 80070a4:	e7ed      	b.n	8007082 <_strtod_l+0x102>
 80070a6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80070aa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80070ae:	e7e8      	b.n	8007082 <_strtod_l+0x102>
 80070b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80070b6:	785b      	ldrb	r3, [r3, #1]
 80070b8:	2b30      	cmp	r3, #48	; 0x30
 80070ba:	d0f9      	beq.n	80070b0 <_strtod_l+0x130>
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d0a3      	beq.n	8007008 <_strtod_l+0x88>
 80070c0:	2301      	movs	r3, #1
 80070c2:	f04f 0900 	mov.w	r9, #0
 80070c6:	9304      	str	r3, [sp, #16]
 80070c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070ca:	9308      	str	r3, [sp, #32]
 80070cc:	f8cd 901c 	str.w	r9, [sp, #28]
 80070d0:	464f      	mov	r7, r9
 80070d2:	220a      	movs	r2, #10
 80070d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80070d6:	7806      	ldrb	r6, [r0, #0]
 80070d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80070dc:	b2d9      	uxtb	r1, r3
 80070de:	2909      	cmp	r1, #9
 80070e0:	d92a      	bls.n	8007138 <_strtod_l+0x1b8>
 80070e2:	9905      	ldr	r1, [sp, #20]
 80070e4:	462a      	mov	r2, r5
 80070e6:	f003 f8ae 	bl	800a246 <strncmp>
 80070ea:	b398      	cbz	r0, 8007154 <_strtod_l+0x1d4>
 80070ec:	2000      	movs	r0, #0
 80070ee:	4632      	mov	r2, r6
 80070f0:	463d      	mov	r5, r7
 80070f2:	9005      	str	r0, [sp, #20]
 80070f4:	4603      	mov	r3, r0
 80070f6:	2a65      	cmp	r2, #101	; 0x65
 80070f8:	d001      	beq.n	80070fe <_strtod_l+0x17e>
 80070fa:	2a45      	cmp	r2, #69	; 0x45
 80070fc:	d118      	bne.n	8007130 <_strtod_l+0x1b0>
 80070fe:	b91d      	cbnz	r5, 8007108 <_strtod_l+0x188>
 8007100:	9a04      	ldr	r2, [sp, #16]
 8007102:	4302      	orrs	r2, r0
 8007104:	d09e      	beq.n	8007044 <_strtod_l+0xc4>
 8007106:	2500      	movs	r5, #0
 8007108:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800710c:	f108 0201 	add.w	r2, r8, #1
 8007110:	9217      	str	r2, [sp, #92]	; 0x5c
 8007112:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007116:	2a2b      	cmp	r2, #43	; 0x2b
 8007118:	d075      	beq.n	8007206 <_strtod_l+0x286>
 800711a:	2a2d      	cmp	r2, #45	; 0x2d
 800711c:	d07b      	beq.n	8007216 <_strtod_l+0x296>
 800711e:	f04f 0c00 	mov.w	ip, #0
 8007122:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007126:	2909      	cmp	r1, #9
 8007128:	f240 8082 	bls.w	8007230 <_strtod_l+0x2b0>
 800712c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007130:	2600      	movs	r6, #0
 8007132:	e09d      	b.n	8007270 <_strtod_l+0x2f0>
 8007134:	2300      	movs	r3, #0
 8007136:	e7c4      	b.n	80070c2 <_strtod_l+0x142>
 8007138:	2f08      	cmp	r7, #8
 800713a:	bfd8      	it	le
 800713c:	9907      	ldrle	r1, [sp, #28]
 800713e:	f100 0001 	add.w	r0, r0, #1
 8007142:	bfda      	itte	le
 8007144:	fb02 3301 	mlale	r3, r2, r1, r3
 8007148:	9307      	strle	r3, [sp, #28]
 800714a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800714e:	3701      	adds	r7, #1
 8007150:	9017      	str	r0, [sp, #92]	; 0x5c
 8007152:	e7bf      	b.n	80070d4 <_strtod_l+0x154>
 8007154:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007156:	195a      	adds	r2, r3, r5
 8007158:	9217      	str	r2, [sp, #92]	; 0x5c
 800715a:	5d5a      	ldrb	r2, [r3, r5]
 800715c:	2f00      	cmp	r7, #0
 800715e:	d037      	beq.n	80071d0 <_strtod_l+0x250>
 8007160:	9005      	str	r0, [sp, #20]
 8007162:	463d      	mov	r5, r7
 8007164:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007168:	2b09      	cmp	r3, #9
 800716a:	d912      	bls.n	8007192 <_strtod_l+0x212>
 800716c:	2301      	movs	r3, #1
 800716e:	e7c2      	b.n	80070f6 <_strtod_l+0x176>
 8007170:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	9217      	str	r2, [sp, #92]	; 0x5c
 8007176:	785a      	ldrb	r2, [r3, #1]
 8007178:	3001      	adds	r0, #1
 800717a:	2a30      	cmp	r2, #48	; 0x30
 800717c:	d0f8      	beq.n	8007170 <_strtod_l+0x1f0>
 800717e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007182:	2b08      	cmp	r3, #8
 8007184:	f200 84d9 	bhi.w	8007b3a <_strtod_l+0xbba>
 8007188:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800718a:	9005      	str	r0, [sp, #20]
 800718c:	2000      	movs	r0, #0
 800718e:	9308      	str	r3, [sp, #32]
 8007190:	4605      	mov	r5, r0
 8007192:	3a30      	subs	r2, #48	; 0x30
 8007194:	f100 0301 	add.w	r3, r0, #1
 8007198:	d014      	beq.n	80071c4 <_strtod_l+0x244>
 800719a:	9905      	ldr	r1, [sp, #20]
 800719c:	4419      	add	r1, r3
 800719e:	9105      	str	r1, [sp, #20]
 80071a0:	462b      	mov	r3, r5
 80071a2:	eb00 0e05 	add.w	lr, r0, r5
 80071a6:	210a      	movs	r1, #10
 80071a8:	4573      	cmp	r3, lr
 80071aa:	d113      	bne.n	80071d4 <_strtod_l+0x254>
 80071ac:	182b      	adds	r3, r5, r0
 80071ae:	2b08      	cmp	r3, #8
 80071b0:	f105 0501 	add.w	r5, r5, #1
 80071b4:	4405      	add	r5, r0
 80071b6:	dc1c      	bgt.n	80071f2 <_strtod_l+0x272>
 80071b8:	9907      	ldr	r1, [sp, #28]
 80071ba:	230a      	movs	r3, #10
 80071bc:	fb03 2301 	mla	r3, r3, r1, r2
 80071c0:	9307      	str	r3, [sp, #28]
 80071c2:	2300      	movs	r3, #0
 80071c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80071c6:	1c51      	adds	r1, r2, #1
 80071c8:	9117      	str	r1, [sp, #92]	; 0x5c
 80071ca:	7852      	ldrb	r2, [r2, #1]
 80071cc:	4618      	mov	r0, r3
 80071ce:	e7c9      	b.n	8007164 <_strtod_l+0x1e4>
 80071d0:	4638      	mov	r0, r7
 80071d2:	e7d2      	b.n	800717a <_strtod_l+0x1fa>
 80071d4:	2b08      	cmp	r3, #8
 80071d6:	dc04      	bgt.n	80071e2 <_strtod_l+0x262>
 80071d8:	9e07      	ldr	r6, [sp, #28]
 80071da:	434e      	muls	r6, r1
 80071dc:	9607      	str	r6, [sp, #28]
 80071de:	3301      	adds	r3, #1
 80071e0:	e7e2      	b.n	80071a8 <_strtod_l+0x228>
 80071e2:	f103 0c01 	add.w	ip, r3, #1
 80071e6:	f1bc 0f10 	cmp.w	ip, #16
 80071ea:	bfd8      	it	le
 80071ec:	fb01 f909 	mulle.w	r9, r1, r9
 80071f0:	e7f5      	b.n	80071de <_strtod_l+0x25e>
 80071f2:	2d10      	cmp	r5, #16
 80071f4:	bfdc      	itt	le
 80071f6:	230a      	movle	r3, #10
 80071f8:	fb03 2909 	mlale	r9, r3, r9, r2
 80071fc:	e7e1      	b.n	80071c2 <_strtod_l+0x242>
 80071fe:	2300      	movs	r3, #0
 8007200:	9305      	str	r3, [sp, #20]
 8007202:	2301      	movs	r3, #1
 8007204:	e77c      	b.n	8007100 <_strtod_l+0x180>
 8007206:	f04f 0c00 	mov.w	ip, #0
 800720a:	f108 0202 	add.w	r2, r8, #2
 800720e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007210:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007214:	e785      	b.n	8007122 <_strtod_l+0x1a2>
 8007216:	f04f 0c01 	mov.w	ip, #1
 800721a:	e7f6      	b.n	800720a <_strtod_l+0x28a>
 800721c:	0800ac2c 	.word	0x0800ac2c
 8007220:	0800a980 	.word	0x0800a980
 8007224:	7ff00000 	.word	0x7ff00000
 8007228:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800722a:	1c51      	adds	r1, r2, #1
 800722c:	9117      	str	r1, [sp, #92]	; 0x5c
 800722e:	7852      	ldrb	r2, [r2, #1]
 8007230:	2a30      	cmp	r2, #48	; 0x30
 8007232:	d0f9      	beq.n	8007228 <_strtod_l+0x2a8>
 8007234:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007238:	2908      	cmp	r1, #8
 800723a:	f63f af79 	bhi.w	8007130 <_strtod_l+0x1b0>
 800723e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007242:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007244:	9206      	str	r2, [sp, #24]
 8007246:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007248:	1c51      	adds	r1, r2, #1
 800724a:	9117      	str	r1, [sp, #92]	; 0x5c
 800724c:	7852      	ldrb	r2, [r2, #1]
 800724e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007252:	2e09      	cmp	r6, #9
 8007254:	d937      	bls.n	80072c6 <_strtod_l+0x346>
 8007256:	9e06      	ldr	r6, [sp, #24]
 8007258:	1b89      	subs	r1, r1, r6
 800725a:	2908      	cmp	r1, #8
 800725c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007260:	dc02      	bgt.n	8007268 <_strtod_l+0x2e8>
 8007262:	4576      	cmp	r6, lr
 8007264:	bfa8      	it	ge
 8007266:	4676      	movge	r6, lr
 8007268:	f1bc 0f00 	cmp.w	ip, #0
 800726c:	d000      	beq.n	8007270 <_strtod_l+0x2f0>
 800726e:	4276      	negs	r6, r6
 8007270:	2d00      	cmp	r5, #0
 8007272:	d14d      	bne.n	8007310 <_strtod_l+0x390>
 8007274:	9904      	ldr	r1, [sp, #16]
 8007276:	4301      	orrs	r1, r0
 8007278:	f47f aec6 	bne.w	8007008 <_strtod_l+0x88>
 800727c:	2b00      	cmp	r3, #0
 800727e:	f47f aee1 	bne.w	8007044 <_strtod_l+0xc4>
 8007282:	2a69      	cmp	r2, #105	; 0x69
 8007284:	d027      	beq.n	80072d6 <_strtod_l+0x356>
 8007286:	dc24      	bgt.n	80072d2 <_strtod_l+0x352>
 8007288:	2a49      	cmp	r2, #73	; 0x49
 800728a:	d024      	beq.n	80072d6 <_strtod_l+0x356>
 800728c:	2a4e      	cmp	r2, #78	; 0x4e
 800728e:	f47f aed9 	bne.w	8007044 <_strtod_l+0xc4>
 8007292:	499f      	ldr	r1, [pc, #636]	; (8007510 <_strtod_l+0x590>)
 8007294:	a817      	add	r0, sp, #92	; 0x5c
 8007296:	f001 ff31 	bl	80090fc <__match>
 800729a:	2800      	cmp	r0, #0
 800729c:	f43f aed2 	beq.w	8007044 <_strtod_l+0xc4>
 80072a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	2b28      	cmp	r3, #40	; 0x28
 80072a6:	d12d      	bne.n	8007304 <_strtod_l+0x384>
 80072a8:	499a      	ldr	r1, [pc, #616]	; (8007514 <_strtod_l+0x594>)
 80072aa:	aa1a      	add	r2, sp, #104	; 0x68
 80072ac:	a817      	add	r0, sp, #92	; 0x5c
 80072ae:	f001 ff39 	bl	8009124 <__hexnan>
 80072b2:	2805      	cmp	r0, #5
 80072b4:	d126      	bne.n	8007304 <_strtod_l+0x384>
 80072b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80072bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80072c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80072c4:	e6a0      	b.n	8007008 <_strtod_l+0x88>
 80072c6:	210a      	movs	r1, #10
 80072c8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80072cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80072d0:	e7b9      	b.n	8007246 <_strtod_l+0x2c6>
 80072d2:	2a6e      	cmp	r2, #110	; 0x6e
 80072d4:	e7db      	b.n	800728e <_strtod_l+0x30e>
 80072d6:	4990      	ldr	r1, [pc, #576]	; (8007518 <_strtod_l+0x598>)
 80072d8:	a817      	add	r0, sp, #92	; 0x5c
 80072da:	f001 ff0f 	bl	80090fc <__match>
 80072de:	2800      	cmp	r0, #0
 80072e0:	f43f aeb0 	beq.w	8007044 <_strtod_l+0xc4>
 80072e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072e6:	498d      	ldr	r1, [pc, #564]	; (800751c <_strtod_l+0x59c>)
 80072e8:	3b01      	subs	r3, #1
 80072ea:	a817      	add	r0, sp, #92	; 0x5c
 80072ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80072ee:	f001 ff05 	bl	80090fc <__match>
 80072f2:	b910      	cbnz	r0, 80072fa <_strtod_l+0x37a>
 80072f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072f6:	3301      	adds	r3, #1
 80072f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80072fa:	f8df b230 	ldr.w	fp, [pc, #560]	; 800752c <_strtod_l+0x5ac>
 80072fe:	f04f 0a00 	mov.w	sl, #0
 8007302:	e681      	b.n	8007008 <_strtod_l+0x88>
 8007304:	4886      	ldr	r0, [pc, #536]	; (8007520 <_strtod_l+0x5a0>)
 8007306:	f002 ff53 	bl	800a1b0 <nan>
 800730a:	ec5b ab10 	vmov	sl, fp, d0
 800730e:	e67b      	b.n	8007008 <_strtod_l+0x88>
 8007310:	9b05      	ldr	r3, [sp, #20]
 8007312:	9807      	ldr	r0, [sp, #28]
 8007314:	1af3      	subs	r3, r6, r3
 8007316:	2f00      	cmp	r7, #0
 8007318:	bf08      	it	eq
 800731a:	462f      	moveq	r7, r5
 800731c:	2d10      	cmp	r5, #16
 800731e:	9306      	str	r3, [sp, #24]
 8007320:	46a8      	mov	r8, r5
 8007322:	bfa8      	it	ge
 8007324:	f04f 0810 	movge.w	r8, #16
 8007328:	f7f9 f8f4 	bl	8000514 <__aeabi_ui2d>
 800732c:	2d09      	cmp	r5, #9
 800732e:	4682      	mov	sl, r0
 8007330:	468b      	mov	fp, r1
 8007332:	dd13      	ble.n	800735c <_strtod_l+0x3dc>
 8007334:	4b7b      	ldr	r3, [pc, #492]	; (8007524 <_strtod_l+0x5a4>)
 8007336:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800733a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800733e:	f7f9 f963 	bl	8000608 <__aeabi_dmul>
 8007342:	4682      	mov	sl, r0
 8007344:	4648      	mov	r0, r9
 8007346:	468b      	mov	fp, r1
 8007348:	f7f9 f8e4 	bl	8000514 <__aeabi_ui2d>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4650      	mov	r0, sl
 8007352:	4659      	mov	r1, fp
 8007354:	f7f8 ffa2 	bl	800029c <__adddf3>
 8007358:	4682      	mov	sl, r0
 800735a:	468b      	mov	fp, r1
 800735c:	2d0f      	cmp	r5, #15
 800735e:	dc38      	bgt.n	80073d2 <_strtod_l+0x452>
 8007360:	9b06      	ldr	r3, [sp, #24]
 8007362:	2b00      	cmp	r3, #0
 8007364:	f43f ae50 	beq.w	8007008 <_strtod_l+0x88>
 8007368:	dd24      	ble.n	80073b4 <_strtod_l+0x434>
 800736a:	2b16      	cmp	r3, #22
 800736c:	dc0b      	bgt.n	8007386 <_strtod_l+0x406>
 800736e:	496d      	ldr	r1, [pc, #436]	; (8007524 <_strtod_l+0x5a4>)
 8007370:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007374:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007378:	4652      	mov	r2, sl
 800737a:	465b      	mov	r3, fp
 800737c:	f7f9 f944 	bl	8000608 <__aeabi_dmul>
 8007380:	4682      	mov	sl, r0
 8007382:	468b      	mov	fp, r1
 8007384:	e640      	b.n	8007008 <_strtod_l+0x88>
 8007386:	9a06      	ldr	r2, [sp, #24]
 8007388:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800738c:	4293      	cmp	r3, r2
 800738e:	db20      	blt.n	80073d2 <_strtod_l+0x452>
 8007390:	4c64      	ldr	r4, [pc, #400]	; (8007524 <_strtod_l+0x5a4>)
 8007392:	f1c5 050f 	rsb	r5, r5, #15
 8007396:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800739a:	4652      	mov	r2, sl
 800739c:	465b      	mov	r3, fp
 800739e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073a2:	f7f9 f931 	bl	8000608 <__aeabi_dmul>
 80073a6:	9b06      	ldr	r3, [sp, #24]
 80073a8:	1b5d      	subs	r5, r3, r5
 80073aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80073ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80073b2:	e7e3      	b.n	800737c <_strtod_l+0x3fc>
 80073b4:	9b06      	ldr	r3, [sp, #24]
 80073b6:	3316      	adds	r3, #22
 80073b8:	db0b      	blt.n	80073d2 <_strtod_l+0x452>
 80073ba:	9b05      	ldr	r3, [sp, #20]
 80073bc:	1b9e      	subs	r6, r3, r6
 80073be:	4b59      	ldr	r3, [pc, #356]	; (8007524 <_strtod_l+0x5a4>)
 80073c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80073c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80073c8:	4650      	mov	r0, sl
 80073ca:	4659      	mov	r1, fp
 80073cc:	f7f9 fa46 	bl	800085c <__aeabi_ddiv>
 80073d0:	e7d6      	b.n	8007380 <_strtod_l+0x400>
 80073d2:	9b06      	ldr	r3, [sp, #24]
 80073d4:	eba5 0808 	sub.w	r8, r5, r8
 80073d8:	4498      	add	r8, r3
 80073da:	f1b8 0f00 	cmp.w	r8, #0
 80073de:	dd74      	ble.n	80074ca <_strtod_l+0x54a>
 80073e0:	f018 030f 	ands.w	r3, r8, #15
 80073e4:	d00a      	beq.n	80073fc <_strtod_l+0x47c>
 80073e6:	494f      	ldr	r1, [pc, #316]	; (8007524 <_strtod_l+0x5a4>)
 80073e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80073ec:	4652      	mov	r2, sl
 80073ee:	465b      	mov	r3, fp
 80073f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073f4:	f7f9 f908 	bl	8000608 <__aeabi_dmul>
 80073f8:	4682      	mov	sl, r0
 80073fa:	468b      	mov	fp, r1
 80073fc:	f038 080f 	bics.w	r8, r8, #15
 8007400:	d04f      	beq.n	80074a2 <_strtod_l+0x522>
 8007402:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007406:	dd22      	ble.n	800744e <_strtod_l+0x4ce>
 8007408:	2500      	movs	r5, #0
 800740a:	462e      	mov	r6, r5
 800740c:	9507      	str	r5, [sp, #28]
 800740e:	9505      	str	r5, [sp, #20]
 8007410:	2322      	movs	r3, #34	; 0x22
 8007412:	f8df b118 	ldr.w	fp, [pc, #280]	; 800752c <_strtod_l+0x5ac>
 8007416:	6023      	str	r3, [r4, #0]
 8007418:	f04f 0a00 	mov.w	sl, #0
 800741c:	9b07      	ldr	r3, [sp, #28]
 800741e:	2b00      	cmp	r3, #0
 8007420:	f43f adf2 	beq.w	8007008 <_strtod_l+0x88>
 8007424:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007426:	4620      	mov	r0, r4
 8007428:	f001 ff8c 	bl	8009344 <_Bfree>
 800742c:	9905      	ldr	r1, [sp, #20]
 800742e:	4620      	mov	r0, r4
 8007430:	f001 ff88 	bl	8009344 <_Bfree>
 8007434:	4631      	mov	r1, r6
 8007436:	4620      	mov	r0, r4
 8007438:	f001 ff84 	bl	8009344 <_Bfree>
 800743c:	9907      	ldr	r1, [sp, #28]
 800743e:	4620      	mov	r0, r4
 8007440:	f001 ff80 	bl	8009344 <_Bfree>
 8007444:	4629      	mov	r1, r5
 8007446:	4620      	mov	r0, r4
 8007448:	f001 ff7c 	bl	8009344 <_Bfree>
 800744c:	e5dc      	b.n	8007008 <_strtod_l+0x88>
 800744e:	4b36      	ldr	r3, [pc, #216]	; (8007528 <_strtod_l+0x5a8>)
 8007450:	9304      	str	r3, [sp, #16]
 8007452:	2300      	movs	r3, #0
 8007454:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007458:	4650      	mov	r0, sl
 800745a:	4659      	mov	r1, fp
 800745c:	4699      	mov	r9, r3
 800745e:	f1b8 0f01 	cmp.w	r8, #1
 8007462:	dc21      	bgt.n	80074a8 <_strtod_l+0x528>
 8007464:	b10b      	cbz	r3, 800746a <_strtod_l+0x4ea>
 8007466:	4682      	mov	sl, r0
 8007468:	468b      	mov	fp, r1
 800746a:	4b2f      	ldr	r3, [pc, #188]	; (8007528 <_strtod_l+0x5a8>)
 800746c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007470:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007474:	4652      	mov	r2, sl
 8007476:	465b      	mov	r3, fp
 8007478:	e9d9 0100 	ldrd	r0, r1, [r9]
 800747c:	f7f9 f8c4 	bl	8000608 <__aeabi_dmul>
 8007480:	4b2a      	ldr	r3, [pc, #168]	; (800752c <_strtod_l+0x5ac>)
 8007482:	460a      	mov	r2, r1
 8007484:	400b      	ands	r3, r1
 8007486:	492a      	ldr	r1, [pc, #168]	; (8007530 <_strtod_l+0x5b0>)
 8007488:	428b      	cmp	r3, r1
 800748a:	4682      	mov	sl, r0
 800748c:	d8bc      	bhi.n	8007408 <_strtod_l+0x488>
 800748e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007492:	428b      	cmp	r3, r1
 8007494:	bf86      	itte	hi
 8007496:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007534 <_strtod_l+0x5b4>
 800749a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800749e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80074a2:	2300      	movs	r3, #0
 80074a4:	9304      	str	r3, [sp, #16]
 80074a6:	e084      	b.n	80075b2 <_strtod_l+0x632>
 80074a8:	f018 0f01 	tst.w	r8, #1
 80074ac:	d005      	beq.n	80074ba <_strtod_l+0x53a>
 80074ae:	9b04      	ldr	r3, [sp, #16]
 80074b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b4:	f7f9 f8a8 	bl	8000608 <__aeabi_dmul>
 80074b8:	2301      	movs	r3, #1
 80074ba:	9a04      	ldr	r2, [sp, #16]
 80074bc:	3208      	adds	r2, #8
 80074be:	f109 0901 	add.w	r9, r9, #1
 80074c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80074c6:	9204      	str	r2, [sp, #16]
 80074c8:	e7c9      	b.n	800745e <_strtod_l+0x4de>
 80074ca:	d0ea      	beq.n	80074a2 <_strtod_l+0x522>
 80074cc:	f1c8 0800 	rsb	r8, r8, #0
 80074d0:	f018 020f 	ands.w	r2, r8, #15
 80074d4:	d00a      	beq.n	80074ec <_strtod_l+0x56c>
 80074d6:	4b13      	ldr	r3, [pc, #76]	; (8007524 <_strtod_l+0x5a4>)
 80074d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074dc:	4650      	mov	r0, sl
 80074de:	4659      	mov	r1, fp
 80074e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e4:	f7f9 f9ba 	bl	800085c <__aeabi_ddiv>
 80074e8:	4682      	mov	sl, r0
 80074ea:	468b      	mov	fp, r1
 80074ec:	ea5f 1828 	movs.w	r8, r8, asr #4
 80074f0:	d0d7      	beq.n	80074a2 <_strtod_l+0x522>
 80074f2:	f1b8 0f1f 	cmp.w	r8, #31
 80074f6:	dd1f      	ble.n	8007538 <_strtod_l+0x5b8>
 80074f8:	2500      	movs	r5, #0
 80074fa:	462e      	mov	r6, r5
 80074fc:	9507      	str	r5, [sp, #28]
 80074fe:	9505      	str	r5, [sp, #20]
 8007500:	2322      	movs	r3, #34	; 0x22
 8007502:	f04f 0a00 	mov.w	sl, #0
 8007506:	f04f 0b00 	mov.w	fp, #0
 800750a:	6023      	str	r3, [r4, #0]
 800750c:	e786      	b.n	800741c <_strtod_l+0x49c>
 800750e:	bf00      	nop
 8007510:	0800a951 	.word	0x0800a951
 8007514:	0800a994 	.word	0x0800a994
 8007518:	0800a949 	.word	0x0800a949
 800751c:	0800aad4 	.word	0x0800aad4
 8007520:	0800ade8 	.word	0x0800ade8
 8007524:	0800acc8 	.word	0x0800acc8
 8007528:	0800aca0 	.word	0x0800aca0
 800752c:	7ff00000 	.word	0x7ff00000
 8007530:	7ca00000 	.word	0x7ca00000
 8007534:	7fefffff 	.word	0x7fefffff
 8007538:	f018 0310 	ands.w	r3, r8, #16
 800753c:	bf18      	it	ne
 800753e:	236a      	movne	r3, #106	; 0x6a
 8007540:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80078f0 <_strtod_l+0x970>
 8007544:	9304      	str	r3, [sp, #16]
 8007546:	4650      	mov	r0, sl
 8007548:	4659      	mov	r1, fp
 800754a:	2300      	movs	r3, #0
 800754c:	f018 0f01 	tst.w	r8, #1
 8007550:	d004      	beq.n	800755c <_strtod_l+0x5dc>
 8007552:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007556:	f7f9 f857 	bl	8000608 <__aeabi_dmul>
 800755a:	2301      	movs	r3, #1
 800755c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007560:	f109 0908 	add.w	r9, r9, #8
 8007564:	d1f2      	bne.n	800754c <_strtod_l+0x5cc>
 8007566:	b10b      	cbz	r3, 800756c <_strtod_l+0x5ec>
 8007568:	4682      	mov	sl, r0
 800756a:	468b      	mov	fp, r1
 800756c:	9b04      	ldr	r3, [sp, #16]
 800756e:	b1c3      	cbz	r3, 80075a2 <_strtod_l+0x622>
 8007570:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007574:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007578:	2b00      	cmp	r3, #0
 800757a:	4659      	mov	r1, fp
 800757c:	dd11      	ble.n	80075a2 <_strtod_l+0x622>
 800757e:	2b1f      	cmp	r3, #31
 8007580:	f340 8124 	ble.w	80077cc <_strtod_l+0x84c>
 8007584:	2b34      	cmp	r3, #52	; 0x34
 8007586:	bfde      	ittt	le
 8007588:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800758c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8007590:	fa03 f202 	lslle.w	r2, r3, r2
 8007594:	f04f 0a00 	mov.w	sl, #0
 8007598:	bfcc      	ite	gt
 800759a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800759e:	ea02 0b01 	andle.w	fp, r2, r1
 80075a2:	2200      	movs	r2, #0
 80075a4:	2300      	movs	r3, #0
 80075a6:	4650      	mov	r0, sl
 80075a8:	4659      	mov	r1, fp
 80075aa:	f7f9 fa95 	bl	8000ad8 <__aeabi_dcmpeq>
 80075ae:	2800      	cmp	r0, #0
 80075b0:	d1a2      	bne.n	80074f8 <_strtod_l+0x578>
 80075b2:	9b07      	ldr	r3, [sp, #28]
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	9908      	ldr	r1, [sp, #32]
 80075b8:	462b      	mov	r3, r5
 80075ba:	463a      	mov	r2, r7
 80075bc:	4620      	mov	r0, r4
 80075be:	f001 ff29 	bl	8009414 <__s2b>
 80075c2:	9007      	str	r0, [sp, #28]
 80075c4:	2800      	cmp	r0, #0
 80075c6:	f43f af1f 	beq.w	8007408 <_strtod_l+0x488>
 80075ca:	9b05      	ldr	r3, [sp, #20]
 80075cc:	1b9e      	subs	r6, r3, r6
 80075ce:	9b06      	ldr	r3, [sp, #24]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	bfb4      	ite	lt
 80075d4:	4633      	movlt	r3, r6
 80075d6:	2300      	movge	r3, #0
 80075d8:	930c      	str	r3, [sp, #48]	; 0x30
 80075da:	9b06      	ldr	r3, [sp, #24]
 80075dc:	2500      	movs	r5, #0
 80075de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80075e2:	9312      	str	r3, [sp, #72]	; 0x48
 80075e4:	462e      	mov	r6, r5
 80075e6:	9b07      	ldr	r3, [sp, #28]
 80075e8:	4620      	mov	r0, r4
 80075ea:	6859      	ldr	r1, [r3, #4]
 80075ec:	f001 fe6a 	bl	80092c4 <_Balloc>
 80075f0:	9005      	str	r0, [sp, #20]
 80075f2:	2800      	cmp	r0, #0
 80075f4:	f43f af0c 	beq.w	8007410 <_strtod_l+0x490>
 80075f8:	9b07      	ldr	r3, [sp, #28]
 80075fa:	691a      	ldr	r2, [r3, #16]
 80075fc:	3202      	adds	r2, #2
 80075fe:	f103 010c 	add.w	r1, r3, #12
 8007602:	0092      	lsls	r2, r2, #2
 8007604:	300c      	adds	r0, #12
 8007606:	f001 fe42 	bl	800928e <memcpy>
 800760a:	ec4b ab10 	vmov	d0, sl, fp
 800760e:	aa1a      	add	r2, sp, #104	; 0x68
 8007610:	a919      	add	r1, sp, #100	; 0x64
 8007612:	4620      	mov	r0, r4
 8007614:	f002 fa44 	bl	8009aa0 <__d2b>
 8007618:	ec4b ab18 	vmov	d8, sl, fp
 800761c:	9018      	str	r0, [sp, #96]	; 0x60
 800761e:	2800      	cmp	r0, #0
 8007620:	f43f aef6 	beq.w	8007410 <_strtod_l+0x490>
 8007624:	2101      	movs	r1, #1
 8007626:	4620      	mov	r0, r4
 8007628:	f001 ff8e 	bl	8009548 <__i2b>
 800762c:	4606      	mov	r6, r0
 800762e:	2800      	cmp	r0, #0
 8007630:	f43f aeee 	beq.w	8007410 <_strtod_l+0x490>
 8007634:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007636:	9904      	ldr	r1, [sp, #16]
 8007638:	2b00      	cmp	r3, #0
 800763a:	bfab      	itete	ge
 800763c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800763e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007640:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007642:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007646:	bfac      	ite	ge
 8007648:	eb03 0902 	addge.w	r9, r3, r2
 800764c:	1ad7      	sublt	r7, r2, r3
 800764e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007650:	eba3 0801 	sub.w	r8, r3, r1
 8007654:	4490      	add	r8, r2
 8007656:	4ba1      	ldr	r3, [pc, #644]	; (80078dc <_strtod_l+0x95c>)
 8007658:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800765c:	4598      	cmp	r8, r3
 800765e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007662:	f280 80c7 	bge.w	80077f4 <_strtod_l+0x874>
 8007666:	eba3 0308 	sub.w	r3, r3, r8
 800766a:	2b1f      	cmp	r3, #31
 800766c:	eba2 0203 	sub.w	r2, r2, r3
 8007670:	f04f 0101 	mov.w	r1, #1
 8007674:	f300 80b1 	bgt.w	80077da <_strtod_l+0x85a>
 8007678:	fa01 f303 	lsl.w	r3, r1, r3
 800767c:	930d      	str	r3, [sp, #52]	; 0x34
 800767e:	2300      	movs	r3, #0
 8007680:	9308      	str	r3, [sp, #32]
 8007682:	eb09 0802 	add.w	r8, r9, r2
 8007686:	9b04      	ldr	r3, [sp, #16]
 8007688:	45c1      	cmp	r9, r8
 800768a:	4417      	add	r7, r2
 800768c:	441f      	add	r7, r3
 800768e:	464b      	mov	r3, r9
 8007690:	bfa8      	it	ge
 8007692:	4643      	movge	r3, r8
 8007694:	42bb      	cmp	r3, r7
 8007696:	bfa8      	it	ge
 8007698:	463b      	movge	r3, r7
 800769a:	2b00      	cmp	r3, #0
 800769c:	bfc2      	ittt	gt
 800769e:	eba8 0803 	subgt.w	r8, r8, r3
 80076a2:	1aff      	subgt	r7, r7, r3
 80076a4:	eba9 0903 	subgt.w	r9, r9, r3
 80076a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	dd17      	ble.n	80076de <_strtod_l+0x75e>
 80076ae:	4631      	mov	r1, r6
 80076b0:	461a      	mov	r2, r3
 80076b2:	4620      	mov	r0, r4
 80076b4:	f002 f808 	bl	80096c8 <__pow5mult>
 80076b8:	4606      	mov	r6, r0
 80076ba:	2800      	cmp	r0, #0
 80076bc:	f43f aea8 	beq.w	8007410 <_strtod_l+0x490>
 80076c0:	4601      	mov	r1, r0
 80076c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80076c4:	4620      	mov	r0, r4
 80076c6:	f001 ff55 	bl	8009574 <__multiply>
 80076ca:	900b      	str	r0, [sp, #44]	; 0x2c
 80076cc:	2800      	cmp	r0, #0
 80076ce:	f43f ae9f 	beq.w	8007410 <_strtod_l+0x490>
 80076d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80076d4:	4620      	mov	r0, r4
 80076d6:	f001 fe35 	bl	8009344 <_Bfree>
 80076da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076dc:	9318      	str	r3, [sp, #96]	; 0x60
 80076de:	f1b8 0f00 	cmp.w	r8, #0
 80076e2:	f300 808c 	bgt.w	80077fe <_strtod_l+0x87e>
 80076e6:	9b06      	ldr	r3, [sp, #24]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	dd08      	ble.n	80076fe <_strtod_l+0x77e>
 80076ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076ee:	9905      	ldr	r1, [sp, #20]
 80076f0:	4620      	mov	r0, r4
 80076f2:	f001 ffe9 	bl	80096c8 <__pow5mult>
 80076f6:	9005      	str	r0, [sp, #20]
 80076f8:	2800      	cmp	r0, #0
 80076fa:	f43f ae89 	beq.w	8007410 <_strtod_l+0x490>
 80076fe:	2f00      	cmp	r7, #0
 8007700:	dd08      	ble.n	8007714 <_strtod_l+0x794>
 8007702:	9905      	ldr	r1, [sp, #20]
 8007704:	463a      	mov	r2, r7
 8007706:	4620      	mov	r0, r4
 8007708:	f002 f838 	bl	800977c <__lshift>
 800770c:	9005      	str	r0, [sp, #20]
 800770e:	2800      	cmp	r0, #0
 8007710:	f43f ae7e 	beq.w	8007410 <_strtod_l+0x490>
 8007714:	f1b9 0f00 	cmp.w	r9, #0
 8007718:	dd08      	ble.n	800772c <_strtod_l+0x7ac>
 800771a:	4631      	mov	r1, r6
 800771c:	464a      	mov	r2, r9
 800771e:	4620      	mov	r0, r4
 8007720:	f002 f82c 	bl	800977c <__lshift>
 8007724:	4606      	mov	r6, r0
 8007726:	2800      	cmp	r0, #0
 8007728:	f43f ae72 	beq.w	8007410 <_strtod_l+0x490>
 800772c:	9a05      	ldr	r2, [sp, #20]
 800772e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007730:	4620      	mov	r0, r4
 8007732:	f002 f8af 	bl	8009894 <__mdiff>
 8007736:	4605      	mov	r5, r0
 8007738:	2800      	cmp	r0, #0
 800773a:	f43f ae69 	beq.w	8007410 <_strtod_l+0x490>
 800773e:	68c3      	ldr	r3, [r0, #12]
 8007740:	930b      	str	r3, [sp, #44]	; 0x2c
 8007742:	2300      	movs	r3, #0
 8007744:	60c3      	str	r3, [r0, #12]
 8007746:	4631      	mov	r1, r6
 8007748:	f002 f888 	bl	800985c <__mcmp>
 800774c:	2800      	cmp	r0, #0
 800774e:	da60      	bge.n	8007812 <_strtod_l+0x892>
 8007750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007752:	ea53 030a 	orrs.w	r3, r3, sl
 8007756:	f040 8082 	bne.w	800785e <_strtod_l+0x8de>
 800775a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800775e:	2b00      	cmp	r3, #0
 8007760:	d17d      	bne.n	800785e <_strtod_l+0x8de>
 8007762:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007766:	0d1b      	lsrs	r3, r3, #20
 8007768:	051b      	lsls	r3, r3, #20
 800776a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800776e:	d976      	bls.n	800785e <_strtod_l+0x8de>
 8007770:	696b      	ldr	r3, [r5, #20]
 8007772:	b913      	cbnz	r3, 800777a <_strtod_l+0x7fa>
 8007774:	692b      	ldr	r3, [r5, #16]
 8007776:	2b01      	cmp	r3, #1
 8007778:	dd71      	ble.n	800785e <_strtod_l+0x8de>
 800777a:	4629      	mov	r1, r5
 800777c:	2201      	movs	r2, #1
 800777e:	4620      	mov	r0, r4
 8007780:	f001 fffc 	bl	800977c <__lshift>
 8007784:	4631      	mov	r1, r6
 8007786:	4605      	mov	r5, r0
 8007788:	f002 f868 	bl	800985c <__mcmp>
 800778c:	2800      	cmp	r0, #0
 800778e:	dd66      	ble.n	800785e <_strtod_l+0x8de>
 8007790:	9904      	ldr	r1, [sp, #16]
 8007792:	4a53      	ldr	r2, [pc, #332]	; (80078e0 <_strtod_l+0x960>)
 8007794:	465b      	mov	r3, fp
 8007796:	2900      	cmp	r1, #0
 8007798:	f000 8081 	beq.w	800789e <_strtod_l+0x91e>
 800779c:	ea02 010b 	and.w	r1, r2, fp
 80077a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80077a4:	dc7b      	bgt.n	800789e <_strtod_l+0x91e>
 80077a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80077aa:	f77f aea9 	ble.w	8007500 <_strtod_l+0x580>
 80077ae:	4b4d      	ldr	r3, [pc, #308]	; (80078e4 <_strtod_l+0x964>)
 80077b0:	4650      	mov	r0, sl
 80077b2:	4659      	mov	r1, fp
 80077b4:	2200      	movs	r2, #0
 80077b6:	f7f8 ff27 	bl	8000608 <__aeabi_dmul>
 80077ba:	460b      	mov	r3, r1
 80077bc:	4303      	orrs	r3, r0
 80077be:	bf08      	it	eq
 80077c0:	2322      	moveq	r3, #34	; 0x22
 80077c2:	4682      	mov	sl, r0
 80077c4:	468b      	mov	fp, r1
 80077c6:	bf08      	it	eq
 80077c8:	6023      	streq	r3, [r4, #0]
 80077ca:	e62b      	b.n	8007424 <_strtod_l+0x4a4>
 80077cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077d0:	fa02 f303 	lsl.w	r3, r2, r3
 80077d4:	ea03 0a0a 	and.w	sl, r3, sl
 80077d8:	e6e3      	b.n	80075a2 <_strtod_l+0x622>
 80077da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80077de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80077e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80077e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80077ea:	fa01 f308 	lsl.w	r3, r1, r8
 80077ee:	9308      	str	r3, [sp, #32]
 80077f0:	910d      	str	r1, [sp, #52]	; 0x34
 80077f2:	e746      	b.n	8007682 <_strtod_l+0x702>
 80077f4:	2300      	movs	r3, #0
 80077f6:	9308      	str	r3, [sp, #32]
 80077f8:	2301      	movs	r3, #1
 80077fa:	930d      	str	r3, [sp, #52]	; 0x34
 80077fc:	e741      	b.n	8007682 <_strtod_l+0x702>
 80077fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007800:	4642      	mov	r2, r8
 8007802:	4620      	mov	r0, r4
 8007804:	f001 ffba 	bl	800977c <__lshift>
 8007808:	9018      	str	r0, [sp, #96]	; 0x60
 800780a:	2800      	cmp	r0, #0
 800780c:	f47f af6b 	bne.w	80076e6 <_strtod_l+0x766>
 8007810:	e5fe      	b.n	8007410 <_strtod_l+0x490>
 8007812:	465f      	mov	r7, fp
 8007814:	d16e      	bne.n	80078f4 <_strtod_l+0x974>
 8007816:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007818:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800781c:	b342      	cbz	r2, 8007870 <_strtod_l+0x8f0>
 800781e:	4a32      	ldr	r2, [pc, #200]	; (80078e8 <_strtod_l+0x968>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d128      	bne.n	8007876 <_strtod_l+0x8f6>
 8007824:	9b04      	ldr	r3, [sp, #16]
 8007826:	4651      	mov	r1, sl
 8007828:	b1eb      	cbz	r3, 8007866 <_strtod_l+0x8e6>
 800782a:	4b2d      	ldr	r3, [pc, #180]	; (80078e0 <_strtod_l+0x960>)
 800782c:	403b      	ands	r3, r7
 800782e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007832:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007836:	d819      	bhi.n	800786c <_strtod_l+0x8ec>
 8007838:	0d1b      	lsrs	r3, r3, #20
 800783a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800783e:	fa02 f303 	lsl.w	r3, r2, r3
 8007842:	4299      	cmp	r1, r3
 8007844:	d117      	bne.n	8007876 <_strtod_l+0x8f6>
 8007846:	4b29      	ldr	r3, [pc, #164]	; (80078ec <_strtod_l+0x96c>)
 8007848:	429f      	cmp	r7, r3
 800784a:	d102      	bne.n	8007852 <_strtod_l+0x8d2>
 800784c:	3101      	adds	r1, #1
 800784e:	f43f addf 	beq.w	8007410 <_strtod_l+0x490>
 8007852:	4b23      	ldr	r3, [pc, #140]	; (80078e0 <_strtod_l+0x960>)
 8007854:	403b      	ands	r3, r7
 8007856:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800785a:	f04f 0a00 	mov.w	sl, #0
 800785e:	9b04      	ldr	r3, [sp, #16]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1a4      	bne.n	80077ae <_strtod_l+0x82e>
 8007864:	e5de      	b.n	8007424 <_strtod_l+0x4a4>
 8007866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800786a:	e7ea      	b.n	8007842 <_strtod_l+0x8c2>
 800786c:	4613      	mov	r3, r2
 800786e:	e7e8      	b.n	8007842 <_strtod_l+0x8c2>
 8007870:	ea53 030a 	orrs.w	r3, r3, sl
 8007874:	d08c      	beq.n	8007790 <_strtod_l+0x810>
 8007876:	9b08      	ldr	r3, [sp, #32]
 8007878:	b1db      	cbz	r3, 80078b2 <_strtod_l+0x932>
 800787a:	423b      	tst	r3, r7
 800787c:	d0ef      	beq.n	800785e <_strtod_l+0x8de>
 800787e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007880:	9a04      	ldr	r2, [sp, #16]
 8007882:	4650      	mov	r0, sl
 8007884:	4659      	mov	r1, fp
 8007886:	b1c3      	cbz	r3, 80078ba <_strtod_l+0x93a>
 8007888:	f7ff fb5e 	bl	8006f48 <sulp>
 800788c:	4602      	mov	r2, r0
 800788e:	460b      	mov	r3, r1
 8007890:	ec51 0b18 	vmov	r0, r1, d8
 8007894:	f7f8 fd02 	bl	800029c <__adddf3>
 8007898:	4682      	mov	sl, r0
 800789a:	468b      	mov	fp, r1
 800789c:	e7df      	b.n	800785e <_strtod_l+0x8de>
 800789e:	4013      	ands	r3, r2
 80078a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80078a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80078a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80078ac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80078b0:	e7d5      	b.n	800785e <_strtod_l+0x8de>
 80078b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078b4:	ea13 0f0a 	tst.w	r3, sl
 80078b8:	e7e0      	b.n	800787c <_strtod_l+0x8fc>
 80078ba:	f7ff fb45 	bl	8006f48 <sulp>
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	ec51 0b18 	vmov	r0, r1, d8
 80078c6:	f7f8 fce7 	bl	8000298 <__aeabi_dsub>
 80078ca:	2200      	movs	r2, #0
 80078cc:	2300      	movs	r3, #0
 80078ce:	4682      	mov	sl, r0
 80078d0:	468b      	mov	fp, r1
 80078d2:	f7f9 f901 	bl	8000ad8 <__aeabi_dcmpeq>
 80078d6:	2800      	cmp	r0, #0
 80078d8:	d0c1      	beq.n	800785e <_strtod_l+0x8de>
 80078da:	e611      	b.n	8007500 <_strtod_l+0x580>
 80078dc:	fffffc02 	.word	0xfffffc02
 80078e0:	7ff00000 	.word	0x7ff00000
 80078e4:	39500000 	.word	0x39500000
 80078e8:	000fffff 	.word	0x000fffff
 80078ec:	7fefffff 	.word	0x7fefffff
 80078f0:	0800a9a8 	.word	0x0800a9a8
 80078f4:	4631      	mov	r1, r6
 80078f6:	4628      	mov	r0, r5
 80078f8:	f002 f92e 	bl	8009b58 <__ratio>
 80078fc:	ec59 8b10 	vmov	r8, r9, d0
 8007900:	ee10 0a10 	vmov	r0, s0
 8007904:	2200      	movs	r2, #0
 8007906:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800790a:	4649      	mov	r1, r9
 800790c:	f7f9 f8f8 	bl	8000b00 <__aeabi_dcmple>
 8007910:	2800      	cmp	r0, #0
 8007912:	d07a      	beq.n	8007a0a <_strtod_l+0xa8a>
 8007914:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007916:	2b00      	cmp	r3, #0
 8007918:	d04a      	beq.n	80079b0 <_strtod_l+0xa30>
 800791a:	4b95      	ldr	r3, [pc, #596]	; (8007b70 <_strtod_l+0xbf0>)
 800791c:	2200      	movs	r2, #0
 800791e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007922:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007b70 <_strtod_l+0xbf0>
 8007926:	f04f 0800 	mov.w	r8, #0
 800792a:	4b92      	ldr	r3, [pc, #584]	; (8007b74 <_strtod_l+0xbf4>)
 800792c:	403b      	ands	r3, r7
 800792e:	930d      	str	r3, [sp, #52]	; 0x34
 8007930:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007932:	4b91      	ldr	r3, [pc, #580]	; (8007b78 <_strtod_l+0xbf8>)
 8007934:	429a      	cmp	r2, r3
 8007936:	f040 80b0 	bne.w	8007a9a <_strtod_l+0xb1a>
 800793a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800793e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007942:	ec4b ab10 	vmov	d0, sl, fp
 8007946:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800794a:	f002 f82d 	bl	80099a8 <__ulp>
 800794e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007952:	ec53 2b10 	vmov	r2, r3, d0
 8007956:	f7f8 fe57 	bl	8000608 <__aeabi_dmul>
 800795a:	4652      	mov	r2, sl
 800795c:	465b      	mov	r3, fp
 800795e:	f7f8 fc9d 	bl	800029c <__adddf3>
 8007962:	460b      	mov	r3, r1
 8007964:	4983      	ldr	r1, [pc, #524]	; (8007b74 <_strtod_l+0xbf4>)
 8007966:	4a85      	ldr	r2, [pc, #532]	; (8007b7c <_strtod_l+0xbfc>)
 8007968:	4019      	ands	r1, r3
 800796a:	4291      	cmp	r1, r2
 800796c:	4682      	mov	sl, r0
 800796e:	d960      	bls.n	8007a32 <_strtod_l+0xab2>
 8007970:	ee18 3a90 	vmov	r3, s17
 8007974:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007978:	4293      	cmp	r3, r2
 800797a:	d104      	bne.n	8007986 <_strtod_l+0xa06>
 800797c:	ee18 3a10 	vmov	r3, s16
 8007980:	3301      	adds	r3, #1
 8007982:	f43f ad45 	beq.w	8007410 <_strtod_l+0x490>
 8007986:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007b88 <_strtod_l+0xc08>
 800798a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800798e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007990:	4620      	mov	r0, r4
 8007992:	f001 fcd7 	bl	8009344 <_Bfree>
 8007996:	9905      	ldr	r1, [sp, #20]
 8007998:	4620      	mov	r0, r4
 800799a:	f001 fcd3 	bl	8009344 <_Bfree>
 800799e:	4631      	mov	r1, r6
 80079a0:	4620      	mov	r0, r4
 80079a2:	f001 fccf 	bl	8009344 <_Bfree>
 80079a6:	4629      	mov	r1, r5
 80079a8:	4620      	mov	r0, r4
 80079aa:	f001 fccb 	bl	8009344 <_Bfree>
 80079ae:	e61a      	b.n	80075e6 <_strtod_l+0x666>
 80079b0:	f1ba 0f00 	cmp.w	sl, #0
 80079b4:	d11b      	bne.n	80079ee <_strtod_l+0xa6e>
 80079b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079ba:	b9f3      	cbnz	r3, 80079fa <_strtod_l+0xa7a>
 80079bc:	4b6c      	ldr	r3, [pc, #432]	; (8007b70 <_strtod_l+0xbf0>)
 80079be:	2200      	movs	r2, #0
 80079c0:	4640      	mov	r0, r8
 80079c2:	4649      	mov	r1, r9
 80079c4:	f7f9 f892 	bl	8000aec <__aeabi_dcmplt>
 80079c8:	b9d0      	cbnz	r0, 8007a00 <_strtod_l+0xa80>
 80079ca:	4640      	mov	r0, r8
 80079cc:	4649      	mov	r1, r9
 80079ce:	4b6c      	ldr	r3, [pc, #432]	; (8007b80 <_strtod_l+0xc00>)
 80079d0:	2200      	movs	r2, #0
 80079d2:	f7f8 fe19 	bl	8000608 <__aeabi_dmul>
 80079d6:	4680      	mov	r8, r0
 80079d8:	4689      	mov	r9, r1
 80079da:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80079de:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80079e2:	9315      	str	r3, [sp, #84]	; 0x54
 80079e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80079e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80079ec:	e79d      	b.n	800792a <_strtod_l+0x9aa>
 80079ee:	f1ba 0f01 	cmp.w	sl, #1
 80079f2:	d102      	bne.n	80079fa <_strtod_l+0xa7a>
 80079f4:	2f00      	cmp	r7, #0
 80079f6:	f43f ad83 	beq.w	8007500 <_strtod_l+0x580>
 80079fa:	4b62      	ldr	r3, [pc, #392]	; (8007b84 <_strtod_l+0xc04>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	e78e      	b.n	800791e <_strtod_l+0x99e>
 8007a00:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007b80 <_strtod_l+0xc00>
 8007a04:	f04f 0800 	mov.w	r8, #0
 8007a08:	e7e7      	b.n	80079da <_strtod_l+0xa5a>
 8007a0a:	4b5d      	ldr	r3, [pc, #372]	; (8007b80 <_strtod_l+0xc00>)
 8007a0c:	4640      	mov	r0, r8
 8007a0e:	4649      	mov	r1, r9
 8007a10:	2200      	movs	r2, #0
 8007a12:	f7f8 fdf9 	bl	8000608 <__aeabi_dmul>
 8007a16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a18:	4680      	mov	r8, r0
 8007a1a:	4689      	mov	r9, r1
 8007a1c:	b933      	cbnz	r3, 8007a2c <_strtod_l+0xaac>
 8007a1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a22:	900e      	str	r0, [sp, #56]	; 0x38
 8007a24:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007a2a:	e7dd      	b.n	80079e8 <_strtod_l+0xa68>
 8007a2c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007a30:	e7f9      	b.n	8007a26 <_strtod_l+0xaa6>
 8007a32:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007a36:	9b04      	ldr	r3, [sp, #16]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1a8      	bne.n	800798e <_strtod_l+0xa0e>
 8007a3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007a40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a42:	0d1b      	lsrs	r3, r3, #20
 8007a44:	051b      	lsls	r3, r3, #20
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d1a1      	bne.n	800798e <_strtod_l+0xa0e>
 8007a4a:	4640      	mov	r0, r8
 8007a4c:	4649      	mov	r1, r9
 8007a4e:	f7f9 f93b 	bl	8000cc8 <__aeabi_d2lz>
 8007a52:	f7f8 fdab 	bl	80005ac <__aeabi_l2d>
 8007a56:	4602      	mov	r2, r0
 8007a58:	460b      	mov	r3, r1
 8007a5a:	4640      	mov	r0, r8
 8007a5c:	4649      	mov	r1, r9
 8007a5e:	f7f8 fc1b 	bl	8000298 <__aeabi_dsub>
 8007a62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a68:	ea43 030a 	orr.w	r3, r3, sl
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	4680      	mov	r8, r0
 8007a70:	4689      	mov	r9, r1
 8007a72:	d055      	beq.n	8007b20 <_strtod_l+0xba0>
 8007a74:	a336      	add	r3, pc, #216	; (adr r3, 8007b50 <_strtod_l+0xbd0>)
 8007a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7a:	f7f9 f837 	bl	8000aec <__aeabi_dcmplt>
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	f47f acd0 	bne.w	8007424 <_strtod_l+0x4a4>
 8007a84:	a334      	add	r3, pc, #208	; (adr r3, 8007b58 <_strtod_l+0xbd8>)
 8007a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8a:	4640      	mov	r0, r8
 8007a8c:	4649      	mov	r1, r9
 8007a8e:	f7f9 f84b 	bl	8000b28 <__aeabi_dcmpgt>
 8007a92:	2800      	cmp	r0, #0
 8007a94:	f43f af7b 	beq.w	800798e <_strtod_l+0xa0e>
 8007a98:	e4c4      	b.n	8007424 <_strtod_l+0x4a4>
 8007a9a:	9b04      	ldr	r3, [sp, #16]
 8007a9c:	b333      	cbz	r3, 8007aec <_strtod_l+0xb6c>
 8007a9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007aa0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007aa4:	d822      	bhi.n	8007aec <_strtod_l+0xb6c>
 8007aa6:	a32e      	add	r3, pc, #184	; (adr r3, 8007b60 <_strtod_l+0xbe0>)
 8007aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aac:	4640      	mov	r0, r8
 8007aae:	4649      	mov	r1, r9
 8007ab0:	f7f9 f826 	bl	8000b00 <__aeabi_dcmple>
 8007ab4:	b1a0      	cbz	r0, 8007ae0 <_strtod_l+0xb60>
 8007ab6:	4649      	mov	r1, r9
 8007ab8:	4640      	mov	r0, r8
 8007aba:	f7f9 f87d 	bl	8000bb8 <__aeabi_d2uiz>
 8007abe:	2801      	cmp	r0, #1
 8007ac0:	bf38      	it	cc
 8007ac2:	2001      	movcc	r0, #1
 8007ac4:	f7f8 fd26 	bl	8000514 <__aeabi_ui2d>
 8007ac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aca:	4680      	mov	r8, r0
 8007acc:	4689      	mov	r9, r1
 8007ace:	bb23      	cbnz	r3, 8007b1a <_strtod_l+0xb9a>
 8007ad0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ad4:	9010      	str	r0, [sp, #64]	; 0x40
 8007ad6:	9311      	str	r3, [sp, #68]	; 0x44
 8007ad8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007adc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ae2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ae4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007ae8:	1a9b      	subs	r3, r3, r2
 8007aea:	9309      	str	r3, [sp, #36]	; 0x24
 8007aec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007af0:	eeb0 0a48 	vmov.f32	s0, s16
 8007af4:	eef0 0a68 	vmov.f32	s1, s17
 8007af8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007afc:	f001 ff54 	bl	80099a8 <__ulp>
 8007b00:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b04:	ec53 2b10 	vmov	r2, r3, d0
 8007b08:	f7f8 fd7e 	bl	8000608 <__aeabi_dmul>
 8007b0c:	ec53 2b18 	vmov	r2, r3, d8
 8007b10:	f7f8 fbc4 	bl	800029c <__adddf3>
 8007b14:	4682      	mov	sl, r0
 8007b16:	468b      	mov	fp, r1
 8007b18:	e78d      	b.n	8007a36 <_strtod_l+0xab6>
 8007b1a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007b1e:	e7db      	b.n	8007ad8 <_strtod_l+0xb58>
 8007b20:	a311      	add	r3, pc, #68	; (adr r3, 8007b68 <_strtod_l+0xbe8>)
 8007b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b26:	f7f8 ffe1 	bl	8000aec <__aeabi_dcmplt>
 8007b2a:	e7b2      	b.n	8007a92 <_strtod_l+0xb12>
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	930a      	str	r3, [sp, #40]	; 0x28
 8007b30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b34:	6013      	str	r3, [r2, #0]
 8007b36:	f7ff ba6b 	b.w	8007010 <_strtod_l+0x90>
 8007b3a:	2a65      	cmp	r2, #101	; 0x65
 8007b3c:	f43f ab5f 	beq.w	80071fe <_strtod_l+0x27e>
 8007b40:	2a45      	cmp	r2, #69	; 0x45
 8007b42:	f43f ab5c 	beq.w	80071fe <_strtod_l+0x27e>
 8007b46:	2301      	movs	r3, #1
 8007b48:	f7ff bb94 	b.w	8007274 <_strtod_l+0x2f4>
 8007b4c:	f3af 8000 	nop.w
 8007b50:	94a03595 	.word	0x94a03595
 8007b54:	3fdfffff 	.word	0x3fdfffff
 8007b58:	35afe535 	.word	0x35afe535
 8007b5c:	3fe00000 	.word	0x3fe00000
 8007b60:	ffc00000 	.word	0xffc00000
 8007b64:	41dfffff 	.word	0x41dfffff
 8007b68:	94a03595 	.word	0x94a03595
 8007b6c:	3fcfffff 	.word	0x3fcfffff
 8007b70:	3ff00000 	.word	0x3ff00000
 8007b74:	7ff00000 	.word	0x7ff00000
 8007b78:	7fe00000 	.word	0x7fe00000
 8007b7c:	7c9fffff 	.word	0x7c9fffff
 8007b80:	3fe00000 	.word	0x3fe00000
 8007b84:	bff00000 	.word	0xbff00000
 8007b88:	7fefffff 	.word	0x7fefffff

08007b8c <_strtod_r>:
 8007b8c:	4b01      	ldr	r3, [pc, #4]	; (8007b94 <_strtod_r+0x8>)
 8007b8e:	f7ff b9f7 	b.w	8006f80 <_strtod_l>
 8007b92:	bf00      	nop
 8007b94:	200000fc 	.word	0x200000fc

08007b98 <_strtol_l.constprop.0>:
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b9e:	d001      	beq.n	8007ba4 <_strtol_l.constprop.0+0xc>
 8007ba0:	2b24      	cmp	r3, #36	; 0x24
 8007ba2:	d906      	bls.n	8007bb2 <_strtol_l.constprop.0+0x1a>
 8007ba4:	f7fe f9b6 	bl	8005f14 <__errno>
 8007ba8:	2316      	movs	r3, #22
 8007baa:	6003      	str	r3, [r0, #0]
 8007bac:	2000      	movs	r0, #0
 8007bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007c98 <_strtol_l.constprop.0+0x100>
 8007bb6:	460d      	mov	r5, r1
 8007bb8:	462e      	mov	r6, r5
 8007bba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007bbe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007bc2:	f017 0708 	ands.w	r7, r7, #8
 8007bc6:	d1f7      	bne.n	8007bb8 <_strtol_l.constprop.0+0x20>
 8007bc8:	2c2d      	cmp	r4, #45	; 0x2d
 8007bca:	d132      	bne.n	8007c32 <_strtol_l.constprop.0+0x9a>
 8007bcc:	782c      	ldrb	r4, [r5, #0]
 8007bce:	2701      	movs	r7, #1
 8007bd0:	1cb5      	adds	r5, r6, #2
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d05b      	beq.n	8007c8e <_strtol_l.constprop.0+0xf6>
 8007bd6:	2b10      	cmp	r3, #16
 8007bd8:	d109      	bne.n	8007bee <_strtol_l.constprop.0+0x56>
 8007bda:	2c30      	cmp	r4, #48	; 0x30
 8007bdc:	d107      	bne.n	8007bee <_strtol_l.constprop.0+0x56>
 8007bde:	782c      	ldrb	r4, [r5, #0]
 8007be0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007be4:	2c58      	cmp	r4, #88	; 0x58
 8007be6:	d14d      	bne.n	8007c84 <_strtol_l.constprop.0+0xec>
 8007be8:	786c      	ldrb	r4, [r5, #1]
 8007bea:	2310      	movs	r3, #16
 8007bec:	3502      	adds	r5, #2
 8007bee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007bf2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007bf6:	f04f 0c00 	mov.w	ip, #0
 8007bfa:	fbb8 f9f3 	udiv	r9, r8, r3
 8007bfe:	4666      	mov	r6, ip
 8007c00:	fb03 8a19 	mls	sl, r3, r9, r8
 8007c04:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007c08:	f1be 0f09 	cmp.w	lr, #9
 8007c0c:	d816      	bhi.n	8007c3c <_strtol_l.constprop.0+0xa4>
 8007c0e:	4674      	mov	r4, lr
 8007c10:	42a3      	cmp	r3, r4
 8007c12:	dd24      	ble.n	8007c5e <_strtol_l.constprop.0+0xc6>
 8007c14:	f1bc 0f00 	cmp.w	ip, #0
 8007c18:	db1e      	blt.n	8007c58 <_strtol_l.constprop.0+0xc0>
 8007c1a:	45b1      	cmp	r9, r6
 8007c1c:	d31c      	bcc.n	8007c58 <_strtol_l.constprop.0+0xc0>
 8007c1e:	d101      	bne.n	8007c24 <_strtol_l.constprop.0+0x8c>
 8007c20:	45a2      	cmp	sl, r4
 8007c22:	db19      	blt.n	8007c58 <_strtol_l.constprop.0+0xc0>
 8007c24:	fb06 4603 	mla	r6, r6, r3, r4
 8007c28:	f04f 0c01 	mov.w	ip, #1
 8007c2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c30:	e7e8      	b.n	8007c04 <_strtol_l.constprop.0+0x6c>
 8007c32:	2c2b      	cmp	r4, #43	; 0x2b
 8007c34:	bf04      	itt	eq
 8007c36:	782c      	ldrbeq	r4, [r5, #0]
 8007c38:	1cb5      	addeq	r5, r6, #2
 8007c3a:	e7ca      	b.n	8007bd2 <_strtol_l.constprop.0+0x3a>
 8007c3c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007c40:	f1be 0f19 	cmp.w	lr, #25
 8007c44:	d801      	bhi.n	8007c4a <_strtol_l.constprop.0+0xb2>
 8007c46:	3c37      	subs	r4, #55	; 0x37
 8007c48:	e7e2      	b.n	8007c10 <_strtol_l.constprop.0+0x78>
 8007c4a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007c4e:	f1be 0f19 	cmp.w	lr, #25
 8007c52:	d804      	bhi.n	8007c5e <_strtol_l.constprop.0+0xc6>
 8007c54:	3c57      	subs	r4, #87	; 0x57
 8007c56:	e7db      	b.n	8007c10 <_strtol_l.constprop.0+0x78>
 8007c58:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007c5c:	e7e6      	b.n	8007c2c <_strtol_l.constprop.0+0x94>
 8007c5e:	f1bc 0f00 	cmp.w	ip, #0
 8007c62:	da05      	bge.n	8007c70 <_strtol_l.constprop.0+0xd8>
 8007c64:	2322      	movs	r3, #34	; 0x22
 8007c66:	6003      	str	r3, [r0, #0]
 8007c68:	4646      	mov	r6, r8
 8007c6a:	b942      	cbnz	r2, 8007c7e <_strtol_l.constprop.0+0xe6>
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	e79e      	b.n	8007bae <_strtol_l.constprop.0+0x16>
 8007c70:	b107      	cbz	r7, 8007c74 <_strtol_l.constprop.0+0xdc>
 8007c72:	4276      	negs	r6, r6
 8007c74:	2a00      	cmp	r2, #0
 8007c76:	d0f9      	beq.n	8007c6c <_strtol_l.constprop.0+0xd4>
 8007c78:	f1bc 0f00 	cmp.w	ip, #0
 8007c7c:	d000      	beq.n	8007c80 <_strtol_l.constprop.0+0xe8>
 8007c7e:	1e69      	subs	r1, r5, #1
 8007c80:	6011      	str	r1, [r2, #0]
 8007c82:	e7f3      	b.n	8007c6c <_strtol_l.constprop.0+0xd4>
 8007c84:	2430      	movs	r4, #48	; 0x30
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1b1      	bne.n	8007bee <_strtol_l.constprop.0+0x56>
 8007c8a:	2308      	movs	r3, #8
 8007c8c:	e7af      	b.n	8007bee <_strtol_l.constprop.0+0x56>
 8007c8e:	2c30      	cmp	r4, #48	; 0x30
 8007c90:	d0a5      	beq.n	8007bde <_strtol_l.constprop.0+0x46>
 8007c92:	230a      	movs	r3, #10
 8007c94:	e7ab      	b.n	8007bee <_strtol_l.constprop.0+0x56>
 8007c96:	bf00      	nop
 8007c98:	0800a9d1 	.word	0x0800a9d1

08007c9c <_strtol_r>:
 8007c9c:	f7ff bf7c 	b.w	8007b98 <_strtol_l.constprop.0>

08007ca0 <quorem>:
 8007ca0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca4:	6903      	ldr	r3, [r0, #16]
 8007ca6:	690c      	ldr	r4, [r1, #16]
 8007ca8:	42a3      	cmp	r3, r4
 8007caa:	4607      	mov	r7, r0
 8007cac:	f2c0 8081 	blt.w	8007db2 <quorem+0x112>
 8007cb0:	3c01      	subs	r4, #1
 8007cb2:	f101 0814 	add.w	r8, r1, #20
 8007cb6:	f100 0514 	add.w	r5, r0, #20
 8007cba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cbe:	9301      	str	r3, [sp, #4]
 8007cc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007cc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007cd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007cd4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007cd8:	d331      	bcc.n	8007d3e <quorem+0x9e>
 8007cda:	f04f 0e00 	mov.w	lr, #0
 8007cde:	4640      	mov	r0, r8
 8007ce0:	46ac      	mov	ip, r5
 8007ce2:	46f2      	mov	sl, lr
 8007ce4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ce8:	b293      	uxth	r3, r2
 8007cea:	fb06 e303 	mla	r3, r6, r3, lr
 8007cee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	ebaa 0303 	sub.w	r3, sl, r3
 8007cf8:	f8dc a000 	ldr.w	sl, [ip]
 8007cfc:	0c12      	lsrs	r2, r2, #16
 8007cfe:	fa13 f38a 	uxtah	r3, r3, sl
 8007d02:	fb06 e202 	mla	r2, r6, r2, lr
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	9b00      	ldr	r3, [sp, #0]
 8007d0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d0e:	b292      	uxth	r2, r2
 8007d10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007d14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d18:	f8bd 3000 	ldrh.w	r3, [sp]
 8007d1c:	4581      	cmp	r9, r0
 8007d1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d22:	f84c 3b04 	str.w	r3, [ip], #4
 8007d26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007d2a:	d2db      	bcs.n	8007ce4 <quorem+0x44>
 8007d2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007d30:	b92b      	cbnz	r3, 8007d3e <quorem+0x9e>
 8007d32:	9b01      	ldr	r3, [sp, #4]
 8007d34:	3b04      	subs	r3, #4
 8007d36:	429d      	cmp	r5, r3
 8007d38:	461a      	mov	r2, r3
 8007d3a:	d32e      	bcc.n	8007d9a <quorem+0xfa>
 8007d3c:	613c      	str	r4, [r7, #16]
 8007d3e:	4638      	mov	r0, r7
 8007d40:	f001 fd8c 	bl	800985c <__mcmp>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	db24      	blt.n	8007d92 <quorem+0xf2>
 8007d48:	3601      	adds	r6, #1
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	f04f 0c00 	mov.w	ip, #0
 8007d50:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d54:	f8d0 e000 	ldr.w	lr, [r0]
 8007d58:	b293      	uxth	r3, r2
 8007d5a:	ebac 0303 	sub.w	r3, ip, r3
 8007d5e:	0c12      	lsrs	r2, r2, #16
 8007d60:	fa13 f38e 	uxtah	r3, r3, lr
 8007d64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d72:	45c1      	cmp	r9, r8
 8007d74:	f840 3b04 	str.w	r3, [r0], #4
 8007d78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007d7c:	d2e8      	bcs.n	8007d50 <quorem+0xb0>
 8007d7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d86:	b922      	cbnz	r2, 8007d92 <quorem+0xf2>
 8007d88:	3b04      	subs	r3, #4
 8007d8a:	429d      	cmp	r5, r3
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	d30a      	bcc.n	8007da6 <quorem+0x106>
 8007d90:	613c      	str	r4, [r7, #16]
 8007d92:	4630      	mov	r0, r6
 8007d94:	b003      	add	sp, #12
 8007d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d9a:	6812      	ldr	r2, [r2, #0]
 8007d9c:	3b04      	subs	r3, #4
 8007d9e:	2a00      	cmp	r2, #0
 8007da0:	d1cc      	bne.n	8007d3c <quorem+0x9c>
 8007da2:	3c01      	subs	r4, #1
 8007da4:	e7c7      	b.n	8007d36 <quorem+0x96>
 8007da6:	6812      	ldr	r2, [r2, #0]
 8007da8:	3b04      	subs	r3, #4
 8007daa:	2a00      	cmp	r2, #0
 8007dac:	d1f0      	bne.n	8007d90 <quorem+0xf0>
 8007dae:	3c01      	subs	r4, #1
 8007db0:	e7eb      	b.n	8007d8a <quorem+0xea>
 8007db2:	2000      	movs	r0, #0
 8007db4:	e7ee      	b.n	8007d94 <quorem+0xf4>
	...

08007db8 <_dtoa_r>:
 8007db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dbc:	ed2d 8b04 	vpush	{d8-d9}
 8007dc0:	ec57 6b10 	vmov	r6, r7, d0
 8007dc4:	b093      	sub	sp, #76	; 0x4c
 8007dc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007dc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007dcc:	9106      	str	r1, [sp, #24]
 8007dce:	ee10 aa10 	vmov	sl, s0
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	9209      	str	r2, [sp, #36]	; 0x24
 8007dd6:	930c      	str	r3, [sp, #48]	; 0x30
 8007dd8:	46bb      	mov	fp, r7
 8007dda:	b975      	cbnz	r5, 8007dfa <_dtoa_r+0x42>
 8007ddc:	2010      	movs	r0, #16
 8007dde:	f7fe f8c3 	bl	8005f68 <malloc>
 8007de2:	4602      	mov	r2, r0
 8007de4:	6260      	str	r0, [r4, #36]	; 0x24
 8007de6:	b920      	cbnz	r0, 8007df2 <_dtoa_r+0x3a>
 8007de8:	4ba7      	ldr	r3, [pc, #668]	; (8008088 <_dtoa_r+0x2d0>)
 8007dea:	21ea      	movs	r1, #234	; 0xea
 8007dec:	48a7      	ldr	r0, [pc, #668]	; (800808c <_dtoa_r+0x2d4>)
 8007dee:	f002 fb1f 	bl	800a430 <__assert_func>
 8007df2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007df6:	6005      	str	r5, [r0, #0]
 8007df8:	60c5      	str	r5, [r0, #12]
 8007dfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dfc:	6819      	ldr	r1, [r3, #0]
 8007dfe:	b151      	cbz	r1, 8007e16 <_dtoa_r+0x5e>
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	604a      	str	r2, [r1, #4]
 8007e04:	2301      	movs	r3, #1
 8007e06:	4093      	lsls	r3, r2
 8007e08:	608b      	str	r3, [r1, #8]
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	f001 fa9a 	bl	8009344 <_Bfree>
 8007e10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e12:	2200      	movs	r2, #0
 8007e14:	601a      	str	r2, [r3, #0]
 8007e16:	1e3b      	subs	r3, r7, #0
 8007e18:	bfaa      	itet	ge
 8007e1a:	2300      	movge	r3, #0
 8007e1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007e20:	f8c8 3000 	strge.w	r3, [r8]
 8007e24:	4b9a      	ldr	r3, [pc, #616]	; (8008090 <_dtoa_r+0x2d8>)
 8007e26:	bfbc      	itt	lt
 8007e28:	2201      	movlt	r2, #1
 8007e2a:	f8c8 2000 	strlt.w	r2, [r8]
 8007e2e:	ea33 030b 	bics.w	r3, r3, fp
 8007e32:	d11b      	bne.n	8007e6c <_dtoa_r+0xb4>
 8007e34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e36:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e3a:	6013      	str	r3, [r2, #0]
 8007e3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e40:	4333      	orrs	r3, r6
 8007e42:	f000 8592 	beq.w	800896a <_dtoa_r+0xbb2>
 8007e46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e48:	b963      	cbnz	r3, 8007e64 <_dtoa_r+0xac>
 8007e4a:	4b92      	ldr	r3, [pc, #584]	; (8008094 <_dtoa_r+0x2dc>)
 8007e4c:	e022      	b.n	8007e94 <_dtoa_r+0xdc>
 8007e4e:	4b92      	ldr	r3, [pc, #584]	; (8008098 <_dtoa_r+0x2e0>)
 8007e50:	9301      	str	r3, [sp, #4]
 8007e52:	3308      	adds	r3, #8
 8007e54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007e56:	6013      	str	r3, [r2, #0]
 8007e58:	9801      	ldr	r0, [sp, #4]
 8007e5a:	b013      	add	sp, #76	; 0x4c
 8007e5c:	ecbd 8b04 	vpop	{d8-d9}
 8007e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e64:	4b8b      	ldr	r3, [pc, #556]	; (8008094 <_dtoa_r+0x2dc>)
 8007e66:	9301      	str	r3, [sp, #4]
 8007e68:	3303      	adds	r3, #3
 8007e6a:	e7f3      	b.n	8007e54 <_dtoa_r+0x9c>
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	2300      	movs	r3, #0
 8007e70:	4650      	mov	r0, sl
 8007e72:	4659      	mov	r1, fp
 8007e74:	f7f8 fe30 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e78:	ec4b ab19 	vmov	d9, sl, fp
 8007e7c:	4680      	mov	r8, r0
 8007e7e:	b158      	cbz	r0, 8007e98 <_dtoa_r+0xe0>
 8007e80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e82:	2301      	movs	r3, #1
 8007e84:	6013      	str	r3, [r2, #0]
 8007e86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f000 856b 	beq.w	8008964 <_dtoa_r+0xbac>
 8007e8e:	4883      	ldr	r0, [pc, #524]	; (800809c <_dtoa_r+0x2e4>)
 8007e90:	6018      	str	r0, [r3, #0]
 8007e92:	1e43      	subs	r3, r0, #1
 8007e94:	9301      	str	r3, [sp, #4]
 8007e96:	e7df      	b.n	8007e58 <_dtoa_r+0xa0>
 8007e98:	ec4b ab10 	vmov	d0, sl, fp
 8007e9c:	aa10      	add	r2, sp, #64	; 0x40
 8007e9e:	a911      	add	r1, sp, #68	; 0x44
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f001 fdfd 	bl	8009aa0 <__d2b>
 8007ea6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007eaa:	ee08 0a10 	vmov	s16, r0
 8007eae:	2d00      	cmp	r5, #0
 8007eb0:	f000 8084 	beq.w	8007fbc <_dtoa_r+0x204>
 8007eb4:	ee19 3a90 	vmov	r3, s19
 8007eb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ebc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007ec0:	4656      	mov	r6, sl
 8007ec2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007ec6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007eca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007ece:	4b74      	ldr	r3, [pc, #464]	; (80080a0 <_dtoa_r+0x2e8>)
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	4639      	mov	r1, r7
 8007ed6:	f7f8 f9df 	bl	8000298 <__aeabi_dsub>
 8007eda:	a365      	add	r3, pc, #404	; (adr r3, 8008070 <_dtoa_r+0x2b8>)
 8007edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee0:	f7f8 fb92 	bl	8000608 <__aeabi_dmul>
 8007ee4:	a364      	add	r3, pc, #400	; (adr r3, 8008078 <_dtoa_r+0x2c0>)
 8007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eea:	f7f8 f9d7 	bl	800029c <__adddf3>
 8007eee:	4606      	mov	r6, r0
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	460f      	mov	r7, r1
 8007ef4:	f7f8 fb1e 	bl	8000534 <__aeabi_i2d>
 8007ef8:	a361      	add	r3, pc, #388	; (adr r3, 8008080 <_dtoa_r+0x2c8>)
 8007efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efe:	f7f8 fb83 	bl	8000608 <__aeabi_dmul>
 8007f02:	4602      	mov	r2, r0
 8007f04:	460b      	mov	r3, r1
 8007f06:	4630      	mov	r0, r6
 8007f08:	4639      	mov	r1, r7
 8007f0a:	f7f8 f9c7 	bl	800029c <__adddf3>
 8007f0e:	4606      	mov	r6, r0
 8007f10:	460f      	mov	r7, r1
 8007f12:	f7f8 fe29 	bl	8000b68 <__aeabi_d2iz>
 8007f16:	2200      	movs	r2, #0
 8007f18:	9000      	str	r0, [sp, #0]
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	4639      	mov	r1, r7
 8007f20:	f7f8 fde4 	bl	8000aec <__aeabi_dcmplt>
 8007f24:	b150      	cbz	r0, 8007f3c <_dtoa_r+0x184>
 8007f26:	9800      	ldr	r0, [sp, #0]
 8007f28:	f7f8 fb04 	bl	8000534 <__aeabi_i2d>
 8007f2c:	4632      	mov	r2, r6
 8007f2e:	463b      	mov	r3, r7
 8007f30:	f7f8 fdd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f34:	b910      	cbnz	r0, 8007f3c <_dtoa_r+0x184>
 8007f36:	9b00      	ldr	r3, [sp, #0]
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	9300      	str	r3, [sp, #0]
 8007f3c:	9b00      	ldr	r3, [sp, #0]
 8007f3e:	2b16      	cmp	r3, #22
 8007f40:	d85a      	bhi.n	8007ff8 <_dtoa_r+0x240>
 8007f42:	9a00      	ldr	r2, [sp, #0]
 8007f44:	4b57      	ldr	r3, [pc, #348]	; (80080a4 <_dtoa_r+0x2ec>)
 8007f46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4e:	ec51 0b19 	vmov	r0, r1, d9
 8007f52:	f7f8 fdcb 	bl	8000aec <__aeabi_dcmplt>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	d050      	beq.n	8007ffc <_dtoa_r+0x244>
 8007f5a:	9b00      	ldr	r3, [sp, #0]
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	9300      	str	r3, [sp, #0]
 8007f60:	2300      	movs	r3, #0
 8007f62:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f66:	1b5d      	subs	r5, r3, r5
 8007f68:	1e6b      	subs	r3, r5, #1
 8007f6a:	9305      	str	r3, [sp, #20]
 8007f6c:	bf45      	ittet	mi
 8007f6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007f72:	9304      	strmi	r3, [sp, #16]
 8007f74:	2300      	movpl	r3, #0
 8007f76:	2300      	movmi	r3, #0
 8007f78:	bf4c      	ite	mi
 8007f7a:	9305      	strmi	r3, [sp, #20]
 8007f7c:	9304      	strpl	r3, [sp, #16]
 8007f7e:	9b00      	ldr	r3, [sp, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	db3d      	blt.n	8008000 <_dtoa_r+0x248>
 8007f84:	9b05      	ldr	r3, [sp, #20]
 8007f86:	9a00      	ldr	r2, [sp, #0]
 8007f88:	920a      	str	r2, [sp, #40]	; 0x28
 8007f8a:	4413      	add	r3, r2
 8007f8c:	9305      	str	r3, [sp, #20]
 8007f8e:	2300      	movs	r3, #0
 8007f90:	9307      	str	r3, [sp, #28]
 8007f92:	9b06      	ldr	r3, [sp, #24]
 8007f94:	2b09      	cmp	r3, #9
 8007f96:	f200 8089 	bhi.w	80080ac <_dtoa_r+0x2f4>
 8007f9a:	2b05      	cmp	r3, #5
 8007f9c:	bfc4      	itt	gt
 8007f9e:	3b04      	subgt	r3, #4
 8007fa0:	9306      	strgt	r3, [sp, #24]
 8007fa2:	9b06      	ldr	r3, [sp, #24]
 8007fa4:	f1a3 0302 	sub.w	r3, r3, #2
 8007fa8:	bfcc      	ite	gt
 8007faa:	2500      	movgt	r5, #0
 8007fac:	2501      	movle	r5, #1
 8007fae:	2b03      	cmp	r3, #3
 8007fb0:	f200 8087 	bhi.w	80080c2 <_dtoa_r+0x30a>
 8007fb4:	e8df f003 	tbb	[pc, r3]
 8007fb8:	59383a2d 	.word	0x59383a2d
 8007fbc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007fc0:	441d      	add	r5, r3
 8007fc2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007fc6:	2b20      	cmp	r3, #32
 8007fc8:	bfc1      	itttt	gt
 8007fca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007fce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007fd2:	fa0b f303 	lslgt.w	r3, fp, r3
 8007fd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007fda:	bfda      	itte	le
 8007fdc:	f1c3 0320 	rsble	r3, r3, #32
 8007fe0:	fa06 f003 	lslle.w	r0, r6, r3
 8007fe4:	4318      	orrgt	r0, r3
 8007fe6:	f7f8 fa95 	bl	8000514 <__aeabi_ui2d>
 8007fea:	2301      	movs	r3, #1
 8007fec:	4606      	mov	r6, r0
 8007fee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007ff2:	3d01      	subs	r5, #1
 8007ff4:	930e      	str	r3, [sp, #56]	; 0x38
 8007ff6:	e76a      	b.n	8007ece <_dtoa_r+0x116>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e7b2      	b.n	8007f62 <_dtoa_r+0x1aa>
 8007ffc:	900b      	str	r0, [sp, #44]	; 0x2c
 8007ffe:	e7b1      	b.n	8007f64 <_dtoa_r+0x1ac>
 8008000:	9b04      	ldr	r3, [sp, #16]
 8008002:	9a00      	ldr	r2, [sp, #0]
 8008004:	1a9b      	subs	r3, r3, r2
 8008006:	9304      	str	r3, [sp, #16]
 8008008:	4253      	negs	r3, r2
 800800a:	9307      	str	r3, [sp, #28]
 800800c:	2300      	movs	r3, #0
 800800e:	930a      	str	r3, [sp, #40]	; 0x28
 8008010:	e7bf      	b.n	8007f92 <_dtoa_r+0x1da>
 8008012:	2300      	movs	r3, #0
 8008014:	9308      	str	r3, [sp, #32]
 8008016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008018:	2b00      	cmp	r3, #0
 800801a:	dc55      	bgt.n	80080c8 <_dtoa_r+0x310>
 800801c:	2301      	movs	r3, #1
 800801e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008022:	461a      	mov	r2, r3
 8008024:	9209      	str	r2, [sp, #36]	; 0x24
 8008026:	e00c      	b.n	8008042 <_dtoa_r+0x28a>
 8008028:	2301      	movs	r3, #1
 800802a:	e7f3      	b.n	8008014 <_dtoa_r+0x25c>
 800802c:	2300      	movs	r3, #0
 800802e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008030:	9308      	str	r3, [sp, #32]
 8008032:	9b00      	ldr	r3, [sp, #0]
 8008034:	4413      	add	r3, r2
 8008036:	9302      	str	r3, [sp, #8]
 8008038:	3301      	adds	r3, #1
 800803a:	2b01      	cmp	r3, #1
 800803c:	9303      	str	r3, [sp, #12]
 800803e:	bfb8      	it	lt
 8008040:	2301      	movlt	r3, #1
 8008042:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008044:	2200      	movs	r2, #0
 8008046:	6042      	str	r2, [r0, #4]
 8008048:	2204      	movs	r2, #4
 800804a:	f102 0614 	add.w	r6, r2, #20
 800804e:	429e      	cmp	r6, r3
 8008050:	6841      	ldr	r1, [r0, #4]
 8008052:	d93d      	bls.n	80080d0 <_dtoa_r+0x318>
 8008054:	4620      	mov	r0, r4
 8008056:	f001 f935 	bl	80092c4 <_Balloc>
 800805a:	9001      	str	r0, [sp, #4]
 800805c:	2800      	cmp	r0, #0
 800805e:	d13b      	bne.n	80080d8 <_dtoa_r+0x320>
 8008060:	4b11      	ldr	r3, [pc, #68]	; (80080a8 <_dtoa_r+0x2f0>)
 8008062:	4602      	mov	r2, r0
 8008064:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008068:	e6c0      	b.n	8007dec <_dtoa_r+0x34>
 800806a:	2301      	movs	r3, #1
 800806c:	e7df      	b.n	800802e <_dtoa_r+0x276>
 800806e:	bf00      	nop
 8008070:	636f4361 	.word	0x636f4361
 8008074:	3fd287a7 	.word	0x3fd287a7
 8008078:	8b60c8b3 	.word	0x8b60c8b3
 800807c:	3fc68a28 	.word	0x3fc68a28
 8008080:	509f79fb 	.word	0x509f79fb
 8008084:	3fd34413 	.word	0x3fd34413
 8008088:	0800aade 	.word	0x0800aade
 800808c:	0800aaf5 	.word	0x0800aaf5
 8008090:	7ff00000 	.word	0x7ff00000
 8008094:	0800aada 	.word	0x0800aada
 8008098:	0800aad1 	.word	0x0800aad1
 800809c:	0800a955 	.word	0x0800a955
 80080a0:	3ff80000 	.word	0x3ff80000
 80080a4:	0800acc8 	.word	0x0800acc8
 80080a8:	0800ab50 	.word	0x0800ab50
 80080ac:	2501      	movs	r5, #1
 80080ae:	2300      	movs	r3, #0
 80080b0:	9306      	str	r3, [sp, #24]
 80080b2:	9508      	str	r5, [sp, #32]
 80080b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80080bc:	2200      	movs	r2, #0
 80080be:	2312      	movs	r3, #18
 80080c0:	e7b0      	b.n	8008024 <_dtoa_r+0x26c>
 80080c2:	2301      	movs	r3, #1
 80080c4:	9308      	str	r3, [sp, #32]
 80080c6:	e7f5      	b.n	80080b4 <_dtoa_r+0x2fc>
 80080c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80080ce:	e7b8      	b.n	8008042 <_dtoa_r+0x28a>
 80080d0:	3101      	adds	r1, #1
 80080d2:	6041      	str	r1, [r0, #4]
 80080d4:	0052      	lsls	r2, r2, #1
 80080d6:	e7b8      	b.n	800804a <_dtoa_r+0x292>
 80080d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080da:	9a01      	ldr	r2, [sp, #4]
 80080dc:	601a      	str	r2, [r3, #0]
 80080de:	9b03      	ldr	r3, [sp, #12]
 80080e0:	2b0e      	cmp	r3, #14
 80080e2:	f200 809d 	bhi.w	8008220 <_dtoa_r+0x468>
 80080e6:	2d00      	cmp	r5, #0
 80080e8:	f000 809a 	beq.w	8008220 <_dtoa_r+0x468>
 80080ec:	9b00      	ldr	r3, [sp, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	dd32      	ble.n	8008158 <_dtoa_r+0x3a0>
 80080f2:	4ab7      	ldr	r2, [pc, #732]	; (80083d0 <_dtoa_r+0x618>)
 80080f4:	f003 030f 	and.w	r3, r3, #15
 80080f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80080fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008100:	9b00      	ldr	r3, [sp, #0]
 8008102:	05d8      	lsls	r0, r3, #23
 8008104:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008108:	d516      	bpl.n	8008138 <_dtoa_r+0x380>
 800810a:	4bb2      	ldr	r3, [pc, #712]	; (80083d4 <_dtoa_r+0x61c>)
 800810c:	ec51 0b19 	vmov	r0, r1, d9
 8008110:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008114:	f7f8 fba2 	bl	800085c <__aeabi_ddiv>
 8008118:	f007 070f 	and.w	r7, r7, #15
 800811c:	4682      	mov	sl, r0
 800811e:	468b      	mov	fp, r1
 8008120:	2503      	movs	r5, #3
 8008122:	4eac      	ldr	r6, [pc, #688]	; (80083d4 <_dtoa_r+0x61c>)
 8008124:	b957      	cbnz	r7, 800813c <_dtoa_r+0x384>
 8008126:	4642      	mov	r2, r8
 8008128:	464b      	mov	r3, r9
 800812a:	4650      	mov	r0, sl
 800812c:	4659      	mov	r1, fp
 800812e:	f7f8 fb95 	bl	800085c <__aeabi_ddiv>
 8008132:	4682      	mov	sl, r0
 8008134:	468b      	mov	fp, r1
 8008136:	e028      	b.n	800818a <_dtoa_r+0x3d2>
 8008138:	2502      	movs	r5, #2
 800813a:	e7f2      	b.n	8008122 <_dtoa_r+0x36a>
 800813c:	07f9      	lsls	r1, r7, #31
 800813e:	d508      	bpl.n	8008152 <_dtoa_r+0x39a>
 8008140:	4640      	mov	r0, r8
 8008142:	4649      	mov	r1, r9
 8008144:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008148:	f7f8 fa5e 	bl	8000608 <__aeabi_dmul>
 800814c:	3501      	adds	r5, #1
 800814e:	4680      	mov	r8, r0
 8008150:	4689      	mov	r9, r1
 8008152:	107f      	asrs	r7, r7, #1
 8008154:	3608      	adds	r6, #8
 8008156:	e7e5      	b.n	8008124 <_dtoa_r+0x36c>
 8008158:	f000 809b 	beq.w	8008292 <_dtoa_r+0x4da>
 800815c:	9b00      	ldr	r3, [sp, #0]
 800815e:	4f9d      	ldr	r7, [pc, #628]	; (80083d4 <_dtoa_r+0x61c>)
 8008160:	425e      	negs	r6, r3
 8008162:	4b9b      	ldr	r3, [pc, #620]	; (80083d0 <_dtoa_r+0x618>)
 8008164:	f006 020f 	and.w	r2, r6, #15
 8008168:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800816c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008170:	ec51 0b19 	vmov	r0, r1, d9
 8008174:	f7f8 fa48 	bl	8000608 <__aeabi_dmul>
 8008178:	1136      	asrs	r6, r6, #4
 800817a:	4682      	mov	sl, r0
 800817c:	468b      	mov	fp, r1
 800817e:	2300      	movs	r3, #0
 8008180:	2502      	movs	r5, #2
 8008182:	2e00      	cmp	r6, #0
 8008184:	d17a      	bne.n	800827c <_dtoa_r+0x4c4>
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1d3      	bne.n	8008132 <_dtoa_r+0x37a>
 800818a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 8082 	beq.w	8008296 <_dtoa_r+0x4de>
 8008192:	4b91      	ldr	r3, [pc, #580]	; (80083d8 <_dtoa_r+0x620>)
 8008194:	2200      	movs	r2, #0
 8008196:	4650      	mov	r0, sl
 8008198:	4659      	mov	r1, fp
 800819a:	f7f8 fca7 	bl	8000aec <__aeabi_dcmplt>
 800819e:	2800      	cmp	r0, #0
 80081a0:	d079      	beq.n	8008296 <_dtoa_r+0x4de>
 80081a2:	9b03      	ldr	r3, [sp, #12]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d076      	beq.n	8008296 <_dtoa_r+0x4de>
 80081a8:	9b02      	ldr	r3, [sp, #8]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	dd36      	ble.n	800821c <_dtoa_r+0x464>
 80081ae:	9b00      	ldr	r3, [sp, #0]
 80081b0:	4650      	mov	r0, sl
 80081b2:	4659      	mov	r1, fp
 80081b4:	1e5f      	subs	r7, r3, #1
 80081b6:	2200      	movs	r2, #0
 80081b8:	4b88      	ldr	r3, [pc, #544]	; (80083dc <_dtoa_r+0x624>)
 80081ba:	f7f8 fa25 	bl	8000608 <__aeabi_dmul>
 80081be:	9e02      	ldr	r6, [sp, #8]
 80081c0:	4682      	mov	sl, r0
 80081c2:	468b      	mov	fp, r1
 80081c4:	3501      	adds	r5, #1
 80081c6:	4628      	mov	r0, r5
 80081c8:	f7f8 f9b4 	bl	8000534 <__aeabi_i2d>
 80081cc:	4652      	mov	r2, sl
 80081ce:	465b      	mov	r3, fp
 80081d0:	f7f8 fa1a 	bl	8000608 <__aeabi_dmul>
 80081d4:	4b82      	ldr	r3, [pc, #520]	; (80083e0 <_dtoa_r+0x628>)
 80081d6:	2200      	movs	r2, #0
 80081d8:	f7f8 f860 	bl	800029c <__adddf3>
 80081dc:	46d0      	mov	r8, sl
 80081de:	46d9      	mov	r9, fp
 80081e0:	4682      	mov	sl, r0
 80081e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80081e6:	2e00      	cmp	r6, #0
 80081e8:	d158      	bne.n	800829c <_dtoa_r+0x4e4>
 80081ea:	4b7e      	ldr	r3, [pc, #504]	; (80083e4 <_dtoa_r+0x62c>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	4640      	mov	r0, r8
 80081f0:	4649      	mov	r1, r9
 80081f2:	f7f8 f851 	bl	8000298 <__aeabi_dsub>
 80081f6:	4652      	mov	r2, sl
 80081f8:	465b      	mov	r3, fp
 80081fa:	4680      	mov	r8, r0
 80081fc:	4689      	mov	r9, r1
 80081fe:	f7f8 fc93 	bl	8000b28 <__aeabi_dcmpgt>
 8008202:	2800      	cmp	r0, #0
 8008204:	f040 8295 	bne.w	8008732 <_dtoa_r+0x97a>
 8008208:	4652      	mov	r2, sl
 800820a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800820e:	4640      	mov	r0, r8
 8008210:	4649      	mov	r1, r9
 8008212:	f7f8 fc6b 	bl	8000aec <__aeabi_dcmplt>
 8008216:	2800      	cmp	r0, #0
 8008218:	f040 8289 	bne.w	800872e <_dtoa_r+0x976>
 800821c:	ec5b ab19 	vmov	sl, fp, d9
 8008220:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008222:	2b00      	cmp	r3, #0
 8008224:	f2c0 8148 	blt.w	80084b8 <_dtoa_r+0x700>
 8008228:	9a00      	ldr	r2, [sp, #0]
 800822a:	2a0e      	cmp	r2, #14
 800822c:	f300 8144 	bgt.w	80084b8 <_dtoa_r+0x700>
 8008230:	4b67      	ldr	r3, [pc, #412]	; (80083d0 <_dtoa_r+0x618>)
 8008232:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008236:	e9d3 8900 	ldrd	r8, r9, [r3]
 800823a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800823c:	2b00      	cmp	r3, #0
 800823e:	f280 80d5 	bge.w	80083ec <_dtoa_r+0x634>
 8008242:	9b03      	ldr	r3, [sp, #12]
 8008244:	2b00      	cmp	r3, #0
 8008246:	f300 80d1 	bgt.w	80083ec <_dtoa_r+0x634>
 800824a:	f040 826f 	bne.w	800872c <_dtoa_r+0x974>
 800824e:	4b65      	ldr	r3, [pc, #404]	; (80083e4 <_dtoa_r+0x62c>)
 8008250:	2200      	movs	r2, #0
 8008252:	4640      	mov	r0, r8
 8008254:	4649      	mov	r1, r9
 8008256:	f7f8 f9d7 	bl	8000608 <__aeabi_dmul>
 800825a:	4652      	mov	r2, sl
 800825c:	465b      	mov	r3, fp
 800825e:	f7f8 fc59 	bl	8000b14 <__aeabi_dcmpge>
 8008262:	9e03      	ldr	r6, [sp, #12]
 8008264:	4637      	mov	r7, r6
 8008266:	2800      	cmp	r0, #0
 8008268:	f040 8245 	bne.w	80086f6 <_dtoa_r+0x93e>
 800826c:	9d01      	ldr	r5, [sp, #4]
 800826e:	2331      	movs	r3, #49	; 0x31
 8008270:	f805 3b01 	strb.w	r3, [r5], #1
 8008274:	9b00      	ldr	r3, [sp, #0]
 8008276:	3301      	adds	r3, #1
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	e240      	b.n	80086fe <_dtoa_r+0x946>
 800827c:	07f2      	lsls	r2, r6, #31
 800827e:	d505      	bpl.n	800828c <_dtoa_r+0x4d4>
 8008280:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008284:	f7f8 f9c0 	bl	8000608 <__aeabi_dmul>
 8008288:	3501      	adds	r5, #1
 800828a:	2301      	movs	r3, #1
 800828c:	1076      	asrs	r6, r6, #1
 800828e:	3708      	adds	r7, #8
 8008290:	e777      	b.n	8008182 <_dtoa_r+0x3ca>
 8008292:	2502      	movs	r5, #2
 8008294:	e779      	b.n	800818a <_dtoa_r+0x3d2>
 8008296:	9f00      	ldr	r7, [sp, #0]
 8008298:	9e03      	ldr	r6, [sp, #12]
 800829a:	e794      	b.n	80081c6 <_dtoa_r+0x40e>
 800829c:	9901      	ldr	r1, [sp, #4]
 800829e:	4b4c      	ldr	r3, [pc, #304]	; (80083d0 <_dtoa_r+0x618>)
 80082a0:	4431      	add	r1, r6
 80082a2:	910d      	str	r1, [sp, #52]	; 0x34
 80082a4:	9908      	ldr	r1, [sp, #32]
 80082a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80082aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80082ae:	2900      	cmp	r1, #0
 80082b0:	d043      	beq.n	800833a <_dtoa_r+0x582>
 80082b2:	494d      	ldr	r1, [pc, #308]	; (80083e8 <_dtoa_r+0x630>)
 80082b4:	2000      	movs	r0, #0
 80082b6:	f7f8 fad1 	bl	800085c <__aeabi_ddiv>
 80082ba:	4652      	mov	r2, sl
 80082bc:	465b      	mov	r3, fp
 80082be:	f7f7 ffeb 	bl	8000298 <__aeabi_dsub>
 80082c2:	9d01      	ldr	r5, [sp, #4]
 80082c4:	4682      	mov	sl, r0
 80082c6:	468b      	mov	fp, r1
 80082c8:	4649      	mov	r1, r9
 80082ca:	4640      	mov	r0, r8
 80082cc:	f7f8 fc4c 	bl	8000b68 <__aeabi_d2iz>
 80082d0:	4606      	mov	r6, r0
 80082d2:	f7f8 f92f 	bl	8000534 <__aeabi_i2d>
 80082d6:	4602      	mov	r2, r0
 80082d8:	460b      	mov	r3, r1
 80082da:	4640      	mov	r0, r8
 80082dc:	4649      	mov	r1, r9
 80082de:	f7f7 ffdb 	bl	8000298 <__aeabi_dsub>
 80082e2:	3630      	adds	r6, #48	; 0x30
 80082e4:	f805 6b01 	strb.w	r6, [r5], #1
 80082e8:	4652      	mov	r2, sl
 80082ea:	465b      	mov	r3, fp
 80082ec:	4680      	mov	r8, r0
 80082ee:	4689      	mov	r9, r1
 80082f0:	f7f8 fbfc 	bl	8000aec <__aeabi_dcmplt>
 80082f4:	2800      	cmp	r0, #0
 80082f6:	d163      	bne.n	80083c0 <_dtoa_r+0x608>
 80082f8:	4642      	mov	r2, r8
 80082fa:	464b      	mov	r3, r9
 80082fc:	4936      	ldr	r1, [pc, #216]	; (80083d8 <_dtoa_r+0x620>)
 80082fe:	2000      	movs	r0, #0
 8008300:	f7f7 ffca 	bl	8000298 <__aeabi_dsub>
 8008304:	4652      	mov	r2, sl
 8008306:	465b      	mov	r3, fp
 8008308:	f7f8 fbf0 	bl	8000aec <__aeabi_dcmplt>
 800830c:	2800      	cmp	r0, #0
 800830e:	f040 80b5 	bne.w	800847c <_dtoa_r+0x6c4>
 8008312:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008314:	429d      	cmp	r5, r3
 8008316:	d081      	beq.n	800821c <_dtoa_r+0x464>
 8008318:	4b30      	ldr	r3, [pc, #192]	; (80083dc <_dtoa_r+0x624>)
 800831a:	2200      	movs	r2, #0
 800831c:	4650      	mov	r0, sl
 800831e:	4659      	mov	r1, fp
 8008320:	f7f8 f972 	bl	8000608 <__aeabi_dmul>
 8008324:	4b2d      	ldr	r3, [pc, #180]	; (80083dc <_dtoa_r+0x624>)
 8008326:	4682      	mov	sl, r0
 8008328:	468b      	mov	fp, r1
 800832a:	4640      	mov	r0, r8
 800832c:	4649      	mov	r1, r9
 800832e:	2200      	movs	r2, #0
 8008330:	f7f8 f96a 	bl	8000608 <__aeabi_dmul>
 8008334:	4680      	mov	r8, r0
 8008336:	4689      	mov	r9, r1
 8008338:	e7c6      	b.n	80082c8 <_dtoa_r+0x510>
 800833a:	4650      	mov	r0, sl
 800833c:	4659      	mov	r1, fp
 800833e:	f7f8 f963 	bl	8000608 <__aeabi_dmul>
 8008342:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008344:	9d01      	ldr	r5, [sp, #4]
 8008346:	930f      	str	r3, [sp, #60]	; 0x3c
 8008348:	4682      	mov	sl, r0
 800834a:	468b      	mov	fp, r1
 800834c:	4649      	mov	r1, r9
 800834e:	4640      	mov	r0, r8
 8008350:	f7f8 fc0a 	bl	8000b68 <__aeabi_d2iz>
 8008354:	4606      	mov	r6, r0
 8008356:	f7f8 f8ed 	bl	8000534 <__aeabi_i2d>
 800835a:	3630      	adds	r6, #48	; 0x30
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	4640      	mov	r0, r8
 8008362:	4649      	mov	r1, r9
 8008364:	f7f7 ff98 	bl	8000298 <__aeabi_dsub>
 8008368:	f805 6b01 	strb.w	r6, [r5], #1
 800836c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800836e:	429d      	cmp	r5, r3
 8008370:	4680      	mov	r8, r0
 8008372:	4689      	mov	r9, r1
 8008374:	f04f 0200 	mov.w	r2, #0
 8008378:	d124      	bne.n	80083c4 <_dtoa_r+0x60c>
 800837a:	4b1b      	ldr	r3, [pc, #108]	; (80083e8 <_dtoa_r+0x630>)
 800837c:	4650      	mov	r0, sl
 800837e:	4659      	mov	r1, fp
 8008380:	f7f7 ff8c 	bl	800029c <__adddf3>
 8008384:	4602      	mov	r2, r0
 8008386:	460b      	mov	r3, r1
 8008388:	4640      	mov	r0, r8
 800838a:	4649      	mov	r1, r9
 800838c:	f7f8 fbcc 	bl	8000b28 <__aeabi_dcmpgt>
 8008390:	2800      	cmp	r0, #0
 8008392:	d173      	bne.n	800847c <_dtoa_r+0x6c4>
 8008394:	4652      	mov	r2, sl
 8008396:	465b      	mov	r3, fp
 8008398:	4913      	ldr	r1, [pc, #76]	; (80083e8 <_dtoa_r+0x630>)
 800839a:	2000      	movs	r0, #0
 800839c:	f7f7 ff7c 	bl	8000298 <__aeabi_dsub>
 80083a0:	4602      	mov	r2, r0
 80083a2:	460b      	mov	r3, r1
 80083a4:	4640      	mov	r0, r8
 80083a6:	4649      	mov	r1, r9
 80083a8:	f7f8 fba0 	bl	8000aec <__aeabi_dcmplt>
 80083ac:	2800      	cmp	r0, #0
 80083ae:	f43f af35 	beq.w	800821c <_dtoa_r+0x464>
 80083b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80083b4:	1e6b      	subs	r3, r5, #1
 80083b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80083b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80083bc:	2b30      	cmp	r3, #48	; 0x30
 80083be:	d0f8      	beq.n	80083b2 <_dtoa_r+0x5fa>
 80083c0:	9700      	str	r7, [sp, #0]
 80083c2:	e049      	b.n	8008458 <_dtoa_r+0x6a0>
 80083c4:	4b05      	ldr	r3, [pc, #20]	; (80083dc <_dtoa_r+0x624>)
 80083c6:	f7f8 f91f 	bl	8000608 <__aeabi_dmul>
 80083ca:	4680      	mov	r8, r0
 80083cc:	4689      	mov	r9, r1
 80083ce:	e7bd      	b.n	800834c <_dtoa_r+0x594>
 80083d0:	0800acc8 	.word	0x0800acc8
 80083d4:	0800aca0 	.word	0x0800aca0
 80083d8:	3ff00000 	.word	0x3ff00000
 80083dc:	40240000 	.word	0x40240000
 80083e0:	401c0000 	.word	0x401c0000
 80083e4:	40140000 	.word	0x40140000
 80083e8:	3fe00000 	.word	0x3fe00000
 80083ec:	9d01      	ldr	r5, [sp, #4]
 80083ee:	4656      	mov	r6, sl
 80083f0:	465f      	mov	r7, fp
 80083f2:	4642      	mov	r2, r8
 80083f4:	464b      	mov	r3, r9
 80083f6:	4630      	mov	r0, r6
 80083f8:	4639      	mov	r1, r7
 80083fa:	f7f8 fa2f 	bl	800085c <__aeabi_ddiv>
 80083fe:	f7f8 fbb3 	bl	8000b68 <__aeabi_d2iz>
 8008402:	4682      	mov	sl, r0
 8008404:	f7f8 f896 	bl	8000534 <__aeabi_i2d>
 8008408:	4642      	mov	r2, r8
 800840a:	464b      	mov	r3, r9
 800840c:	f7f8 f8fc 	bl	8000608 <__aeabi_dmul>
 8008410:	4602      	mov	r2, r0
 8008412:	460b      	mov	r3, r1
 8008414:	4630      	mov	r0, r6
 8008416:	4639      	mov	r1, r7
 8008418:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800841c:	f7f7 ff3c 	bl	8000298 <__aeabi_dsub>
 8008420:	f805 6b01 	strb.w	r6, [r5], #1
 8008424:	9e01      	ldr	r6, [sp, #4]
 8008426:	9f03      	ldr	r7, [sp, #12]
 8008428:	1bae      	subs	r6, r5, r6
 800842a:	42b7      	cmp	r7, r6
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	d135      	bne.n	800849e <_dtoa_r+0x6e6>
 8008432:	f7f7 ff33 	bl	800029c <__adddf3>
 8008436:	4642      	mov	r2, r8
 8008438:	464b      	mov	r3, r9
 800843a:	4606      	mov	r6, r0
 800843c:	460f      	mov	r7, r1
 800843e:	f7f8 fb73 	bl	8000b28 <__aeabi_dcmpgt>
 8008442:	b9d0      	cbnz	r0, 800847a <_dtoa_r+0x6c2>
 8008444:	4642      	mov	r2, r8
 8008446:	464b      	mov	r3, r9
 8008448:	4630      	mov	r0, r6
 800844a:	4639      	mov	r1, r7
 800844c:	f7f8 fb44 	bl	8000ad8 <__aeabi_dcmpeq>
 8008450:	b110      	cbz	r0, 8008458 <_dtoa_r+0x6a0>
 8008452:	f01a 0f01 	tst.w	sl, #1
 8008456:	d110      	bne.n	800847a <_dtoa_r+0x6c2>
 8008458:	4620      	mov	r0, r4
 800845a:	ee18 1a10 	vmov	r1, s16
 800845e:	f000 ff71 	bl	8009344 <_Bfree>
 8008462:	2300      	movs	r3, #0
 8008464:	9800      	ldr	r0, [sp, #0]
 8008466:	702b      	strb	r3, [r5, #0]
 8008468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800846a:	3001      	adds	r0, #1
 800846c:	6018      	str	r0, [r3, #0]
 800846e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008470:	2b00      	cmp	r3, #0
 8008472:	f43f acf1 	beq.w	8007e58 <_dtoa_r+0xa0>
 8008476:	601d      	str	r5, [r3, #0]
 8008478:	e4ee      	b.n	8007e58 <_dtoa_r+0xa0>
 800847a:	9f00      	ldr	r7, [sp, #0]
 800847c:	462b      	mov	r3, r5
 800847e:	461d      	mov	r5, r3
 8008480:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008484:	2a39      	cmp	r2, #57	; 0x39
 8008486:	d106      	bne.n	8008496 <_dtoa_r+0x6de>
 8008488:	9a01      	ldr	r2, [sp, #4]
 800848a:	429a      	cmp	r2, r3
 800848c:	d1f7      	bne.n	800847e <_dtoa_r+0x6c6>
 800848e:	9901      	ldr	r1, [sp, #4]
 8008490:	2230      	movs	r2, #48	; 0x30
 8008492:	3701      	adds	r7, #1
 8008494:	700a      	strb	r2, [r1, #0]
 8008496:	781a      	ldrb	r2, [r3, #0]
 8008498:	3201      	adds	r2, #1
 800849a:	701a      	strb	r2, [r3, #0]
 800849c:	e790      	b.n	80083c0 <_dtoa_r+0x608>
 800849e:	4ba6      	ldr	r3, [pc, #664]	; (8008738 <_dtoa_r+0x980>)
 80084a0:	2200      	movs	r2, #0
 80084a2:	f7f8 f8b1 	bl	8000608 <__aeabi_dmul>
 80084a6:	2200      	movs	r2, #0
 80084a8:	2300      	movs	r3, #0
 80084aa:	4606      	mov	r6, r0
 80084ac:	460f      	mov	r7, r1
 80084ae:	f7f8 fb13 	bl	8000ad8 <__aeabi_dcmpeq>
 80084b2:	2800      	cmp	r0, #0
 80084b4:	d09d      	beq.n	80083f2 <_dtoa_r+0x63a>
 80084b6:	e7cf      	b.n	8008458 <_dtoa_r+0x6a0>
 80084b8:	9a08      	ldr	r2, [sp, #32]
 80084ba:	2a00      	cmp	r2, #0
 80084bc:	f000 80d7 	beq.w	800866e <_dtoa_r+0x8b6>
 80084c0:	9a06      	ldr	r2, [sp, #24]
 80084c2:	2a01      	cmp	r2, #1
 80084c4:	f300 80ba 	bgt.w	800863c <_dtoa_r+0x884>
 80084c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084ca:	2a00      	cmp	r2, #0
 80084cc:	f000 80b2 	beq.w	8008634 <_dtoa_r+0x87c>
 80084d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80084d4:	9e07      	ldr	r6, [sp, #28]
 80084d6:	9d04      	ldr	r5, [sp, #16]
 80084d8:	9a04      	ldr	r2, [sp, #16]
 80084da:	441a      	add	r2, r3
 80084dc:	9204      	str	r2, [sp, #16]
 80084de:	9a05      	ldr	r2, [sp, #20]
 80084e0:	2101      	movs	r1, #1
 80084e2:	441a      	add	r2, r3
 80084e4:	4620      	mov	r0, r4
 80084e6:	9205      	str	r2, [sp, #20]
 80084e8:	f001 f82e 	bl	8009548 <__i2b>
 80084ec:	4607      	mov	r7, r0
 80084ee:	2d00      	cmp	r5, #0
 80084f0:	dd0c      	ble.n	800850c <_dtoa_r+0x754>
 80084f2:	9b05      	ldr	r3, [sp, #20]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	dd09      	ble.n	800850c <_dtoa_r+0x754>
 80084f8:	42ab      	cmp	r3, r5
 80084fa:	9a04      	ldr	r2, [sp, #16]
 80084fc:	bfa8      	it	ge
 80084fe:	462b      	movge	r3, r5
 8008500:	1ad2      	subs	r2, r2, r3
 8008502:	9204      	str	r2, [sp, #16]
 8008504:	9a05      	ldr	r2, [sp, #20]
 8008506:	1aed      	subs	r5, r5, r3
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	9305      	str	r3, [sp, #20]
 800850c:	9b07      	ldr	r3, [sp, #28]
 800850e:	b31b      	cbz	r3, 8008558 <_dtoa_r+0x7a0>
 8008510:	9b08      	ldr	r3, [sp, #32]
 8008512:	2b00      	cmp	r3, #0
 8008514:	f000 80af 	beq.w	8008676 <_dtoa_r+0x8be>
 8008518:	2e00      	cmp	r6, #0
 800851a:	dd13      	ble.n	8008544 <_dtoa_r+0x78c>
 800851c:	4639      	mov	r1, r7
 800851e:	4632      	mov	r2, r6
 8008520:	4620      	mov	r0, r4
 8008522:	f001 f8d1 	bl	80096c8 <__pow5mult>
 8008526:	ee18 2a10 	vmov	r2, s16
 800852a:	4601      	mov	r1, r0
 800852c:	4607      	mov	r7, r0
 800852e:	4620      	mov	r0, r4
 8008530:	f001 f820 	bl	8009574 <__multiply>
 8008534:	ee18 1a10 	vmov	r1, s16
 8008538:	4680      	mov	r8, r0
 800853a:	4620      	mov	r0, r4
 800853c:	f000 ff02 	bl	8009344 <_Bfree>
 8008540:	ee08 8a10 	vmov	s16, r8
 8008544:	9b07      	ldr	r3, [sp, #28]
 8008546:	1b9a      	subs	r2, r3, r6
 8008548:	d006      	beq.n	8008558 <_dtoa_r+0x7a0>
 800854a:	ee18 1a10 	vmov	r1, s16
 800854e:	4620      	mov	r0, r4
 8008550:	f001 f8ba 	bl	80096c8 <__pow5mult>
 8008554:	ee08 0a10 	vmov	s16, r0
 8008558:	2101      	movs	r1, #1
 800855a:	4620      	mov	r0, r4
 800855c:	f000 fff4 	bl	8009548 <__i2b>
 8008560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008562:	2b00      	cmp	r3, #0
 8008564:	4606      	mov	r6, r0
 8008566:	f340 8088 	ble.w	800867a <_dtoa_r+0x8c2>
 800856a:	461a      	mov	r2, r3
 800856c:	4601      	mov	r1, r0
 800856e:	4620      	mov	r0, r4
 8008570:	f001 f8aa 	bl	80096c8 <__pow5mult>
 8008574:	9b06      	ldr	r3, [sp, #24]
 8008576:	2b01      	cmp	r3, #1
 8008578:	4606      	mov	r6, r0
 800857a:	f340 8081 	ble.w	8008680 <_dtoa_r+0x8c8>
 800857e:	f04f 0800 	mov.w	r8, #0
 8008582:	6933      	ldr	r3, [r6, #16]
 8008584:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008588:	6918      	ldr	r0, [r3, #16]
 800858a:	f000 ff8d 	bl	80094a8 <__hi0bits>
 800858e:	f1c0 0020 	rsb	r0, r0, #32
 8008592:	9b05      	ldr	r3, [sp, #20]
 8008594:	4418      	add	r0, r3
 8008596:	f010 001f 	ands.w	r0, r0, #31
 800859a:	f000 8092 	beq.w	80086c2 <_dtoa_r+0x90a>
 800859e:	f1c0 0320 	rsb	r3, r0, #32
 80085a2:	2b04      	cmp	r3, #4
 80085a4:	f340 808a 	ble.w	80086bc <_dtoa_r+0x904>
 80085a8:	f1c0 001c 	rsb	r0, r0, #28
 80085ac:	9b04      	ldr	r3, [sp, #16]
 80085ae:	4403      	add	r3, r0
 80085b0:	9304      	str	r3, [sp, #16]
 80085b2:	9b05      	ldr	r3, [sp, #20]
 80085b4:	4403      	add	r3, r0
 80085b6:	4405      	add	r5, r0
 80085b8:	9305      	str	r3, [sp, #20]
 80085ba:	9b04      	ldr	r3, [sp, #16]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	dd07      	ble.n	80085d0 <_dtoa_r+0x818>
 80085c0:	ee18 1a10 	vmov	r1, s16
 80085c4:	461a      	mov	r2, r3
 80085c6:	4620      	mov	r0, r4
 80085c8:	f001 f8d8 	bl	800977c <__lshift>
 80085cc:	ee08 0a10 	vmov	s16, r0
 80085d0:	9b05      	ldr	r3, [sp, #20]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	dd05      	ble.n	80085e2 <_dtoa_r+0x82a>
 80085d6:	4631      	mov	r1, r6
 80085d8:	461a      	mov	r2, r3
 80085da:	4620      	mov	r0, r4
 80085dc:	f001 f8ce 	bl	800977c <__lshift>
 80085e0:	4606      	mov	r6, r0
 80085e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d06e      	beq.n	80086c6 <_dtoa_r+0x90e>
 80085e8:	ee18 0a10 	vmov	r0, s16
 80085ec:	4631      	mov	r1, r6
 80085ee:	f001 f935 	bl	800985c <__mcmp>
 80085f2:	2800      	cmp	r0, #0
 80085f4:	da67      	bge.n	80086c6 <_dtoa_r+0x90e>
 80085f6:	9b00      	ldr	r3, [sp, #0]
 80085f8:	3b01      	subs	r3, #1
 80085fa:	ee18 1a10 	vmov	r1, s16
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	220a      	movs	r2, #10
 8008602:	2300      	movs	r3, #0
 8008604:	4620      	mov	r0, r4
 8008606:	f000 febf 	bl	8009388 <__multadd>
 800860a:	9b08      	ldr	r3, [sp, #32]
 800860c:	ee08 0a10 	vmov	s16, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	f000 81b1 	beq.w	8008978 <_dtoa_r+0xbc0>
 8008616:	2300      	movs	r3, #0
 8008618:	4639      	mov	r1, r7
 800861a:	220a      	movs	r2, #10
 800861c:	4620      	mov	r0, r4
 800861e:	f000 feb3 	bl	8009388 <__multadd>
 8008622:	9b02      	ldr	r3, [sp, #8]
 8008624:	2b00      	cmp	r3, #0
 8008626:	4607      	mov	r7, r0
 8008628:	f300 808e 	bgt.w	8008748 <_dtoa_r+0x990>
 800862c:	9b06      	ldr	r3, [sp, #24]
 800862e:	2b02      	cmp	r3, #2
 8008630:	dc51      	bgt.n	80086d6 <_dtoa_r+0x91e>
 8008632:	e089      	b.n	8008748 <_dtoa_r+0x990>
 8008634:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008636:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800863a:	e74b      	b.n	80084d4 <_dtoa_r+0x71c>
 800863c:	9b03      	ldr	r3, [sp, #12]
 800863e:	1e5e      	subs	r6, r3, #1
 8008640:	9b07      	ldr	r3, [sp, #28]
 8008642:	42b3      	cmp	r3, r6
 8008644:	bfbf      	itttt	lt
 8008646:	9b07      	ldrlt	r3, [sp, #28]
 8008648:	9607      	strlt	r6, [sp, #28]
 800864a:	1af2      	sublt	r2, r6, r3
 800864c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800864e:	bfb6      	itet	lt
 8008650:	189b      	addlt	r3, r3, r2
 8008652:	1b9e      	subge	r6, r3, r6
 8008654:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008656:	9b03      	ldr	r3, [sp, #12]
 8008658:	bfb8      	it	lt
 800865a:	2600      	movlt	r6, #0
 800865c:	2b00      	cmp	r3, #0
 800865e:	bfb7      	itett	lt
 8008660:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008664:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008668:	1a9d      	sublt	r5, r3, r2
 800866a:	2300      	movlt	r3, #0
 800866c:	e734      	b.n	80084d8 <_dtoa_r+0x720>
 800866e:	9e07      	ldr	r6, [sp, #28]
 8008670:	9d04      	ldr	r5, [sp, #16]
 8008672:	9f08      	ldr	r7, [sp, #32]
 8008674:	e73b      	b.n	80084ee <_dtoa_r+0x736>
 8008676:	9a07      	ldr	r2, [sp, #28]
 8008678:	e767      	b.n	800854a <_dtoa_r+0x792>
 800867a:	9b06      	ldr	r3, [sp, #24]
 800867c:	2b01      	cmp	r3, #1
 800867e:	dc18      	bgt.n	80086b2 <_dtoa_r+0x8fa>
 8008680:	f1ba 0f00 	cmp.w	sl, #0
 8008684:	d115      	bne.n	80086b2 <_dtoa_r+0x8fa>
 8008686:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800868a:	b993      	cbnz	r3, 80086b2 <_dtoa_r+0x8fa>
 800868c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008690:	0d1b      	lsrs	r3, r3, #20
 8008692:	051b      	lsls	r3, r3, #20
 8008694:	b183      	cbz	r3, 80086b8 <_dtoa_r+0x900>
 8008696:	9b04      	ldr	r3, [sp, #16]
 8008698:	3301      	adds	r3, #1
 800869a:	9304      	str	r3, [sp, #16]
 800869c:	9b05      	ldr	r3, [sp, #20]
 800869e:	3301      	adds	r3, #1
 80086a0:	9305      	str	r3, [sp, #20]
 80086a2:	f04f 0801 	mov.w	r8, #1
 80086a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f47f af6a 	bne.w	8008582 <_dtoa_r+0x7ca>
 80086ae:	2001      	movs	r0, #1
 80086b0:	e76f      	b.n	8008592 <_dtoa_r+0x7da>
 80086b2:	f04f 0800 	mov.w	r8, #0
 80086b6:	e7f6      	b.n	80086a6 <_dtoa_r+0x8ee>
 80086b8:	4698      	mov	r8, r3
 80086ba:	e7f4      	b.n	80086a6 <_dtoa_r+0x8ee>
 80086bc:	f43f af7d 	beq.w	80085ba <_dtoa_r+0x802>
 80086c0:	4618      	mov	r0, r3
 80086c2:	301c      	adds	r0, #28
 80086c4:	e772      	b.n	80085ac <_dtoa_r+0x7f4>
 80086c6:	9b03      	ldr	r3, [sp, #12]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	dc37      	bgt.n	800873c <_dtoa_r+0x984>
 80086cc:	9b06      	ldr	r3, [sp, #24]
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	dd34      	ble.n	800873c <_dtoa_r+0x984>
 80086d2:	9b03      	ldr	r3, [sp, #12]
 80086d4:	9302      	str	r3, [sp, #8]
 80086d6:	9b02      	ldr	r3, [sp, #8]
 80086d8:	b96b      	cbnz	r3, 80086f6 <_dtoa_r+0x93e>
 80086da:	4631      	mov	r1, r6
 80086dc:	2205      	movs	r2, #5
 80086de:	4620      	mov	r0, r4
 80086e0:	f000 fe52 	bl	8009388 <__multadd>
 80086e4:	4601      	mov	r1, r0
 80086e6:	4606      	mov	r6, r0
 80086e8:	ee18 0a10 	vmov	r0, s16
 80086ec:	f001 f8b6 	bl	800985c <__mcmp>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	f73f adbb 	bgt.w	800826c <_dtoa_r+0x4b4>
 80086f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086f8:	9d01      	ldr	r5, [sp, #4]
 80086fa:	43db      	mvns	r3, r3
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	f04f 0800 	mov.w	r8, #0
 8008702:	4631      	mov	r1, r6
 8008704:	4620      	mov	r0, r4
 8008706:	f000 fe1d 	bl	8009344 <_Bfree>
 800870a:	2f00      	cmp	r7, #0
 800870c:	f43f aea4 	beq.w	8008458 <_dtoa_r+0x6a0>
 8008710:	f1b8 0f00 	cmp.w	r8, #0
 8008714:	d005      	beq.n	8008722 <_dtoa_r+0x96a>
 8008716:	45b8      	cmp	r8, r7
 8008718:	d003      	beq.n	8008722 <_dtoa_r+0x96a>
 800871a:	4641      	mov	r1, r8
 800871c:	4620      	mov	r0, r4
 800871e:	f000 fe11 	bl	8009344 <_Bfree>
 8008722:	4639      	mov	r1, r7
 8008724:	4620      	mov	r0, r4
 8008726:	f000 fe0d 	bl	8009344 <_Bfree>
 800872a:	e695      	b.n	8008458 <_dtoa_r+0x6a0>
 800872c:	2600      	movs	r6, #0
 800872e:	4637      	mov	r7, r6
 8008730:	e7e1      	b.n	80086f6 <_dtoa_r+0x93e>
 8008732:	9700      	str	r7, [sp, #0]
 8008734:	4637      	mov	r7, r6
 8008736:	e599      	b.n	800826c <_dtoa_r+0x4b4>
 8008738:	40240000 	.word	0x40240000
 800873c:	9b08      	ldr	r3, [sp, #32]
 800873e:	2b00      	cmp	r3, #0
 8008740:	f000 80ca 	beq.w	80088d8 <_dtoa_r+0xb20>
 8008744:	9b03      	ldr	r3, [sp, #12]
 8008746:	9302      	str	r3, [sp, #8]
 8008748:	2d00      	cmp	r5, #0
 800874a:	dd05      	ble.n	8008758 <_dtoa_r+0x9a0>
 800874c:	4639      	mov	r1, r7
 800874e:	462a      	mov	r2, r5
 8008750:	4620      	mov	r0, r4
 8008752:	f001 f813 	bl	800977c <__lshift>
 8008756:	4607      	mov	r7, r0
 8008758:	f1b8 0f00 	cmp.w	r8, #0
 800875c:	d05b      	beq.n	8008816 <_dtoa_r+0xa5e>
 800875e:	6879      	ldr	r1, [r7, #4]
 8008760:	4620      	mov	r0, r4
 8008762:	f000 fdaf 	bl	80092c4 <_Balloc>
 8008766:	4605      	mov	r5, r0
 8008768:	b928      	cbnz	r0, 8008776 <_dtoa_r+0x9be>
 800876a:	4b87      	ldr	r3, [pc, #540]	; (8008988 <_dtoa_r+0xbd0>)
 800876c:	4602      	mov	r2, r0
 800876e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008772:	f7ff bb3b 	b.w	8007dec <_dtoa_r+0x34>
 8008776:	693a      	ldr	r2, [r7, #16]
 8008778:	3202      	adds	r2, #2
 800877a:	0092      	lsls	r2, r2, #2
 800877c:	f107 010c 	add.w	r1, r7, #12
 8008780:	300c      	adds	r0, #12
 8008782:	f000 fd84 	bl	800928e <memcpy>
 8008786:	2201      	movs	r2, #1
 8008788:	4629      	mov	r1, r5
 800878a:	4620      	mov	r0, r4
 800878c:	f000 fff6 	bl	800977c <__lshift>
 8008790:	9b01      	ldr	r3, [sp, #4]
 8008792:	f103 0901 	add.w	r9, r3, #1
 8008796:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800879a:	4413      	add	r3, r2
 800879c:	9305      	str	r3, [sp, #20]
 800879e:	f00a 0301 	and.w	r3, sl, #1
 80087a2:	46b8      	mov	r8, r7
 80087a4:	9304      	str	r3, [sp, #16]
 80087a6:	4607      	mov	r7, r0
 80087a8:	4631      	mov	r1, r6
 80087aa:	ee18 0a10 	vmov	r0, s16
 80087ae:	f7ff fa77 	bl	8007ca0 <quorem>
 80087b2:	4641      	mov	r1, r8
 80087b4:	9002      	str	r0, [sp, #8]
 80087b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80087ba:	ee18 0a10 	vmov	r0, s16
 80087be:	f001 f84d 	bl	800985c <__mcmp>
 80087c2:	463a      	mov	r2, r7
 80087c4:	9003      	str	r0, [sp, #12]
 80087c6:	4631      	mov	r1, r6
 80087c8:	4620      	mov	r0, r4
 80087ca:	f001 f863 	bl	8009894 <__mdiff>
 80087ce:	68c2      	ldr	r2, [r0, #12]
 80087d0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80087d4:	4605      	mov	r5, r0
 80087d6:	bb02      	cbnz	r2, 800881a <_dtoa_r+0xa62>
 80087d8:	4601      	mov	r1, r0
 80087da:	ee18 0a10 	vmov	r0, s16
 80087de:	f001 f83d 	bl	800985c <__mcmp>
 80087e2:	4602      	mov	r2, r0
 80087e4:	4629      	mov	r1, r5
 80087e6:	4620      	mov	r0, r4
 80087e8:	9207      	str	r2, [sp, #28]
 80087ea:	f000 fdab 	bl	8009344 <_Bfree>
 80087ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80087f2:	ea43 0102 	orr.w	r1, r3, r2
 80087f6:	9b04      	ldr	r3, [sp, #16]
 80087f8:	430b      	orrs	r3, r1
 80087fa:	464d      	mov	r5, r9
 80087fc:	d10f      	bne.n	800881e <_dtoa_r+0xa66>
 80087fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008802:	d02a      	beq.n	800885a <_dtoa_r+0xaa2>
 8008804:	9b03      	ldr	r3, [sp, #12]
 8008806:	2b00      	cmp	r3, #0
 8008808:	dd02      	ble.n	8008810 <_dtoa_r+0xa58>
 800880a:	9b02      	ldr	r3, [sp, #8]
 800880c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008810:	f88b a000 	strb.w	sl, [fp]
 8008814:	e775      	b.n	8008702 <_dtoa_r+0x94a>
 8008816:	4638      	mov	r0, r7
 8008818:	e7ba      	b.n	8008790 <_dtoa_r+0x9d8>
 800881a:	2201      	movs	r2, #1
 800881c:	e7e2      	b.n	80087e4 <_dtoa_r+0xa2c>
 800881e:	9b03      	ldr	r3, [sp, #12]
 8008820:	2b00      	cmp	r3, #0
 8008822:	db04      	blt.n	800882e <_dtoa_r+0xa76>
 8008824:	9906      	ldr	r1, [sp, #24]
 8008826:	430b      	orrs	r3, r1
 8008828:	9904      	ldr	r1, [sp, #16]
 800882a:	430b      	orrs	r3, r1
 800882c:	d122      	bne.n	8008874 <_dtoa_r+0xabc>
 800882e:	2a00      	cmp	r2, #0
 8008830:	ddee      	ble.n	8008810 <_dtoa_r+0xa58>
 8008832:	ee18 1a10 	vmov	r1, s16
 8008836:	2201      	movs	r2, #1
 8008838:	4620      	mov	r0, r4
 800883a:	f000 ff9f 	bl	800977c <__lshift>
 800883e:	4631      	mov	r1, r6
 8008840:	ee08 0a10 	vmov	s16, r0
 8008844:	f001 f80a 	bl	800985c <__mcmp>
 8008848:	2800      	cmp	r0, #0
 800884a:	dc03      	bgt.n	8008854 <_dtoa_r+0xa9c>
 800884c:	d1e0      	bne.n	8008810 <_dtoa_r+0xa58>
 800884e:	f01a 0f01 	tst.w	sl, #1
 8008852:	d0dd      	beq.n	8008810 <_dtoa_r+0xa58>
 8008854:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008858:	d1d7      	bne.n	800880a <_dtoa_r+0xa52>
 800885a:	2339      	movs	r3, #57	; 0x39
 800885c:	f88b 3000 	strb.w	r3, [fp]
 8008860:	462b      	mov	r3, r5
 8008862:	461d      	mov	r5, r3
 8008864:	3b01      	subs	r3, #1
 8008866:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800886a:	2a39      	cmp	r2, #57	; 0x39
 800886c:	d071      	beq.n	8008952 <_dtoa_r+0xb9a>
 800886e:	3201      	adds	r2, #1
 8008870:	701a      	strb	r2, [r3, #0]
 8008872:	e746      	b.n	8008702 <_dtoa_r+0x94a>
 8008874:	2a00      	cmp	r2, #0
 8008876:	dd07      	ble.n	8008888 <_dtoa_r+0xad0>
 8008878:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800887c:	d0ed      	beq.n	800885a <_dtoa_r+0xaa2>
 800887e:	f10a 0301 	add.w	r3, sl, #1
 8008882:	f88b 3000 	strb.w	r3, [fp]
 8008886:	e73c      	b.n	8008702 <_dtoa_r+0x94a>
 8008888:	9b05      	ldr	r3, [sp, #20]
 800888a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800888e:	4599      	cmp	r9, r3
 8008890:	d047      	beq.n	8008922 <_dtoa_r+0xb6a>
 8008892:	ee18 1a10 	vmov	r1, s16
 8008896:	2300      	movs	r3, #0
 8008898:	220a      	movs	r2, #10
 800889a:	4620      	mov	r0, r4
 800889c:	f000 fd74 	bl	8009388 <__multadd>
 80088a0:	45b8      	cmp	r8, r7
 80088a2:	ee08 0a10 	vmov	s16, r0
 80088a6:	f04f 0300 	mov.w	r3, #0
 80088aa:	f04f 020a 	mov.w	r2, #10
 80088ae:	4641      	mov	r1, r8
 80088b0:	4620      	mov	r0, r4
 80088b2:	d106      	bne.n	80088c2 <_dtoa_r+0xb0a>
 80088b4:	f000 fd68 	bl	8009388 <__multadd>
 80088b8:	4680      	mov	r8, r0
 80088ba:	4607      	mov	r7, r0
 80088bc:	f109 0901 	add.w	r9, r9, #1
 80088c0:	e772      	b.n	80087a8 <_dtoa_r+0x9f0>
 80088c2:	f000 fd61 	bl	8009388 <__multadd>
 80088c6:	4639      	mov	r1, r7
 80088c8:	4680      	mov	r8, r0
 80088ca:	2300      	movs	r3, #0
 80088cc:	220a      	movs	r2, #10
 80088ce:	4620      	mov	r0, r4
 80088d0:	f000 fd5a 	bl	8009388 <__multadd>
 80088d4:	4607      	mov	r7, r0
 80088d6:	e7f1      	b.n	80088bc <_dtoa_r+0xb04>
 80088d8:	9b03      	ldr	r3, [sp, #12]
 80088da:	9302      	str	r3, [sp, #8]
 80088dc:	9d01      	ldr	r5, [sp, #4]
 80088de:	ee18 0a10 	vmov	r0, s16
 80088e2:	4631      	mov	r1, r6
 80088e4:	f7ff f9dc 	bl	8007ca0 <quorem>
 80088e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80088ec:	9b01      	ldr	r3, [sp, #4]
 80088ee:	f805 ab01 	strb.w	sl, [r5], #1
 80088f2:	1aea      	subs	r2, r5, r3
 80088f4:	9b02      	ldr	r3, [sp, #8]
 80088f6:	4293      	cmp	r3, r2
 80088f8:	dd09      	ble.n	800890e <_dtoa_r+0xb56>
 80088fa:	ee18 1a10 	vmov	r1, s16
 80088fe:	2300      	movs	r3, #0
 8008900:	220a      	movs	r2, #10
 8008902:	4620      	mov	r0, r4
 8008904:	f000 fd40 	bl	8009388 <__multadd>
 8008908:	ee08 0a10 	vmov	s16, r0
 800890c:	e7e7      	b.n	80088de <_dtoa_r+0xb26>
 800890e:	9b02      	ldr	r3, [sp, #8]
 8008910:	2b00      	cmp	r3, #0
 8008912:	bfc8      	it	gt
 8008914:	461d      	movgt	r5, r3
 8008916:	9b01      	ldr	r3, [sp, #4]
 8008918:	bfd8      	it	le
 800891a:	2501      	movle	r5, #1
 800891c:	441d      	add	r5, r3
 800891e:	f04f 0800 	mov.w	r8, #0
 8008922:	ee18 1a10 	vmov	r1, s16
 8008926:	2201      	movs	r2, #1
 8008928:	4620      	mov	r0, r4
 800892a:	f000 ff27 	bl	800977c <__lshift>
 800892e:	4631      	mov	r1, r6
 8008930:	ee08 0a10 	vmov	s16, r0
 8008934:	f000 ff92 	bl	800985c <__mcmp>
 8008938:	2800      	cmp	r0, #0
 800893a:	dc91      	bgt.n	8008860 <_dtoa_r+0xaa8>
 800893c:	d102      	bne.n	8008944 <_dtoa_r+0xb8c>
 800893e:	f01a 0f01 	tst.w	sl, #1
 8008942:	d18d      	bne.n	8008860 <_dtoa_r+0xaa8>
 8008944:	462b      	mov	r3, r5
 8008946:	461d      	mov	r5, r3
 8008948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800894c:	2a30      	cmp	r2, #48	; 0x30
 800894e:	d0fa      	beq.n	8008946 <_dtoa_r+0xb8e>
 8008950:	e6d7      	b.n	8008702 <_dtoa_r+0x94a>
 8008952:	9a01      	ldr	r2, [sp, #4]
 8008954:	429a      	cmp	r2, r3
 8008956:	d184      	bne.n	8008862 <_dtoa_r+0xaaa>
 8008958:	9b00      	ldr	r3, [sp, #0]
 800895a:	3301      	adds	r3, #1
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	2331      	movs	r3, #49	; 0x31
 8008960:	7013      	strb	r3, [r2, #0]
 8008962:	e6ce      	b.n	8008702 <_dtoa_r+0x94a>
 8008964:	4b09      	ldr	r3, [pc, #36]	; (800898c <_dtoa_r+0xbd4>)
 8008966:	f7ff ba95 	b.w	8007e94 <_dtoa_r+0xdc>
 800896a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800896c:	2b00      	cmp	r3, #0
 800896e:	f47f aa6e 	bne.w	8007e4e <_dtoa_r+0x96>
 8008972:	4b07      	ldr	r3, [pc, #28]	; (8008990 <_dtoa_r+0xbd8>)
 8008974:	f7ff ba8e 	b.w	8007e94 <_dtoa_r+0xdc>
 8008978:	9b02      	ldr	r3, [sp, #8]
 800897a:	2b00      	cmp	r3, #0
 800897c:	dcae      	bgt.n	80088dc <_dtoa_r+0xb24>
 800897e:	9b06      	ldr	r3, [sp, #24]
 8008980:	2b02      	cmp	r3, #2
 8008982:	f73f aea8 	bgt.w	80086d6 <_dtoa_r+0x91e>
 8008986:	e7a9      	b.n	80088dc <_dtoa_r+0xb24>
 8008988:	0800ab50 	.word	0x0800ab50
 800898c:	0800a954 	.word	0x0800a954
 8008990:	0800aad1 	.word	0x0800aad1

08008994 <std>:
 8008994:	2300      	movs	r3, #0
 8008996:	b510      	push	{r4, lr}
 8008998:	4604      	mov	r4, r0
 800899a:	e9c0 3300 	strd	r3, r3, [r0]
 800899e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089a2:	6083      	str	r3, [r0, #8]
 80089a4:	8181      	strh	r1, [r0, #12]
 80089a6:	6643      	str	r3, [r0, #100]	; 0x64
 80089a8:	81c2      	strh	r2, [r0, #14]
 80089aa:	6183      	str	r3, [r0, #24]
 80089ac:	4619      	mov	r1, r3
 80089ae:	2208      	movs	r2, #8
 80089b0:	305c      	adds	r0, #92	; 0x5c
 80089b2:	f7fd fb03 	bl	8005fbc <memset>
 80089b6:	4b05      	ldr	r3, [pc, #20]	; (80089cc <std+0x38>)
 80089b8:	6263      	str	r3, [r4, #36]	; 0x24
 80089ba:	4b05      	ldr	r3, [pc, #20]	; (80089d0 <std+0x3c>)
 80089bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80089be:	4b05      	ldr	r3, [pc, #20]	; (80089d4 <std+0x40>)
 80089c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80089c2:	4b05      	ldr	r3, [pc, #20]	; (80089d8 <std+0x44>)
 80089c4:	6224      	str	r4, [r4, #32]
 80089c6:	6323      	str	r3, [r4, #48]	; 0x30
 80089c8:	bd10      	pop	{r4, pc}
 80089ca:	bf00      	nop
 80089cc:	0800a1c1 	.word	0x0800a1c1
 80089d0:	0800a1e3 	.word	0x0800a1e3
 80089d4:	0800a21b 	.word	0x0800a21b
 80089d8:	0800a23f 	.word	0x0800a23f

080089dc <_cleanup_r>:
 80089dc:	4901      	ldr	r1, [pc, #4]	; (80089e4 <_cleanup_r+0x8>)
 80089de:	f000 b8af 	b.w	8008b40 <_fwalk_reent>
 80089e2:	bf00      	nop
 80089e4:	0800a599 	.word	0x0800a599

080089e8 <__sfmoreglue>:
 80089e8:	b570      	push	{r4, r5, r6, lr}
 80089ea:	2268      	movs	r2, #104	; 0x68
 80089ec:	1e4d      	subs	r5, r1, #1
 80089ee:	4355      	muls	r5, r2
 80089f0:	460e      	mov	r6, r1
 80089f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80089f6:	f7fd fb6b 	bl	80060d0 <_malloc_r>
 80089fa:	4604      	mov	r4, r0
 80089fc:	b140      	cbz	r0, 8008a10 <__sfmoreglue+0x28>
 80089fe:	2100      	movs	r1, #0
 8008a00:	e9c0 1600 	strd	r1, r6, [r0]
 8008a04:	300c      	adds	r0, #12
 8008a06:	60a0      	str	r0, [r4, #8]
 8008a08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a0c:	f7fd fad6 	bl	8005fbc <memset>
 8008a10:	4620      	mov	r0, r4
 8008a12:	bd70      	pop	{r4, r5, r6, pc}

08008a14 <__sfp_lock_acquire>:
 8008a14:	4801      	ldr	r0, [pc, #4]	; (8008a1c <__sfp_lock_acquire+0x8>)
 8008a16:	f000 bc26 	b.w	8009266 <__retarget_lock_acquire_recursive>
 8008a1a:	bf00      	nop
 8008a1c:	20000441 	.word	0x20000441

08008a20 <__sfp_lock_release>:
 8008a20:	4801      	ldr	r0, [pc, #4]	; (8008a28 <__sfp_lock_release+0x8>)
 8008a22:	f000 bc21 	b.w	8009268 <__retarget_lock_release_recursive>
 8008a26:	bf00      	nop
 8008a28:	20000441 	.word	0x20000441

08008a2c <__sinit_lock_acquire>:
 8008a2c:	4801      	ldr	r0, [pc, #4]	; (8008a34 <__sinit_lock_acquire+0x8>)
 8008a2e:	f000 bc1a 	b.w	8009266 <__retarget_lock_acquire_recursive>
 8008a32:	bf00      	nop
 8008a34:	20000442 	.word	0x20000442

08008a38 <__sinit_lock_release>:
 8008a38:	4801      	ldr	r0, [pc, #4]	; (8008a40 <__sinit_lock_release+0x8>)
 8008a3a:	f000 bc15 	b.w	8009268 <__retarget_lock_release_recursive>
 8008a3e:	bf00      	nop
 8008a40:	20000442 	.word	0x20000442

08008a44 <__sinit>:
 8008a44:	b510      	push	{r4, lr}
 8008a46:	4604      	mov	r4, r0
 8008a48:	f7ff fff0 	bl	8008a2c <__sinit_lock_acquire>
 8008a4c:	69a3      	ldr	r3, [r4, #24]
 8008a4e:	b11b      	cbz	r3, 8008a58 <__sinit+0x14>
 8008a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a54:	f7ff bff0 	b.w	8008a38 <__sinit_lock_release>
 8008a58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008a5c:	6523      	str	r3, [r4, #80]	; 0x50
 8008a5e:	4b13      	ldr	r3, [pc, #76]	; (8008aac <__sinit+0x68>)
 8008a60:	4a13      	ldr	r2, [pc, #76]	; (8008ab0 <__sinit+0x6c>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	62a2      	str	r2, [r4, #40]	; 0x28
 8008a66:	42a3      	cmp	r3, r4
 8008a68:	bf04      	itt	eq
 8008a6a:	2301      	moveq	r3, #1
 8008a6c:	61a3      	streq	r3, [r4, #24]
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f000 f820 	bl	8008ab4 <__sfp>
 8008a74:	6060      	str	r0, [r4, #4]
 8008a76:	4620      	mov	r0, r4
 8008a78:	f000 f81c 	bl	8008ab4 <__sfp>
 8008a7c:	60a0      	str	r0, [r4, #8]
 8008a7e:	4620      	mov	r0, r4
 8008a80:	f000 f818 	bl	8008ab4 <__sfp>
 8008a84:	2200      	movs	r2, #0
 8008a86:	60e0      	str	r0, [r4, #12]
 8008a88:	2104      	movs	r1, #4
 8008a8a:	6860      	ldr	r0, [r4, #4]
 8008a8c:	f7ff ff82 	bl	8008994 <std>
 8008a90:	68a0      	ldr	r0, [r4, #8]
 8008a92:	2201      	movs	r2, #1
 8008a94:	2109      	movs	r1, #9
 8008a96:	f7ff ff7d 	bl	8008994 <std>
 8008a9a:	68e0      	ldr	r0, [r4, #12]
 8008a9c:	2202      	movs	r2, #2
 8008a9e:	2112      	movs	r1, #18
 8008aa0:	f7ff ff78 	bl	8008994 <std>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	61a3      	str	r3, [r4, #24]
 8008aa8:	e7d2      	b.n	8008a50 <__sinit+0xc>
 8008aaa:	bf00      	nop
 8008aac:	0800a940 	.word	0x0800a940
 8008ab0:	080089dd 	.word	0x080089dd

08008ab4 <__sfp>:
 8008ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab6:	4607      	mov	r7, r0
 8008ab8:	f7ff ffac 	bl	8008a14 <__sfp_lock_acquire>
 8008abc:	4b1e      	ldr	r3, [pc, #120]	; (8008b38 <__sfp+0x84>)
 8008abe:	681e      	ldr	r6, [r3, #0]
 8008ac0:	69b3      	ldr	r3, [r6, #24]
 8008ac2:	b913      	cbnz	r3, 8008aca <__sfp+0x16>
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	f7ff ffbd 	bl	8008a44 <__sinit>
 8008aca:	3648      	adds	r6, #72	; 0x48
 8008acc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	d503      	bpl.n	8008adc <__sfp+0x28>
 8008ad4:	6833      	ldr	r3, [r6, #0]
 8008ad6:	b30b      	cbz	r3, 8008b1c <__sfp+0x68>
 8008ad8:	6836      	ldr	r6, [r6, #0]
 8008ada:	e7f7      	b.n	8008acc <__sfp+0x18>
 8008adc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ae0:	b9d5      	cbnz	r5, 8008b18 <__sfp+0x64>
 8008ae2:	4b16      	ldr	r3, [pc, #88]	; (8008b3c <__sfp+0x88>)
 8008ae4:	60e3      	str	r3, [r4, #12]
 8008ae6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008aea:	6665      	str	r5, [r4, #100]	; 0x64
 8008aec:	f000 fbba 	bl	8009264 <__retarget_lock_init_recursive>
 8008af0:	f7ff ff96 	bl	8008a20 <__sfp_lock_release>
 8008af4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008af8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008afc:	6025      	str	r5, [r4, #0]
 8008afe:	61a5      	str	r5, [r4, #24]
 8008b00:	2208      	movs	r2, #8
 8008b02:	4629      	mov	r1, r5
 8008b04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b08:	f7fd fa58 	bl	8005fbc <memset>
 8008b0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b14:	4620      	mov	r0, r4
 8008b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b18:	3468      	adds	r4, #104	; 0x68
 8008b1a:	e7d9      	b.n	8008ad0 <__sfp+0x1c>
 8008b1c:	2104      	movs	r1, #4
 8008b1e:	4638      	mov	r0, r7
 8008b20:	f7ff ff62 	bl	80089e8 <__sfmoreglue>
 8008b24:	4604      	mov	r4, r0
 8008b26:	6030      	str	r0, [r6, #0]
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d1d5      	bne.n	8008ad8 <__sfp+0x24>
 8008b2c:	f7ff ff78 	bl	8008a20 <__sfp_lock_release>
 8008b30:	230c      	movs	r3, #12
 8008b32:	603b      	str	r3, [r7, #0]
 8008b34:	e7ee      	b.n	8008b14 <__sfp+0x60>
 8008b36:	bf00      	nop
 8008b38:	0800a940 	.word	0x0800a940
 8008b3c:	ffff0001 	.word	0xffff0001

08008b40 <_fwalk_reent>:
 8008b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b44:	4606      	mov	r6, r0
 8008b46:	4688      	mov	r8, r1
 8008b48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b4c:	2700      	movs	r7, #0
 8008b4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b52:	f1b9 0901 	subs.w	r9, r9, #1
 8008b56:	d505      	bpl.n	8008b64 <_fwalk_reent+0x24>
 8008b58:	6824      	ldr	r4, [r4, #0]
 8008b5a:	2c00      	cmp	r4, #0
 8008b5c:	d1f7      	bne.n	8008b4e <_fwalk_reent+0xe>
 8008b5e:	4638      	mov	r0, r7
 8008b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b64:	89ab      	ldrh	r3, [r5, #12]
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d907      	bls.n	8008b7a <_fwalk_reent+0x3a>
 8008b6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	d003      	beq.n	8008b7a <_fwalk_reent+0x3a>
 8008b72:	4629      	mov	r1, r5
 8008b74:	4630      	mov	r0, r6
 8008b76:	47c0      	blx	r8
 8008b78:	4307      	orrs	r7, r0
 8008b7a:	3568      	adds	r5, #104	; 0x68
 8008b7c:	e7e9      	b.n	8008b52 <_fwalk_reent+0x12>

08008b7e <rshift>:
 8008b7e:	6903      	ldr	r3, [r0, #16]
 8008b80:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008b84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b88:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008b8c:	f100 0414 	add.w	r4, r0, #20
 8008b90:	dd45      	ble.n	8008c1e <rshift+0xa0>
 8008b92:	f011 011f 	ands.w	r1, r1, #31
 8008b96:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008b9a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008b9e:	d10c      	bne.n	8008bba <rshift+0x3c>
 8008ba0:	f100 0710 	add.w	r7, r0, #16
 8008ba4:	4629      	mov	r1, r5
 8008ba6:	42b1      	cmp	r1, r6
 8008ba8:	d334      	bcc.n	8008c14 <rshift+0x96>
 8008baa:	1a9b      	subs	r3, r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	1eea      	subs	r2, r5, #3
 8008bb0:	4296      	cmp	r6, r2
 8008bb2:	bf38      	it	cc
 8008bb4:	2300      	movcc	r3, #0
 8008bb6:	4423      	add	r3, r4
 8008bb8:	e015      	b.n	8008be6 <rshift+0x68>
 8008bba:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008bbe:	f1c1 0820 	rsb	r8, r1, #32
 8008bc2:	40cf      	lsrs	r7, r1
 8008bc4:	f105 0e04 	add.w	lr, r5, #4
 8008bc8:	46a1      	mov	r9, r4
 8008bca:	4576      	cmp	r6, lr
 8008bcc:	46f4      	mov	ip, lr
 8008bce:	d815      	bhi.n	8008bfc <rshift+0x7e>
 8008bd0:	1a9a      	subs	r2, r3, r2
 8008bd2:	0092      	lsls	r2, r2, #2
 8008bd4:	3a04      	subs	r2, #4
 8008bd6:	3501      	adds	r5, #1
 8008bd8:	42ae      	cmp	r6, r5
 8008bda:	bf38      	it	cc
 8008bdc:	2200      	movcc	r2, #0
 8008bde:	18a3      	adds	r3, r4, r2
 8008be0:	50a7      	str	r7, [r4, r2]
 8008be2:	b107      	cbz	r7, 8008be6 <rshift+0x68>
 8008be4:	3304      	adds	r3, #4
 8008be6:	1b1a      	subs	r2, r3, r4
 8008be8:	42a3      	cmp	r3, r4
 8008bea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008bee:	bf08      	it	eq
 8008bf0:	2300      	moveq	r3, #0
 8008bf2:	6102      	str	r2, [r0, #16]
 8008bf4:	bf08      	it	eq
 8008bf6:	6143      	streq	r3, [r0, #20]
 8008bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bfc:	f8dc c000 	ldr.w	ip, [ip]
 8008c00:	fa0c fc08 	lsl.w	ip, ip, r8
 8008c04:	ea4c 0707 	orr.w	r7, ip, r7
 8008c08:	f849 7b04 	str.w	r7, [r9], #4
 8008c0c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008c10:	40cf      	lsrs	r7, r1
 8008c12:	e7da      	b.n	8008bca <rshift+0x4c>
 8008c14:	f851 cb04 	ldr.w	ip, [r1], #4
 8008c18:	f847 cf04 	str.w	ip, [r7, #4]!
 8008c1c:	e7c3      	b.n	8008ba6 <rshift+0x28>
 8008c1e:	4623      	mov	r3, r4
 8008c20:	e7e1      	b.n	8008be6 <rshift+0x68>

08008c22 <__hexdig_fun>:
 8008c22:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008c26:	2b09      	cmp	r3, #9
 8008c28:	d802      	bhi.n	8008c30 <__hexdig_fun+0xe>
 8008c2a:	3820      	subs	r0, #32
 8008c2c:	b2c0      	uxtb	r0, r0
 8008c2e:	4770      	bx	lr
 8008c30:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008c34:	2b05      	cmp	r3, #5
 8008c36:	d801      	bhi.n	8008c3c <__hexdig_fun+0x1a>
 8008c38:	3847      	subs	r0, #71	; 0x47
 8008c3a:	e7f7      	b.n	8008c2c <__hexdig_fun+0xa>
 8008c3c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008c40:	2b05      	cmp	r3, #5
 8008c42:	d801      	bhi.n	8008c48 <__hexdig_fun+0x26>
 8008c44:	3827      	subs	r0, #39	; 0x27
 8008c46:	e7f1      	b.n	8008c2c <__hexdig_fun+0xa>
 8008c48:	2000      	movs	r0, #0
 8008c4a:	4770      	bx	lr

08008c4c <__gethex>:
 8008c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c50:	ed2d 8b02 	vpush	{d8}
 8008c54:	b089      	sub	sp, #36	; 0x24
 8008c56:	ee08 0a10 	vmov	s16, r0
 8008c5a:	9304      	str	r3, [sp, #16]
 8008c5c:	4bb4      	ldr	r3, [pc, #720]	; (8008f30 <__gethex+0x2e4>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	9301      	str	r3, [sp, #4]
 8008c62:	4618      	mov	r0, r3
 8008c64:	468b      	mov	fp, r1
 8008c66:	4690      	mov	r8, r2
 8008c68:	f7f7 faba 	bl	80001e0 <strlen>
 8008c6c:	9b01      	ldr	r3, [sp, #4]
 8008c6e:	f8db 2000 	ldr.w	r2, [fp]
 8008c72:	4403      	add	r3, r0
 8008c74:	4682      	mov	sl, r0
 8008c76:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008c7a:	9305      	str	r3, [sp, #20]
 8008c7c:	1c93      	adds	r3, r2, #2
 8008c7e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008c82:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008c86:	32fe      	adds	r2, #254	; 0xfe
 8008c88:	18d1      	adds	r1, r2, r3
 8008c8a:	461f      	mov	r7, r3
 8008c8c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008c90:	9100      	str	r1, [sp, #0]
 8008c92:	2830      	cmp	r0, #48	; 0x30
 8008c94:	d0f8      	beq.n	8008c88 <__gethex+0x3c>
 8008c96:	f7ff ffc4 	bl	8008c22 <__hexdig_fun>
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	d13a      	bne.n	8008d16 <__gethex+0xca>
 8008ca0:	9901      	ldr	r1, [sp, #4]
 8008ca2:	4652      	mov	r2, sl
 8008ca4:	4638      	mov	r0, r7
 8008ca6:	f001 face 	bl	800a246 <strncmp>
 8008caa:	4605      	mov	r5, r0
 8008cac:	2800      	cmp	r0, #0
 8008cae:	d168      	bne.n	8008d82 <__gethex+0x136>
 8008cb0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008cb4:	eb07 060a 	add.w	r6, r7, sl
 8008cb8:	f7ff ffb3 	bl	8008c22 <__hexdig_fun>
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	d062      	beq.n	8008d86 <__gethex+0x13a>
 8008cc0:	4633      	mov	r3, r6
 8008cc2:	7818      	ldrb	r0, [r3, #0]
 8008cc4:	2830      	cmp	r0, #48	; 0x30
 8008cc6:	461f      	mov	r7, r3
 8008cc8:	f103 0301 	add.w	r3, r3, #1
 8008ccc:	d0f9      	beq.n	8008cc2 <__gethex+0x76>
 8008cce:	f7ff ffa8 	bl	8008c22 <__hexdig_fun>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	fab0 f480 	clz	r4, r0
 8008cd8:	0964      	lsrs	r4, r4, #5
 8008cda:	4635      	mov	r5, r6
 8008cdc:	9300      	str	r3, [sp, #0]
 8008cde:	463a      	mov	r2, r7
 8008ce0:	4616      	mov	r6, r2
 8008ce2:	3201      	adds	r2, #1
 8008ce4:	7830      	ldrb	r0, [r6, #0]
 8008ce6:	f7ff ff9c 	bl	8008c22 <__hexdig_fun>
 8008cea:	2800      	cmp	r0, #0
 8008cec:	d1f8      	bne.n	8008ce0 <__gethex+0x94>
 8008cee:	9901      	ldr	r1, [sp, #4]
 8008cf0:	4652      	mov	r2, sl
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	f001 faa7 	bl	800a246 <strncmp>
 8008cf8:	b980      	cbnz	r0, 8008d1c <__gethex+0xd0>
 8008cfa:	b94d      	cbnz	r5, 8008d10 <__gethex+0xc4>
 8008cfc:	eb06 050a 	add.w	r5, r6, sl
 8008d00:	462a      	mov	r2, r5
 8008d02:	4616      	mov	r6, r2
 8008d04:	3201      	adds	r2, #1
 8008d06:	7830      	ldrb	r0, [r6, #0]
 8008d08:	f7ff ff8b 	bl	8008c22 <__hexdig_fun>
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	d1f8      	bne.n	8008d02 <__gethex+0xb6>
 8008d10:	1bad      	subs	r5, r5, r6
 8008d12:	00ad      	lsls	r5, r5, #2
 8008d14:	e004      	b.n	8008d20 <__gethex+0xd4>
 8008d16:	2400      	movs	r4, #0
 8008d18:	4625      	mov	r5, r4
 8008d1a:	e7e0      	b.n	8008cde <__gethex+0x92>
 8008d1c:	2d00      	cmp	r5, #0
 8008d1e:	d1f7      	bne.n	8008d10 <__gethex+0xc4>
 8008d20:	7833      	ldrb	r3, [r6, #0]
 8008d22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008d26:	2b50      	cmp	r3, #80	; 0x50
 8008d28:	d13b      	bne.n	8008da2 <__gethex+0x156>
 8008d2a:	7873      	ldrb	r3, [r6, #1]
 8008d2c:	2b2b      	cmp	r3, #43	; 0x2b
 8008d2e:	d02c      	beq.n	8008d8a <__gethex+0x13e>
 8008d30:	2b2d      	cmp	r3, #45	; 0x2d
 8008d32:	d02e      	beq.n	8008d92 <__gethex+0x146>
 8008d34:	1c71      	adds	r1, r6, #1
 8008d36:	f04f 0900 	mov.w	r9, #0
 8008d3a:	7808      	ldrb	r0, [r1, #0]
 8008d3c:	f7ff ff71 	bl	8008c22 <__hexdig_fun>
 8008d40:	1e43      	subs	r3, r0, #1
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	2b18      	cmp	r3, #24
 8008d46:	d82c      	bhi.n	8008da2 <__gethex+0x156>
 8008d48:	f1a0 0210 	sub.w	r2, r0, #16
 8008d4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008d50:	f7ff ff67 	bl	8008c22 <__hexdig_fun>
 8008d54:	1e43      	subs	r3, r0, #1
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b18      	cmp	r3, #24
 8008d5a:	d91d      	bls.n	8008d98 <__gethex+0x14c>
 8008d5c:	f1b9 0f00 	cmp.w	r9, #0
 8008d60:	d000      	beq.n	8008d64 <__gethex+0x118>
 8008d62:	4252      	negs	r2, r2
 8008d64:	4415      	add	r5, r2
 8008d66:	f8cb 1000 	str.w	r1, [fp]
 8008d6a:	b1e4      	cbz	r4, 8008da6 <__gethex+0x15a>
 8008d6c:	9b00      	ldr	r3, [sp, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	bf14      	ite	ne
 8008d72:	2700      	movne	r7, #0
 8008d74:	2706      	moveq	r7, #6
 8008d76:	4638      	mov	r0, r7
 8008d78:	b009      	add	sp, #36	; 0x24
 8008d7a:	ecbd 8b02 	vpop	{d8}
 8008d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d82:	463e      	mov	r6, r7
 8008d84:	4625      	mov	r5, r4
 8008d86:	2401      	movs	r4, #1
 8008d88:	e7ca      	b.n	8008d20 <__gethex+0xd4>
 8008d8a:	f04f 0900 	mov.w	r9, #0
 8008d8e:	1cb1      	adds	r1, r6, #2
 8008d90:	e7d3      	b.n	8008d3a <__gethex+0xee>
 8008d92:	f04f 0901 	mov.w	r9, #1
 8008d96:	e7fa      	b.n	8008d8e <__gethex+0x142>
 8008d98:	230a      	movs	r3, #10
 8008d9a:	fb03 0202 	mla	r2, r3, r2, r0
 8008d9e:	3a10      	subs	r2, #16
 8008da0:	e7d4      	b.n	8008d4c <__gethex+0x100>
 8008da2:	4631      	mov	r1, r6
 8008da4:	e7df      	b.n	8008d66 <__gethex+0x11a>
 8008da6:	1bf3      	subs	r3, r6, r7
 8008da8:	3b01      	subs	r3, #1
 8008daa:	4621      	mov	r1, r4
 8008dac:	2b07      	cmp	r3, #7
 8008dae:	dc0b      	bgt.n	8008dc8 <__gethex+0x17c>
 8008db0:	ee18 0a10 	vmov	r0, s16
 8008db4:	f000 fa86 	bl	80092c4 <_Balloc>
 8008db8:	4604      	mov	r4, r0
 8008dba:	b940      	cbnz	r0, 8008dce <__gethex+0x182>
 8008dbc:	4b5d      	ldr	r3, [pc, #372]	; (8008f34 <__gethex+0x2e8>)
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	21de      	movs	r1, #222	; 0xde
 8008dc2:	485d      	ldr	r0, [pc, #372]	; (8008f38 <__gethex+0x2ec>)
 8008dc4:	f001 fb34 	bl	800a430 <__assert_func>
 8008dc8:	3101      	adds	r1, #1
 8008dca:	105b      	asrs	r3, r3, #1
 8008dcc:	e7ee      	b.n	8008dac <__gethex+0x160>
 8008dce:	f100 0914 	add.w	r9, r0, #20
 8008dd2:	f04f 0b00 	mov.w	fp, #0
 8008dd6:	f1ca 0301 	rsb	r3, sl, #1
 8008dda:	f8cd 9008 	str.w	r9, [sp, #8]
 8008dde:	f8cd b000 	str.w	fp, [sp]
 8008de2:	9306      	str	r3, [sp, #24]
 8008de4:	42b7      	cmp	r7, r6
 8008de6:	d340      	bcc.n	8008e6a <__gethex+0x21e>
 8008de8:	9802      	ldr	r0, [sp, #8]
 8008dea:	9b00      	ldr	r3, [sp, #0]
 8008dec:	f840 3b04 	str.w	r3, [r0], #4
 8008df0:	eba0 0009 	sub.w	r0, r0, r9
 8008df4:	1080      	asrs	r0, r0, #2
 8008df6:	0146      	lsls	r6, r0, #5
 8008df8:	6120      	str	r0, [r4, #16]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f000 fb54 	bl	80094a8 <__hi0bits>
 8008e00:	1a30      	subs	r0, r6, r0
 8008e02:	f8d8 6000 	ldr.w	r6, [r8]
 8008e06:	42b0      	cmp	r0, r6
 8008e08:	dd63      	ble.n	8008ed2 <__gethex+0x286>
 8008e0a:	1b87      	subs	r7, r0, r6
 8008e0c:	4639      	mov	r1, r7
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f000 fef8 	bl	8009c04 <__any_on>
 8008e14:	4682      	mov	sl, r0
 8008e16:	b1a8      	cbz	r0, 8008e44 <__gethex+0x1f8>
 8008e18:	1e7b      	subs	r3, r7, #1
 8008e1a:	1159      	asrs	r1, r3, #5
 8008e1c:	f003 021f 	and.w	r2, r3, #31
 8008e20:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008e24:	f04f 0a01 	mov.w	sl, #1
 8008e28:	fa0a f202 	lsl.w	r2, sl, r2
 8008e2c:	420a      	tst	r2, r1
 8008e2e:	d009      	beq.n	8008e44 <__gethex+0x1f8>
 8008e30:	4553      	cmp	r3, sl
 8008e32:	dd05      	ble.n	8008e40 <__gethex+0x1f4>
 8008e34:	1eb9      	subs	r1, r7, #2
 8008e36:	4620      	mov	r0, r4
 8008e38:	f000 fee4 	bl	8009c04 <__any_on>
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	d145      	bne.n	8008ecc <__gethex+0x280>
 8008e40:	f04f 0a02 	mov.w	sl, #2
 8008e44:	4639      	mov	r1, r7
 8008e46:	4620      	mov	r0, r4
 8008e48:	f7ff fe99 	bl	8008b7e <rshift>
 8008e4c:	443d      	add	r5, r7
 8008e4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e52:	42ab      	cmp	r3, r5
 8008e54:	da4c      	bge.n	8008ef0 <__gethex+0x2a4>
 8008e56:	ee18 0a10 	vmov	r0, s16
 8008e5a:	4621      	mov	r1, r4
 8008e5c:	f000 fa72 	bl	8009344 <_Bfree>
 8008e60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e62:	2300      	movs	r3, #0
 8008e64:	6013      	str	r3, [r2, #0]
 8008e66:	27a3      	movs	r7, #163	; 0xa3
 8008e68:	e785      	b.n	8008d76 <__gethex+0x12a>
 8008e6a:	1e73      	subs	r3, r6, #1
 8008e6c:	9a05      	ldr	r2, [sp, #20]
 8008e6e:	9303      	str	r3, [sp, #12]
 8008e70:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d019      	beq.n	8008eac <__gethex+0x260>
 8008e78:	f1bb 0f20 	cmp.w	fp, #32
 8008e7c:	d107      	bne.n	8008e8e <__gethex+0x242>
 8008e7e:	9b02      	ldr	r3, [sp, #8]
 8008e80:	9a00      	ldr	r2, [sp, #0]
 8008e82:	f843 2b04 	str.w	r2, [r3], #4
 8008e86:	9302      	str	r3, [sp, #8]
 8008e88:	2300      	movs	r3, #0
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	469b      	mov	fp, r3
 8008e8e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008e92:	f7ff fec6 	bl	8008c22 <__hexdig_fun>
 8008e96:	9b00      	ldr	r3, [sp, #0]
 8008e98:	f000 000f 	and.w	r0, r0, #15
 8008e9c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008ea0:	4303      	orrs	r3, r0
 8008ea2:	9300      	str	r3, [sp, #0]
 8008ea4:	f10b 0b04 	add.w	fp, fp, #4
 8008ea8:	9b03      	ldr	r3, [sp, #12]
 8008eaa:	e00d      	b.n	8008ec8 <__gethex+0x27c>
 8008eac:	9b03      	ldr	r3, [sp, #12]
 8008eae:	9a06      	ldr	r2, [sp, #24]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	42bb      	cmp	r3, r7
 8008eb4:	d3e0      	bcc.n	8008e78 <__gethex+0x22c>
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	9901      	ldr	r1, [sp, #4]
 8008eba:	9307      	str	r3, [sp, #28]
 8008ebc:	4652      	mov	r2, sl
 8008ebe:	f001 f9c2 	bl	800a246 <strncmp>
 8008ec2:	9b07      	ldr	r3, [sp, #28]
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	d1d7      	bne.n	8008e78 <__gethex+0x22c>
 8008ec8:	461e      	mov	r6, r3
 8008eca:	e78b      	b.n	8008de4 <__gethex+0x198>
 8008ecc:	f04f 0a03 	mov.w	sl, #3
 8008ed0:	e7b8      	b.n	8008e44 <__gethex+0x1f8>
 8008ed2:	da0a      	bge.n	8008eea <__gethex+0x29e>
 8008ed4:	1a37      	subs	r7, r6, r0
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	ee18 0a10 	vmov	r0, s16
 8008edc:	463a      	mov	r2, r7
 8008ede:	f000 fc4d 	bl	800977c <__lshift>
 8008ee2:	1bed      	subs	r5, r5, r7
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	f100 0914 	add.w	r9, r0, #20
 8008eea:	f04f 0a00 	mov.w	sl, #0
 8008eee:	e7ae      	b.n	8008e4e <__gethex+0x202>
 8008ef0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008ef4:	42a8      	cmp	r0, r5
 8008ef6:	dd72      	ble.n	8008fde <__gethex+0x392>
 8008ef8:	1b45      	subs	r5, r0, r5
 8008efa:	42ae      	cmp	r6, r5
 8008efc:	dc36      	bgt.n	8008f6c <__gethex+0x320>
 8008efe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d02a      	beq.n	8008f5c <__gethex+0x310>
 8008f06:	2b03      	cmp	r3, #3
 8008f08:	d02c      	beq.n	8008f64 <__gethex+0x318>
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d11c      	bne.n	8008f48 <__gethex+0x2fc>
 8008f0e:	42ae      	cmp	r6, r5
 8008f10:	d11a      	bne.n	8008f48 <__gethex+0x2fc>
 8008f12:	2e01      	cmp	r6, #1
 8008f14:	d112      	bne.n	8008f3c <__gethex+0x2f0>
 8008f16:	9a04      	ldr	r2, [sp, #16]
 8008f18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008f1c:	6013      	str	r3, [r2, #0]
 8008f1e:	2301      	movs	r3, #1
 8008f20:	6123      	str	r3, [r4, #16]
 8008f22:	f8c9 3000 	str.w	r3, [r9]
 8008f26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f28:	2762      	movs	r7, #98	; 0x62
 8008f2a:	601c      	str	r4, [r3, #0]
 8008f2c:	e723      	b.n	8008d76 <__gethex+0x12a>
 8008f2e:	bf00      	nop
 8008f30:	0800ac2c 	.word	0x0800ac2c
 8008f34:	0800ab50 	.word	0x0800ab50
 8008f38:	0800abc4 	.word	0x0800abc4
 8008f3c:	1e71      	subs	r1, r6, #1
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f000 fe60 	bl	8009c04 <__any_on>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	d1e6      	bne.n	8008f16 <__gethex+0x2ca>
 8008f48:	ee18 0a10 	vmov	r0, s16
 8008f4c:	4621      	mov	r1, r4
 8008f4e:	f000 f9f9 	bl	8009344 <_Bfree>
 8008f52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f54:	2300      	movs	r3, #0
 8008f56:	6013      	str	r3, [r2, #0]
 8008f58:	2750      	movs	r7, #80	; 0x50
 8008f5a:	e70c      	b.n	8008d76 <__gethex+0x12a>
 8008f5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1f2      	bne.n	8008f48 <__gethex+0x2fc>
 8008f62:	e7d8      	b.n	8008f16 <__gethex+0x2ca>
 8008f64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1d5      	bne.n	8008f16 <__gethex+0x2ca>
 8008f6a:	e7ed      	b.n	8008f48 <__gethex+0x2fc>
 8008f6c:	1e6f      	subs	r7, r5, #1
 8008f6e:	f1ba 0f00 	cmp.w	sl, #0
 8008f72:	d131      	bne.n	8008fd8 <__gethex+0x38c>
 8008f74:	b127      	cbz	r7, 8008f80 <__gethex+0x334>
 8008f76:	4639      	mov	r1, r7
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f000 fe43 	bl	8009c04 <__any_on>
 8008f7e:	4682      	mov	sl, r0
 8008f80:	117b      	asrs	r3, r7, #5
 8008f82:	2101      	movs	r1, #1
 8008f84:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008f88:	f007 071f 	and.w	r7, r7, #31
 8008f8c:	fa01 f707 	lsl.w	r7, r1, r7
 8008f90:	421f      	tst	r7, r3
 8008f92:	4629      	mov	r1, r5
 8008f94:	4620      	mov	r0, r4
 8008f96:	bf18      	it	ne
 8008f98:	f04a 0a02 	orrne.w	sl, sl, #2
 8008f9c:	1b76      	subs	r6, r6, r5
 8008f9e:	f7ff fdee 	bl	8008b7e <rshift>
 8008fa2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008fa6:	2702      	movs	r7, #2
 8008fa8:	f1ba 0f00 	cmp.w	sl, #0
 8008fac:	d048      	beq.n	8009040 <__gethex+0x3f4>
 8008fae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d015      	beq.n	8008fe2 <__gethex+0x396>
 8008fb6:	2b03      	cmp	r3, #3
 8008fb8:	d017      	beq.n	8008fea <__gethex+0x39e>
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d109      	bne.n	8008fd2 <__gethex+0x386>
 8008fbe:	f01a 0f02 	tst.w	sl, #2
 8008fc2:	d006      	beq.n	8008fd2 <__gethex+0x386>
 8008fc4:	f8d9 0000 	ldr.w	r0, [r9]
 8008fc8:	ea4a 0a00 	orr.w	sl, sl, r0
 8008fcc:	f01a 0f01 	tst.w	sl, #1
 8008fd0:	d10e      	bne.n	8008ff0 <__gethex+0x3a4>
 8008fd2:	f047 0710 	orr.w	r7, r7, #16
 8008fd6:	e033      	b.n	8009040 <__gethex+0x3f4>
 8008fd8:	f04f 0a01 	mov.w	sl, #1
 8008fdc:	e7d0      	b.n	8008f80 <__gethex+0x334>
 8008fde:	2701      	movs	r7, #1
 8008fe0:	e7e2      	b.n	8008fa8 <__gethex+0x35c>
 8008fe2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fe4:	f1c3 0301 	rsb	r3, r3, #1
 8008fe8:	9315      	str	r3, [sp, #84]	; 0x54
 8008fea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d0f0      	beq.n	8008fd2 <__gethex+0x386>
 8008ff0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008ff4:	f104 0314 	add.w	r3, r4, #20
 8008ff8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008ffc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009000:	f04f 0c00 	mov.w	ip, #0
 8009004:	4618      	mov	r0, r3
 8009006:	f853 2b04 	ldr.w	r2, [r3], #4
 800900a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800900e:	d01c      	beq.n	800904a <__gethex+0x3fe>
 8009010:	3201      	adds	r2, #1
 8009012:	6002      	str	r2, [r0, #0]
 8009014:	2f02      	cmp	r7, #2
 8009016:	f104 0314 	add.w	r3, r4, #20
 800901a:	d13f      	bne.n	800909c <__gethex+0x450>
 800901c:	f8d8 2000 	ldr.w	r2, [r8]
 8009020:	3a01      	subs	r2, #1
 8009022:	42b2      	cmp	r2, r6
 8009024:	d10a      	bne.n	800903c <__gethex+0x3f0>
 8009026:	1171      	asrs	r1, r6, #5
 8009028:	2201      	movs	r2, #1
 800902a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800902e:	f006 061f 	and.w	r6, r6, #31
 8009032:	fa02 f606 	lsl.w	r6, r2, r6
 8009036:	421e      	tst	r6, r3
 8009038:	bf18      	it	ne
 800903a:	4617      	movne	r7, r2
 800903c:	f047 0720 	orr.w	r7, r7, #32
 8009040:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009042:	601c      	str	r4, [r3, #0]
 8009044:	9b04      	ldr	r3, [sp, #16]
 8009046:	601d      	str	r5, [r3, #0]
 8009048:	e695      	b.n	8008d76 <__gethex+0x12a>
 800904a:	4299      	cmp	r1, r3
 800904c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009050:	d8d8      	bhi.n	8009004 <__gethex+0x3b8>
 8009052:	68a3      	ldr	r3, [r4, #8]
 8009054:	459b      	cmp	fp, r3
 8009056:	db19      	blt.n	800908c <__gethex+0x440>
 8009058:	6861      	ldr	r1, [r4, #4]
 800905a:	ee18 0a10 	vmov	r0, s16
 800905e:	3101      	adds	r1, #1
 8009060:	f000 f930 	bl	80092c4 <_Balloc>
 8009064:	4681      	mov	r9, r0
 8009066:	b918      	cbnz	r0, 8009070 <__gethex+0x424>
 8009068:	4b1a      	ldr	r3, [pc, #104]	; (80090d4 <__gethex+0x488>)
 800906a:	4602      	mov	r2, r0
 800906c:	2184      	movs	r1, #132	; 0x84
 800906e:	e6a8      	b.n	8008dc2 <__gethex+0x176>
 8009070:	6922      	ldr	r2, [r4, #16]
 8009072:	3202      	adds	r2, #2
 8009074:	f104 010c 	add.w	r1, r4, #12
 8009078:	0092      	lsls	r2, r2, #2
 800907a:	300c      	adds	r0, #12
 800907c:	f000 f907 	bl	800928e <memcpy>
 8009080:	4621      	mov	r1, r4
 8009082:	ee18 0a10 	vmov	r0, s16
 8009086:	f000 f95d 	bl	8009344 <_Bfree>
 800908a:	464c      	mov	r4, r9
 800908c:	6923      	ldr	r3, [r4, #16]
 800908e:	1c5a      	adds	r2, r3, #1
 8009090:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009094:	6122      	str	r2, [r4, #16]
 8009096:	2201      	movs	r2, #1
 8009098:	615a      	str	r2, [r3, #20]
 800909a:	e7bb      	b.n	8009014 <__gethex+0x3c8>
 800909c:	6922      	ldr	r2, [r4, #16]
 800909e:	455a      	cmp	r2, fp
 80090a0:	dd0b      	ble.n	80090ba <__gethex+0x46e>
 80090a2:	2101      	movs	r1, #1
 80090a4:	4620      	mov	r0, r4
 80090a6:	f7ff fd6a 	bl	8008b7e <rshift>
 80090aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090ae:	3501      	adds	r5, #1
 80090b0:	42ab      	cmp	r3, r5
 80090b2:	f6ff aed0 	blt.w	8008e56 <__gethex+0x20a>
 80090b6:	2701      	movs	r7, #1
 80090b8:	e7c0      	b.n	800903c <__gethex+0x3f0>
 80090ba:	f016 061f 	ands.w	r6, r6, #31
 80090be:	d0fa      	beq.n	80090b6 <__gethex+0x46a>
 80090c0:	4453      	add	r3, sl
 80090c2:	f1c6 0620 	rsb	r6, r6, #32
 80090c6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80090ca:	f000 f9ed 	bl	80094a8 <__hi0bits>
 80090ce:	42b0      	cmp	r0, r6
 80090d0:	dbe7      	blt.n	80090a2 <__gethex+0x456>
 80090d2:	e7f0      	b.n	80090b6 <__gethex+0x46a>
 80090d4:	0800ab50 	.word	0x0800ab50

080090d8 <L_shift>:
 80090d8:	f1c2 0208 	rsb	r2, r2, #8
 80090dc:	0092      	lsls	r2, r2, #2
 80090de:	b570      	push	{r4, r5, r6, lr}
 80090e0:	f1c2 0620 	rsb	r6, r2, #32
 80090e4:	6843      	ldr	r3, [r0, #4]
 80090e6:	6804      	ldr	r4, [r0, #0]
 80090e8:	fa03 f506 	lsl.w	r5, r3, r6
 80090ec:	432c      	orrs	r4, r5
 80090ee:	40d3      	lsrs	r3, r2
 80090f0:	6004      	str	r4, [r0, #0]
 80090f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80090f6:	4288      	cmp	r0, r1
 80090f8:	d3f4      	bcc.n	80090e4 <L_shift+0xc>
 80090fa:	bd70      	pop	{r4, r5, r6, pc}

080090fc <__match>:
 80090fc:	b530      	push	{r4, r5, lr}
 80090fe:	6803      	ldr	r3, [r0, #0]
 8009100:	3301      	adds	r3, #1
 8009102:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009106:	b914      	cbnz	r4, 800910e <__match+0x12>
 8009108:	6003      	str	r3, [r0, #0]
 800910a:	2001      	movs	r0, #1
 800910c:	bd30      	pop	{r4, r5, pc}
 800910e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009112:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009116:	2d19      	cmp	r5, #25
 8009118:	bf98      	it	ls
 800911a:	3220      	addls	r2, #32
 800911c:	42a2      	cmp	r2, r4
 800911e:	d0f0      	beq.n	8009102 <__match+0x6>
 8009120:	2000      	movs	r0, #0
 8009122:	e7f3      	b.n	800910c <__match+0x10>

08009124 <__hexnan>:
 8009124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009128:	680b      	ldr	r3, [r1, #0]
 800912a:	115e      	asrs	r6, r3, #5
 800912c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009130:	f013 031f 	ands.w	r3, r3, #31
 8009134:	b087      	sub	sp, #28
 8009136:	bf18      	it	ne
 8009138:	3604      	addne	r6, #4
 800913a:	2500      	movs	r5, #0
 800913c:	1f37      	subs	r7, r6, #4
 800913e:	4690      	mov	r8, r2
 8009140:	6802      	ldr	r2, [r0, #0]
 8009142:	9301      	str	r3, [sp, #4]
 8009144:	4682      	mov	sl, r0
 8009146:	f846 5c04 	str.w	r5, [r6, #-4]
 800914a:	46b9      	mov	r9, r7
 800914c:	463c      	mov	r4, r7
 800914e:	9502      	str	r5, [sp, #8]
 8009150:	46ab      	mov	fp, r5
 8009152:	7851      	ldrb	r1, [r2, #1]
 8009154:	1c53      	adds	r3, r2, #1
 8009156:	9303      	str	r3, [sp, #12]
 8009158:	b341      	cbz	r1, 80091ac <__hexnan+0x88>
 800915a:	4608      	mov	r0, r1
 800915c:	9205      	str	r2, [sp, #20]
 800915e:	9104      	str	r1, [sp, #16]
 8009160:	f7ff fd5f 	bl	8008c22 <__hexdig_fun>
 8009164:	2800      	cmp	r0, #0
 8009166:	d14f      	bne.n	8009208 <__hexnan+0xe4>
 8009168:	9904      	ldr	r1, [sp, #16]
 800916a:	9a05      	ldr	r2, [sp, #20]
 800916c:	2920      	cmp	r1, #32
 800916e:	d818      	bhi.n	80091a2 <__hexnan+0x7e>
 8009170:	9b02      	ldr	r3, [sp, #8]
 8009172:	459b      	cmp	fp, r3
 8009174:	dd13      	ble.n	800919e <__hexnan+0x7a>
 8009176:	454c      	cmp	r4, r9
 8009178:	d206      	bcs.n	8009188 <__hexnan+0x64>
 800917a:	2d07      	cmp	r5, #7
 800917c:	dc04      	bgt.n	8009188 <__hexnan+0x64>
 800917e:	462a      	mov	r2, r5
 8009180:	4649      	mov	r1, r9
 8009182:	4620      	mov	r0, r4
 8009184:	f7ff ffa8 	bl	80090d8 <L_shift>
 8009188:	4544      	cmp	r4, r8
 800918a:	d950      	bls.n	800922e <__hexnan+0x10a>
 800918c:	2300      	movs	r3, #0
 800918e:	f1a4 0904 	sub.w	r9, r4, #4
 8009192:	f844 3c04 	str.w	r3, [r4, #-4]
 8009196:	f8cd b008 	str.w	fp, [sp, #8]
 800919a:	464c      	mov	r4, r9
 800919c:	461d      	mov	r5, r3
 800919e:	9a03      	ldr	r2, [sp, #12]
 80091a0:	e7d7      	b.n	8009152 <__hexnan+0x2e>
 80091a2:	2929      	cmp	r1, #41	; 0x29
 80091a4:	d156      	bne.n	8009254 <__hexnan+0x130>
 80091a6:	3202      	adds	r2, #2
 80091a8:	f8ca 2000 	str.w	r2, [sl]
 80091ac:	f1bb 0f00 	cmp.w	fp, #0
 80091b0:	d050      	beq.n	8009254 <__hexnan+0x130>
 80091b2:	454c      	cmp	r4, r9
 80091b4:	d206      	bcs.n	80091c4 <__hexnan+0xa0>
 80091b6:	2d07      	cmp	r5, #7
 80091b8:	dc04      	bgt.n	80091c4 <__hexnan+0xa0>
 80091ba:	462a      	mov	r2, r5
 80091bc:	4649      	mov	r1, r9
 80091be:	4620      	mov	r0, r4
 80091c0:	f7ff ff8a 	bl	80090d8 <L_shift>
 80091c4:	4544      	cmp	r4, r8
 80091c6:	d934      	bls.n	8009232 <__hexnan+0x10e>
 80091c8:	f1a8 0204 	sub.w	r2, r8, #4
 80091cc:	4623      	mov	r3, r4
 80091ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80091d2:	f842 1f04 	str.w	r1, [r2, #4]!
 80091d6:	429f      	cmp	r7, r3
 80091d8:	d2f9      	bcs.n	80091ce <__hexnan+0xaa>
 80091da:	1b3b      	subs	r3, r7, r4
 80091dc:	f023 0303 	bic.w	r3, r3, #3
 80091e0:	3304      	adds	r3, #4
 80091e2:	3401      	adds	r4, #1
 80091e4:	3e03      	subs	r6, #3
 80091e6:	42b4      	cmp	r4, r6
 80091e8:	bf88      	it	hi
 80091ea:	2304      	movhi	r3, #4
 80091ec:	4443      	add	r3, r8
 80091ee:	2200      	movs	r2, #0
 80091f0:	f843 2b04 	str.w	r2, [r3], #4
 80091f4:	429f      	cmp	r7, r3
 80091f6:	d2fb      	bcs.n	80091f0 <__hexnan+0xcc>
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	b91b      	cbnz	r3, 8009204 <__hexnan+0xe0>
 80091fc:	4547      	cmp	r7, r8
 80091fe:	d127      	bne.n	8009250 <__hexnan+0x12c>
 8009200:	2301      	movs	r3, #1
 8009202:	603b      	str	r3, [r7, #0]
 8009204:	2005      	movs	r0, #5
 8009206:	e026      	b.n	8009256 <__hexnan+0x132>
 8009208:	3501      	adds	r5, #1
 800920a:	2d08      	cmp	r5, #8
 800920c:	f10b 0b01 	add.w	fp, fp, #1
 8009210:	dd06      	ble.n	8009220 <__hexnan+0xfc>
 8009212:	4544      	cmp	r4, r8
 8009214:	d9c3      	bls.n	800919e <__hexnan+0x7a>
 8009216:	2300      	movs	r3, #0
 8009218:	f844 3c04 	str.w	r3, [r4, #-4]
 800921c:	2501      	movs	r5, #1
 800921e:	3c04      	subs	r4, #4
 8009220:	6822      	ldr	r2, [r4, #0]
 8009222:	f000 000f 	and.w	r0, r0, #15
 8009226:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800922a:	6022      	str	r2, [r4, #0]
 800922c:	e7b7      	b.n	800919e <__hexnan+0x7a>
 800922e:	2508      	movs	r5, #8
 8009230:	e7b5      	b.n	800919e <__hexnan+0x7a>
 8009232:	9b01      	ldr	r3, [sp, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d0df      	beq.n	80091f8 <__hexnan+0xd4>
 8009238:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800923c:	f1c3 0320 	rsb	r3, r3, #32
 8009240:	fa22 f303 	lsr.w	r3, r2, r3
 8009244:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009248:	401a      	ands	r2, r3
 800924a:	f846 2c04 	str.w	r2, [r6, #-4]
 800924e:	e7d3      	b.n	80091f8 <__hexnan+0xd4>
 8009250:	3f04      	subs	r7, #4
 8009252:	e7d1      	b.n	80091f8 <__hexnan+0xd4>
 8009254:	2004      	movs	r0, #4
 8009256:	b007      	add	sp, #28
 8009258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800925c <_localeconv_r>:
 800925c:	4800      	ldr	r0, [pc, #0]	; (8009260 <_localeconv_r+0x4>)
 800925e:	4770      	bx	lr
 8009260:	200001ec 	.word	0x200001ec

08009264 <__retarget_lock_init_recursive>:
 8009264:	4770      	bx	lr

08009266 <__retarget_lock_acquire_recursive>:
 8009266:	4770      	bx	lr

08009268 <__retarget_lock_release_recursive>:
 8009268:	4770      	bx	lr

0800926a <__ascii_mbtowc>:
 800926a:	b082      	sub	sp, #8
 800926c:	b901      	cbnz	r1, 8009270 <__ascii_mbtowc+0x6>
 800926e:	a901      	add	r1, sp, #4
 8009270:	b142      	cbz	r2, 8009284 <__ascii_mbtowc+0x1a>
 8009272:	b14b      	cbz	r3, 8009288 <__ascii_mbtowc+0x1e>
 8009274:	7813      	ldrb	r3, [r2, #0]
 8009276:	600b      	str	r3, [r1, #0]
 8009278:	7812      	ldrb	r2, [r2, #0]
 800927a:	1e10      	subs	r0, r2, #0
 800927c:	bf18      	it	ne
 800927e:	2001      	movne	r0, #1
 8009280:	b002      	add	sp, #8
 8009282:	4770      	bx	lr
 8009284:	4610      	mov	r0, r2
 8009286:	e7fb      	b.n	8009280 <__ascii_mbtowc+0x16>
 8009288:	f06f 0001 	mvn.w	r0, #1
 800928c:	e7f8      	b.n	8009280 <__ascii_mbtowc+0x16>

0800928e <memcpy>:
 800928e:	440a      	add	r2, r1
 8009290:	4291      	cmp	r1, r2
 8009292:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009296:	d100      	bne.n	800929a <memcpy+0xc>
 8009298:	4770      	bx	lr
 800929a:	b510      	push	{r4, lr}
 800929c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092a4:	4291      	cmp	r1, r2
 80092a6:	d1f9      	bne.n	800929c <memcpy+0xe>
 80092a8:	bd10      	pop	{r4, pc}
	...

080092ac <__malloc_lock>:
 80092ac:	4801      	ldr	r0, [pc, #4]	; (80092b4 <__malloc_lock+0x8>)
 80092ae:	f7ff bfda 	b.w	8009266 <__retarget_lock_acquire_recursive>
 80092b2:	bf00      	nop
 80092b4:	20000440 	.word	0x20000440

080092b8 <__malloc_unlock>:
 80092b8:	4801      	ldr	r0, [pc, #4]	; (80092c0 <__malloc_unlock+0x8>)
 80092ba:	f7ff bfd5 	b.w	8009268 <__retarget_lock_release_recursive>
 80092be:	bf00      	nop
 80092c0:	20000440 	.word	0x20000440

080092c4 <_Balloc>:
 80092c4:	b570      	push	{r4, r5, r6, lr}
 80092c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80092c8:	4604      	mov	r4, r0
 80092ca:	460d      	mov	r5, r1
 80092cc:	b976      	cbnz	r6, 80092ec <_Balloc+0x28>
 80092ce:	2010      	movs	r0, #16
 80092d0:	f7fc fe4a 	bl	8005f68 <malloc>
 80092d4:	4602      	mov	r2, r0
 80092d6:	6260      	str	r0, [r4, #36]	; 0x24
 80092d8:	b920      	cbnz	r0, 80092e4 <_Balloc+0x20>
 80092da:	4b18      	ldr	r3, [pc, #96]	; (800933c <_Balloc+0x78>)
 80092dc:	4818      	ldr	r0, [pc, #96]	; (8009340 <_Balloc+0x7c>)
 80092de:	2166      	movs	r1, #102	; 0x66
 80092e0:	f001 f8a6 	bl	800a430 <__assert_func>
 80092e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092e8:	6006      	str	r6, [r0, #0]
 80092ea:	60c6      	str	r6, [r0, #12]
 80092ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80092ee:	68f3      	ldr	r3, [r6, #12]
 80092f0:	b183      	cbz	r3, 8009314 <_Balloc+0x50>
 80092f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80092fa:	b9b8      	cbnz	r0, 800932c <_Balloc+0x68>
 80092fc:	2101      	movs	r1, #1
 80092fe:	fa01 f605 	lsl.w	r6, r1, r5
 8009302:	1d72      	adds	r2, r6, #5
 8009304:	0092      	lsls	r2, r2, #2
 8009306:	4620      	mov	r0, r4
 8009308:	f7fc fe60 	bl	8005fcc <_calloc_r>
 800930c:	b160      	cbz	r0, 8009328 <_Balloc+0x64>
 800930e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009312:	e00e      	b.n	8009332 <_Balloc+0x6e>
 8009314:	2221      	movs	r2, #33	; 0x21
 8009316:	2104      	movs	r1, #4
 8009318:	4620      	mov	r0, r4
 800931a:	f7fc fe57 	bl	8005fcc <_calloc_r>
 800931e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009320:	60f0      	str	r0, [r6, #12]
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d1e4      	bne.n	80092f2 <_Balloc+0x2e>
 8009328:	2000      	movs	r0, #0
 800932a:	bd70      	pop	{r4, r5, r6, pc}
 800932c:	6802      	ldr	r2, [r0, #0]
 800932e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009332:	2300      	movs	r3, #0
 8009334:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009338:	e7f7      	b.n	800932a <_Balloc+0x66>
 800933a:	bf00      	nop
 800933c:	0800aade 	.word	0x0800aade
 8009340:	0800ac40 	.word	0x0800ac40

08009344 <_Bfree>:
 8009344:	b570      	push	{r4, r5, r6, lr}
 8009346:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009348:	4605      	mov	r5, r0
 800934a:	460c      	mov	r4, r1
 800934c:	b976      	cbnz	r6, 800936c <_Bfree+0x28>
 800934e:	2010      	movs	r0, #16
 8009350:	f7fc fe0a 	bl	8005f68 <malloc>
 8009354:	4602      	mov	r2, r0
 8009356:	6268      	str	r0, [r5, #36]	; 0x24
 8009358:	b920      	cbnz	r0, 8009364 <_Bfree+0x20>
 800935a:	4b09      	ldr	r3, [pc, #36]	; (8009380 <_Bfree+0x3c>)
 800935c:	4809      	ldr	r0, [pc, #36]	; (8009384 <_Bfree+0x40>)
 800935e:	218a      	movs	r1, #138	; 0x8a
 8009360:	f001 f866 	bl	800a430 <__assert_func>
 8009364:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009368:	6006      	str	r6, [r0, #0]
 800936a:	60c6      	str	r6, [r0, #12]
 800936c:	b13c      	cbz	r4, 800937e <_Bfree+0x3a>
 800936e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009370:	6862      	ldr	r2, [r4, #4]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009378:	6021      	str	r1, [r4, #0]
 800937a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800937e:	bd70      	pop	{r4, r5, r6, pc}
 8009380:	0800aade 	.word	0x0800aade
 8009384:	0800ac40 	.word	0x0800ac40

08009388 <__multadd>:
 8009388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800938c:	690d      	ldr	r5, [r1, #16]
 800938e:	4607      	mov	r7, r0
 8009390:	460c      	mov	r4, r1
 8009392:	461e      	mov	r6, r3
 8009394:	f101 0c14 	add.w	ip, r1, #20
 8009398:	2000      	movs	r0, #0
 800939a:	f8dc 3000 	ldr.w	r3, [ip]
 800939e:	b299      	uxth	r1, r3
 80093a0:	fb02 6101 	mla	r1, r2, r1, r6
 80093a4:	0c1e      	lsrs	r6, r3, #16
 80093a6:	0c0b      	lsrs	r3, r1, #16
 80093a8:	fb02 3306 	mla	r3, r2, r6, r3
 80093ac:	b289      	uxth	r1, r1
 80093ae:	3001      	adds	r0, #1
 80093b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80093b4:	4285      	cmp	r5, r0
 80093b6:	f84c 1b04 	str.w	r1, [ip], #4
 80093ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80093be:	dcec      	bgt.n	800939a <__multadd+0x12>
 80093c0:	b30e      	cbz	r6, 8009406 <__multadd+0x7e>
 80093c2:	68a3      	ldr	r3, [r4, #8]
 80093c4:	42ab      	cmp	r3, r5
 80093c6:	dc19      	bgt.n	80093fc <__multadd+0x74>
 80093c8:	6861      	ldr	r1, [r4, #4]
 80093ca:	4638      	mov	r0, r7
 80093cc:	3101      	adds	r1, #1
 80093ce:	f7ff ff79 	bl	80092c4 <_Balloc>
 80093d2:	4680      	mov	r8, r0
 80093d4:	b928      	cbnz	r0, 80093e2 <__multadd+0x5a>
 80093d6:	4602      	mov	r2, r0
 80093d8:	4b0c      	ldr	r3, [pc, #48]	; (800940c <__multadd+0x84>)
 80093da:	480d      	ldr	r0, [pc, #52]	; (8009410 <__multadd+0x88>)
 80093dc:	21b5      	movs	r1, #181	; 0xb5
 80093de:	f001 f827 	bl	800a430 <__assert_func>
 80093e2:	6922      	ldr	r2, [r4, #16]
 80093e4:	3202      	adds	r2, #2
 80093e6:	f104 010c 	add.w	r1, r4, #12
 80093ea:	0092      	lsls	r2, r2, #2
 80093ec:	300c      	adds	r0, #12
 80093ee:	f7ff ff4e 	bl	800928e <memcpy>
 80093f2:	4621      	mov	r1, r4
 80093f4:	4638      	mov	r0, r7
 80093f6:	f7ff ffa5 	bl	8009344 <_Bfree>
 80093fa:	4644      	mov	r4, r8
 80093fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009400:	3501      	adds	r5, #1
 8009402:	615e      	str	r6, [r3, #20]
 8009404:	6125      	str	r5, [r4, #16]
 8009406:	4620      	mov	r0, r4
 8009408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800940c:	0800ab50 	.word	0x0800ab50
 8009410:	0800ac40 	.word	0x0800ac40

08009414 <__s2b>:
 8009414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009418:	460c      	mov	r4, r1
 800941a:	4615      	mov	r5, r2
 800941c:	461f      	mov	r7, r3
 800941e:	2209      	movs	r2, #9
 8009420:	3308      	adds	r3, #8
 8009422:	4606      	mov	r6, r0
 8009424:	fb93 f3f2 	sdiv	r3, r3, r2
 8009428:	2100      	movs	r1, #0
 800942a:	2201      	movs	r2, #1
 800942c:	429a      	cmp	r2, r3
 800942e:	db09      	blt.n	8009444 <__s2b+0x30>
 8009430:	4630      	mov	r0, r6
 8009432:	f7ff ff47 	bl	80092c4 <_Balloc>
 8009436:	b940      	cbnz	r0, 800944a <__s2b+0x36>
 8009438:	4602      	mov	r2, r0
 800943a:	4b19      	ldr	r3, [pc, #100]	; (80094a0 <__s2b+0x8c>)
 800943c:	4819      	ldr	r0, [pc, #100]	; (80094a4 <__s2b+0x90>)
 800943e:	21ce      	movs	r1, #206	; 0xce
 8009440:	f000 fff6 	bl	800a430 <__assert_func>
 8009444:	0052      	lsls	r2, r2, #1
 8009446:	3101      	adds	r1, #1
 8009448:	e7f0      	b.n	800942c <__s2b+0x18>
 800944a:	9b08      	ldr	r3, [sp, #32]
 800944c:	6143      	str	r3, [r0, #20]
 800944e:	2d09      	cmp	r5, #9
 8009450:	f04f 0301 	mov.w	r3, #1
 8009454:	6103      	str	r3, [r0, #16]
 8009456:	dd16      	ble.n	8009486 <__s2b+0x72>
 8009458:	f104 0909 	add.w	r9, r4, #9
 800945c:	46c8      	mov	r8, r9
 800945e:	442c      	add	r4, r5
 8009460:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009464:	4601      	mov	r1, r0
 8009466:	3b30      	subs	r3, #48	; 0x30
 8009468:	220a      	movs	r2, #10
 800946a:	4630      	mov	r0, r6
 800946c:	f7ff ff8c 	bl	8009388 <__multadd>
 8009470:	45a0      	cmp	r8, r4
 8009472:	d1f5      	bne.n	8009460 <__s2b+0x4c>
 8009474:	f1a5 0408 	sub.w	r4, r5, #8
 8009478:	444c      	add	r4, r9
 800947a:	1b2d      	subs	r5, r5, r4
 800947c:	1963      	adds	r3, r4, r5
 800947e:	42bb      	cmp	r3, r7
 8009480:	db04      	blt.n	800948c <__s2b+0x78>
 8009482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009486:	340a      	adds	r4, #10
 8009488:	2509      	movs	r5, #9
 800948a:	e7f6      	b.n	800947a <__s2b+0x66>
 800948c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009490:	4601      	mov	r1, r0
 8009492:	3b30      	subs	r3, #48	; 0x30
 8009494:	220a      	movs	r2, #10
 8009496:	4630      	mov	r0, r6
 8009498:	f7ff ff76 	bl	8009388 <__multadd>
 800949c:	e7ee      	b.n	800947c <__s2b+0x68>
 800949e:	bf00      	nop
 80094a0:	0800ab50 	.word	0x0800ab50
 80094a4:	0800ac40 	.word	0x0800ac40

080094a8 <__hi0bits>:
 80094a8:	0c03      	lsrs	r3, r0, #16
 80094aa:	041b      	lsls	r3, r3, #16
 80094ac:	b9d3      	cbnz	r3, 80094e4 <__hi0bits+0x3c>
 80094ae:	0400      	lsls	r0, r0, #16
 80094b0:	2310      	movs	r3, #16
 80094b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80094b6:	bf04      	itt	eq
 80094b8:	0200      	lsleq	r0, r0, #8
 80094ba:	3308      	addeq	r3, #8
 80094bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80094c0:	bf04      	itt	eq
 80094c2:	0100      	lsleq	r0, r0, #4
 80094c4:	3304      	addeq	r3, #4
 80094c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80094ca:	bf04      	itt	eq
 80094cc:	0080      	lsleq	r0, r0, #2
 80094ce:	3302      	addeq	r3, #2
 80094d0:	2800      	cmp	r0, #0
 80094d2:	db05      	blt.n	80094e0 <__hi0bits+0x38>
 80094d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80094d8:	f103 0301 	add.w	r3, r3, #1
 80094dc:	bf08      	it	eq
 80094de:	2320      	moveq	r3, #32
 80094e0:	4618      	mov	r0, r3
 80094e2:	4770      	bx	lr
 80094e4:	2300      	movs	r3, #0
 80094e6:	e7e4      	b.n	80094b2 <__hi0bits+0xa>

080094e8 <__lo0bits>:
 80094e8:	6803      	ldr	r3, [r0, #0]
 80094ea:	f013 0207 	ands.w	r2, r3, #7
 80094ee:	4601      	mov	r1, r0
 80094f0:	d00b      	beq.n	800950a <__lo0bits+0x22>
 80094f2:	07da      	lsls	r2, r3, #31
 80094f4:	d423      	bmi.n	800953e <__lo0bits+0x56>
 80094f6:	0798      	lsls	r0, r3, #30
 80094f8:	bf49      	itett	mi
 80094fa:	085b      	lsrmi	r3, r3, #1
 80094fc:	089b      	lsrpl	r3, r3, #2
 80094fe:	2001      	movmi	r0, #1
 8009500:	600b      	strmi	r3, [r1, #0]
 8009502:	bf5c      	itt	pl
 8009504:	600b      	strpl	r3, [r1, #0]
 8009506:	2002      	movpl	r0, #2
 8009508:	4770      	bx	lr
 800950a:	b298      	uxth	r0, r3
 800950c:	b9a8      	cbnz	r0, 800953a <__lo0bits+0x52>
 800950e:	0c1b      	lsrs	r3, r3, #16
 8009510:	2010      	movs	r0, #16
 8009512:	b2da      	uxtb	r2, r3
 8009514:	b90a      	cbnz	r2, 800951a <__lo0bits+0x32>
 8009516:	3008      	adds	r0, #8
 8009518:	0a1b      	lsrs	r3, r3, #8
 800951a:	071a      	lsls	r2, r3, #28
 800951c:	bf04      	itt	eq
 800951e:	091b      	lsreq	r3, r3, #4
 8009520:	3004      	addeq	r0, #4
 8009522:	079a      	lsls	r2, r3, #30
 8009524:	bf04      	itt	eq
 8009526:	089b      	lsreq	r3, r3, #2
 8009528:	3002      	addeq	r0, #2
 800952a:	07da      	lsls	r2, r3, #31
 800952c:	d403      	bmi.n	8009536 <__lo0bits+0x4e>
 800952e:	085b      	lsrs	r3, r3, #1
 8009530:	f100 0001 	add.w	r0, r0, #1
 8009534:	d005      	beq.n	8009542 <__lo0bits+0x5a>
 8009536:	600b      	str	r3, [r1, #0]
 8009538:	4770      	bx	lr
 800953a:	4610      	mov	r0, r2
 800953c:	e7e9      	b.n	8009512 <__lo0bits+0x2a>
 800953e:	2000      	movs	r0, #0
 8009540:	4770      	bx	lr
 8009542:	2020      	movs	r0, #32
 8009544:	4770      	bx	lr
	...

08009548 <__i2b>:
 8009548:	b510      	push	{r4, lr}
 800954a:	460c      	mov	r4, r1
 800954c:	2101      	movs	r1, #1
 800954e:	f7ff feb9 	bl	80092c4 <_Balloc>
 8009552:	4602      	mov	r2, r0
 8009554:	b928      	cbnz	r0, 8009562 <__i2b+0x1a>
 8009556:	4b05      	ldr	r3, [pc, #20]	; (800956c <__i2b+0x24>)
 8009558:	4805      	ldr	r0, [pc, #20]	; (8009570 <__i2b+0x28>)
 800955a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800955e:	f000 ff67 	bl	800a430 <__assert_func>
 8009562:	2301      	movs	r3, #1
 8009564:	6144      	str	r4, [r0, #20]
 8009566:	6103      	str	r3, [r0, #16]
 8009568:	bd10      	pop	{r4, pc}
 800956a:	bf00      	nop
 800956c:	0800ab50 	.word	0x0800ab50
 8009570:	0800ac40 	.word	0x0800ac40

08009574 <__multiply>:
 8009574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009578:	4691      	mov	r9, r2
 800957a:	690a      	ldr	r2, [r1, #16]
 800957c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009580:	429a      	cmp	r2, r3
 8009582:	bfb8      	it	lt
 8009584:	460b      	movlt	r3, r1
 8009586:	460c      	mov	r4, r1
 8009588:	bfbc      	itt	lt
 800958a:	464c      	movlt	r4, r9
 800958c:	4699      	movlt	r9, r3
 800958e:	6927      	ldr	r7, [r4, #16]
 8009590:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009594:	68a3      	ldr	r3, [r4, #8]
 8009596:	6861      	ldr	r1, [r4, #4]
 8009598:	eb07 060a 	add.w	r6, r7, sl
 800959c:	42b3      	cmp	r3, r6
 800959e:	b085      	sub	sp, #20
 80095a0:	bfb8      	it	lt
 80095a2:	3101      	addlt	r1, #1
 80095a4:	f7ff fe8e 	bl	80092c4 <_Balloc>
 80095a8:	b930      	cbnz	r0, 80095b8 <__multiply+0x44>
 80095aa:	4602      	mov	r2, r0
 80095ac:	4b44      	ldr	r3, [pc, #272]	; (80096c0 <__multiply+0x14c>)
 80095ae:	4845      	ldr	r0, [pc, #276]	; (80096c4 <__multiply+0x150>)
 80095b0:	f240 115d 	movw	r1, #349	; 0x15d
 80095b4:	f000 ff3c 	bl	800a430 <__assert_func>
 80095b8:	f100 0514 	add.w	r5, r0, #20
 80095bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80095c0:	462b      	mov	r3, r5
 80095c2:	2200      	movs	r2, #0
 80095c4:	4543      	cmp	r3, r8
 80095c6:	d321      	bcc.n	800960c <__multiply+0x98>
 80095c8:	f104 0314 	add.w	r3, r4, #20
 80095cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80095d0:	f109 0314 	add.w	r3, r9, #20
 80095d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80095d8:	9202      	str	r2, [sp, #8]
 80095da:	1b3a      	subs	r2, r7, r4
 80095dc:	3a15      	subs	r2, #21
 80095de:	f022 0203 	bic.w	r2, r2, #3
 80095e2:	3204      	adds	r2, #4
 80095e4:	f104 0115 	add.w	r1, r4, #21
 80095e8:	428f      	cmp	r7, r1
 80095ea:	bf38      	it	cc
 80095ec:	2204      	movcc	r2, #4
 80095ee:	9201      	str	r2, [sp, #4]
 80095f0:	9a02      	ldr	r2, [sp, #8]
 80095f2:	9303      	str	r3, [sp, #12]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d80c      	bhi.n	8009612 <__multiply+0x9e>
 80095f8:	2e00      	cmp	r6, #0
 80095fa:	dd03      	ble.n	8009604 <__multiply+0x90>
 80095fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009600:	2b00      	cmp	r3, #0
 8009602:	d05a      	beq.n	80096ba <__multiply+0x146>
 8009604:	6106      	str	r6, [r0, #16]
 8009606:	b005      	add	sp, #20
 8009608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800960c:	f843 2b04 	str.w	r2, [r3], #4
 8009610:	e7d8      	b.n	80095c4 <__multiply+0x50>
 8009612:	f8b3 a000 	ldrh.w	sl, [r3]
 8009616:	f1ba 0f00 	cmp.w	sl, #0
 800961a:	d024      	beq.n	8009666 <__multiply+0xf2>
 800961c:	f104 0e14 	add.w	lr, r4, #20
 8009620:	46a9      	mov	r9, r5
 8009622:	f04f 0c00 	mov.w	ip, #0
 8009626:	f85e 2b04 	ldr.w	r2, [lr], #4
 800962a:	f8d9 1000 	ldr.w	r1, [r9]
 800962e:	fa1f fb82 	uxth.w	fp, r2
 8009632:	b289      	uxth	r1, r1
 8009634:	fb0a 110b 	mla	r1, sl, fp, r1
 8009638:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800963c:	f8d9 2000 	ldr.w	r2, [r9]
 8009640:	4461      	add	r1, ip
 8009642:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009646:	fb0a c20b 	mla	r2, sl, fp, ip
 800964a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800964e:	b289      	uxth	r1, r1
 8009650:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009654:	4577      	cmp	r7, lr
 8009656:	f849 1b04 	str.w	r1, [r9], #4
 800965a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800965e:	d8e2      	bhi.n	8009626 <__multiply+0xb2>
 8009660:	9a01      	ldr	r2, [sp, #4]
 8009662:	f845 c002 	str.w	ip, [r5, r2]
 8009666:	9a03      	ldr	r2, [sp, #12]
 8009668:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800966c:	3304      	adds	r3, #4
 800966e:	f1b9 0f00 	cmp.w	r9, #0
 8009672:	d020      	beq.n	80096b6 <__multiply+0x142>
 8009674:	6829      	ldr	r1, [r5, #0]
 8009676:	f104 0c14 	add.w	ip, r4, #20
 800967a:	46ae      	mov	lr, r5
 800967c:	f04f 0a00 	mov.w	sl, #0
 8009680:	f8bc b000 	ldrh.w	fp, [ip]
 8009684:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009688:	fb09 220b 	mla	r2, r9, fp, r2
 800968c:	4492      	add	sl, r2
 800968e:	b289      	uxth	r1, r1
 8009690:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009694:	f84e 1b04 	str.w	r1, [lr], #4
 8009698:	f85c 2b04 	ldr.w	r2, [ip], #4
 800969c:	f8be 1000 	ldrh.w	r1, [lr]
 80096a0:	0c12      	lsrs	r2, r2, #16
 80096a2:	fb09 1102 	mla	r1, r9, r2, r1
 80096a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80096aa:	4567      	cmp	r7, ip
 80096ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80096b0:	d8e6      	bhi.n	8009680 <__multiply+0x10c>
 80096b2:	9a01      	ldr	r2, [sp, #4]
 80096b4:	50a9      	str	r1, [r5, r2]
 80096b6:	3504      	adds	r5, #4
 80096b8:	e79a      	b.n	80095f0 <__multiply+0x7c>
 80096ba:	3e01      	subs	r6, #1
 80096bc:	e79c      	b.n	80095f8 <__multiply+0x84>
 80096be:	bf00      	nop
 80096c0:	0800ab50 	.word	0x0800ab50
 80096c4:	0800ac40 	.word	0x0800ac40

080096c8 <__pow5mult>:
 80096c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096cc:	4615      	mov	r5, r2
 80096ce:	f012 0203 	ands.w	r2, r2, #3
 80096d2:	4606      	mov	r6, r0
 80096d4:	460f      	mov	r7, r1
 80096d6:	d007      	beq.n	80096e8 <__pow5mult+0x20>
 80096d8:	4c25      	ldr	r4, [pc, #148]	; (8009770 <__pow5mult+0xa8>)
 80096da:	3a01      	subs	r2, #1
 80096dc:	2300      	movs	r3, #0
 80096de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096e2:	f7ff fe51 	bl	8009388 <__multadd>
 80096e6:	4607      	mov	r7, r0
 80096e8:	10ad      	asrs	r5, r5, #2
 80096ea:	d03d      	beq.n	8009768 <__pow5mult+0xa0>
 80096ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80096ee:	b97c      	cbnz	r4, 8009710 <__pow5mult+0x48>
 80096f0:	2010      	movs	r0, #16
 80096f2:	f7fc fc39 	bl	8005f68 <malloc>
 80096f6:	4602      	mov	r2, r0
 80096f8:	6270      	str	r0, [r6, #36]	; 0x24
 80096fa:	b928      	cbnz	r0, 8009708 <__pow5mult+0x40>
 80096fc:	4b1d      	ldr	r3, [pc, #116]	; (8009774 <__pow5mult+0xac>)
 80096fe:	481e      	ldr	r0, [pc, #120]	; (8009778 <__pow5mult+0xb0>)
 8009700:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009704:	f000 fe94 	bl	800a430 <__assert_func>
 8009708:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800970c:	6004      	str	r4, [r0, #0]
 800970e:	60c4      	str	r4, [r0, #12]
 8009710:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009714:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009718:	b94c      	cbnz	r4, 800972e <__pow5mult+0x66>
 800971a:	f240 2171 	movw	r1, #625	; 0x271
 800971e:	4630      	mov	r0, r6
 8009720:	f7ff ff12 	bl	8009548 <__i2b>
 8009724:	2300      	movs	r3, #0
 8009726:	f8c8 0008 	str.w	r0, [r8, #8]
 800972a:	4604      	mov	r4, r0
 800972c:	6003      	str	r3, [r0, #0]
 800972e:	f04f 0900 	mov.w	r9, #0
 8009732:	07eb      	lsls	r3, r5, #31
 8009734:	d50a      	bpl.n	800974c <__pow5mult+0x84>
 8009736:	4639      	mov	r1, r7
 8009738:	4622      	mov	r2, r4
 800973a:	4630      	mov	r0, r6
 800973c:	f7ff ff1a 	bl	8009574 <__multiply>
 8009740:	4639      	mov	r1, r7
 8009742:	4680      	mov	r8, r0
 8009744:	4630      	mov	r0, r6
 8009746:	f7ff fdfd 	bl	8009344 <_Bfree>
 800974a:	4647      	mov	r7, r8
 800974c:	106d      	asrs	r5, r5, #1
 800974e:	d00b      	beq.n	8009768 <__pow5mult+0xa0>
 8009750:	6820      	ldr	r0, [r4, #0]
 8009752:	b938      	cbnz	r0, 8009764 <__pow5mult+0x9c>
 8009754:	4622      	mov	r2, r4
 8009756:	4621      	mov	r1, r4
 8009758:	4630      	mov	r0, r6
 800975a:	f7ff ff0b 	bl	8009574 <__multiply>
 800975e:	6020      	str	r0, [r4, #0]
 8009760:	f8c0 9000 	str.w	r9, [r0]
 8009764:	4604      	mov	r4, r0
 8009766:	e7e4      	b.n	8009732 <__pow5mult+0x6a>
 8009768:	4638      	mov	r0, r7
 800976a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800976e:	bf00      	nop
 8009770:	0800ad90 	.word	0x0800ad90
 8009774:	0800aade 	.word	0x0800aade
 8009778:	0800ac40 	.word	0x0800ac40

0800977c <__lshift>:
 800977c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009780:	460c      	mov	r4, r1
 8009782:	6849      	ldr	r1, [r1, #4]
 8009784:	6923      	ldr	r3, [r4, #16]
 8009786:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800978a:	68a3      	ldr	r3, [r4, #8]
 800978c:	4607      	mov	r7, r0
 800978e:	4691      	mov	r9, r2
 8009790:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009794:	f108 0601 	add.w	r6, r8, #1
 8009798:	42b3      	cmp	r3, r6
 800979a:	db0b      	blt.n	80097b4 <__lshift+0x38>
 800979c:	4638      	mov	r0, r7
 800979e:	f7ff fd91 	bl	80092c4 <_Balloc>
 80097a2:	4605      	mov	r5, r0
 80097a4:	b948      	cbnz	r0, 80097ba <__lshift+0x3e>
 80097a6:	4602      	mov	r2, r0
 80097a8:	4b2a      	ldr	r3, [pc, #168]	; (8009854 <__lshift+0xd8>)
 80097aa:	482b      	ldr	r0, [pc, #172]	; (8009858 <__lshift+0xdc>)
 80097ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80097b0:	f000 fe3e 	bl	800a430 <__assert_func>
 80097b4:	3101      	adds	r1, #1
 80097b6:	005b      	lsls	r3, r3, #1
 80097b8:	e7ee      	b.n	8009798 <__lshift+0x1c>
 80097ba:	2300      	movs	r3, #0
 80097bc:	f100 0114 	add.w	r1, r0, #20
 80097c0:	f100 0210 	add.w	r2, r0, #16
 80097c4:	4618      	mov	r0, r3
 80097c6:	4553      	cmp	r3, sl
 80097c8:	db37      	blt.n	800983a <__lshift+0xbe>
 80097ca:	6920      	ldr	r0, [r4, #16]
 80097cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097d0:	f104 0314 	add.w	r3, r4, #20
 80097d4:	f019 091f 	ands.w	r9, r9, #31
 80097d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80097e0:	d02f      	beq.n	8009842 <__lshift+0xc6>
 80097e2:	f1c9 0e20 	rsb	lr, r9, #32
 80097e6:	468a      	mov	sl, r1
 80097e8:	f04f 0c00 	mov.w	ip, #0
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	fa02 f209 	lsl.w	r2, r2, r9
 80097f2:	ea42 020c 	orr.w	r2, r2, ip
 80097f6:	f84a 2b04 	str.w	r2, [sl], #4
 80097fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80097fe:	4298      	cmp	r0, r3
 8009800:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009804:	d8f2      	bhi.n	80097ec <__lshift+0x70>
 8009806:	1b03      	subs	r3, r0, r4
 8009808:	3b15      	subs	r3, #21
 800980a:	f023 0303 	bic.w	r3, r3, #3
 800980e:	3304      	adds	r3, #4
 8009810:	f104 0215 	add.w	r2, r4, #21
 8009814:	4290      	cmp	r0, r2
 8009816:	bf38      	it	cc
 8009818:	2304      	movcc	r3, #4
 800981a:	f841 c003 	str.w	ip, [r1, r3]
 800981e:	f1bc 0f00 	cmp.w	ip, #0
 8009822:	d001      	beq.n	8009828 <__lshift+0xac>
 8009824:	f108 0602 	add.w	r6, r8, #2
 8009828:	3e01      	subs	r6, #1
 800982a:	4638      	mov	r0, r7
 800982c:	612e      	str	r6, [r5, #16]
 800982e:	4621      	mov	r1, r4
 8009830:	f7ff fd88 	bl	8009344 <_Bfree>
 8009834:	4628      	mov	r0, r5
 8009836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800983a:	f842 0f04 	str.w	r0, [r2, #4]!
 800983e:	3301      	adds	r3, #1
 8009840:	e7c1      	b.n	80097c6 <__lshift+0x4a>
 8009842:	3904      	subs	r1, #4
 8009844:	f853 2b04 	ldr.w	r2, [r3], #4
 8009848:	f841 2f04 	str.w	r2, [r1, #4]!
 800984c:	4298      	cmp	r0, r3
 800984e:	d8f9      	bhi.n	8009844 <__lshift+0xc8>
 8009850:	e7ea      	b.n	8009828 <__lshift+0xac>
 8009852:	bf00      	nop
 8009854:	0800ab50 	.word	0x0800ab50
 8009858:	0800ac40 	.word	0x0800ac40

0800985c <__mcmp>:
 800985c:	b530      	push	{r4, r5, lr}
 800985e:	6902      	ldr	r2, [r0, #16]
 8009860:	690c      	ldr	r4, [r1, #16]
 8009862:	1b12      	subs	r2, r2, r4
 8009864:	d10e      	bne.n	8009884 <__mcmp+0x28>
 8009866:	f100 0314 	add.w	r3, r0, #20
 800986a:	3114      	adds	r1, #20
 800986c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009870:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009874:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009878:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800987c:	42a5      	cmp	r5, r4
 800987e:	d003      	beq.n	8009888 <__mcmp+0x2c>
 8009880:	d305      	bcc.n	800988e <__mcmp+0x32>
 8009882:	2201      	movs	r2, #1
 8009884:	4610      	mov	r0, r2
 8009886:	bd30      	pop	{r4, r5, pc}
 8009888:	4283      	cmp	r3, r0
 800988a:	d3f3      	bcc.n	8009874 <__mcmp+0x18>
 800988c:	e7fa      	b.n	8009884 <__mcmp+0x28>
 800988e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009892:	e7f7      	b.n	8009884 <__mcmp+0x28>

08009894 <__mdiff>:
 8009894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009898:	460c      	mov	r4, r1
 800989a:	4606      	mov	r6, r0
 800989c:	4611      	mov	r1, r2
 800989e:	4620      	mov	r0, r4
 80098a0:	4690      	mov	r8, r2
 80098a2:	f7ff ffdb 	bl	800985c <__mcmp>
 80098a6:	1e05      	subs	r5, r0, #0
 80098a8:	d110      	bne.n	80098cc <__mdiff+0x38>
 80098aa:	4629      	mov	r1, r5
 80098ac:	4630      	mov	r0, r6
 80098ae:	f7ff fd09 	bl	80092c4 <_Balloc>
 80098b2:	b930      	cbnz	r0, 80098c2 <__mdiff+0x2e>
 80098b4:	4b3a      	ldr	r3, [pc, #232]	; (80099a0 <__mdiff+0x10c>)
 80098b6:	4602      	mov	r2, r0
 80098b8:	f240 2132 	movw	r1, #562	; 0x232
 80098bc:	4839      	ldr	r0, [pc, #228]	; (80099a4 <__mdiff+0x110>)
 80098be:	f000 fdb7 	bl	800a430 <__assert_func>
 80098c2:	2301      	movs	r3, #1
 80098c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098cc:	bfa4      	itt	ge
 80098ce:	4643      	movge	r3, r8
 80098d0:	46a0      	movge	r8, r4
 80098d2:	4630      	mov	r0, r6
 80098d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80098d8:	bfa6      	itte	ge
 80098da:	461c      	movge	r4, r3
 80098dc:	2500      	movge	r5, #0
 80098de:	2501      	movlt	r5, #1
 80098e0:	f7ff fcf0 	bl	80092c4 <_Balloc>
 80098e4:	b920      	cbnz	r0, 80098f0 <__mdiff+0x5c>
 80098e6:	4b2e      	ldr	r3, [pc, #184]	; (80099a0 <__mdiff+0x10c>)
 80098e8:	4602      	mov	r2, r0
 80098ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80098ee:	e7e5      	b.n	80098bc <__mdiff+0x28>
 80098f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80098f4:	6926      	ldr	r6, [r4, #16]
 80098f6:	60c5      	str	r5, [r0, #12]
 80098f8:	f104 0914 	add.w	r9, r4, #20
 80098fc:	f108 0514 	add.w	r5, r8, #20
 8009900:	f100 0e14 	add.w	lr, r0, #20
 8009904:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009908:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800990c:	f108 0210 	add.w	r2, r8, #16
 8009910:	46f2      	mov	sl, lr
 8009912:	2100      	movs	r1, #0
 8009914:	f859 3b04 	ldr.w	r3, [r9], #4
 8009918:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800991c:	fa1f f883 	uxth.w	r8, r3
 8009920:	fa11 f18b 	uxtah	r1, r1, fp
 8009924:	0c1b      	lsrs	r3, r3, #16
 8009926:	eba1 0808 	sub.w	r8, r1, r8
 800992a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800992e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009932:	fa1f f888 	uxth.w	r8, r8
 8009936:	1419      	asrs	r1, r3, #16
 8009938:	454e      	cmp	r6, r9
 800993a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800993e:	f84a 3b04 	str.w	r3, [sl], #4
 8009942:	d8e7      	bhi.n	8009914 <__mdiff+0x80>
 8009944:	1b33      	subs	r3, r6, r4
 8009946:	3b15      	subs	r3, #21
 8009948:	f023 0303 	bic.w	r3, r3, #3
 800994c:	3304      	adds	r3, #4
 800994e:	3415      	adds	r4, #21
 8009950:	42a6      	cmp	r6, r4
 8009952:	bf38      	it	cc
 8009954:	2304      	movcc	r3, #4
 8009956:	441d      	add	r5, r3
 8009958:	4473      	add	r3, lr
 800995a:	469e      	mov	lr, r3
 800995c:	462e      	mov	r6, r5
 800995e:	4566      	cmp	r6, ip
 8009960:	d30e      	bcc.n	8009980 <__mdiff+0xec>
 8009962:	f10c 0203 	add.w	r2, ip, #3
 8009966:	1b52      	subs	r2, r2, r5
 8009968:	f022 0203 	bic.w	r2, r2, #3
 800996c:	3d03      	subs	r5, #3
 800996e:	45ac      	cmp	ip, r5
 8009970:	bf38      	it	cc
 8009972:	2200      	movcc	r2, #0
 8009974:	441a      	add	r2, r3
 8009976:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800997a:	b17b      	cbz	r3, 800999c <__mdiff+0x108>
 800997c:	6107      	str	r7, [r0, #16]
 800997e:	e7a3      	b.n	80098c8 <__mdiff+0x34>
 8009980:	f856 8b04 	ldr.w	r8, [r6], #4
 8009984:	fa11 f288 	uxtah	r2, r1, r8
 8009988:	1414      	asrs	r4, r2, #16
 800998a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800998e:	b292      	uxth	r2, r2
 8009990:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009994:	f84e 2b04 	str.w	r2, [lr], #4
 8009998:	1421      	asrs	r1, r4, #16
 800999a:	e7e0      	b.n	800995e <__mdiff+0xca>
 800999c:	3f01      	subs	r7, #1
 800999e:	e7ea      	b.n	8009976 <__mdiff+0xe2>
 80099a0:	0800ab50 	.word	0x0800ab50
 80099a4:	0800ac40 	.word	0x0800ac40

080099a8 <__ulp>:
 80099a8:	b082      	sub	sp, #8
 80099aa:	ed8d 0b00 	vstr	d0, [sp]
 80099ae:	9b01      	ldr	r3, [sp, #4]
 80099b0:	4912      	ldr	r1, [pc, #72]	; (80099fc <__ulp+0x54>)
 80099b2:	4019      	ands	r1, r3
 80099b4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80099b8:	2900      	cmp	r1, #0
 80099ba:	dd05      	ble.n	80099c8 <__ulp+0x20>
 80099bc:	2200      	movs	r2, #0
 80099be:	460b      	mov	r3, r1
 80099c0:	ec43 2b10 	vmov	d0, r2, r3
 80099c4:	b002      	add	sp, #8
 80099c6:	4770      	bx	lr
 80099c8:	4249      	negs	r1, r1
 80099ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80099ce:	ea4f 5021 	mov.w	r0, r1, asr #20
 80099d2:	f04f 0200 	mov.w	r2, #0
 80099d6:	f04f 0300 	mov.w	r3, #0
 80099da:	da04      	bge.n	80099e6 <__ulp+0x3e>
 80099dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80099e0:	fa41 f300 	asr.w	r3, r1, r0
 80099e4:	e7ec      	b.n	80099c0 <__ulp+0x18>
 80099e6:	f1a0 0114 	sub.w	r1, r0, #20
 80099ea:	291e      	cmp	r1, #30
 80099ec:	bfda      	itte	le
 80099ee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80099f2:	fa20 f101 	lsrle.w	r1, r0, r1
 80099f6:	2101      	movgt	r1, #1
 80099f8:	460a      	mov	r2, r1
 80099fa:	e7e1      	b.n	80099c0 <__ulp+0x18>
 80099fc:	7ff00000 	.word	0x7ff00000

08009a00 <__b2d>:
 8009a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a02:	6905      	ldr	r5, [r0, #16]
 8009a04:	f100 0714 	add.w	r7, r0, #20
 8009a08:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009a0c:	1f2e      	subs	r6, r5, #4
 8009a0e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009a12:	4620      	mov	r0, r4
 8009a14:	f7ff fd48 	bl	80094a8 <__hi0bits>
 8009a18:	f1c0 0320 	rsb	r3, r0, #32
 8009a1c:	280a      	cmp	r0, #10
 8009a1e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009a9c <__b2d+0x9c>
 8009a22:	600b      	str	r3, [r1, #0]
 8009a24:	dc14      	bgt.n	8009a50 <__b2d+0x50>
 8009a26:	f1c0 0e0b 	rsb	lr, r0, #11
 8009a2a:	fa24 f10e 	lsr.w	r1, r4, lr
 8009a2e:	42b7      	cmp	r7, r6
 8009a30:	ea41 030c 	orr.w	r3, r1, ip
 8009a34:	bf34      	ite	cc
 8009a36:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009a3a:	2100      	movcs	r1, #0
 8009a3c:	3015      	adds	r0, #21
 8009a3e:	fa04 f000 	lsl.w	r0, r4, r0
 8009a42:	fa21 f10e 	lsr.w	r1, r1, lr
 8009a46:	ea40 0201 	orr.w	r2, r0, r1
 8009a4a:	ec43 2b10 	vmov	d0, r2, r3
 8009a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a50:	42b7      	cmp	r7, r6
 8009a52:	bf3a      	itte	cc
 8009a54:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009a58:	f1a5 0608 	subcc.w	r6, r5, #8
 8009a5c:	2100      	movcs	r1, #0
 8009a5e:	380b      	subs	r0, #11
 8009a60:	d017      	beq.n	8009a92 <__b2d+0x92>
 8009a62:	f1c0 0c20 	rsb	ip, r0, #32
 8009a66:	fa04 f500 	lsl.w	r5, r4, r0
 8009a6a:	42be      	cmp	r6, r7
 8009a6c:	fa21 f40c 	lsr.w	r4, r1, ip
 8009a70:	ea45 0504 	orr.w	r5, r5, r4
 8009a74:	bf8c      	ite	hi
 8009a76:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009a7a:	2400      	movls	r4, #0
 8009a7c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009a80:	fa01 f000 	lsl.w	r0, r1, r0
 8009a84:	fa24 f40c 	lsr.w	r4, r4, ip
 8009a88:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009a8c:	ea40 0204 	orr.w	r2, r0, r4
 8009a90:	e7db      	b.n	8009a4a <__b2d+0x4a>
 8009a92:	ea44 030c 	orr.w	r3, r4, ip
 8009a96:	460a      	mov	r2, r1
 8009a98:	e7d7      	b.n	8009a4a <__b2d+0x4a>
 8009a9a:	bf00      	nop
 8009a9c:	3ff00000 	.word	0x3ff00000

08009aa0 <__d2b>:
 8009aa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009aa4:	4689      	mov	r9, r1
 8009aa6:	2101      	movs	r1, #1
 8009aa8:	ec57 6b10 	vmov	r6, r7, d0
 8009aac:	4690      	mov	r8, r2
 8009aae:	f7ff fc09 	bl	80092c4 <_Balloc>
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	b930      	cbnz	r0, 8009ac4 <__d2b+0x24>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	4b25      	ldr	r3, [pc, #148]	; (8009b50 <__d2b+0xb0>)
 8009aba:	4826      	ldr	r0, [pc, #152]	; (8009b54 <__d2b+0xb4>)
 8009abc:	f240 310a 	movw	r1, #778	; 0x30a
 8009ac0:	f000 fcb6 	bl	800a430 <__assert_func>
 8009ac4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009ac8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009acc:	bb35      	cbnz	r5, 8009b1c <__d2b+0x7c>
 8009ace:	2e00      	cmp	r6, #0
 8009ad0:	9301      	str	r3, [sp, #4]
 8009ad2:	d028      	beq.n	8009b26 <__d2b+0x86>
 8009ad4:	4668      	mov	r0, sp
 8009ad6:	9600      	str	r6, [sp, #0]
 8009ad8:	f7ff fd06 	bl	80094e8 <__lo0bits>
 8009adc:	9900      	ldr	r1, [sp, #0]
 8009ade:	b300      	cbz	r0, 8009b22 <__d2b+0x82>
 8009ae0:	9a01      	ldr	r2, [sp, #4]
 8009ae2:	f1c0 0320 	rsb	r3, r0, #32
 8009ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8009aea:	430b      	orrs	r3, r1
 8009aec:	40c2      	lsrs	r2, r0
 8009aee:	6163      	str	r3, [r4, #20]
 8009af0:	9201      	str	r2, [sp, #4]
 8009af2:	9b01      	ldr	r3, [sp, #4]
 8009af4:	61a3      	str	r3, [r4, #24]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	bf14      	ite	ne
 8009afa:	2202      	movne	r2, #2
 8009afc:	2201      	moveq	r2, #1
 8009afe:	6122      	str	r2, [r4, #16]
 8009b00:	b1d5      	cbz	r5, 8009b38 <__d2b+0x98>
 8009b02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009b06:	4405      	add	r5, r0
 8009b08:	f8c9 5000 	str.w	r5, [r9]
 8009b0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009b10:	f8c8 0000 	str.w	r0, [r8]
 8009b14:	4620      	mov	r0, r4
 8009b16:	b003      	add	sp, #12
 8009b18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b20:	e7d5      	b.n	8009ace <__d2b+0x2e>
 8009b22:	6161      	str	r1, [r4, #20]
 8009b24:	e7e5      	b.n	8009af2 <__d2b+0x52>
 8009b26:	a801      	add	r0, sp, #4
 8009b28:	f7ff fcde 	bl	80094e8 <__lo0bits>
 8009b2c:	9b01      	ldr	r3, [sp, #4]
 8009b2e:	6163      	str	r3, [r4, #20]
 8009b30:	2201      	movs	r2, #1
 8009b32:	6122      	str	r2, [r4, #16]
 8009b34:	3020      	adds	r0, #32
 8009b36:	e7e3      	b.n	8009b00 <__d2b+0x60>
 8009b38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b40:	f8c9 0000 	str.w	r0, [r9]
 8009b44:	6918      	ldr	r0, [r3, #16]
 8009b46:	f7ff fcaf 	bl	80094a8 <__hi0bits>
 8009b4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b4e:	e7df      	b.n	8009b10 <__d2b+0x70>
 8009b50:	0800ab50 	.word	0x0800ab50
 8009b54:	0800ac40 	.word	0x0800ac40

08009b58 <__ratio>:
 8009b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b5c:	4688      	mov	r8, r1
 8009b5e:	4669      	mov	r1, sp
 8009b60:	4681      	mov	r9, r0
 8009b62:	f7ff ff4d 	bl	8009a00 <__b2d>
 8009b66:	a901      	add	r1, sp, #4
 8009b68:	4640      	mov	r0, r8
 8009b6a:	ec55 4b10 	vmov	r4, r5, d0
 8009b6e:	f7ff ff47 	bl	8009a00 <__b2d>
 8009b72:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b76:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009b7a:	eba3 0c02 	sub.w	ip, r3, r2
 8009b7e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009b82:	1a9b      	subs	r3, r3, r2
 8009b84:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009b88:	ec51 0b10 	vmov	r0, r1, d0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	bfd6      	itet	le
 8009b90:	460a      	movle	r2, r1
 8009b92:	462a      	movgt	r2, r5
 8009b94:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b98:	468b      	mov	fp, r1
 8009b9a:	462f      	mov	r7, r5
 8009b9c:	bfd4      	ite	le
 8009b9e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009ba2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	ee10 2a10 	vmov	r2, s0
 8009bac:	465b      	mov	r3, fp
 8009bae:	4639      	mov	r1, r7
 8009bb0:	f7f6 fe54 	bl	800085c <__aeabi_ddiv>
 8009bb4:	ec41 0b10 	vmov	d0, r0, r1
 8009bb8:	b003      	add	sp, #12
 8009bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009bbe <__copybits>:
 8009bbe:	3901      	subs	r1, #1
 8009bc0:	b570      	push	{r4, r5, r6, lr}
 8009bc2:	1149      	asrs	r1, r1, #5
 8009bc4:	6914      	ldr	r4, [r2, #16]
 8009bc6:	3101      	adds	r1, #1
 8009bc8:	f102 0314 	add.w	r3, r2, #20
 8009bcc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009bd0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009bd4:	1f05      	subs	r5, r0, #4
 8009bd6:	42a3      	cmp	r3, r4
 8009bd8:	d30c      	bcc.n	8009bf4 <__copybits+0x36>
 8009bda:	1aa3      	subs	r3, r4, r2
 8009bdc:	3b11      	subs	r3, #17
 8009bde:	f023 0303 	bic.w	r3, r3, #3
 8009be2:	3211      	adds	r2, #17
 8009be4:	42a2      	cmp	r2, r4
 8009be6:	bf88      	it	hi
 8009be8:	2300      	movhi	r3, #0
 8009bea:	4418      	add	r0, r3
 8009bec:	2300      	movs	r3, #0
 8009bee:	4288      	cmp	r0, r1
 8009bf0:	d305      	bcc.n	8009bfe <__copybits+0x40>
 8009bf2:	bd70      	pop	{r4, r5, r6, pc}
 8009bf4:	f853 6b04 	ldr.w	r6, [r3], #4
 8009bf8:	f845 6f04 	str.w	r6, [r5, #4]!
 8009bfc:	e7eb      	b.n	8009bd6 <__copybits+0x18>
 8009bfe:	f840 3b04 	str.w	r3, [r0], #4
 8009c02:	e7f4      	b.n	8009bee <__copybits+0x30>

08009c04 <__any_on>:
 8009c04:	f100 0214 	add.w	r2, r0, #20
 8009c08:	6900      	ldr	r0, [r0, #16]
 8009c0a:	114b      	asrs	r3, r1, #5
 8009c0c:	4298      	cmp	r0, r3
 8009c0e:	b510      	push	{r4, lr}
 8009c10:	db11      	blt.n	8009c36 <__any_on+0x32>
 8009c12:	dd0a      	ble.n	8009c2a <__any_on+0x26>
 8009c14:	f011 011f 	ands.w	r1, r1, #31
 8009c18:	d007      	beq.n	8009c2a <__any_on+0x26>
 8009c1a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009c1e:	fa24 f001 	lsr.w	r0, r4, r1
 8009c22:	fa00 f101 	lsl.w	r1, r0, r1
 8009c26:	428c      	cmp	r4, r1
 8009c28:	d10b      	bne.n	8009c42 <__any_on+0x3e>
 8009c2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d803      	bhi.n	8009c3a <__any_on+0x36>
 8009c32:	2000      	movs	r0, #0
 8009c34:	bd10      	pop	{r4, pc}
 8009c36:	4603      	mov	r3, r0
 8009c38:	e7f7      	b.n	8009c2a <__any_on+0x26>
 8009c3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c3e:	2900      	cmp	r1, #0
 8009c40:	d0f5      	beq.n	8009c2e <__any_on+0x2a>
 8009c42:	2001      	movs	r0, #1
 8009c44:	e7f6      	b.n	8009c34 <__any_on+0x30>

08009c46 <__ssputs_r>:
 8009c46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c4a:	688e      	ldr	r6, [r1, #8]
 8009c4c:	429e      	cmp	r6, r3
 8009c4e:	4682      	mov	sl, r0
 8009c50:	460c      	mov	r4, r1
 8009c52:	4690      	mov	r8, r2
 8009c54:	461f      	mov	r7, r3
 8009c56:	d838      	bhi.n	8009cca <__ssputs_r+0x84>
 8009c58:	898a      	ldrh	r2, [r1, #12]
 8009c5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c5e:	d032      	beq.n	8009cc6 <__ssputs_r+0x80>
 8009c60:	6825      	ldr	r5, [r4, #0]
 8009c62:	6909      	ldr	r1, [r1, #16]
 8009c64:	eba5 0901 	sub.w	r9, r5, r1
 8009c68:	6965      	ldr	r5, [r4, #20]
 8009c6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c72:	3301      	adds	r3, #1
 8009c74:	444b      	add	r3, r9
 8009c76:	106d      	asrs	r5, r5, #1
 8009c78:	429d      	cmp	r5, r3
 8009c7a:	bf38      	it	cc
 8009c7c:	461d      	movcc	r5, r3
 8009c7e:	0553      	lsls	r3, r2, #21
 8009c80:	d531      	bpl.n	8009ce6 <__ssputs_r+0xa0>
 8009c82:	4629      	mov	r1, r5
 8009c84:	f7fc fa24 	bl	80060d0 <_malloc_r>
 8009c88:	4606      	mov	r6, r0
 8009c8a:	b950      	cbnz	r0, 8009ca2 <__ssputs_r+0x5c>
 8009c8c:	230c      	movs	r3, #12
 8009c8e:	f8ca 3000 	str.w	r3, [sl]
 8009c92:	89a3      	ldrh	r3, [r4, #12]
 8009c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c98:	81a3      	strh	r3, [r4, #12]
 8009c9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ca2:	6921      	ldr	r1, [r4, #16]
 8009ca4:	464a      	mov	r2, r9
 8009ca6:	f7ff faf2 	bl	800928e <memcpy>
 8009caa:	89a3      	ldrh	r3, [r4, #12]
 8009cac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cb4:	81a3      	strh	r3, [r4, #12]
 8009cb6:	6126      	str	r6, [r4, #16]
 8009cb8:	6165      	str	r5, [r4, #20]
 8009cba:	444e      	add	r6, r9
 8009cbc:	eba5 0509 	sub.w	r5, r5, r9
 8009cc0:	6026      	str	r6, [r4, #0]
 8009cc2:	60a5      	str	r5, [r4, #8]
 8009cc4:	463e      	mov	r6, r7
 8009cc6:	42be      	cmp	r6, r7
 8009cc8:	d900      	bls.n	8009ccc <__ssputs_r+0x86>
 8009cca:	463e      	mov	r6, r7
 8009ccc:	6820      	ldr	r0, [r4, #0]
 8009cce:	4632      	mov	r2, r6
 8009cd0:	4641      	mov	r1, r8
 8009cd2:	f7fc f959 	bl	8005f88 <memmove>
 8009cd6:	68a3      	ldr	r3, [r4, #8]
 8009cd8:	1b9b      	subs	r3, r3, r6
 8009cda:	60a3      	str	r3, [r4, #8]
 8009cdc:	6823      	ldr	r3, [r4, #0]
 8009cde:	4433      	add	r3, r6
 8009ce0:	6023      	str	r3, [r4, #0]
 8009ce2:	2000      	movs	r0, #0
 8009ce4:	e7db      	b.n	8009c9e <__ssputs_r+0x58>
 8009ce6:	462a      	mov	r2, r5
 8009ce8:	f000 fd1c 	bl	800a724 <_realloc_r>
 8009cec:	4606      	mov	r6, r0
 8009cee:	2800      	cmp	r0, #0
 8009cf0:	d1e1      	bne.n	8009cb6 <__ssputs_r+0x70>
 8009cf2:	6921      	ldr	r1, [r4, #16]
 8009cf4:	4650      	mov	r0, sl
 8009cf6:	f7fc f97f 	bl	8005ff8 <_free_r>
 8009cfa:	e7c7      	b.n	8009c8c <__ssputs_r+0x46>

08009cfc <_svfiprintf_r>:
 8009cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d00:	4698      	mov	r8, r3
 8009d02:	898b      	ldrh	r3, [r1, #12]
 8009d04:	061b      	lsls	r3, r3, #24
 8009d06:	b09d      	sub	sp, #116	; 0x74
 8009d08:	4607      	mov	r7, r0
 8009d0a:	460d      	mov	r5, r1
 8009d0c:	4614      	mov	r4, r2
 8009d0e:	d50e      	bpl.n	8009d2e <_svfiprintf_r+0x32>
 8009d10:	690b      	ldr	r3, [r1, #16]
 8009d12:	b963      	cbnz	r3, 8009d2e <_svfiprintf_r+0x32>
 8009d14:	2140      	movs	r1, #64	; 0x40
 8009d16:	f7fc f9db 	bl	80060d0 <_malloc_r>
 8009d1a:	6028      	str	r0, [r5, #0]
 8009d1c:	6128      	str	r0, [r5, #16]
 8009d1e:	b920      	cbnz	r0, 8009d2a <_svfiprintf_r+0x2e>
 8009d20:	230c      	movs	r3, #12
 8009d22:	603b      	str	r3, [r7, #0]
 8009d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d28:	e0d1      	b.n	8009ece <_svfiprintf_r+0x1d2>
 8009d2a:	2340      	movs	r3, #64	; 0x40
 8009d2c:	616b      	str	r3, [r5, #20]
 8009d2e:	2300      	movs	r3, #0
 8009d30:	9309      	str	r3, [sp, #36]	; 0x24
 8009d32:	2320      	movs	r3, #32
 8009d34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d38:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d3c:	2330      	movs	r3, #48	; 0x30
 8009d3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ee8 <_svfiprintf_r+0x1ec>
 8009d42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d46:	f04f 0901 	mov.w	r9, #1
 8009d4a:	4623      	mov	r3, r4
 8009d4c:	469a      	mov	sl, r3
 8009d4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d52:	b10a      	cbz	r2, 8009d58 <_svfiprintf_r+0x5c>
 8009d54:	2a25      	cmp	r2, #37	; 0x25
 8009d56:	d1f9      	bne.n	8009d4c <_svfiprintf_r+0x50>
 8009d58:	ebba 0b04 	subs.w	fp, sl, r4
 8009d5c:	d00b      	beq.n	8009d76 <_svfiprintf_r+0x7a>
 8009d5e:	465b      	mov	r3, fp
 8009d60:	4622      	mov	r2, r4
 8009d62:	4629      	mov	r1, r5
 8009d64:	4638      	mov	r0, r7
 8009d66:	f7ff ff6e 	bl	8009c46 <__ssputs_r>
 8009d6a:	3001      	adds	r0, #1
 8009d6c:	f000 80aa 	beq.w	8009ec4 <_svfiprintf_r+0x1c8>
 8009d70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d72:	445a      	add	r2, fp
 8009d74:	9209      	str	r2, [sp, #36]	; 0x24
 8009d76:	f89a 3000 	ldrb.w	r3, [sl]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f000 80a2 	beq.w	8009ec4 <_svfiprintf_r+0x1c8>
 8009d80:	2300      	movs	r3, #0
 8009d82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d8a:	f10a 0a01 	add.w	sl, sl, #1
 8009d8e:	9304      	str	r3, [sp, #16]
 8009d90:	9307      	str	r3, [sp, #28]
 8009d92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d96:	931a      	str	r3, [sp, #104]	; 0x68
 8009d98:	4654      	mov	r4, sl
 8009d9a:	2205      	movs	r2, #5
 8009d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009da0:	4851      	ldr	r0, [pc, #324]	; (8009ee8 <_svfiprintf_r+0x1ec>)
 8009da2:	f7f6 fa25 	bl	80001f0 <memchr>
 8009da6:	9a04      	ldr	r2, [sp, #16]
 8009da8:	b9d8      	cbnz	r0, 8009de2 <_svfiprintf_r+0xe6>
 8009daa:	06d0      	lsls	r0, r2, #27
 8009dac:	bf44      	itt	mi
 8009dae:	2320      	movmi	r3, #32
 8009db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009db4:	0711      	lsls	r1, r2, #28
 8009db6:	bf44      	itt	mi
 8009db8:	232b      	movmi	r3, #43	; 0x2b
 8009dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8009dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8009dc4:	d015      	beq.n	8009df2 <_svfiprintf_r+0xf6>
 8009dc6:	9a07      	ldr	r2, [sp, #28]
 8009dc8:	4654      	mov	r4, sl
 8009dca:	2000      	movs	r0, #0
 8009dcc:	f04f 0c0a 	mov.w	ip, #10
 8009dd0:	4621      	mov	r1, r4
 8009dd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dd6:	3b30      	subs	r3, #48	; 0x30
 8009dd8:	2b09      	cmp	r3, #9
 8009dda:	d94e      	bls.n	8009e7a <_svfiprintf_r+0x17e>
 8009ddc:	b1b0      	cbz	r0, 8009e0c <_svfiprintf_r+0x110>
 8009dde:	9207      	str	r2, [sp, #28]
 8009de0:	e014      	b.n	8009e0c <_svfiprintf_r+0x110>
 8009de2:	eba0 0308 	sub.w	r3, r0, r8
 8009de6:	fa09 f303 	lsl.w	r3, r9, r3
 8009dea:	4313      	orrs	r3, r2
 8009dec:	9304      	str	r3, [sp, #16]
 8009dee:	46a2      	mov	sl, r4
 8009df0:	e7d2      	b.n	8009d98 <_svfiprintf_r+0x9c>
 8009df2:	9b03      	ldr	r3, [sp, #12]
 8009df4:	1d19      	adds	r1, r3, #4
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	9103      	str	r1, [sp, #12]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	bfbb      	ittet	lt
 8009dfe:	425b      	neglt	r3, r3
 8009e00:	f042 0202 	orrlt.w	r2, r2, #2
 8009e04:	9307      	strge	r3, [sp, #28]
 8009e06:	9307      	strlt	r3, [sp, #28]
 8009e08:	bfb8      	it	lt
 8009e0a:	9204      	strlt	r2, [sp, #16]
 8009e0c:	7823      	ldrb	r3, [r4, #0]
 8009e0e:	2b2e      	cmp	r3, #46	; 0x2e
 8009e10:	d10c      	bne.n	8009e2c <_svfiprintf_r+0x130>
 8009e12:	7863      	ldrb	r3, [r4, #1]
 8009e14:	2b2a      	cmp	r3, #42	; 0x2a
 8009e16:	d135      	bne.n	8009e84 <_svfiprintf_r+0x188>
 8009e18:	9b03      	ldr	r3, [sp, #12]
 8009e1a:	1d1a      	adds	r2, r3, #4
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	9203      	str	r2, [sp, #12]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	bfb8      	it	lt
 8009e24:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e28:	3402      	adds	r4, #2
 8009e2a:	9305      	str	r3, [sp, #20]
 8009e2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ef8 <_svfiprintf_r+0x1fc>
 8009e30:	7821      	ldrb	r1, [r4, #0]
 8009e32:	2203      	movs	r2, #3
 8009e34:	4650      	mov	r0, sl
 8009e36:	f7f6 f9db 	bl	80001f0 <memchr>
 8009e3a:	b140      	cbz	r0, 8009e4e <_svfiprintf_r+0x152>
 8009e3c:	2340      	movs	r3, #64	; 0x40
 8009e3e:	eba0 000a 	sub.w	r0, r0, sl
 8009e42:	fa03 f000 	lsl.w	r0, r3, r0
 8009e46:	9b04      	ldr	r3, [sp, #16]
 8009e48:	4303      	orrs	r3, r0
 8009e4a:	3401      	adds	r4, #1
 8009e4c:	9304      	str	r3, [sp, #16]
 8009e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e52:	4826      	ldr	r0, [pc, #152]	; (8009eec <_svfiprintf_r+0x1f0>)
 8009e54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e58:	2206      	movs	r2, #6
 8009e5a:	f7f6 f9c9 	bl	80001f0 <memchr>
 8009e5e:	2800      	cmp	r0, #0
 8009e60:	d038      	beq.n	8009ed4 <_svfiprintf_r+0x1d8>
 8009e62:	4b23      	ldr	r3, [pc, #140]	; (8009ef0 <_svfiprintf_r+0x1f4>)
 8009e64:	bb1b      	cbnz	r3, 8009eae <_svfiprintf_r+0x1b2>
 8009e66:	9b03      	ldr	r3, [sp, #12]
 8009e68:	3307      	adds	r3, #7
 8009e6a:	f023 0307 	bic.w	r3, r3, #7
 8009e6e:	3308      	adds	r3, #8
 8009e70:	9303      	str	r3, [sp, #12]
 8009e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e74:	4433      	add	r3, r6
 8009e76:	9309      	str	r3, [sp, #36]	; 0x24
 8009e78:	e767      	b.n	8009d4a <_svfiprintf_r+0x4e>
 8009e7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e7e:	460c      	mov	r4, r1
 8009e80:	2001      	movs	r0, #1
 8009e82:	e7a5      	b.n	8009dd0 <_svfiprintf_r+0xd4>
 8009e84:	2300      	movs	r3, #0
 8009e86:	3401      	adds	r4, #1
 8009e88:	9305      	str	r3, [sp, #20]
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	f04f 0c0a 	mov.w	ip, #10
 8009e90:	4620      	mov	r0, r4
 8009e92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e96:	3a30      	subs	r2, #48	; 0x30
 8009e98:	2a09      	cmp	r2, #9
 8009e9a:	d903      	bls.n	8009ea4 <_svfiprintf_r+0x1a8>
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d0c5      	beq.n	8009e2c <_svfiprintf_r+0x130>
 8009ea0:	9105      	str	r1, [sp, #20]
 8009ea2:	e7c3      	b.n	8009e2c <_svfiprintf_r+0x130>
 8009ea4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ea8:	4604      	mov	r4, r0
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e7f0      	b.n	8009e90 <_svfiprintf_r+0x194>
 8009eae:	ab03      	add	r3, sp, #12
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	462a      	mov	r2, r5
 8009eb4:	4b0f      	ldr	r3, [pc, #60]	; (8009ef4 <_svfiprintf_r+0x1f8>)
 8009eb6:	a904      	add	r1, sp, #16
 8009eb8:	4638      	mov	r0, r7
 8009eba:	f7fc fa1d 	bl	80062f8 <_printf_float>
 8009ebe:	1c42      	adds	r2, r0, #1
 8009ec0:	4606      	mov	r6, r0
 8009ec2:	d1d6      	bne.n	8009e72 <_svfiprintf_r+0x176>
 8009ec4:	89ab      	ldrh	r3, [r5, #12]
 8009ec6:	065b      	lsls	r3, r3, #25
 8009ec8:	f53f af2c 	bmi.w	8009d24 <_svfiprintf_r+0x28>
 8009ecc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ece:	b01d      	add	sp, #116	; 0x74
 8009ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed4:	ab03      	add	r3, sp, #12
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	462a      	mov	r2, r5
 8009eda:	4b06      	ldr	r3, [pc, #24]	; (8009ef4 <_svfiprintf_r+0x1f8>)
 8009edc:	a904      	add	r1, sp, #16
 8009ede:	4638      	mov	r0, r7
 8009ee0:	f7fc fcae 	bl	8006840 <_printf_i>
 8009ee4:	e7eb      	b.n	8009ebe <_svfiprintf_r+0x1c2>
 8009ee6:	bf00      	nop
 8009ee8:	0800ad9c 	.word	0x0800ad9c
 8009eec:	0800ada6 	.word	0x0800ada6
 8009ef0:	080062f9 	.word	0x080062f9
 8009ef4:	08009c47 	.word	0x08009c47
 8009ef8:	0800ada2 	.word	0x0800ada2

08009efc <__sfputc_r>:
 8009efc:	6893      	ldr	r3, [r2, #8]
 8009efe:	3b01      	subs	r3, #1
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	b410      	push	{r4}
 8009f04:	6093      	str	r3, [r2, #8]
 8009f06:	da08      	bge.n	8009f1a <__sfputc_r+0x1e>
 8009f08:	6994      	ldr	r4, [r2, #24]
 8009f0a:	42a3      	cmp	r3, r4
 8009f0c:	db01      	blt.n	8009f12 <__sfputc_r+0x16>
 8009f0e:	290a      	cmp	r1, #10
 8009f10:	d103      	bne.n	8009f1a <__sfputc_r+0x1e>
 8009f12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f16:	f000 b9ab 	b.w	800a270 <__swbuf_r>
 8009f1a:	6813      	ldr	r3, [r2, #0]
 8009f1c:	1c58      	adds	r0, r3, #1
 8009f1e:	6010      	str	r0, [r2, #0]
 8009f20:	7019      	strb	r1, [r3, #0]
 8009f22:	4608      	mov	r0, r1
 8009f24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f28:	4770      	bx	lr

08009f2a <__sfputs_r>:
 8009f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2c:	4606      	mov	r6, r0
 8009f2e:	460f      	mov	r7, r1
 8009f30:	4614      	mov	r4, r2
 8009f32:	18d5      	adds	r5, r2, r3
 8009f34:	42ac      	cmp	r4, r5
 8009f36:	d101      	bne.n	8009f3c <__sfputs_r+0x12>
 8009f38:	2000      	movs	r0, #0
 8009f3a:	e007      	b.n	8009f4c <__sfputs_r+0x22>
 8009f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f40:	463a      	mov	r2, r7
 8009f42:	4630      	mov	r0, r6
 8009f44:	f7ff ffda 	bl	8009efc <__sfputc_r>
 8009f48:	1c43      	adds	r3, r0, #1
 8009f4a:	d1f3      	bne.n	8009f34 <__sfputs_r+0xa>
 8009f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f50 <_vfiprintf_r>:
 8009f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f54:	460d      	mov	r5, r1
 8009f56:	b09d      	sub	sp, #116	; 0x74
 8009f58:	4614      	mov	r4, r2
 8009f5a:	4698      	mov	r8, r3
 8009f5c:	4606      	mov	r6, r0
 8009f5e:	b118      	cbz	r0, 8009f68 <_vfiprintf_r+0x18>
 8009f60:	6983      	ldr	r3, [r0, #24]
 8009f62:	b90b      	cbnz	r3, 8009f68 <_vfiprintf_r+0x18>
 8009f64:	f7fe fd6e 	bl	8008a44 <__sinit>
 8009f68:	4b89      	ldr	r3, [pc, #548]	; (800a190 <_vfiprintf_r+0x240>)
 8009f6a:	429d      	cmp	r5, r3
 8009f6c:	d11b      	bne.n	8009fa6 <_vfiprintf_r+0x56>
 8009f6e:	6875      	ldr	r5, [r6, #4]
 8009f70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f72:	07d9      	lsls	r1, r3, #31
 8009f74:	d405      	bmi.n	8009f82 <_vfiprintf_r+0x32>
 8009f76:	89ab      	ldrh	r3, [r5, #12]
 8009f78:	059a      	lsls	r2, r3, #22
 8009f7a:	d402      	bmi.n	8009f82 <_vfiprintf_r+0x32>
 8009f7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f7e:	f7ff f972 	bl	8009266 <__retarget_lock_acquire_recursive>
 8009f82:	89ab      	ldrh	r3, [r5, #12]
 8009f84:	071b      	lsls	r3, r3, #28
 8009f86:	d501      	bpl.n	8009f8c <_vfiprintf_r+0x3c>
 8009f88:	692b      	ldr	r3, [r5, #16]
 8009f8a:	b9eb      	cbnz	r3, 8009fc8 <_vfiprintf_r+0x78>
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	4630      	mov	r0, r6
 8009f90:	f000 f9e0 	bl	800a354 <__swsetup_r>
 8009f94:	b1c0      	cbz	r0, 8009fc8 <_vfiprintf_r+0x78>
 8009f96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f98:	07dc      	lsls	r4, r3, #31
 8009f9a:	d50e      	bpl.n	8009fba <_vfiprintf_r+0x6a>
 8009f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fa0:	b01d      	add	sp, #116	; 0x74
 8009fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa6:	4b7b      	ldr	r3, [pc, #492]	; (800a194 <_vfiprintf_r+0x244>)
 8009fa8:	429d      	cmp	r5, r3
 8009faa:	d101      	bne.n	8009fb0 <_vfiprintf_r+0x60>
 8009fac:	68b5      	ldr	r5, [r6, #8]
 8009fae:	e7df      	b.n	8009f70 <_vfiprintf_r+0x20>
 8009fb0:	4b79      	ldr	r3, [pc, #484]	; (800a198 <_vfiprintf_r+0x248>)
 8009fb2:	429d      	cmp	r5, r3
 8009fb4:	bf08      	it	eq
 8009fb6:	68f5      	ldreq	r5, [r6, #12]
 8009fb8:	e7da      	b.n	8009f70 <_vfiprintf_r+0x20>
 8009fba:	89ab      	ldrh	r3, [r5, #12]
 8009fbc:	0598      	lsls	r0, r3, #22
 8009fbe:	d4ed      	bmi.n	8009f9c <_vfiprintf_r+0x4c>
 8009fc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fc2:	f7ff f951 	bl	8009268 <__retarget_lock_release_recursive>
 8009fc6:	e7e9      	b.n	8009f9c <_vfiprintf_r+0x4c>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	9309      	str	r3, [sp, #36]	; 0x24
 8009fcc:	2320      	movs	r3, #32
 8009fce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fd6:	2330      	movs	r3, #48	; 0x30
 8009fd8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a19c <_vfiprintf_r+0x24c>
 8009fdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fe0:	f04f 0901 	mov.w	r9, #1
 8009fe4:	4623      	mov	r3, r4
 8009fe6:	469a      	mov	sl, r3
 8009fe8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fec:	b10a      	cbz	r2, 8009ff2 <_vfiprintf_r+0xa2>
 8009fee:	2a25      	cmp	r2, #37	; 0x25
 8009ff0:	d1f9      	bne.n	8009fe6 <_vfiprintf_r+0x96>
 8009ff2:	ebba 0b04 	subs.w	fp, sl, r4
 8009ff6:	d00b      	beq.n	800a010 <_vfiprintf_r+0xc0>
 8009ff8:	465b      	mov	r3, fp
 8009ffa:	4622      	mov	r2, r4
 8009ffc:	4629      	mov	r1, r5
 8009ffe:	4630      	mov	r0, r6
 800a000:	f7ff ff93 	bl	8009f2a <__sfputs_r>
 800a004:	3001      	adds	r0, #1
 800a006:	f000 80aa 	beq.w	800a15e <_vfiprintf_r+0x20e>
 800a00a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a00c:	445a      	add	r2, fp
 800a00e:	9209      	str	r2, [sp, #36]	; 0x24
 800a010:	f89a 3000 	ldrb.w	r3, [sl]
 800a014:	2b00      	cmp	r3, #0
 800a016:	f000 80a2 	beq.w	800a15e <_vfiprintf_r+0x20e>
 800a01a:	2300      	movs	r3, #0
 800a01c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a020:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a024:	f10a 0a01 	add.w	sl, sl, #1
 800a028:	9304      	str	r3, [sp, #16]
 800a02a:	9307      	str	r3, [sp, #28]
 800a02c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a030:	931a      	str	r3, [sp, #104]	; 0x68
 800a032:	4654      	mov	r4, sl
 800a034:	2205      	movs	r2, #5
 800a036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a03a:	4858      	ldr	r0, [pc, #352]	; (800a19c <_vfiprintf_r+0x24c>)
 800a03c:	f7f6 f8d8 	bl	80001f0 <memchr>
 800a040:	9a04      	ldr	r2, [sp, #16]
 800a042:	b9d8      	cbnz	r0, 800a07c <_vfiprintf_r+0x12c>
 800a044:	06d1      	lsls	r1, r2, #27
 800a046:	bf44      	itt	mi
 800a048:	2320      	movmi	r3, #32
 800a04a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a04e:	0713      	lsls	r3, r2, #28
 800a050:	bf44      	itt	mi
 800a052:	232b      	movmi	r3, #43	; 0x2b
 800a054:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a058:	f89a 3000 	ldrb.w	r3, [sl]
 800a05c:	2b2a      	cmp	r3, #42	; 0x2a
 800a05e:	d015      	beq.n	800a08c <_vfiprintf_r+0x13c>
 800a060:	9a07      	ldr	r2, [sp, #28]
 800a062:	4654      	mov	r4, sl
 800a064:	2000      	movs	r0, #0
 800a066:	f04f 0c0a 	mov.w	ip, #10
 800a06a:	4621      	mov	r1, r4
 800a06c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a070:	3b30      	subs	r3, #48	; 0x30
 800a072:	2b09      	cmp	r3, #9
 800a074:	d94e      	bls.n	800a114 <_vfiprintf_r+0x1c4>
 800a076:	b1b0      	cbz	r0, 800a0a6 <_vfiprintf_r+0x156>
 800a078:	9207      	str	r2, [sp, #28]
 800a07a:	e014      	b.n	800a0a6 <_vfiprintf_r+0x156>
 800a07c:	eba0 0308 	sub.w	r3, r0, r8
 800a080:	fa09 f303 	lsl.w	r3, r9, r3
 800a084:	4313      	orrs	r3, r2
 800a086:	9304      	str	r3, [sp, #16]
 800a088:	46a2      	mov	sl, r4
 800a08a:	e7d2      	b.n	800a032 <_vfiprintf_r+0xe2>
 800a08c:	9b03      	ldr	r3, [sp, #12]
 800a08e:	1d19      	adds	r1, r3, #4
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	9103      	str	r1, [sp, #12]
 800a094:	2b00      	cmp	r3, #0
 800a096:	bfbb      	ittet	lt
 800a098:	425b      	neglt	r3, r3
 800a09a:	f042 0202 	orrlt.w	r2, r2, #2
 800a09e:	9307      	strge	r3, [sp, #28]
 800a0a0:	9307      	strlt	r3, [sp, #28]
 800a0a2:	bfb8      	it	lt
 800a0a4:	9204      	strlt	r2, [sp, #16]
 800a0a6:	7823      	ldrb	r3, [r4, #0]
 800a0a8:	2b2e      	cmp	r3, #46	; 0x2e
 800a0aa:	d10c      	bne.n	800a0c6 <_vfiprintf_r+0x176>
 800a0ac:	7863      	ldrb	r3, [r4, #1]
 800a0ae:	2b2a      	cmp	r3, #42	; 0x2a
 800a0b0:	d135      	bne.n	800a11e <_vfiprintf_r+0x1ce>
 800a0b2:	9b03      	ldr	r3, [sp, #12]
 800a0b4:	1d1a      	adds	r2, r3, #4
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	9203      	str	r2, [sp, #12]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	bfb8      	it	lt
 800a0be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a0c2:	3402      	adds	r4, #2
 800a0c4:	9305      	str	r3, [sp, #20]
 800a0c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a1ac <_vfiprintf_r+0x25c>
 800a0ca:	7821      	ldrb	r1, [r4, #0]
 800a0cc:	2203      	movs	r2, #3
 800a0ce:	4650      	mov	r0, sl
 800a0d0:	f7f6 f88e 	bl	80001f0 <memchr>
 800a0d4:	b140      	cbz	r0, 800a0e8 <_vfiprintf_r+0x198>
 800a0d6:	2340      	movs	r3, #64	; 0x40
 800a0d8:	eba0 000a 	sub.w	r0, r0, sl
 800a0dc:	fa03 f000 	lsl.w	r0, r3, r0
 800a0e0:	9b04      	ldr	r3, [sp, #16]
 800a0e2:	4303      	orrs	r3, r0
 800a0e4:	3401      	adds	r4, #1
 800a0e6:	9304      	str	r3, [sp, #16]
 800a0e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ec:	482c      	ldr	r0, [pc, #176]	; (800a1a0 <_vfiprintf_r+0x250>)
 800a0ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0f2:	2206      	movs	r2, #6
 800a0f4:	f7f6 f87c 	bl	80001f0 <memchr>
 800a0f8:	2800      	cmp	r0, #0
 800a0fa:	d03f      	beq.n	800a17c <_vfiprintf_r+0x22c>
 800a0fc:	4b29      	ldr	r3, [pc, #164]	; (800a1a4 <_vfiprintf_r+0x254>)
 800a0fe:	bb1b      	cbnz	r3, 800a148 <_vfiprintf_r+0x1f8>
 800a100:	9b03      	ldr	r3, [sp, #12]
 800a102:	3307      	adds	r3, #7
 800a104:	f023 0307 	bic.w	r3, r3, #7
 800a108:	3308      	adds	r3, #8
 800a10a:	9303      	str	r3, [sp, #12]
 800a10c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a10e:	443b      	add	r3, r7
 800a110:	9309      	str	r3, [sp, #36]	; 0x24
 800a112:	e767      	b.n	8009fe4 <_vfiprintf_r+0x94>
 800a114:	fb0c 3202 	mla	r2, ip, r2, r3
 800a118:	460c      	mov	r4, r1
 800a11a:	2001      	movs	r0, #1
 800a11c:	e7a5      	b.n	800a06a <_vfiprintf_r+0x11a>
 800a11e:	2300      	movs	r3, #0
 800a120:	3401      	adds	r4, #1
 800a122:	9305      	str	r3, [sp, #20]
 800a124:	4619      	mov	r1, r3
 800a126:	f04f 0c0a 	mov.w	ip, #10
 800a12a:	4620      	mov	r0, r4
 800a12c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a130:	3a30      	subs	r2, #48	; 0x30
 800a132:	2a09      	cmp	r2, #9
 800a134:	d903      	bls.n	800a13e <_vfiprintf_r+0x1ee>
 800a136:	2b00      	cmp	r3, #0
 800a138:	d0c5      	beq.n	800a0c6 <_vfiprintf_r+0x176>
 800a13a:	9105      	str	r1, [sp, #20]
 800a13c:	e7c3      	b.n	800a0c6 <_vfiprintf_r+0x176>
 800a13e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a142:	4604      	mov	r4, r0
 800a144:	2301      	movs	r3, #1
 800a146:	e7f0      	b.n	800a12a <_vfiprintf_r+0x1da>
 800a148:	ab03      	add	r3, sp, #12
 800a14a:	9300      	str	r3, [sp, #0]
 800a14c:	462a      	mov	r2, r5
 800a14e:	4b16      	ldr	r3, [pc, #88]	; (800a1a8 <_vfiprintf_r+0x258>)
 800a150:	a904      	add	r1, sp, #16
 800a152:	4630      	mov	r0, r6
 800a154:	f7fc f8d0 	bl	80062f8 <_printf_float>
 800a158:	4607      	mov	r7, r0
 800a15a:	1c78      	adds	r0, r7, #1
 800a15c:	d1d6      	bne.n	800a10c <_vfiprintf_r+0x1bc>
 800a15e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a160:	07d9      	lsls	r1, r3, #31
 800a162:	d405      	bmi.n	800a170 <_vfiprintf_r+0x220>
 800a164:	89ab      	ldrh	r3, [r5, #12]
 800a166:	059a      	lsls	r2, r3, #22
 800a168:	d402      	bmi.n	800a170 <_vfiprintf_r+0x220>
 800a16a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a16c:	f7ff f87c 	bl	8009268 <__retarget_lock_release_recursive>
 800a170:	89ab      	ldrh	r3, [r5, #12]
 800a172:	065b      	lsls	r3, r3, #25
 800a174:	f53f af12 	bmi.w	8009f9c <_vfiprintf_r+0x4c>
 800a178:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a17a:	e711      	b.n	8009fa0 <_vfiprintf_r+0x50>
 800a17c:	ab03      	add	r3, sp, #12
 800a17e:	9300      	str	r3, [sp, #0]
 800a180:	462a      	mov	r2, r5
 800a182:	4b09      	ldr	r3, [pc, #36]	; (800a1a8 <_vfiprintf_r+0x258>)
 800a184:	a904      	add	r1, sp, #16
 800a186:	4630      	mov	r0, r6
 800a188:	f7fc fb5a 	bl	8006840 <_printf_i>
 800a18c:	e7e4      	b.n	800a158 <_vfiprintf_r+0x208>
 800a18e:	bf00      	nop
 800a190:	0800ab84 	.word	0x0800ab84
 800a194:	0800aba4 	.word	0x0800aba4
 800a198:	0800ab64 	.word	0x0800ab64
 800a19c:	0800ad9c 	.word	0x0800ad9c
 800a1a0:	0800ada6 	.word	0x0800ada6
 800a1a4:	080062f9 	.word	0x080062f9
 800a1a8:	08009f2b 	.word	0x08009f2b
 800a1ac:	0800ada2 	.word	0x0800ada2

0800a1b0 <nan>:
 800a1b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a1b8 <nan+0x8>
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	00000000 	.word	0x00000000
 800a1bc:	7ff80000 	.word	0x7ff80000

0800a1c0 <__sread>:
 800a1c0:	b510      	push	{r4, lr}
 800a1c2:	460c      	mov	r4, r1
 800a1c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c8:	f000 fadc 	bl	800a784 <_read_r>
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	bfab      	itete	ge
 800a1d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1d2:	89a3      	ldrhlt	r3, [r4, #12]
 800a1d4:	181b      	addge	r3, r3, r0
 800a1d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1da:	bfac      	ite	ge
 800a1dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1de:	81a3      	strhlt	r3, [r4, #12]
 800a1e0:	bd10      	pop	{r4, pc}

0800a1e2 <__swrite>:
 800a1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1e6:	461f      	mov	r7, r3
 800a1e8:	898b      	ldrh	r3, [r1, #12]
 800a1ea:	05db      	lsls	r3, r3, #23
 800a1ec:	4605      	mov	r5, r0
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	4616      	mov	r6, r2
 800a1f2:	d505      	bpl.n	800a200 <__swrite+0x1e>
 800a1f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f000 fa1a 	bl	800a634 <_lseek_r>
 800a200:	89a3      	ldrh	r3, [r4, #12]
 800a202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a206:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a20a:	81a3      	strh	r3, [r4, #12]
 800a20c:	4632      	mov	r2, r6
 800a20e:	463b      	mov	r3, r7
 800a210:	4628      	mov	r0, r5
 800a212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a216:	f000 b88b 	b.w	800a330 <_write_r>

0800a21a <__sseek>:
 800a21a:	b510      	push	{r4, lr}
 800a21c:	460c      	mov	r4, r1
 800a21e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a222:	f000 fa07 	bl	800a634 <_lseek_r>
 800a226:	1c43      	adds	r3, r0, #1
 800a228:	89a3      	ldrh	r3, [r4, #12]
 800a22a:	bf15      	itete	ne
 800a22c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a22e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a232:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a236:	81a3      	strheq	r3, [r4, #12]
 800a238:	bf18      	it	ne
 800a23a:	81a3      	strhne	r3, [r4, #12]
 800a23c:	bd10      	pop	{r4, pc}

0800a23e <__sclose>:
 800a23e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a242:	f000 b913 	b.w	800a46c <_close_r>

0800a246 <strncmp>:
 800a246:	b510      	push	{r4, lr}
 800a248:	b17a      	cbz	r2, 800a26a <strncmp+0x24>
 800a24a:	4603      	mov	r3, r0
 800a24c:	3901      	subs	r1, #1
 800a24e:	1884      	adds	r4, r0, r2
 800a250:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a254:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a258:	4290      	cmp	r0, r2
 800a25a:	d101      	bne.n	800a260 <strncmp+0x1a>
 800a25c:	42a3      	cmp	r3, r4
 800a25e:	d101      	bne.n	800a264 <strncmp+0x1e>
 800a260:	1a80      	subs	r0, r0, r2
 800a262:	bd10      	pop	{r4, pc}
 800a264:	2800      	cmp	r0, #0
 800a266:	d1f3      	bne.n	800a250 <strncmp+0xa>
 800a268:	e7fa      	b.n	800a260 <strncmp+0x1a>
 800a26a:	4610      	mov	r0, r2
 800a26c:	e7f9      	b.n	800a262 <strncmp+0x1c>
	...

0800a270 <__swbuf_r>:
 800a270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a272:	460e      	mov	r6, r1
 800a274:	4614      	mov	r4, r2
 800a276:	4605      	mov	r5, r0
 800a278:	b118      	cbz	r0, 800a282 <__swbuf_r+0x12>
 800a27a:	6983      	ldr	r3, [r0, #24]
 800a27c:	b90b      	cbnz	r3, 800a282 <__swbuf_r+0x12>
 800a27e:	f7fe fbe1 	bl	8008a44 <__sinit>
 800a282:	4b21      	ldr	r3, [pc, #132]	; (800a308 <__swbuf_r+0x98>)
 800a284:	429c      	cmp	r4, r3
 800a286:	d12b      	bne.n	800a2e0 <__swbuf_r+0x70>
 800a288:	686c      	ldr	r4, [r5, #4]
 800a28a:	69a3      	ldr	r3, [r4, #24]
 800a28c:	60a3      	str	r3, [r4, #8]
 800a28e:	89a3      	ldrh	r3, [r4, #12]
 800a290:	071a      	lsls	r2, r3, #28
 800a292:	d52f      	bpl.n	800a2f4 <__swbuf_r+0x84>
 800a294:	6923      	ldr	r3, [r4, #16]
 800a296:	b36b      	cbz	r3, 800a2f4 <__swbuf_r+0x84>
 800a298:	6923      	ldr	r3, [r4, #16]
 800a29a:	6820      	ldr	r0, [r4, #0]
 800a29c:	1ac0      	subs	r0, r0, r3
 800a29e:	6963      	ldr	r3, [r4, #20]
 800a2a0:	b2f6      	uxtb	r6, r6
 800a2a2:	4283      	cmp	r3, r0
 800a2a4:	4637      	mov	r7, r6
 800a2a6:	dc04      	bgt.n	800a2b2 <__swbuf_r+0x42>
 800a2a8:	4621      	mov	r1, r4
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	f000 f974 	bl	800a598 <_fflush_r>
 800a2b0:	bb30      	cbnz	r0, 800a300 <__swbuf_r+0x90>
 800a2b2:	68a3      	ldr	r3, [r4, #8]
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	60a3      	str	r3, [r4, #8]
 800a2b8:	6823      	ldr	r3, [r4, #0]
 800a2ba:	1c5a      	adds	r2, r3, #1
 800a2bc:	6022      	str	r2, [r4, #0]
 800a2be:	701e      	strb	r6, [r3, #0]
 800a2c0:	6963      	ldr	r3, [r4, #20]
 800a2c2:	3001      	adds	r0, #1
 800a2c4:	4283      	cmp	r3, r0
 800a2c6:	d004      	beq.n	800a2d2 <__swbuf_r+0x62>
 800a2c8:	89a3      	ldrh	r3, [r4, #12]
 800a2ca:	07db      	lsls	r3, r3, #31
 800a2cc:	d506      	bpl.n	800a2dc <__swbuf_r+0x6c>
 800a2ce:	2e0a      	cmp	r6, #10
 800a2d0:	d104      	bne.n	800a2dc <__swbuf_r+0x6c>
 800a2d2:	4621      	mov	r1, r4
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	f000 f95f 	bl	800a598 <_fflush_r>
 800a2da:	b988      	cbnz	r0, 800a300 <__swbuf_r+0x90>
 800a2dc:	4638      	mov	r0, r7
 800a2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2e0:	4b0a      	ldr	r3, [pc, #40]	; (800a30c <__swbuf_r+0x9c>)
 800a2e2:	429c      	cmp	r4, r3
 800a2e4:	d101      	bne.n	800a2ea <__swbuf_r+0x7a>
 800a2e6:	68ac      	ldr	r4, [r5, #8]
 800a2e8:	e7cf      	b.n	800a28a <__swbuf_r+0x1a>
 800a2ea:	4b09      	ldr	r3, [pc, #36]	; (800a310 <__swbuf_r+0xa0>)
 800a2ec:	429c      	cmp	r4, r3
 800a2ee:	bf08      	it	eq
 800a2f0:	68ec      	ldreq	r4, [r5, #12]
 800a2f2:	e7ca      	b.n	800a28a <__swbuf_r+0x1a>
 800a2f4:	4621      	mov	r1, r4
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	f000 f82c 	bl	800a354 <__swsetup_r>
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	d0cb      	beq.n	800a298 <__swbuf_r+0x28>
 800a300:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a304:	e7ea      	b.n	800a2dc <__swbuf_r+0x6c>
 800a306:	bf00      	nop
 800a308:	0800ab84 	.word	0x0800ab84
 800a30c:	0800aba4 	.word	0x0800aba4
 800a310:	0800ab64 	.word	0x0800ab64

0800a314 <__ascii_wctomb>:
 800a314:	b149      	cbz	r1, 800a32a <__ascii_wctomb+0x16>
 800a316:	2aff      	cmp	r2, #255	; 0xff
 800a318:	bf85      	ittet	hi
 800a31a:	238a      	movhi	r3, #138	; 0x8a
 800a31c:	6003      	strhi	r3, [r0, #0]
 800a31e:	700a      	strbls	r2, [r1, #0]
 800a320:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a324:	bf98      	it	ls
 800a326:	2001      	movls	r0, #1
 800a328:	4770      	bx	lr
 800a32a:	4608      	mov	r0, r1
 800a32c:	4770      	bx	lr
	...

0800a330 <_write_r>:
 800a330:	b538      	push	{r3, r4, r5, lr}
 800a332:	4d07      	ldr	r5, [pc, #28]	; (800a350 <_write_r+0x20>)
 800a334:	4604      	mov	r4, r0
 800a336:	4608      	mov	r0, r1
 800a338:	4611      	mov	r1, r2
 800a33a:	2200      	movs	r2, #0
 800a33c:	602a      	str	r2, [r5, #0]
 800a33e:	461a      	mov	r2, r3
 800a340:	f7f8 fa5b 	bl	80027fa <_write>
 800a344:	1c43      	adds	r3, r0, #1
 800a346:	d102      	bne.n	800a34e <_write_r+0x1e>
 800a348:	682b      	ldr	r3, [r5, #0]
 800a34a:	b103      	cbz	r3, 800a34e <_write_r+0x1e>
 800a34c:	6023      	str	r3, [r4, #0]
 800a34e:	bd38      	pop	{r3, r4, r5, pc}
 800a350:	20000444 	.word	0x20000444

0800a354 <__swsetup_r>:
 800a354:	4b32      	ldr	r3, [pc, #200]	; (800a420 <__swsetup_r+0xcc>)
 800a356:	b570      	push	{r4, r5, r6, lr}
 800a358:	681d      	ldr	r5, [r3, #0]
 800a35a:	4606      	mov	r6, r0
 800a35c:	460c      	mov	r4, r1
 800a35e:	b125      	cbz	r5, 800a36a <__swsetup_r+0x16>
 800a360:	69ab      	ldr	r3, [r5, #24]
 800a362:	b913      	cbnz	r3, 800a36a <__swsetup_r+0x16>
 800a364:	4628      	mov	r0, r5
 800a366:	f7fe fb6d 	bl	8008a44 <__sinit>
 800a36a:	4b2e      	ldr	r3, [pc, #184]	; (800a424 <__swsetup_r+0xd0>)
 800a36c:	429c      	cmp	r4, r3
 800a36e:	d10f      	bne.n	800a390 <__swsetup_r+0x3c>
 800a370:	686c      	ldr	r4, [r5, #4]
 800a372:	89a3      	ldrh	r3, [r4, #12]
 800a374:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a378:	0719      	lsls	r1, r3, #28
 800a37a:	d42c      	bmi.n	800a3d6 <__swsetup_r+0x82>
 800a37c:	06dd      	lsls	r5, r3, #27
 800a37e:	d411      	bmi.n	800a3a4 <__swsetup_r+0x50>
 800a380:	2309      	movs	r3, #9
 800a382:	6033      	str	r3, [r6, #0]
 800a384:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a388:	81a3      	strh	r3, [r4, #12]
 800a38a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a38e:	e03e      	b.n	800a40e <__swsetup_r+0xba>
 800a390:	4b25      	ldr	r3, [pc, #148]	; (800a428 <__swsetup_r+0xd4>)
 800a392:	429c      	cmp	r4, r3
 800a394:	d101      	bne.n	800a39a <__swsetup_r+0x46>
 800a396:	68ac      	ldr	r4, [r5, #8]
 800a398:	e7eb      	b.n	800a372 <__swsetup_r+0x1e>
 800a39a:	4b24      	ldr	r3, [pc, #144]	; (800a42c <__swsetup_r+0xd8>)
 800a39c:	429c      	cmp	r4, r3
 800a39e:	bf08      	it	eq
 800a3a0:	68ec      	ldreq	r4, [r5, #12]
 800a3a2:	e7e6      	b.n	800a372 <__swsetup_r+0x1e>
 800a3a4:	0758      	lsls	r0, r3, #29
 800a3a6:	d512      	bpl.n	800a3ce <__swsetup_r+0x7a>
 800a3a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3aa:	b141      	cbz	r1, 800a3be <__swsetup_r+0x6a>
 800a3ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3b0:	4299      	cmp	r1, r3
 800a3b2:	d002      	beq.n	800a3ba <__swsetup_r+0x66>
 800a3b4:	4630      	mov	r0, r6
 800a3b6:	f7fb fe1f 	bl	8005ff8 <_free_r>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	6363      	str	r3, [r4, #52]	; 0x34
 800a3be:	89a3      	ldrh	r3, [r4, #12]
 800a3c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3c4:	81a3      	strh	r3, [r4, #12]
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	6063      	str	r3, [r4, #4]
 800a3ca:	6923      	ldr	r3, [r4, #16]
 800a3cc:	6023      	str	r3, [r4, #0]
 800a3ce:	89a3      	ldrh	r3, [r4, #12]
 800a3d0:	f043 0308 	orr.w	r3, r3, #8
 800a3d4:	81a3      	strh	r3, [r4, #12]
 800a3d6:	6923      	ldr	r3, [r4, #16]
 800a3d8:	b94b      	cbnz	r3, 800a3ee <__swsetup_r+0x9a>
 800a3da:	89a3      	ldrh	r3, [r4, #12]
 800a3dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a3e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3e4:	d003      	beq.n	800a3ee <__swsetup_r+0x9a>
 800a3e6:	4621      	mov	r1, r4
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	f000 f95b 	bl	800a6a4 <__smakebuf_r>
 800a3ee:	89a0      	ldrh	r0, [r4, #12]
 800a3f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3f4:	f010 0301 	ands.w	r3, r0, #1
 800a3f8:	d00a      	beq.n	800a410 <__swsetup_r+0xbc>
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	60a3      	str	r3, [r4, #8]
 800a3fe:	6963      	ldr	r3, [r4, #20]
 800a400:	425b      	negs	r3, r3
 800a402:	61a3      	str	r3, [r4, #24]
 800a404:	6923      	ldr	r3, [r4, #16]
 800a406:	b943      	cbnz	r3, 800a41a <__swsetup_r+0xc6>
 800a408:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a40c:	d1ba      	bne.n	800a384 <__swsetup_r+0x30>
 800a40e:	bd70      	pop	{r4, r5, r6, pc}
 800a410:	0781      	lsls	r1, r0, #30
 800a412:	bf58      	it	pl
 800a414:	6963      	ldrpl	r3, [r4, #20]
 800a416:	60a3      	str	r3, [r4, #8]
 800a418:	e7f4      	b.n	800a404 <__swsetup_r+0xb0>
 800a41a:	2000      	movs	r0, #0
 800a41c:	e7f7      	b.n	800a40e <__swsetup_r+0xba>
 800a41e:	bf00      	nop
 800a420:	20000094 	.word	0x20000094
 800a424:	0800ab84 	.word	0x0800ab84
 800a428:	0800aba4 	.word	0x0800aba4
 800a42c:	0800ab64 	.word	0x0800ab64

0800a430 <__assert_func>:
 800a430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a432:	4614      	mov	r4, r2
 800a434:	461a      	mov	r2, r3
 800a436:	4b09      	ldr	r3, [pc, #36]	; (800a45c <__assert_func+0x2c>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4605      	mov	r5, r0
 800a43c:	68d8      	ldr	r0, [r3, #12]
 800a43e:	b14c      	cbz	r4, 800a454 <__assert_func+0x24>
 800a440:	4b07      	ldr	r3, [pc, #28]	; (800a460 <__assert_func+0x30>)
 800a442:	9100      	str	r1, [sp, #0]
 800a444:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a448:	4906      	ldr	r1, [pc, #24]	; (800a464 <__assert_func+0x34>)
 800a44a:	462b      	mov	r3, r5
 800a44c:	f000 f8e0 	bl	800a610 <fiprintf>
 800a450:	f000 f9aa 	bl	800a7a8 <abort>
 800a454:	4b04      	ldr	r3, [pc, #16]	; (800a468 <__assert_func+0x38>)
 800a456:	461c      	mov	r4, r3
 800a458:	e7f3      	b.n	800a442 <__assert_func+0x12>
 800a45a:	bf00      	nop
 800a45c:	20000094 	.word	0x20000094
 800a460:	0800adad 	.word	0x0800adad
 800a464:	0800adba 	.word	0x0800adba
 800a468:	0800ade8 	.word	0x0800ade8

0800a46c <_close_r>:
 800a46c:	b538      	push	{r3, r4, r5, lr}
 800a46e:	4d06      	ldr	r5, [pc, #24]	; (800a488 <_close_r+0x1c>)
 800a470:	2300      	movs	r3, #0
 800a472:	4604      	mov	r4, r0
 800a474:	4608      	mov	r0, r1
 800a476:	602b      	str	r3, [r5, #0]
 800a478:	f7f8 f9db 	bl	8002832 <_close>
 800a47c:	1c43      	adds	r3, r0, #1
 800a47e:	d102      	bne.n	800a486 <_close_r+0x1a>
 800a480:	682b      	ldr	r3, [r5, #0]
 800a482:	b103      	cbz	r3, 800a486 <_close_r+0x1a>
 800a484:	6023      	str	r3, [r4, #0]
 800a486:	bd38      	pop	{r3, r4, r5, pc}
 800a488:	20000444 	.word	0x20000444

0800a48c <__sflush_r>:
 800a48c:	898a      	ldrh	r2, [r1, #12]
 800a48e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a492:	4605      	mov	r5, r0
 800a494:	0710      	lsls	r0, r2, #28
 800a496:	460c      	mov	r4, r1
 800a498:	d458      	bmi.n	800a54c <__sflush_r+0xc0>
 800a49a:	684b      	ldr	r3, [r1, #4]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	dc05      	bgt.n	800a4ac <__sflush_r+0x20>
 800a4a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	dc02      	bgt.n	800a4ac <__sflush_r+0x20>
 800a4a6:	2000      	movs	r0, #0
 800a4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4ae:	2e00      	cmp	r6, #0
 800a4b0:	d0f9      	beq.n	800a4a6 <__sflush_r+0x1a>
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a4b8:	682f      	ldr	r7, [r5, #0]
 800a4ba:	602b      	str	r3, [r5, #0]
 800a4bc:	d032      	beq.n	800a524 <__sflush_r+0x98>
 800a4be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a4c0:	89a3      	ldrh	r3, [r4, #12]
 800a4c2:	075a      	lsls	r2, r3, #29
 800a4c4:	d505      	bpl.n	800a4d2 <__sflush_r+0x46>
 800a4c6:	6863      	ldr	r3, [r4, #4]
 800a4c8:	1ac0      	subs	r0, r0, r3
 800a4ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4cc:	b10b      	cbz	r3, 800a4d2 <__sflush_r+0x46>
 800a4ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4d0:	1ac0      	subs	r0, r0, r3
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4d8:	6a21      	ldr	r1, [r4, #32]
 800a4da:	4628      	mov	r0, r5
 800a4dc:	47b0      	blx	r6
 800a4de:	1c43      	adds	r3, r0, #1
 800a4e0:	89a3      	ldrh	r3, [r4, #12]
 800a4e2:	d106      	bne.n	800a4f2 <__sflush_r+0x66>
 800a4e4:	6829      	ldr	r1, [r5, #0]
 800a4e6:	291d      	cmp	r1, #29
 800a4e8:	d82c      	bhi.n	800a544 <__sflush_r+0xb8>
 800a4ea:	4a2a      	ldr	r2, [pc, #168]	; (800a594 <__sflush_r+0x108>)
 800a4ec:	40ca      	lsrs	r2, r1
 800a4ee:	07d6      	lsls	r6, r2, #31
 800a4f0:	d528      	bpl.n	800a544 <__sflush_r+0xb8>
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	6062      	str	r2, [r4, #4]
 800a4f6:	04d9      	lsls	r1, r3, #19
 800a4f8:	6922      	ldr	r2, [r4, #16]
 800a4fa:	6022      	str	r2, [r4, #0]
 800a4fc:	d504      	bpl.n	800a508 <__sflush_r+0x7c>
 800a4fe:	1c42      	adds	r2, r0, #1
 800a500:	d101      	bne.n	800a506 <__sflush_r+0x7a>
 800a502:	682b      	ldr	r3, [r5, #0]
 800a504:	b903      	cbnz	r3, 800a508 <__sflush_r+0x7c>
 800a506:	6560      	str	r0, [r4, #84]	; 0x54
 800a508:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a50a:	602f      	str	r7, [r5, #0]
 800a50c:	2900      	cmp	r1, #0
 800a50e:	d0ca      	beq.n	800a4a6 <__sflush_r+0x1a>
 800a510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a514:	4299      	cmp	r1, r3
 800a516:	d002      	beq.n	800a51e <__sflush_r+0x92>
 800a518:	4628      	mov	r0, r5
 800a51a:	f7fb fd6d 	bl	8005ff8 <_free_r>
 800a51e:	2000      	movs	r0, #0
 800a520:	6360      	str	r0, [r4, #52]	; 0x34
 800a522:	e7c1      	b.n	800a4a8 <__sflush_r+0x1c>
 800a524:	6a21      	ldr	r1, [r4, #32]
 800a526:	2301      	movs	r3, #1
 800a528:	4628      	mov	r0, r5
 800a52a:	47b0      	blx	r6
 800a52c:	1c41      	adds	r1, r0, #1
 800a52e:	d1c7      	bne.n	800a4c0 <__sflush_r+0x34>
 800a530:	682b      	ldr	r3, [r5, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d0c4      	beq.n	800a4c0 <__sflush_r+0x34>
 800a536:	2b1d      	cmp	r3, #29
 800a538:	d001      	beq.n	800a53e <__sflush_r+0xb2>
 800a53a:	2b16      	cmp	r3, #22
 800a53c:	d101      	bne.n	800a542 <__sflush_r+0xb6>
 800a53e:	602f      	str	r7, [r5, #0]
 800a540:	e7b1      	b.n	800a4a6 <__sflush_r+0x1a>
 800a542:	89a3      	ldrh	r3, [r4, #12]
 800a544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a548:	81a3      	strh	r3, [r4, #12]
 800a54a:	e7ad      	b.n	800a4a8 <__sflush_r+0x1c>
 800a54c:	690f      	ldr	r7, [r1, #16]
 800a54e:	2f00      	cmp	r7, #0
 800a550:	d0a9      	beq.n	800a4a6 <__sflush_r+0x1a>
 800a552:	0793      	lsls	r3, r2, #30
 800a554:	680e      	ldr	r6, [r1, #0]
 800a556:	bf08      	it	eq
 800a558:	694b      	ldreq	r3, [r1, #20]
 800a55a:	600f      	str	r7, [r1, #0]
 800a55c:	bf18      	it	ne
 800a55e:	2300      	movne	r3, #0
 800a560:	eba6 0807 	sub.w	r8, r6, r7
 800a564:	608b      	str	r3, [r1, #8]
 800a566:	f1b8 0f00 	cmp.w	r8, #0
 800a56a:	dd9c      	ble.n	800a4a6 <__sflush_r+0x1a>
 800a56c:	6a21      	ldr	r1, [r4, #32]
 800a56e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a570:	4643      	mov	r3, r8
 800a572:	463a      	mov	r2, r7
 800a574:	4628      	mov	r0, r5
 800a576:	47b0      	blx	r6
 800a578:	2800      	cmp	r0, #0
 800a57a:	dc06      	bgt.n	800a58a <__sflush_r+0xfe>
 800a57c:	89a3      	ldrh	r3, [r4, #12]
 800a57e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a582:	81a3      	strh	r3, [r4, #12]
 800a584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a588:	e78e      	b.n	800a4a8 <__sflush_r+0x1c>
 800a58a:	4407      	add	r7, r0
 800a58c:	eba8 0800 	sub.w	r8, r8, r0
 800a590:	e7e9      	b.n	800a566 <__sflush_r+0xda>
 800a592:	bf00      	nop
 800a594:	20400001 	.word	0x20400001

0800a598 <_fflush_r>:
 800a598:	b538      	push	{r3, r4, r5, lr}
 800a59a:	690b      	ldr	r3, [r1, #16]
 800a59c:	4605      	mov	r5, r0
 800a59e:	460c      	mov	r4, r1
 800a5a0:	b913      	cbnz	r3, 800a5a8 <_fflush_r+0x10>
 800a5a2:	2500      	movs	r5, #0
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	bd38      	pop	{r3, r4, r5, pc}
 800a5a8:	b118      	cbz	r0, 800a5b2 <_fflush_r+0x1a>
 800a5aa:	6983      	ldr	r3, [r0, #24]
 800a5ac:	b90b      	cbnz	r3, 800a5b2 <_fflush_r+0x1a>
 800a5ae:	f7fe fa49 	bl	8008a44 <__sinit>
 800a5b2:	4b14      	ldr	r3, [pc, #80]	; (800a604 <_fflush_r+0x6c>)
 800a5b4:	429c      	cmp	r4, r3
 800a5b6:	d11b      	bne.n	800a5f0 <_fflush_r+0x58>
 800a5b8:	686c      	ldr	r4, [r5, #4]
 800a5ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d0ef      	beq.n	800a5a2 <_fflush_r+0xa>
 800a5c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a5c4:	07d0      	lsls	r0, r2, #31
 800a5c6:	d404      	bmi.n	800a5d2 <_fflush_r+0x3a>
 800a5c8:	0599      	lsls	r1, r3, #22
 800a5ca:	d402      	bmi.n	800a5d2 <_fflush_r+0x3a>
 800a5cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5ce:	f7fe fe4a 	bl	8009266 <__retarget_lock_acquire_recursive>
 800a5d2:	4628      	mov	r0, r5
 800a5d4:	4621      	mov	r1, r4
 800a5d6:	f7ff ff59 	bl	800a48c <__sflush_r>
 800a5da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5dc:	07da      	lsls	r2, r3, #31
 800a5de:	4605      	mov	r5, r0
 800a5e0:	d4e0      	bmi.n	800a5a4 <_fflush_r+0xc>
 800a5e2:	89a3      	ldrh	r3, [r4, #12]
 800a5e4:	059b      	lsls	r3, r3, #22
 800a5e6:	d4dd      	bmi.n	800a5a4 <_fflush_r+0xc>
 800a5e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5ea:	f7fe fe3d 	bl	8009268 <__retarget_lock_release_recursive>
 800a5ee:	e7d9      	b.n	800a5a4 <_fflush_r+0xc>
 800a5f0:	4b05      	ldr	r3, [pc, #20]	; (800a608 <_fflush_r+0x70>)
 800a5f2:	429c      	cmp	r4, r3
 800a5f4:	d101      	bne.n	800a5fa <_fflush_r+0x62>
 800a5f6:	68ac      	ldr	r4, [r5, #8]
 800a5f8:	e7df      	b.n	800a5ba <_fflush_r+0x22>
 800a5fa:	4b04      	ldr	r3, [pc, #16]	; (800a60c <_fflush_r+0x74>)
 800a5fc:	429c      	cmp	r4, r3
 800a5fe:	bf08      	it	eq
 800a600:	68ec      	ldreq	r4, [r5, #12]
 800a602:	e7da      	b.n	800a5ba <_fflush_r+0x22>
 800a604:	0800ab84 	.word	0x0800ab84
 800a608:	0800aba4 	.word	0x0800aba4
 800a60c:	0800ab64 	.word	0x0800ab64

0800a610 <fiprintf>:
 800a610:	b40e      	push	{r1, r2, r3}
 800a612:	b503      	push	{r0, r1, lr}
 800a614:	4601      	mov	r1, r0
 800a616:	ab03      	add	r3, sp, #12
 800a618:	4805      	ldr	r0, [pc, #20]	; (800a630 <fiprintf+0x20>)
 800a61a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a61e:	6800      	ldr	r0, [r0, #0]
 800a620:	9301      	str	r3, [sp, #4]
 800a622:	f7ff fc95 	bl	8009f50 <_vfiprintf_r>
 800a626:	b002      	add	sp, #8
 800a628:	f85d eb04 	ldr.w	lr, [sp], #4
 800a62c:	b003      	add	sp, #12
 800a62e:	4770      	bx	lr
 800a630:	20000094 	.word	0x20000094

0800a634 <_lseek_r>:
 800a634:	b538      	push	{r3, r4, r5, lr}
 800a636:	4d07      	ldr	r5, [pc, #28]	; (800a654 <_lseek_r+0x20>)
 800a638:	4604      	mov	r4, r0
 800a63a:	4608      	mov	r0, r1
 800a63c:	4611      	mov	r1, r2
 800a63e:	2200      	movs	r2, #0
 800a640:	602a      	str	r2, [r5, #0]
 800a642:	461a      	mov	r2, r3
 800a644:	f7f8 f91c 	bl	8002880 <_lseek>
 800a648:	1c43      	adds	r3, r0, #1
 800a64a:	d102      	bne.n	800a652 <_lseek_r+0x1e>
 800a64c:	682b      	ldr	r3, [r5, #0]
 800a64e:	b103      	cbz	r3, 800a652 <_lseek_r+0x1e>
 800a650:	6023      	str	r3, [r4, #0]
 800a652:	bd38      	pop	{r3, r4, r5, pc}
 800a654:	20000444 	.word	0x20000444

0800a658 <__swhatbuf_r>:
 800a658:	b570      	push	{r4, r5, r6, lr}
 800a65a:	460e      	mov	r6, r1
 800a65c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a660:	2900      	cmp	r1, #0
 800a662:	b096      	sub	sp, #88	; 0x58
 800a664:	4614      	mov	r4, r2
 800a666:	461d      	mov	r5, r3
 800a668:	da08      	bge.n	800a67c <__swhatbuf_r+0x24>
 800a66a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a66e:	2200      	movs	r2, #0
 800a670:	602a      	str	r2, [r5, #0]
 800a672:	061a      	lsls	r2, r3, #24
 800a674:	d410      	bmi.n	800a698 <__swhatbuf_r+0x40>
 800a676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a67a:	e00e      	b.n	800a69a <__swhatbuf_r+0x42>
 800a67c:	466a      	mov	r2, sp
 800a67e:	f000 f89b 	bl	800a7b8 <_fstat_r>
 800a682:	2800      	cmp	r0, #0
 800a684:	dbf1      	blt.n	800a66a <__swhatbuf_r+0x12>
 800a686:	9a01      	ldr	r2, [sp, #4]
 800a688:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a68c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a690:	425a      	negs	r2, r3
 800a692:	415a      	adcs	r2, r3
 800a694:	602a      	str	r2, [r5, #0]
 800a696:	e7ee      	b.n	800a676 <__swhatbuf_r+0x1e>
 800a698:	2340      	movs	r3, #64	; 0x40
 800a69a:	2000      	movs	r0, #0
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	b016      	add	sp, #88	; 0x58
 800a6a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a6a4 <__smakebuf_r>:
 800a6a4:	898b      	ldrh	r3, [r1, #12]
 800a6a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6a8:	079d      	lsls	r5, r3, #30
 800a6aa:	4606      	mov	r6, r0
 800a6ac:	460c      	mov	r4, r1
 800a6ae:	d507      	bpl.n	800a6c0 <__smakebuf_r+0x1c>
 800a6b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a6b4:	6023      	str	r3, [r4, #0]
 800a6b6:	6123      	str	r3, [r4, #16]
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	6163      	str	r3, [r4, #20]
 800a6bc:	b002      	add	sp, #8
 800a6be:	bd70      	pop	{r4, r5, r6, pc}
 800a6c0:	ab01      	add	r3, sp, #4
 800a6c2:	466a      	mov	r2, sp
 800a6c4:	f7ff ffc8 	bl	800a658 <__swhatbuf_r>
 800a6c8:	9900      	ldr	r1, [sp, #0]
 800a6ca:	4605      	mov	r5, r0
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	f7fb fcff 	bl	80060d0 <_malloc_r>
 800a6d2:	b948      	cbnz	r0, 800a6e8 <__smakebuf_r+0x44>
 800a6d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6d8:	059a      	lsls	r2, r3, #22
 800a6da:	d4ef      	bmi.n	800a6bc <__smakebuf_r+0x18>
 800a6dc:	f023 0303 	bic.w	r3, r3, #3
 800a6e0:	f043 0302 	orr.w	r3, r3, #2
 800a6e4:	81a3      	strh	r3, [r4, #12]
 800a6e6:	e7e3      	b.n	800a6b0 <__smakebuf_r+0xc>
 800a6e8:	4b0d      	ldr	r3, [pc, #52]	; (800a720 <__smakebuf_r+0x7c>)
 800a6ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800a6ec:	89a3      	ldrh	r3, [r4, #12]
 800a6ee:	6020      	str	r0, [r4, #0]
 800a6f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6f4:	81a3      	strh	r3, [r4, #12]
 800a6f6:	9b00      	ldr	r3, [sp, #0]
 800a6f8:	6163      	str	r3, [r4, #20]
 800a6fa:	9b01      	ldr	r3, [sp, #4]
 800a6fc:	6120      	str	r0, [r4, #16]
 800a6fe:	b15b      	cbz	r3, 800a718 <__smakebuf_r+0x74>
 800a700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a704:	4630      	mov	r0, r6
 800a706:	f000 f869 	bl	800a7dc <_isatty_r>
 800a70a:	b128      	cbz	r0, 800a718 <__smakebuf_r+0x74>
 800a70c:	89a3      	ldrh	r3, [r4, #12]
 800a70e:	f023 0303 	bic.w	r3, r3, #3
 800a712:	f043 0301 	orr.w	r3, r3, #1
 800a716:	81a3      	strh	r3, [r4, #12]
 800a718:	89a0      	ldrh	r0, [r4, #12]
 800a71a:	4305      	orrs	r5, r0
 800a71c:	81a5      	strh	r5, [r4, #12]
 800a71e:	e7cd      	b.n	800a6bc <__smakebuf_r+0x18>
 800a720:	080089dd 	.word	0x080089dd

0800a724 <_realloc_r>:
 800a724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a728:	4680      	mov	r8, r0
 800a72a:	4614      	mov	r4, r2
 800a72c:	460e      	mov	r6, r1
 800a72e:	b921      	cbnz	r1, 800a73a <_realloc_r+0x16>
 800a730:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a734:	4611      	mov	r1, r2
 800a736:	f7fb bccb 	b.w	80060d0 <_malloc_r>
 800a73a:	b92a      	cbnz	r2, 800a748 <_realloc_r+0x24>
 800a73c:	f7fb fc5c 	bl	8005ff8 <_free_r>
 800a740:	4625      	mov	r5, r4
 800a742:	4628      	mov	r0, r5
 800a744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a748:	f000 f858 	bl	800a7fc <_malloc_usable_size_r>
 800a74c:	4284      	cmp	r4, r0
 800a74e:	4607      	mov	r7, r0
 800a750:	d802      	bhi.n	800a758 <_realloc_r+0x34>
 800a752:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a756:	d812      	bhi.n	800a77e <_realloc_r+0x5a>
 800a758:	4621      	mov	r1, r4
 800a75a:	4640      	mov	r0, r8
 800a75c:	f7fb fcb8 	bl	80060d0 <_malloc_r>
 800a760:	4605      	mov	r5, r0
 800a762:	2800      	cmp	r0, #0
 800a764:	d0ed      	beq.n	800a742 <_realloc_r+0x1e>
 800a766:	42bc      	cmp	r4, r7
 800a768:	4622      	mov	r2, r4
 800a76a:	4631      	mov	r1, r6
 800a76c:	bf28      	it	cs
 800a76e:	463a      	movcs	r2, r7
 800a770:	f7fe fd8d 	bl	800928e <memcpy>
 800a774:	4631      	mov	r1, r6
 800a776:	4640      	mov	r0, r8
 800a778:	f7fb fc3e 	bl	8005ff8 <_free_r>
 800a77c:	e7e1      	b.n	800a742 <_realloc_r+0x1e>
 800a77e:	4635      	mov	r5, r6
 800a780:	e7df      	b.n	800a742 <_realloc_r+0x1e>
	...

0800a784 <_read_r>:
 800a784:	b538      	push	{r3, r4, r5, lr}
 800a786:	4d07      	ldr	r5, [pc, #28]	; (800a7a4 <_read_r+0x20>)
 800a788:	4604      	mov	r4, r0
 800a78a:	4608      	mov	r0, r1
 800a78c:	4611      	mov	r1, r2
 800a78e:	2200      	movs	r2, #0
 800a790:	602a      	str	r2, [r5, #0]
 800a792:	461a      	mov	r2, r3
 800a794:	f7f8 f814 	bl	80027c0 <_read>
 800a798:	1c43      	adds	r3, r0, #1
 800a79a:	d102      	bne.n	800a7a2 <_read_r+0x1e>
 800a79c:	682b      	ldr	r3, [r5, #0]
 800a79e:	b103      	cbz	r3, 800a7a2 <_read_r+0x1e>
 800a7a0:	6023      	str	r3, [r4, #0]
 800a7a2:	bd38      	pop	{r3, r4, r5, pc}
 800a7a4:	20000444 	.word	0x20000444

0800a7a8 <abort>:
 800a7a8:	b508      	push	{r3, lr}
 800a7aa:	2006      	movs	r0, #6
 800a7ac:	f000 f856 	bl	800a85c <raise>
 800a7b0:	2001      	movs	r0, #1
 800a7b2:	f7f7 fffb 	bl	80027ac <_exit>
	...

0800a7b8 <_fstat_r>:
 800a7b8:	b538      	push	{r3, r4, r5, lr}
 800a7ba:	4d07      	ldr	r5, [pc, #28]	; (800a7d8 <_fstat_r+0x20>)
 800a7bc:	2300      	movs	r3, #0
 800a7be:	4604      	mov	r4, r0
 800a7c0:	4608      	mov	r0, r1
 800a7c2:	4611      	mov	r1, r2
 800a7c4:	602b      	str	r3, [r5, #0]
 800a7c6:	f7f8 f840 	bl	800284a <_fstat>
 800a7ca:	1c43      	adds	r3, r0, #1
 800a7cc:	d102      	bne.n	800a7d4 <_fstat_r+0x1c>
 800a7ce:	682b      	ldr	r3, [r5, #0]
 800a7d0:	b103      	cbz	r3, 800a7d4 <_fstat_r+0x1c>
 800a7d2:	6023      	str	r3, [r4, #0]
 800a7d4:	bd38      	pop	{r3, r4, r5, pc}
 800a7d6:	bf00      	nop
 800a7d8:	20000444 	.word	0x20000444

0800a7dc <_isatty_r>:
 800a7dc:	b538      	push	{r3, r4, r5, lr}
 800a7de:	4d06      	ldr	r5, [pc, #24]	; (800a7f8 <_isatty_r+0x1c>)
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	4608      	mov	r0, r1
 800a7e6:	602b      	str	r3, [r5, #0]
 800a7e8:	f7f8 f83f 	bl	800286a <_isatty>
 800a7ec:	1c43      	adds	r3, r0, #1
 800a7ee:	d102      	bne.n	800a7f6 <_isatty_r+0x1a>
 800a7f0:	682b      	ldr	r3, [r5, #0]
 800a7f2:	b103      	cbz	r3, 800a7f6 <_isatty_r+0x1a>
 800a7f4:	6023      	str	r3, [r4, #0]
 800a7f6:	bd38      	pop	{r3, r4, r5, pc}
 800a7f8:	20000444 	.word	0x20000444

0800a7fc <_malloc_usable_size_r>:
 800a7fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a800:	1f18      	subs	r0, r3, #4
 800a802:	2b00      	cmp	r3, #0
 800a804:	bfbc      	itt	lt
 800a806:	580b      	ldrlt	r3, [r1, r0]
 800a808:	18c0      	addlt	r0, r0, r3
 800a80a:	4770      	bx	lr

0800a80c <_raise_r>:
 800a80c:	291f      	cmp	r1, #31
 800a80e:	b538      	push	{r3, r4, r5, lr}
 800a810:	4604      	mov	r4, r0
 800a812:	460d      	mov	r5, r1
 800a814:	d904      	bls.n	800a820 <_raise_r+0x14>
 800a816:	2316      	movs	r3, #22
 800a818:	6003      	str	r3, [r0, #0]
 800a81a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a81e:	bd38      	pop	{r3, r4, r5, pc}
 800a820:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a822:	b112      	cbz	r2, 800a82a <_raise_r+0x1e>
 800a824:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a828:	b94b      	cbnz	r3, 800a83e <_raise_r+0x32>
 800a82a:	4620      	mov	r0, r4
 800a82c:	f000 f830 	bl	800a890 <_getpid_r>
 800a830:	462a      	mov	r2, r5
 800a832:	4601      	mov	r1, r0
 800a834:	4620      	mov	r0, r4
 800a836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a83a:	f000 b817 	b.w	800a86c <_kill_r>
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d00a      	beq.n	800a858 <_raise_r+0x4c>
 800a842:	1c59      	adds	r1, r3, #1
 800a844:	d103      	bne.n	800a84e <_raise_r+0x42>
 800a846:	2316      	movs	r3, #22
 800a848:	6003      	str	r3, [r0, #0]
 800a84a:	2001      	movs	r0, #1
 800a84c:	e7e7      	b.n	800a81e <_raise_r+0x12>
 800a84e:	2400      	movs	r4, #0
 800a850:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a854:	4628      	mov	r0, r5
 800a856:	4798      	blx	r3
 800a858:	2000      	movs	r0, #0
 800a85a:	e7e0      	b.n	800a81e <_raise_r+0x12>

0800a85c <raise>:
 800a85c:	4b02      	ldr	r3, [pc, #8]	; (800a868 <raise+0xc>)
 800a85e:	4601      	mov	r1, r0
 800a860:	6818      	ldr	r0, [r3, #0]
 800a862:	f7ff bfd3 	b.w	800a80c <_raise_r>
 800a866:	bf00      	nop
 800a868:	20000094 	.word	0x20000094

0800a86c <_kill_r>:
 800a86c:	b538      	push	{r3, r4, r5, lr}
 800a86e:	4d07      	ldr	r5, [pc, #28]	; (800a88c <_kill_r+0x20>)
 800a870:	2300      	movs	r3, #0
 800a872:	4604      	mov	r4, r0
 800a874:	4608      	mov	r0, r1
 800a876:	4611      	mov	r1, r2
 800a878:	602b      	str	r3, [r5, #0]
 800a87a:	f7f7 ff87 	bl	800278c <_kill>
 800a87e:	1c43      	adds	r3, r0, #1
 800a880:	d102      	bne.n	800a888 <_kill_r+0x1c>
 800a882:	682b      	ldr	r3, [r5, #0]
 800a884:	b103      	cbz	r3, 800a888 <_kill_r+0x1c>
 800a886:	6023      	str	r3, [r4, #0]
 800a888:	bd38      	pop	{r3, r4, r5, pc}
 800a88a:	bf00      	nop
 800a88c:	20000444 	.word	0x20000444

0800a890 <_getpid_r>:
 800a890:	f7f7 bf74 	b.w	800277c <_getpid>

0800a894 <_init>:
 800a894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a896:	bf00      	nop
 800a898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a89a:	bc08      	pop	{r3}
 800a89c:	469e      	mov	lr, r3
 800a89e:	4770      	bx	lr

0800a8a0 <_fini>:
 800a8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a2:	bf00      	nop
 800a8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8a6:	bc08      	pop	{r3}
 800a8a8:	469e      	mov	lr, r3
 800a8aa:	4770      	bx	lr
