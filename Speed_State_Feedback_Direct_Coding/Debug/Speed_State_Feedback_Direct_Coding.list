
Speed_State_Feedback_Direct_Coding.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ab8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08009c58  08009c58  00019c58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a164  0800a164  00020280  2**0
                  CONTENTS
  4 .ARM          00000008  0800a164  0800a164  0001a164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a16c  0800a16c  00020280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a16c  0800a16c  0001a16c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a170  0800a170  0001a170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000280  20000000  0800a174  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000280  0800a3f4  00020280  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  0800a3f4  00020468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dda9  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c2d  00000000  00000000  0002e059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  0002fc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  00030950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001755a  00000000  00000000  00031570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db33  00000000  00000000  00048aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090337  00000000  00000000  000565fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6934  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c9c  00000000  00000000  000e6984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000280 	.word	0x20000280
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009c40 	.word	0x08009c40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000284 	.word	0x20000284
 80001dc:	08009c40 	.word	0x08009c40

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <circularBufferInit>:
	void *head;       // pointer to head
	void *tail;       // pointer to tail
	bool writing;  // signals if the buffer is being written
} circular_buffer;

void circularBufferInit(circular_buffer *cb, size_t capacity, size_t sz) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
	cb->buffer = calloc(capacity, sz);
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	68b8      	ldr	r0, [r7, #8]
 8001018:	f004 f8ca 	bl	80051b0 <calloc>
 800101c:	4603      	mov	r3, r0
 800101e:	461a      	mov	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	601a      	str	r2, [r3, #0]
	if (cb->buffer == NULL)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d102      	bne.n	8001032 <circularBufferInit+0x2a>
		printf("ALLOCATED NULL\n\r");
 800102c:	4811      	ldr	r0, [pc, #68]	; (8001074 <circularBufferInit+0x6c>)
 800102e:	f005 f88b 	bl	8006148 <iprintf>
	// handle error
	cb->buffer_end = (char*) cb->buffer + capacity * sz;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	fb01 f303 	mul.w	r3, r1, r3
 800103e:	441a      	add	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	605a      	str	r2, [r3, #4]
	cb->capacity = capacity;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	609a      	str	r2, [r3, #8]
	cb->count = 0;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
	cb->sz = sz;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	611a      	str	r2, [r3, #16]
	cb->head = cb->buffer;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	615a      	str	r2, [r3, #20]
	cb->tail = cb->buffer;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	619a      	str	r2, [r3, #24]
	cb->writing = false;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2200      	movs	r2, #0
 800106a:	771a      	strb	r2, [r3, #28]

}
 800106c:	bf00      	nop
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	08009c58 	.word	0x08009c58

08001078 <circularBufferPushBack>:
void circularBufferFree(circular_buffer *cb) {
	free(cb->buffer);
	// clear out other fields too, just to be safe
}

void circularBufferPushBack(circular_buffer *cb, const void *item) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
	if (cb->count == cb->capacity) {
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68da      	ldr	r2, [r3, #12]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	429a      	cmp	r2, r3
 800108c:	d102      	bne.n	8001094 <circularBufferPushBack+0x1c>
		printf("ERROR PUSH BACK \n\r");
 800108e:	4815      	ldr	r0, [pc, #84]	; (80010e4 <circularBufferPushBack+0x6c>)
 8001090:	f005 f85a 	bl	8006148 <iprintf>
		// handle error
	}
	cb->writing = true;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2201      	movs	r2, #1
 8001098:	771a      	strb	r2, [r3, #28]
	memmove(cb->head, item, cb->sz);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6958      	ldr	r0, [r3, #20]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	461a      	mov	r2, r3
 80010a4:	6839      	ldr	r1, [r7, #0]
 80010a6:	f004 f8bd 	bl	8005224 <memmove>
	cb->head = (char*) cb->head + cb->sz;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	695a      	ldr	r2, [r3, #20]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	441a      	add	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	615a      	str	r2, [r3, #20]
	if (cb->head == cb->buffer_end)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	695a      	ldr	r2, [r3, #20]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d103      	bne.n	80010cc <circularBufferPushBack+0x54>
		cb->head = cb->buffer;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	615a      	str	r2, [r3, #20]
	cb->count++;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	1c5a      	adds	r2, r3, #1
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60da      	str	r2, [r3, #12]
	cb->writing = false;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	771a      	strb	r2, [r3, #28]
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	08009c6c 	.word	0x08009c6c

080010e8 <circularBufferPopFront>:

void circularBufferPopFront(circular_buffer *cb, void *item) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
	if (cb->count == 0) {
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d102      	bne.n	8001100 <circularBufferPopFront+0x18>
		printf("ERROR PUSH BACK \n\r");
 80010fa:	4815      	ldr	r0, [pc, #84]	; (8001150 <circularBufferPopFront+0x68>)
 80010fc:	f005 f824 	bl	8006148 <iprintf>
		// handle error
	}
	memmove(item, cb->tail, cb->sz);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6999      	ldr	r1, [r3, #24]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	461a      	mov	r2, r3
 800110a:	6838      	ldr	r0, [r7, #0]
 800110c:	f004 f88a 	bl	8005224 <memmove>
	cb->tail = (char*) cb->tail + cb->sz;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	699a      	ldr	r2, [r3, #24]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	441a      	add	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	619a      	str	r2, [r3, #24]
	if (cb->tail == cb->buffer_end)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	699a      	ldr	r2, [r3, #24]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	429a      	cmp	r2, r3
 8001128:	d103      	bne.n	8001132 <circularBufferPopFront+0x4a>
		cb->tail = cb->buffer;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	619a      	str	r2, [r3, #24]
	while ((cb->writing))
 8001132:	bf00      	nop
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7f1b      	ldrb	r3, [r3, #28]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1fb      	bne.n	8001134 <circularBufferPopFront+0x4c>
		;
	cb->count--;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	1e5a      	subs	r2, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60da      	str	r2, [r3, #12]
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	08009c6c 	.word	0x08009c6c

08001154 <_write>:
	uint32_t cycle_begin_delay; // difference between the actual and the expected absolute start time of the cycle
	uint32_t current_timestamp; // current timestamp in millis
} record;

/* BEGIN USART WRITE FUNCTION (used by printf)*/
int _write(int file, char *data, int len) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)) {
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d00a      	beq.n	800117c <_write+0x28>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2b02      	cmp	r3, #2
 800116a:	d007      	beq.n	800117c <_write+0x28>
		errno = EBADF;
 800116c:	f004 f828 	bl	80051c0 <__errno>
 8001170:	4603      	mov	r3, r0
 8001172:	2209      	movs	r2, #9
 8001174:	601a      	str	r2, [r3, #0]
		return -1;
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	e00f      	b.n	800119c <_write+0x48>
	}

	// arbitrary timeout 1000
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t*) data, len, 1000);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	b29a      	uxth	r2, r3
 8001180:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	4807      	ldr	r0, [pc, #28]	; (80011a4 <_write+0x50>)
 8001188:	f003 fc9d 	bl	8004ac6 <HAL_UART_Transmit>
 800118c:	4603      	mov	r3, r0
 800118e:	75fb      	strb	r3, [r7, #23]

	// return # of bytes written - as best we can tell
	return (status == HAL_OK ? len : 0);
 8001190:	7dfb      	ldrb	r3, [r7, #23]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <_write+0x46>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e000      	b.n	800119c <_write+0x48>
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000374 	.word	0x20000374

080011a8 <setPulseFromDutyValue>:

void setPulseFromDutyValue(double dutyVal) {
 80011a8:	b5b0      	push	{r4, r5, r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	ed87 0b00 	vstr	d0, [r7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); // enable the motor driver
 80011b2:	2201      	movs	r2, #1
 80011b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b8:	4877      	ldr	r0, [pc, #476]	; (8001398 <setPulseFromDutyValue+0x1f0>)
 80011ba:	f001 ff01 	bl	8002fc0 <HAL_GPIO_WritePin>

	uint16_t channelToModulate;
	uint16_t channelToStop;

	if (dutyVal > 0) {
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	f04f 0300 	mov.w	r3, #0
 80011c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011ca:	f7ff fcad 	bl	8000b28 <__aeabi_dcmpgt>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d004      	beq.n	80011de <setPulseFromDutyValue+0x36>
		channelToModulate = TIM_CHANNEL_1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	81fb      	strh	r3, [r7, #14]
		channelToStop = TIM_CHANNEL_2;
 80011d8:	2304      	movs	r3, #4
 80011da:	81bb      	strh	r3, [r7, #12]
 80011dc:	e003      	b.n	80011e6 <setPulseFromDutyValue+0x3e>
	} else {
		channelToModulate = TIM_CHANNEL_2;
 80011de:	2304      	movs	r3, #4
 80011e0:	81fb      	strh	r3, [r7, #14]
		channelToStop = TIM_CHANNEL_1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim3, channelToStop, 0);
 80011e6:	89bb      	ldrh	r3, [r7, #12]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d104      	bne.n	80011f6 <setPulseFromDutyValue+0x4e>
 80011ec:	4b6b      	ldr	r3, [pc, #428]	; (800139c <setPulseFromDutyValue+0x1f4>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2200      	movs	r2, #0
 80011f2:	635a      	str	r2, [r3, #52]	; 0x34
 80011f4:	e013      	b.n	800121e <setPulseFromDutyValue+0x76>
 80011f6:	89bb      	ldrh	r3, [r7, #12]
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	d104      	bne.n	8001206 <setPulseFromDutyValue+0x5e>
 80011fc:	4b67      	ldr	r3, [pc, #412]	; (800139c <setPulseFromDutyValue+0x1f4>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	2300      	movs	r3, #0
 8001202:	6393      	str	r3, [r2, #56]	; 0x38
 8001204:	e00b      	b.n	800121e <setPulseFromDutyValue+0x76>
 8001206:	89bb      	ldrh	r3, [r7, #12]
 8001208:	2b08      	cmp	r3, #8
 800120a:	d104      	bne.n	8001216 <setPulseFromDutyValue+0x6e>
 800120c:	4b63      	ldr	r3, [pc, #396]	; (800139c <setPulseFromDutyValue+0x1f4>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	2300      	movs	r3, #0
 8001212:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001214:	e003      	b.n	800121e <setPulseFromDutyValue+0x76>
 8001216:	4b61      	ldr	r3, [pc, #388]	; (800139c <setPulseFromDutyValue+0x1f4>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	2300      	movs	r3, #0
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim3, channelToModulate,
 800121e:	89fb      	ldrh	r3, [r7, #14]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d12b      	bne.n	800127c <setPulseFromDutyValue+0xd4>
 8001224:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001228:	f7ff fc9e 	bl	8000b68 <__aeabi_d2iz>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	bfb8      	it	lt
 8001232:	425b      	neglt	r3, r3
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f97d 	bl	8000534 <__aeabi_i2d>
 800123a:	4604      	mov	r4, r0
 800123c:	460d      	mov	r5, r1
 800123e:	4b57      	ldr	r3, [pc, #348]	; (800139c <setPulseFromDutyValue+0x1f4>)
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f966 	bl	8000514 <__aeabi_ui2d>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4620      	mov	r0, r4
 800124e:	4629      	mov	r1, r5
 8001250:	f7ff f9da 	bl	8000608 <__aeabi_dmul>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f04f 0200 	mov.w	r2, #0
 8001260:	4b4f      	ldr	r3, [pc, #316]	; (80013a0 <setPulseFromDutyValue+0x1f8>)
 8001262:	f7ff fafb 	bl	800085c <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	494c      	ldr	r1, [pc, #304]	; (800139c <setPulseFromDutyValue+0x1f4>)
 800126c:	680c      	ldr	r4, [r1, #0]
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f7ff fca1 	bl	8000bb8 <__aeabi_d2uiz>
 8001276:	4603      	mov	r3, r0
 8001278:	6363      	str	r3, [r4, #52]	; 0x34
			(abs(dutyVal) * ((double )htim3.Init.Period)) / 100); //cast integer value to double to correctly perform division between decimal numbers
}
 800127a:	e088      	b.n	800138e <setPulseFromDutyValue+0x1e6>
	__HAL_TIM_SET_COMPARE(&htim3, channelToModulate,
 800127c:	89fb      	ldrh	r3, [r7, #14]
 800127e:	2b04      	cmp	r3, #4
 8001280:	d12b      	bne.n	80012da <setPulseFromDutyValue+0x132>
 8001282:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001286:	f7ff fc6f 	bl	8000b68 <__aeabi_d2iz>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	bfb8      	it	lt
 8001290:	425b      	neglt	r3, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f94e 	bl	8000534 <__aeabi_i2d>
 8001298:	4604      	mov	r4, r0
 800129a:	460d      	mov	r5, r1
 800129c:	4b3f      	ldr	r3, [pc, #252]	; (800139c <setPulseFromDutyValue+0x1f4>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f937 	bl	8000514 <__aeabi_ui2d>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4620      	mov	r0, r4
 80012ac:	4629      	mov	r1, r5
 80012ae:	f7ff f9ab 	bl	8000608 <__aeabi_dmul>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4610      	mov	r0, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	4b38      	ldr	r3, [pc, #224]	; (80013a0 <setPulseFromDutyValue+0x1f8>)
 80012c0:	f7ff facc 	bl	800085c <__aeabi_ddiv>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4934      	ldr	r1, [pc, #208]	; (800139c <setPulseFromDutyValue+0x1f4>)
 80012ca:	680c      	ldr	r4, [r1, #0]
 80012cc:	4610      	mov	r0, r2
 80012ce:	4619      	mov	r1, r3
 80012d0:	f7ff fc72 	bl	8000bb8 <__aeabi_d2uiz>
 80012d4:	4603      	mov	r3, r0
 80012d6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80012d8:	e059      	b.n	800138e <setPulseFromDutyValue+0x1e6>
	__HAL_TIM_SET_COMPARE(&htim3, channelToModulate,
 80012da:	89fb      	ldrh	r3, [r7, #14]
 80012dc:	2b08      	cmp	r3, #8
 80012de:	d12b      	bne.n	8001338 <setPulseFromDutyValue+0x190>
 80012e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012e4:	f7ff fc40 	bl	8000b68 <__aeabi_d2iz>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	bfb8      	it	lt
 80012ee:	425b      	neglt	r3, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff f91f 	bl	8000534 <__aeabi_i2d>
 80012f6:	4604      	mov	r4, r0
 80012f8:	460d      	mov	r5, r1
 80012fa:	4b28      	ldr	r3, [pc, #160]	; (800139c <setPulseFromDutyValue+0x1f4>)
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f908 	bl	8000514 <__aeabi_ui2d>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4620      	mov	r0, r4
 800130a:	4629      	mov	r1, r5
 800130c:	f7ff f97c 	bl	8000608 <__aeabi_dmul>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <setPulseFromDutyValue+0x1f8>)
 800131e:	f7ff fa9d 	bl	800085c <__aeabi_ddiv>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	491d      	ldr	r1, [pc, #116]	; (800139c <setPulseFromDutyValue+0x1f4>)
 8001328:	680c      	ldr	r4, [r1, #0]
 800132a:	4610      	mov	r0, r2
 800132c:	4619      	mov	r1, r3
 800132e:	f7ff fc43 	bl	8000bb8 <__aeabi_d2uiz>
 8001332:	4603      	mov	r3, r0
 8001334:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 8001336:	e02a      	b.n	800138e <setPulseFromDutyValue+0x1e6>
	__HAL_TIM_SET_COMPARE(&htim3, channelToModulate,
 8001338:	e9d7 0100 	ldrd	r0, r1, [r7]
 800133c:	f7ff fc14 	bl	8000b68 <__aeabi_d2iz>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	bfb8      	it	lt
 8001346:	425b      	neglt	r3, r3
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f8f3 	bl	8000534 <__aeabi_i2d>
 800134e:	4604      	mov	r4, r0
 8001350:	460d      	mov	r5, r1
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <setPulseFromDutyValue+0x1f4>)
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f8dc 	bl	8000514 <__aeabi_ui2d>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4620      	mov	r0, r4
 8001362:	4629      	mov	r1, r5
 8001364:	f7ff f950 	bl	8000608 <__aeabi_dmul>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <setPulseFromDutyValue+0x1f8>)
 8001376:	f7ff fa71 	bl	800085c <__aeabi_ddiv>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4907      	ldr	r1, [pc, #28]	; (800139c <setPulseFromDutyValue+0x1f4>)
 8001380:	680c      	ldr	r4, [r1, #0]
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	f7ff fc17 	bl	8000bb8 <__aeabi_d2uiz>
 800138a:	4603      	mov	r3, r0
 800138c:	6423      	str	r3, [r4, #64]	; 0x40
}
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bdb0      	pop	{r4, r5, r7, pc}
 8001396:	bf00      	nop
 8001398:	40020000 	.word	0x40020000
 800139c:	200002e4 	.word	0x200002e4
 80013a0:	40590000 	.word	0x40590000
 80013a4:	00000000 	.word	0x00000000

080013a8 <getSpeedByDelta>:

double getSpeedByDelta(double ticksDelta, double Ts) {
 80013a8:	b5b0      	push	{r4, r5, r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	ed87 0b02 	vstr	d0, [r7, #8]
 80013b2:	ed87 1b00 	vstr	d1, [r7]
	return ticksDelta * 60 / (3591.84 * Ts);
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <getSpeedByDelta+0x60>)
 80013bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013c0:	f7ff f922 	bl	8000608 <__aeabi_dmul>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4614      	mov	r4, r2
 80013ca:	461d      	mov	r5, r3
 80013cc:	a30c      	add	r3, pc, #48	; (adr r3, 8001400 <getSpeedByDelta+0x58>)
 80013ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013d6:	f7ff f917 	bl	8000608 <__aeabi_dmul>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4620      	mov	r0, r4
 80013e0:	4629      	mov	r1, r5
 80013e2:	f7ff fa3b 	bl	800085c <__aeabi_ddiv>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	ec43 2b17 	vmov	d7, r2, r3
}
 80013ee:	eeb0 0a47 	vmov.f32	s0, s14
 80013f2:	eef0 0a67 	vmov.f32	s1, s15
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bdb0      	pop	{r4, r5, r7, pc}
 80013fc:	f3af 8000 	nop.w
 8001400:	147ae148 	.word	0x147ae148
 8001404:	40ac0fae 	.word	0x40ac0fae
 8001408:	404e0000 	.word	0x404e0000
 800140c:	00000000 	.word	0x00000000

08001410 <getTicksDelta>:

double getTicksDelta(double current_ticks, double last_ticks, double Ts) {
 8001410:	b5b0      	push	{r4, r5, r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
 8001416:	ed87 0b04 	vstr	d0, [r7, #16]
 800141a:	ed87 1b02 	vstr	d1, [r7, #8]
 800141e:	ed87 2b00 	vstr	d2, [r7]
	double delta;

	if (abs(current_ticks - last_ticks) <= ceil(8400 * Ts))
 8001422:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001426:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800142a:	f7fe ff35 	bl	8000298 <__aeabi_dsub>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fb97 	bl	8000b68 <__aeabi_d2iz>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	bfb8      	it	lt
 8001440:	425b      	neglt	r3, r3
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f876 	bl	8000534 <__aeabi_i2d>
 8001448:	4604      	mov	r4, r0
 800144a:	460d      	mov	r5, r1
 800144c:	a33a      	add	r3, pc, #232	; (adr r3, 8001538 <getTicksDelta+0x128>)
 800144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001452:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001456:	f7ff f8d7 	bl	8000608 <__aeabi_dmul>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	ec43 2b17 	vmov	d7, r2, r3
 8001462:	eeb0 0a47 	vmov.f32	s0, s14
 8001466:	eef0 0a67 	vmov.f32	s1, s15
 800146a:	f008 fb65 	bl	8009b38 <ceil>
 800146e:	ec53 2b10 	vmov	r2, r3, d0
 8001472:	4620      	mov	r0, r4
 8001474:	4629      	mov	r1, r5
 8001476:	f7ff fb43 	bl	8000b00 <__aeabi_dcmple>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00a      	beq.n	8001496 <getTicksDelta+0x86>
		delta = current_ticks - last_ticks;
 8001480:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001484:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001488:	f7fe ff06 	bl	8000298 <__aeabi_dsub>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001494:	e041      	b.n	800151a <getTicksDelta+0x10a>
	else {
		if (last_ticks > current_ticks)
 8001496:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800149a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800149e:	f7ff fb43 	bl	8000b28 <__aeabi_dcmpgt>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d01c      	beq.n	80014e2 <getTicksDelta+0xd2>
			delta = current_ticks + pow(2, 16) - 1 - last_ticks;
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	4b20      	ldr	r3, [pc, #128]	; (8001530 <getTicksDelta+0x120>)
 80014ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014b2:	f7fe fef3 	bl	800029c <__adddf3>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <getTicksDelta+0x124>)
 80014c4:	f7fe fee8 	bl	8000298 <__aeabi_dsub>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014d4:	f7fe fee0 	bl	8000298 <__aeabi_dsub>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80014e0:	e01b      	b.n	800151a <getTicksDelta+0x10a>
		else
			delta = current_ticks - pow(2, 16) + 1 - last_ticks;
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <getTicksDelta+0x120>)
 80014e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014ec:	f7fe fed4 	bl	8000298 <__aeabi_dsub>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <getTicksDelta+0x124>)
 80014fe:	f7fe fecd 	bl	800029c <__adddf3>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800150e:	f7fe fec3 	bl	8000298 <__aeabi_dsub>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	e9c7 2306 	strd	r2, r3, [r7, #24]
	}
	return delta;
 800151a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800151e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001522:	eeb0 0a47 	vmov.f32	s0, s14
 8001526:	eef0 0a67 	vmov.f32	s1, s15
 800152a:	3720      	adds	r7, #32
 800152c:	46bd      	mov	sp, r7
 800152e:	bdb0      	pop	{r4, r5, r7, pc}
 8001530:	40f00000 	.word	0x40f00000
 8001534:	3ff00000 	.word	0x3ff00000
 8001538:	00000000 	.word	0x00000000
 800153c:	40c06800 	.word	0x40c06800

08001540 <createMatrix>:
double z = 0;
double z_last = 0;
double error_last = 0;


double** createMatrix(int n, int m) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
	double *values = (double*) calloc(m * n, sizeof(double));
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	fb02 f303 	mul.w	r3, r2, r3
 8001552:	2108      	movs	r1, #8
 8001554:	4618      	mov	r0, r3
 8001556:	f003 fe2b 	bl	80051b0 <calloc>
 800155a:	4603      	mov	r3, r0
 800155c:	613b      	str	r3, [r7, #16]
	double **rows = (double**) malloc(n * sizeof(double*));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4618      	mov	r0, r3
 8001564:	f003 fe56 	bl	8005214 <malloc>
 8001568:	4603      	mov	r3, r0
 800156a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < n; ++i) {
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	e00e      	b.n	8001590 <createMatrix+0x50>
		rows[i] = values + i * m;
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	fb02 f303 	mul.w	r3, r2, r3
 800157a:	00da      	lsls	r2, r3, #3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	68f9      	ldr	r1, [r7, #12]
 8001582:	440b      	add	r3, r1
 8001584:	6939      	ldr	r1, [r7, #16]
 8001586:	440a      	add	r2, r1
 8001588:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < n; ++i) {
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	3301      	adds	r3, #1
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	429a      	cmp	r2, r3
 8001596:	dbec      	blt.n	8001572 <createMatrix+0x32>
	}
	return rows;
 8001598:	68fb      	ldr	r3, [r7, #12]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	0000      	movs	r0, r0
 80015a4:	0000      	movs	r0, r0
	...

080015a8 <initMatricies>:

void initMatricies() {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0

	Ad = createMatrix(Ad_rows, Ad_columns);
 80015ac:	4b7c      	ldr	r3, [pc, #496]	; (80017a0 <initMatricies+0x1f8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a7c      	ldr	r2, [pc, #496]	; (80017a4 <initMatricies+0x1fc>)
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	4611      	mov	r1, r2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ffc2 	bl	8001540 <createMatrix>
 80015bc:	4603      	mov	r3, r0
 80015be:	4a7a      	ldr	r2, [pc, #488]	; (80017a8 <initMatricies+0x200>)
 80015c0:	6013      	str	r3, [r2, #0]
	Ad[0][0] = 0.8645;
 80015c2:	4b79      	ldr	r3, [pc, #484]	; (80017a8 <initMatricies+0x200>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6819      	ldr	r1, [r3, #0]
 80015c8:	a369      	add	r3, pc, #420	; (adr r3, 8001770 <initMatricies+0x1c8>)
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	e9c1 2300 	strd	r2, r3, [r1]
	Ad[0][1] = -0.0565;
 80015d2:	4b75      	ldr	r3, [pc, #468]	; (80017a8 <initMatricies+0x200>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f103 0108 	add.w	r1, r3, #8
 80015dc:	a366      	add	r3, pc, #408	; (adr r3, 8001778 <initMatricies+0x1d0>)
 80015de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e2:	e9c1 2300 	strd	r2, r3, [r1]
	Ad[1][0] = 1.0;
 80015e6:	4b70      	ldr	r3, [pc, #448]	; (80017a8 <initMatricies+0x200>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	3304      	adds	r3, #4
 80015ec:	6819      	ldr	r1, [r3, #0]
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	4b6e      	ldr	r3, [pc, #440]	; (80017ac <initMatricies+0x204>)
 80015f4:	e9c1 2300 	strd	r2, r3, [r1]
	Ad[1][1] = 0.0;
 80015f8:	4b6b      	ldr	r3, [pc, #428]	; (80017a8 <initMatricies+0x200>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	3304      	adds	r3, #4
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f103 0108 	add.w	r1, r3, #8
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	f04f 0300 	mov.w	r3, #0
 800160c:	e9c1 2300 	strd	r2, r3, [r1]

	Bd = createMatrix(Bd_rows, Bd_columns);
 8001610:	4b67      	ldr	r3, [pc, #412]	; (80017b0 <initMatricies+0x208>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a67      	ldr	r2, [pc, #412]	; (80017b4 <initMatricies+0x20c>)
 8001616:	6812      	ldr	r2, [r2, #0]
 8001618:	4611      	mov	r1, r2
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff90 	bl	8001540 <createMatrix>
 8001620:	4603      	mov	r3, r0
 8001622:	4a65      	ldr	r2, [pc, #404]	; (80017b8 <initMatricies+0x210>)
 8001624:	6013      	str	r3, [r2, #0]
	Bd[0][0] = 1.0;
 8001626:	4b64      	ldr	r3, [pc, #400]	; (80017b8 <initMatricies+0x210>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6819      	ldr	r1, [r3, #0]
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	4b5e      	ldr	r3, [pc, #376]	; (80017ac <initMatricies+0x204>)
 8001632:	e9c1 2300 	strd	r2, r3, [r1]
	Bd[1][0] = 0.0;
 8001636:	4b60      	ldr	r3, [pc, #384]	; (80017b8 <initMatricies+0x210>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	3304      	adds	r3, #4
 800163c:	6819      	ldr	r1, [r3, #0]
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	f04f 0300 	mov.w	r3, #0
 8001646:	e9c1 2300 	strd	r2, r3, [r1]

	Cd = createMatrix(Cd_rows, Cd_columns);
 800164a:	4b5c      	ldr	r3, [pc, #368]	; (80017bc <initMatricies+0x214>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a5c      	ldr	r2, [pc, #368]	; (80017c0 <initMatricies+0x218>)
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff73 	bl	8001540 <createMatrix>
 800165a:	4603      	mov	r3, r0
 800165c:	4a59      	ldr	r2, [pc, #356]	; (80017c4 <initMatricies+0x21c>)
 800165e:	6013      	str	r3, [r2, #0]
	Cd[0][0] = 1.4424;
 8001660:	4b58      	ldr	r3, [pc, #352]	; (80017c4 <initMatricies+0x21c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6819      	ldr	r1, [r3, #0]
 8001666:	a346      	add	r3, pc, #280	; (adr r3, 8001780 <initMatricies+0x1d8>)
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	e9c1 2300 	strd	r2, r3, [r1]
	Cd[0][1] = 0.4751;
 8001670:	4b54      	ldr	r3, [pc, #336]	; (80017c4 <initMatricies+0x21c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f103 0108 	add.w	r1, r3, #8
 800167a:	a343      	add	r3, pc, #268	; (adr r3, 8001788 <initMatricies+0x1e0>)
 800167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001680:	e9c1 2300 	strd	r2, r3, [r1]

	L = createMatrix(L_rows, L_columns);
 8001684:	4b50      	ldr	r3, [pc, #320]	; (80017c8 <initMatricies+0x220>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a50      	ldr	r2, [pc, #320]	; (80017cc <initMatricies+0x224>)
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	4611      	mov	r1, r2
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff ff56 	bl	8001540 <createMatrix>
 8001694:	4603      	mov	r3, r0
 8001696:	4a4e      	ldr	r2, [pc, #312]	; (80017d0 <initMatricies+0x228>)
 8001698:	6013      	str	r3, [r2, #0]
	L[0][0] = 0.3789;
 800169a:	4b4d      	ldr	r3, [pc, #308]	; (80017d0 <initMatricies+0x228>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6819      	ldr	r1, [r3, #0]
 80016a0:	a33b      	add	r3, pc, #236	; (adr r3, 8001790 <initMatricies+0x1e8>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	e9c1 2300 	strd	r2, r3, [r1]
	L[1][0] = 0.4549;
 80016aa:	4b49      	ldr	r3, [pc, #292]	; (80017d0 <initMatricies+0x228>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3304      	adds	r3, #4
 80016b0:	6819      	ldr	r1, [r3, #0]
 80016b2:	a339      	add	r3, pc, #228	; (adr r3, 8001798 <initMatricies+0x1f0>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	e9c1 2300 	strd	r2, r3, [r1]

	state_kp1 = createMatrix(state_rows, state_columns);
 80016bc:	4b45      	ldr	r3, [pc, #276]	; (80017d4 <initMatricies+0x22c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a45      	ldr	r2, [pc, #276]	; (80017d8 <initMatricies+0x230>)
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	4611      	mov	r1, r2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff ff3a 	bl	8001540 <createMatrix>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4a43      	ldr	r2, [pc, #268]	; (80017dc <initMatricies+0x234>)
 80016d0:	6013      	str	r3, [r2, #0]
	state_k = createMatrix(state_rows, state_columns);
 80016d2:	4b40      	ldr	r3, [pc, #256]	; (80017d4 <initMatricies+0x22c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a40      	ldr	r2, [pc, #256]	; (80017d8 <initMatricies+0x230>)
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff2f 	bl	8001540 <createMatrix>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4a3e      	ldr	r2, [pc, #248]	; (80017e0 <initMatricies+0x238>)
 80016e6:	6013      	str	r3, [r2, #0]
	y_k_expected = createMatrix(y_k_expected_rows, y_k_expected_columns);
 80016e8:	4b3e      	ldr	r3, [pc, #248]	; (80017e4 <initMatricies+0x23c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a3e      	ldr	r2, [pc, #248]	; (80017e8 <initMatricies+0x240>)
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ff24 	bl	8001540 <createMatrix>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4a3c      	ldr	r2, [pc, #240]	; (80017ec <initMatricies+0x244>)
 80016fc:	6013      	str	r3, [r2, #0]

	u_matrix = createMatrix(u_rows, u_columns);
 80016fe:	4b3c      	ldr	r3, [pc, #240]	; (80017f0 <initMatricies+0x248>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a3c      	ldr	r2, [pc, #240]	; (80017f4 <initMatricies+0x24c>)
 8001704:	6812      	ldr	r2, [r2, #0]
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff19 	bl	8001540 <createMatrix>
 800170e:	4603      	mov	r3, r0
 8001710:	4a39      	ldr	r2, [pc, #228]	; (80017f8 <initMatricies+0x250>)
 8001712:	6013      	str	r3, [r2, #0]
	sum_center = createMatrix(Bd_rows, u_columns);
 8001714:	4b26      	ldr	r3, [pc, #152]	; (80017b0 <initMatricies+0x208>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a36      	ldr	r2, [pc, #216]	; (80017f4 <initMatricies+0x24c>)
 800171a:	6812      	ldr	r2, [r2, #0]
 800171c:	4611      	mov	r1, r2
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ff0e 	bl	8001540 <createMatrix>
 8001724:	4603      	mov	r3, r0
 8001726:	4a35      	ldr	r2, [pc, #212]	; (80017fc <initMatricies+0x254>)
 8001728:	6013      	str	r3, [r2, #0]
	sub_y = createMatrix(y_k_expected_rows, y_k_expected_columns);
 800172a:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <initMatricies+0x23c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a2e      	ldr	r2, [pc, #184]	; (80017e8 <initMatricies+0x240>)
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff03 	bl	8001540 <createMatrix>
 800173a:	4603      	mov	r3, r0
 800173c:	4a30      	ldr	r2, [pc, #192]	; (8001800 <initMatricies+0x258>)
 800173e:	6013      	str	r3, [r2, #0]
	sum_top = createMatrix(L_rows, y_k_expected_columns);
 8001740:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <initMatricies+0x220>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a28      	ldr	r2, [pc, #160]	; (80017e8 <initMatricies+0x240>)
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	4611      	mov	r1, r2
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fef8 	bl	8001540 <createMatrix>
 8001750:	4603      	mov	r3, r0
 8001752:	4a2c      	ldr	r2, [pc, #176]	; (8001804 <initMatricies+0x25c>)
 8001754:	6013      	str	r3, [r2, #0]
	sum_bottom = createMatrix(Ad_rows, state_columns);
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <initMatricies+0x1f8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a1f      	ldr	r2, [pc, #124]	; (80017d8 <initMatricies+0x230>)
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff feed 	bl	8001540 <createMatrix>
 8001766:	4603      	mov	r3, r0
 8001768:	4a27      	ldr	r2, [pc, #156]	; (8001808 <initMatricies+0x260>)
 800176a:	6013      	str	r3, [r2, #0]
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	e76c8b44 	.word	0xe76c8b44
 8001774:	3feba9fb 	.word	0x3feba9fb
 8001778:	6872b021 	.word	0x6872b021
 800177c:	bfaced91 	.word	0xbfaced91
 8001780:	05bc01a3 	.word	0x05bc01a3
 8001784:	3ff71412 	.word	0x3ff71412
 8001788:	d495182b 	.word	0xd495182b
 800178c:	3fde6809 	.word	0x3fde6809
 8001790:	c91d14e4 	.word	0xc91d14e4
 8001794:	3fd83fe5 	.word	0x3fd83fe5
 8001798:	e3bcd35b 	.word	0xe3bcd35b
 800179c:	3fdd1d14 	.word	0x3fdd1d14
 80017a0:	20000050 	.word	0x20000050
 80017a4:	20000054 	.word	0x20000054
 80017a8:	20000408 	.word	0x20000408
 80017ac:	3ff00000 	.word	0x3ff00000
 80017b0:	20000058 	.word	0x20000058
 80017b4:	2000005c 	.word	0x2000005c
 80017b8:	2000040c 	.word	0x2000040c
 80017bc:	20000060 	.word	0x20000060
 80017c0:	20000064 	.word	0x20000064
 80017c4:	20000410 	.word	0x20000410
 80017c8:	20000068 	.word	0x20000068
 80017cc:	2000006c 	.word	0x2000006c
 80017d0:	20000420 	.word	0x20000420
 80017d4:	20000070 	.word	0x20000070
 80017d8:	20000074 	.word	0x20000074
 80017dc:	20000414 	.word	0x20000414
 80017e0:	20000418 	.word	0x20000418
 80017e4:	20000078 	.word	0x20000078
 80017e8:	2000007c 	.word	0x2000007c
 80017ec:	2000041c 	.word	0x2000041c
 80017f0:	20000080 	.word	0x20000080
 80017f4:	20000084 	.word	0x20000084
 80017f8:	20000424 	.word	0x20000424
 80017fc:	20000428 	.word	0x20000428
 8001800:	2000042c 	.word	0x2000042c
 8001804:	20000430 	.word	0x20000430
 8001808:	20000434 	.word	0x20000434

0800180c <multiplyMatricies>:

void multiplyMatricies(double **m1, double **m2, int m1_rows, int m1_columns,
		int m2_rows, int m2_columns, double **m3) {
 800180c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180e:	b089      	sub	sp, #36	; 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
 8001818:	603b      	str	r3, [r7, #0]

	for (int i = 0; i < m1_rows; i++) {
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
 800181e:	e05a      	b.n	80018d6 <multiplyMatricies+0xca>
		for (int j = 0; j < m2_columns; j++) {
 8001820:	2300      	movs	r3, #0
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	e050      	b.n	80018c8 <multiplyMatricies+0xbc>
			m3[i][j] = 0;
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800182c:	4413      	add	r3, r2
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	18d1      	adds	r1, r2, r3
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	e9c1 2300 	strd	r2, r3, [r1]
			for (int k = 0; k < m2_rows; k++) {
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	e038      	b.n	80018ba <multiplyMatricies+0xae>
				m3[i][j] += m1[i][k] * m2[k][j];
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800184e:	4413      	add	r3, r2
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	4413      	add	r3, r2
 8001858:	e9d3 4500 	ldrd	r4, r5, [r3]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	4413      	add	r3, r2
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4413      	add	r3, r2
 800186c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	4413      	add	r3, r2
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4413      	add	r3, r2
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7fe fec0 	bl	8000608 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001896:	4413      	add	r3, r2
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	18d6      	adds	r6, r2, r3
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4620      	mov	r0, r4
 80018a6:	4629      	mov	r1, r5
 80018a8:	f7fe fcf8 	bl	800029c <__adddf3>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	e9c6 2300 	strd	r2, r3, [r6]
			for (int k = 0; k < m2_rows; k++) {
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3301      	adds	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018be:	429a      	cmp	r2, r3
 80018c0:	dbc2      	blt.n	8001848 <multiplyMatricies+0x3c>
		for (int j = 0; j < m2_columns; j++) {
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	3301      	adds	r3, #1
 80018c6:	61bb      	str	r3, [r7, #24]
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018cc:	429a      	cmp	r2, r3
 80018ce:	dbaa      	blt.n	8001826 <multiplyMatricies+0x1a>
	for (int i = 0; i < m1_rows; i++) {
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	3301      	adds	r3, #1
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	429a      	cmp	r2, r3
 80018dc:	dba0      	blt.n	8001820 <multiplyMatricies+0x14>
			}
		}
	}
}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	3724      	adds	r7, #36	; 0x24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018e8 <resetArray>:

void resetArray(double **arr, int n, int m) {
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]

	for (int i = 0; i < n; i++) {
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	e01a      	b.n	8001930 <resetArray+0x48>
	  for( int j = 0; j < m; j++){
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	e010      	b.n	8001922 <resetArray+0x3a>
		  arr[i][j] = 0;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	18d1      	adds	r1, r2, r3
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	e9c1 2300 	strd	r2, r3, [r1]
	  for( int j = 0; j < m; j++){
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	3301      	adds	r3, #1
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	429a      	cmp	r2, r3
 8001928:	dbea      	blt.n	8001900 <resetArray+0x18>
	for (int i = 0; i < n; i++) {
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3301      	adds	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	429a      	cmp	r2, r3
 8001936:	dbe0      	blt.n	80018fa <resetArray+0x12>
	  }
	}
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	371c      	adds	r7, #28
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <sumMatricies>:

/**
 * Return the result in the matrix m1
 */
void sumMatricies(double **m1, double **m2, double rows, double columns) {
 8001946:	b5b0      	push	{r4, r5, r7, lr}
 8001948:	b088      	sub	sp, #32
 800194a:	af00      	add	r7, sp, #0
 800194c:	6178      	str	r0, [r7, #20]
 800194e:	6139      	str	r1, [r7, #16]
 8001950:	ed87 0b02 	vstr	d0, [r7, #8]
 8001954:	ed87 1b00 	vstr	d1, [r7]

	for (int i = 0; i < rows; i++) {
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
 800195c:	e036      	b.n	80019cc <sumMatricies+0x86>
		for (int j = 0; j < columns; j++) {
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	e024      	b.n	80019ae <sumMatricies+0x68>
			m1[i][j] = m1[i][j] + m2[i][j];
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	4413      	add	r3, r2
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4413      	add	r3, r2
 8001974:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4413      	add	r3, r2
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	4413      	add	r3, r2
 8001988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198c:	69fc      	ldr	r4, [r7, #28]
 800198e:	00a4      	lsls	r4, r4, #2
 8001990:	697d      	ldr	r5, [r7, #20]
 8001992:	442c      	add	r4, r5
 8001994:	6825      	ldr	r5, [r4, #0]
 8001996:	69bc      	ldr	r4, [r7, #24]
 8001998:	00e4      	lsls	r4, r4, #3
 800199a:	442c      	add	r4, r5
 800199c:	f7fe fc7e 	bl	800029c <__adddf3>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	e9c4 2300 	strd	r2, r3, [r4]
		for (int j = 0; j < columns; j++) {
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	3301      	adds	r3, #1
 80019ac:	61bb      	str	r3, [r7, #24]
 80019ae:	69b8      	ldr	r0, [r7, #24]
 80019b0:	f7fe fdc0 	bl	8000534 <__aeabi_i2d>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019bc:	f7ff f8b4 	bl	8000b28 <__aeabi_dcmpgt>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1ce      	bne.n	8001964 <sumMatricies+0x1e>
	for (int i = 0; i < rows; i++) {
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3301      	adds	r3, #1
 80019ca:	61fb      	str	r3, [r7, #28]
 80019cc:	69f8      	ldr	r0, [r7, #28]
 80019ce:	f7fe fdb1 	bl	8000534 <__aeabi_i2d>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019da:	f7ff f8a5 	bl	8000b28 <__aeabi_dcmpgt>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1bc      	bne.n	800195e <sumMatricies+0x18>
		}
	}
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	3720      	adds	r7, #32
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

080019f0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80019f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f2:	b097      	sub	sp, #92	; 0x5c
 80019f4:	af06      	add	r7, sp, #24
	/* USER CODE BEGIN 1 */
	/* USER CODE END 1 */
	/* MCU Configuration--------------------------------------------------------*/

	initMatricies();
 80019f6:	f7ff fdd7 	bl	80015a8 <initMatricies>
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80019fa:	f000 ffb5 	bl	8002968 <HAL_Init>

	/* USER CODE BEGIN Init */
	size_t buffer_size = (size_t) ceil(2 * WAITING / (Ts * sampling_prescaler));
 80019fe:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <main+0x12c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fd96 	bl	8000534 <__aeabi_i2d>
 8001a08:	4b45      	ldr	r3, [pc, #276]	; (8001b20 <main+0x130>)
 8001a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0e:	f7fe fdfb 	bl	8000608 <__aeabi_dmul>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	f04f 0000 	mov.w	r0, #0
 8001a1a:	4942      	ldr	r1, [pc, #264]	; (8001b24 <main+0x134>)
 8001a1c:	f7fe ff1e 	bl	800085c <__aeabi_ddiv>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	ec43 2b17 	vmov	d7, r2, r3
 8001a28:	eeb0 0a47 	vmov.f32	s0, s14
 8001a2c:	eef0 0a67 	vmov.f32	s1, s15
 8001a30:	f008 f882 	bl	8009b38 <ceil>
 8001a34:	ec53 2b10 	vmov	r2, r3, d0
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f7ff f8bc 	bl	8000bb8 <__aeabi_d2uiz>
 8001a40:	4603      	mov	r3, r0
 8001a42:	637b      	str	r3, [r7, #52]	; 0x34
	circularBufferInit(&buffer, buffer_size, sizeof(record));
 8001a44:	2228      	movs	r2, #40	; 0x28
 8001a46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a48:	4837      	ldr	r0, [pc, #220]	; (8001b28 <main+0x138>)
 8001a4a:	f7ff fadd 	bl	8001008 <circularBufferInit>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a4e:	f000 f87b 	bl	8001b48 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a52:	f000 fa37 	bl	8001ec4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001a56:	f000 fa0b 	bl	8001e70 <MX_USART2_UART_Init>
	MX_TIM3_Init();
 8001a5a:	f000 f939 	bl	8001cd0 <MX_TIM3_Init>
	MX_TIM1_Init();
 8001a5e:	f000 f8df 	bl	8001c20 <MX_TIM1_Init>
	MX_TIM4_Init();
 8001a62:	f000 f9b7 	bl	8001dd4 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001a66:	2100      	movs	r1, #0
 8001a68:	4830      	ldr	r0, [pc, #192]	; (8001b2c <main+0x13c>)
 8001a6a:	f002 f881 	bl	8003b70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001a6e:	2104      	movs	r1, #4
 8001a70:	482e      	ldr	r0, [pc, #184]	; (8001b2c <main+0x13c>)
 8001a72:	f002 f87d 	bl	8003b70 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim1);
 8001a76:	482e      	ldr	r0, [pc, #184]	; (8001b30 <main+0x140>)
 8001a78:	f001 ff64 	bl	8003944 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 8001a7c:	482d      	ldr	r0, [pc, #180]	; (8001b34 <main+0x144>)
 8001a7e:	f001 ffbb 	bl	80039f8 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	int reference_index = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	63fb      	str	r3, [r7, #60]	; 0x3c
	reference = reference_array[reference_index];
 8001a86:	4a2c      	ldr	r2, [pc, #176]	; (8001b38 <main+0x148>)
 8001a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a92:	492a      	ldr	r1, [pc, #168]	; (8001b3c <main+0x14c>)
 8001a94:	e9c1 2300 	strd	r2, r3, [r1]

	printf("INIT\n\r"); // initialize the Matlab tool for COM data acquiring
 8001a98:	4829      	ldr	r0, [pc, #164]	; (8001b40 <main+0x150>)
 8001a9a:	f004 fb55 	bl	8006148 <iprintf>

	while (1) {
		size_t n_entries_to_send = buffer.count; //number of samples not read yet
 8001a9e:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <main+0x138>)
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	633b      	str	r3, [r7, #48]	; 0x30
		record retrieved; //buffer entry

		for (size_t count = 0; count < n_entries_to_send; count++) {
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001aa8:	e01c      	b.n	8001ae4 <main+0xf4>
			circularBufferPopFront(&buffer, &retrieved); //take entry from the buffer
 8001aaa:	f107 0308 	add.w	r3, r7, #8
 8001aae:	4619      	mov	r1, r3
 8001ab0:	481d      	ldr	r0, [pc, #116]	; (8001b28 <main+0x138>)
 8001ab2:	f7ff fb19 	bl	80010e8 <circularBufferPopFront>
			printf("%lu, %f, %f, %f, %lu\n\r", retrieved.current_timestamp,
 8001ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001abe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ac2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ac6:	6a3e      	ldr	r6, [r7, #32]
 8001ac8:	9604      	str	r6, [sp, #16]
 8001aca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001ace:	e9cd 2300 	strd	r2, r3, [sp]
 8001ad2:	4622      	mov	r2, r4
 8001ad4:	462b      	mov	r3, r5
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	481a      	ldr	r0, [pc, #104]	; (8001b44 <main+0x154>)
 8001ada:	f004 fb35 	bl	8006148 <iprintf>
		for (size_t count = 0; count < n_entries_to_send; count++) {
 8001ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ae4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d3de      	bcc.n	8001aaa <main+0xba>
					retrieved.current_u, retrieved.current_y, retrieved.current_r,
					retrieved.cycle_core_duration); // send values via USART using format: value1, value2, value3, ... valuen \n \r
		}

		reference = reference_array[reference_index];
 8001aec:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <main+0x148>)
 8001aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	4413      	add	r3, r2
 8001af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af8:	4910      	ldr	r1, [pc, #64]	; (8001b3c <main+0x14c>)
 8001afa:	e9c1 2300 	strd	r2, r3, [r1]
		reference_index = (reference_index + 1)%REF_DIM;
 8001afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b00:	3301      	adds	r3, #1
 8001b02:	425a      	negs	r2, r3
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	f002 0207 	and.w	r2, r2, #7
 8001b0c:	bf58      	it	pl
 8001b0e:	4253      	negpl	r3, r2
 8001b10:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_Delay(WAITING * 1000); // takes a time value in ms
 8001b12:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b16:	f000 ff99 	bl	8002a4c <HAL_Delay>
	while (1) {
 8001b1a:	e7c0      	b.n	8001a9e <main+0xae>
 8001b1c:	20000004 	.word	0x20000004
 8001b20:	20000008 	.word	0x20000008
 8001b24:	40100000 	.word	0x40100000
 8001b28:	200003b8 	.word	0x200003b8
 8001b2c:	200002e4 	.word	0x200002e4
 8001b30:	2000029c 	.word	0x2000029c
 8001b34:	2000032c 	.word	0x2000032c
 8001b38:	20000010 	.word	0x20000010
 8001b3c:	200003f8 	.word	0x200003f8
 8001b40:	08009c80 	.word	0x08009c80
 8001b44:	08009c88 	.word	0x08009c88

08001b48 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b094      	sub	sp, #80	; 0x50
 8001b4c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001b4e:	f107 0320 	add.w	r3, r7, #32
 8001b52:	2230      	movs	r2, #48	; 0x30
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f003 fb7e 	bl	8005258 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <SystemClock_Config+0xd0>)
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	4a28      	ldr	r2, [pc, #160]	; (8001c18 <SystemClock_Config+0xd0>)
 8001b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7c:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <SystemClock_Config+0xd0>)
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b88:	2300      	movs	r3, #0
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	4b23      	ldr	r3, [pc, #140]	; (8001c1c <SystemClock_Config+0xd4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b94:	4a21      	ldr	r2, [pc, #132]	; (8001c1c <SystemClock_Config+0xd4>)
 8001b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <SystemClock_Config+0xd4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bac:	2301      	movs	r3, #1
 8001bae:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bb0:	2310      	movs	r3, #16
 8001bb2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001bbc:	2310      	movs	r3, #16
 8001bbe:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001bc0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001bc4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bca:	2304      	movs	r3, #4
 8001bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001bce:	f107 0320 	add.w	r3, r7, #32
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f001 fa0e 	bl	8002ff4 <HAL_RCC_OscConfig>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <SystemClock_Config+0x9a>
		Error_Handler();
 8001bde:	f000 fc73 	bl	80024c8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001be2:	230f      	movs	r3, #15
 8001be4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001be6:	2302      	movs	r3, #2
 8001be8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	2102      	movs	r1, #2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f001 fc70 	bl	80034e4 <HAL_RCC_ClockConfig>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <SystemClock_Config+0xc6>
		Error_Handler();
 8001c0a:	f000 fc5d 	bl	80024c8 <Error_Handler>
	}
}
 8001c0e:	bf00      	nop
 8001c10:	3750      	adds	r7, #80	; 0x50
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40007000 	.word	0x40007000

08001c20 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08c      	sub	sp, #48	; 0x30
 8001c24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001c26:	f107 030c 	add.w	r3, r7, #12
 8001c2a:	2224      	movs	r2, #36	; 0x24
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f003 fb12 	bl	8005258 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001c3c:	4b22      	ldr	r3, [pc, #136]	; (8001cc8 <MX_TIM1_Init+0xa8>)
 8001c3e:	4a23      	ldr	r2, [pc, #140]	; (8001ccc <MX_TIM1_Init+0xac>)
 8001c40:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001c42:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <MX_TIM1_Init+0xa8>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c48:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <MX_TIM1_Init+0xa8>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <MX_TIM1_Init+0xa8>)
 8001c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c54:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c56:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <MX_TIM1_Init+0xa8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001c5c:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <MX_TIM1_Init+0xa8>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c62:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <MX_TIM1_Init+0xa8>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c70:	2301      	movs	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c80:	2301      	movs	r3, #1
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c84:	2300      	movs	r3, #0
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	4619      	mov	r1, r3
 8001c92:	480d      	ldr	r0, [pc, #52]	; (8001cc8 <MX_TIM1_Init+0xa8>)
 8001c94:	f002 f81c 	bl	8003cd0 <HAL_TIM_Encoder_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM1_Init+0x82>
		Error_Handler();
 8001c9e:	f000 fc13 	bl	80024c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	4619      	mov	r1, r3
 8001cae:	4806      	ldr	r0, [pc, #24]	; (8001cc8 <MX_TIM1_Init+0xa8>)
 8001cb0:	f002 fe3a 	bl	8004928 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM1_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8001cba:	f000 fc05 	bl	80024c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	3730      	adds	r7, #48	; 0x30
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	2000029c 	.word	0x2000029c
 8001ccc:	40010000 	.word	0x40010000

08001cd0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08e      	sub	sp, #56	; 0x38
 8001cd4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001cd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001ce4:	f107 0320 	add.w	r3, r7, #32
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
 8001cfc:	615a      	str	r2, [r3, #20]
 8001cfe:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001d00:	4b32      	ldr	r3, [pc, #200]	; (8001dcc <MX_TIM3_Init+0xfc>)
 8001d02:	4a33      	ldr	r2, [pc, #204]	; (8001dd0 <MX_TIM3_Init+0x100>)
 8001d04:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 84 - 1;
 8001d06:	4b31      	ldr	r3, [pc, #196]	; (8001dcc <MX_TIM3_Init+0xfc>)
 8001d08:	2253      	movs	r2, #83	; 0x53
 8001d0a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0c:	4b2f      	ldr	r3, [pc, #188]	; (8001dcc <MX_TIM3_Init+0xfc>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 500 - 1;
 8001d12:	4b2e      	ldr	r3, [pc, #184]	; (8001dcc <MX_TIM3_Init+0xfc>)
 8001d14:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001d18:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1a:	4b2c      	ldr	r3, [pc, #176]	; (8001dcc <MX_TIM3_Init+0xfc>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d20:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <MX_TIM3_Init+0xfc>)
 8001d22:	2280      	movs	r2, #128	; 0x80
 8001d24:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001d26:	4829      	ldr	r0, [pc, #164]	; (8001dcc <MX_TIM3_Init+0xfc>)
 8001d28:	f001 fdbc 	bl	80038a4 <HAL_TIM_Base_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM3_Init+0x66>
		Error_Handler();
 8001d32:	f000 fbc9 	bl	80024c8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001d3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d40:	4619      	mov	r1, r3
 8001d42:	4822      	ldr	r0, [pc, #136]	; (8001dcc <MX_TIM3_Init+0xfc>)
 8001d44:	f002 fa34 	bl	80041b0 <HAL_TIM_ConfigClockSource>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM3_Init+0x82>
		Error_Handler();
 8001d4e:	f000 fbbb 	bl	80024c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001d52:	481e      	ldr	r0, [pc, #120]	; (8001dcc <MX_TIM3_Init+0xfc>)
 8001d54:	f001 feb2 	bl	8003abc <HAL_TIM_PWM_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_TIM3_Init+0x92>
		Error_Handler();
 8001d5e:	f000 fbb3 	bl	80024c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d62:	2300      	movs	r3, #0
 8001d64:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001d6a:	f107 0320 	add.w	r3, r7, #32
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4816      	ldr	r0, [pc, #88]	; (8001dcc <MX_TIM3_Init+0xfc>)
 8001d72:	f002 fdd9 	bl	8004928 <HAL_TIMEx_MasterConfigSynchronization>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8001d7c:	f000 fba4 	bl	80024c8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d80:	2360      	movs	r3, #96	; 0x60
 8001d82:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	2200      	movs	r2, #0
 8001d94:	4619      	mov	r1, r3
 8001d96:	480d      	ldr	r0, [pc, #52]	; (8001dcc <MX_TIM3_Init+0xfc>)
 8001d98:	f002 f948 	bl	800402c <HAL_TIM_PWM_ConfigChannel>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8001da2:	f000 fb91 	bl	80024c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	2204      	movs	r2, #4
 8001daa:	4619      	mov	r1, r3
 8001dac:	4807      	ldr	r0, [pc, #28]	; (8001dcc <MX_TIM3_Init+0xfc>)
 8001dae:	f002 f93d 	bl	800402c <HAL_TIM_PWM_ConfigChannel>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM3_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 8001db8:	f000 fb86 	bl	80024c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001dbc:	4803      	ldr	r0, [pc, #12]	; (8001dcc <MX_TIM3_Init+0xfc>)
 8001dbe:	f000 fc37 	bl	8002630 <HAL_TIM_MspPostInit>

}
 8001dc2:	bf00      	nop
 8001dc4:	3738      	adds	r7, #56	; 0x38
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200002e4 	.word	0x200002e4
 8001dd0:	40000400 	.word	0x40000400

08001dd4 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001dda:	f107 0308 	add.w	r3, r7, #8
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001de8:	463b      	mov	r3, r7
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001df0:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <MX_TIM4_Init+0x94>)
 8001df2:	4a1e      	ldr	r2, [pc, #120]	; (8001e6c <MX_TIM4_Init+0x98>)
 8001df4:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 84 - 1;
 8001df6:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <MX_TIM4_Init+0x94>)
 8001df8:	2253      	movs	r2, #83	; 0x53
 8001dfa:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <MX_TIM4_Init+0x94>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 5000 - 1;
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <MX_TIM4_Init+0x94>)
 8001e04:	f241 3287 	movw	r2, #4999	; 0x1387
 8001e08:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0a:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <MX_TIM4_Init+0x94>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e10:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <MX_TIM4_Init+0x94>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001e16:	4814      	ldr	r0, [pc, #80]	; (8001e68 <MX_TIM4_Init+0x94>)
 8001e18:	f001 fd44 	bl	80038a4 <HAL_TIM_Base_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM4_Init+0x52>
		Error_Handler();
 8001e22:	f000 fb51 	bl	80024c8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e2a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001e2c:	f107 0308 	add.w	r3, r7, #8
 8001e30:	4619      	mov	r1, r3
 8001e32:	480d      	ldr	r0, [pc, #52]	; (8001e68 <MX_TIM4_Init+0x94>)
 8001e34:	f002 f9bc 	bl	80041b0 <HAL_TIM_ConfigClockSource>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM4_Init+0x6e>
		Error_Handler();
 8001e3e:	f000 fb43 	bl	80024c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e42:	2300      	movs	r3, #0
 8001e44:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001e4a:	463b      	mov	r3, r7
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4806      	ldr	r0, [pc, #24]	; (8001e68 <MX_TIM4_Init+0x94>)
 8001e50:	f002 fd6a 	bl	8004928 <HAL_TIMEx_MasterConfigSynchronization>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM4_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001e5a:	f000 fb35 	bl	80024c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001e5e:	bf00      	nop
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	2000032c 	.word	0x2000032c
 8001e6c:	40000800 	.word	0x40000800

08001e70 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001e76:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <MX_USART2_UART_Init+0x50>)
 8001e78:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001e7a:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e80:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001e96:	220c      	movs	r2, #12
 8001e98:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001ea6:	4805      	ldr	r0, [pc, #20]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001ea8:	f002 fdc0 	bl	8004a2c <HAL_UART_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001eb2:	f000 fb09 	bl	80024c8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000374 	.word	0x20000374
 8001ec0:	40004400 	.word	0x40004400

08001ec4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
 8001ed8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <MX_GPIO_Init+0x80>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a18      	ldr	r2, [pc, #96]	; (8001f44 <MX_GPIO_Init+0x80>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <MX_GPIO_Init+0x80>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <MX_GPIO_Init+0x80>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a11      	ldr	r2, [pc, #68]	; (8001f44 <MX_GPIO_Init+0x80>)
 8001f00:	f043 0302 	orr.w	r3, r3, #2
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <MX_GPIO_Init+0x80>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f12:	2200      	movs	r2, #0
 8001f14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f18:	480b      	ldr	r0, [pc, #44]	; (8001f48 <MX_GPIO_Init+0x84>)
 8001f1a:	f001 f851 	bl	8002fc0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f22:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f24:	2301      	movs	r3, #1
 8001f26:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f30:	f107 030c 	add.w	r3, r7, #12
 8001f34:	4619      	mov	r1, r3
 8001f36:	4804      	ldr	r0, [pc, #16]	; (8001f48 <MX_GPIO_Init+0x84>)
 8001f38:	f000 febe 	bl	8002cb8 <HAL_GPIO_Init>

}
 8001f3c:	bf00      	nop
 8001f3e:	3720      	adds	r7, #32
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40020000 	.word	0x40020000

08001f4c <luenbergerObserver>:

void luenbergerObserver(double u_last, double y) {
 8001f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f50:	b08b      	sub	sp, #44	; 0x2c
 8001f52:	af04      	add	r7, sp, #16
 8001f54:	ed87 0b02 	vstr	d0, [r7, #8]
 8001f58:	ed87 1b00 	vstr	d1, [r7]

	for(int i=0; i < state_rows; i++){
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	e032      	b.n	8001fc8 <luenbergerObserver+0x7c>
		for(int j =0; j < state_columns; j++){
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	e027      	b.n	8001fb8 <luenbergerObserver+0x6c>
			state_k[i][j] = state_kp1[i][j];
 8001f68:	4b8b      	ldr	r3, [pc, #556]	; (8002198 <luenbergerObserver+0x24c>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	4a88      	ldr	r2, [pc, #544]	; (800219c <luenbergerObserver+0x250>)
 8001f7c:	6811      	ldr	r1, [r2, #0]
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	0092      	lsls	r2, r2, #2
 8001f82:	440a      	add	r2, r1
 8001f84:	6811      	ldr	r1, [r2, #0]
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	00d2      	lsls	r2, r2, #3
 8001f8a:	4411      	add	r1, r2
 8001f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f90:	e9c1 2300 	strd	r2, r3, [r1]
			state_kp1[i][j] = 0;
 8001f94:	4b80      	ldr	r3, [pc, #512]	; (8002198 <luenbergerObserver+0x24c>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	18d1      	adds	r1, r2, r3
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	e9c1 2300 	strd	r2, r3, [r1]
		for(int j =0; j < state_columns; j++){
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	4b79      	ldr	r3, [pc, #484]	; (80021a0 <luenbergerObserver+0x254>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	dbd2      	blt.n	8001f68 <luenbergerObserver+0x1c>
	for(int i=0; i < state_rows; i++){
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	4b76      	ldr	r3, [pc, #472]	; (80021a4 <luenbergerObserver+0x258>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	dbc7      	blt.n	8001f62 <luenbergerObserver+0x16>
		}
	}

	u_matrix[0][0] = u_last;
 8001fd2:	4b75      	ldr	r3, [pc, #468]	; (80021a8 <luenbergerObserver+0x25c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6819      	ldr	r1, [r3, #0]
 8001fd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fdc:	e9c1 2300 	strd	r2, r3, [r1]

	multiplyMatricies(Bd, u_matrix, Bd_rows, Bd_columns, 1, 1, sum_center);
 8001fe0:	4b72      	ldr	r3, [pc, #456]	; (80021ac <luenbergerObserver+0x260>)
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	4b70      	ldr	r3, [pc, #448]	; (80021a8 <luenbergerObserver+0x25c>)
 8001fe6:	6819      	ldr	r1, [r3, #0]
 8001fe8:	4b71      	ldr	r3, [pc, #452]	; (80021b0 <luenbergerObserver+0x264>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b71      	ldr	r3, [pc, #452]	; (80021b4 <luenbergerObserver+0x268>)
 8001fee:	681c      	ldr	r4, [r3, #0]
 8001ff0:	4b71      	ldr	r3, [pc, #452]	; (80021b8 <luenbergerObserver+0x26c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	9302      	str	r3, [sp, #8]
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	4623      	mov	r3, r4
 8002000:	f7ff fc04 	bl	800180c <multiplyMatricies>

	multiplyMatricies(Cd, state_k, Cd_rows, Cd_columns, state_rows, state_columns, y_k_expected);
 8002004:	4b6d      	ldr	r3, [pc, #436]	; (80021bc <luenbergerObserver+0x270>)
 8002006:	6818      	ldr	r0, [r3, #0]
 8002008:	4b64      	ldr	r3, [pc, #400]	; (800219c <luenbergerObserver+0x250>)
 800200a:	681c      	ldr	r4, [r3, #0]
 800200c:	4b6c      	ldr	r3, [pc, #432]	; (80021c0 <luenbergerObserver+0x274>)
 800200e:	681d      	ldr	r5, [r3, #0]
 8002010:	4b6c      	ldr	r3, [pc, #432]	; (80021c4 <luenbergerObserver+0x278>)
 8002012:	681e      	ldr	r6, [r3, #0]
 8002014:	4b63      	ldr	r3, [pc, #396]	; (80021a4 <luenbergerObserver+0x258>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a61      	ldr	r2, [pc, #388]	; (80021a0 <luenbergerObserver+0x254>)
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	496a      	ldr	r1, [pc, #424]	; (80021c8 <luenbergerObserver+0x27c>)
 800201e:	6809      	ldr	r1, [r1, #0]
 8002020:	9102      	str	r1, [sp, #8]
 8002022:	9201      	str	r2, [sp, #4]
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	4633      	mov	r3, r6
 8002028:	462a      	mov	r2, r5
 800202a:	4621      	mov	r1, r4
 800202c:	f7ff fbee 	bl	800180c <multiplyMatricies>
	sub_y[0][0] = y - y_k_expected[0][0];
 8002030:	4b65      	ldr	r3, [pc, #404]	; (80021c8 <luenbergerObserver+0x27c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203a:	4964      	ldr	r1, [pc, #400]	; (80021cc <luenbergerObserver+0x280>)
 800203c:	6809      	ldr	r1, [r1, #0]
 800203e:	680c      	ldr	r4, [r1, #0]
 8002040:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002044:	f7fe f928 	bl	8000298 <__aeabi_dsub>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	e9c4 2300 	strd	r2, r3, [r4]

	multiplyMatricies(L, sub_y, L_rows, L_columns, y_k_expected_rows, y_k_expected_columns, sum_top);
 8002050:	4b5f      	ldr	r3, [pc, #380]	; (80021d0 <luenbergerObserver+0x284>)
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	4b5d      	ldr	r3, [pc, #372]	; (80021cc <luenbergerObserver+0x280>)
 8002056:	681c      	ldr	r4, [r3, #0]
 8002058:	4b5e      	ldr	r3, [pc, #376]	; (80021d4 <luenbergerObserver+0x288>)
 800205a:	681d      	ldr	r5, [r3, #0]
 800205c:	4b5e      	ldr	r3, [pc, #376]	; (80021d8 <luenbergerObserver+0x28c>)
 800205e:	681e      	ldr	r6, [r3, #0]
 8002060:	4b5e      	ldr	r3, [pc, #376]	; (80021dc <luenbergerObserver+0x290>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a5e      	ldr	r2, [pc, #376]	; (80021e0 <luenbergerObserver+0x294>)
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	495e      	ldr	r1, [pc, #376]	; (80021e4 <luenbergerObserver+0x298>)
 800206a:	6809      	ldr	r1, [r1, #0]
 800206c:	9102      	str	r1, [sp, #8]
 800206e:	9201      	str	r2, [sp, #4]
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	4633      	mov	r3, r6
 8002074:	462a      	mov	r2, r5
 8002076:	4621      	mov	r1, r4
 8002078:	f7ff fbc8 	bl	800180c <multiplyMatricies>
	multiplyMatricies(Ad, state_k, Ad_rows, Ad_columns, state_rows, state_columns, sum_bottom);
 800207c:	4b5a      	ldr	r3, [pc, #360]	; (80021e8 <luenbergerObserver+0x29c>)
 800207e:	6818      	ldr	r0, [r3, #0]
 8002080:	4b46      	ldr	r3, [pc, #280]	; (800219c <luenbergerObserver+0x250>)
 8002082:	681c      	ldr	r4, [r3, #0]
 8002084:	4b59      	ldr	r3, [pc, #356]	; (80021ec <luenbergerObserver+0x2a0>)
 8002086:	681d      	ldr	r5, [r3, #0]
 8002088:	4b59      	ldr	r3, [pc, #356]	; (80021f0 <luenbergerObserver+0x2a4>)
 800208a:	681e      	ldr	r6, [r3, #0]
 800208c:	4b45      	ldr	r3, [pc, #276]	; (80021a4 <luenbergerObserver+0x258>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a43      	ldr	r2, [pc, #268]	; (80021a0 <luenbergerObserver+0x254>)
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	4957      	ldr	r1, [pc, #348]	; (80021f4 <luenbergerObserver+0x2a8>)
 8002096:	6809      	ldr	r1, [r1, #0]
 8002098:	9102      	str	r1, [sp, #8]
 800209a:	9201      	str	r2, [sp, #4]
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	4633      	mov	r3, r6
 80020a0:	462a      	mov	r2, r5
 80020a2:	4621      	mov	r1, r4
 80020a4:	f7ff fbb2 	bl	800180c <multiplyMatricies>

	sumMatricies(state_kp1, sum_top, L_rows, y_k_expected_columns);
 80020a8:	4b3b      	ldr	r3, [pc, #236]	; (8002198 <luenbergerObserver+0x24c>)
 80020aa:	681c      	ldr	r4, [r3, #0]
 80020ac:	4b4d      	ldr	r3, [pc, #308]	; (80021e4 <luenbergerObserver+0x298>)
 80020ae:	681d      	ldr	r5, [r3, #0]
 80020b0:	4b48      	ldr	r3, [pc, #288]	; (80021d4 <luenbergerObserver+0x288>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe fa3d 	bl	8000534 <__aeabi_i2d>
 80020ba:	4680      	mov	r8, r0
 80020bc:	4689      	mov	r9, r1
 80020be:	4b48      	ldr	r3, [pc, #288]	; (80021e0 <luenbergerObserver+0x294>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fa36 	bl	8000534 <__aeabi_i2d>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	ec43 2b11 	vmov	d1, r2, r3
 80020d0:	ec49 8b10 	vmov	d0, r8, r9
 80020d4:	4629      	mov	r1, r5
 80020d6:	4620      	mov	r0, r4
 80020d8:	f7ff fc35 	bl	8001946 <sumMatricies>
	sumMatricies(state_kp1, sum_center, L_rows, y_k_expected_columns);
 80020dc:	4b2e      	ldr	r3, [pc, #184]	; (8002198 <luenbergerObserver+0x24c>)
 80020de:	681c      	ldr	r4, [r3, #0]
 80020e0:	4b35      	ldr	r3, [pc, #212]	; (80021b8 <luenbergerObserver+0x26c>)
 80020e2:	681d      	ldr	r5, [r3, #0]
 80020e4:	4b3b      	ldr	r3, [pc, #236]	; (80021d4 <luenbergerObserver+0x288>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe fa23 	bl	8000534 <__aeabi_i2d>
 80020ee:	4680      	mov	r8, r0
 80020f0:	4689      	mov	r9, r1
 80020f2:	4b3b      	ldr	r3, [pc, #236]	; (80021e0 <luenbergerObserver+0x294>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe fa1c 	bl	8000534 <__aeabi_i2d>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	ec43 2b11 	vmov	d1, r2, r3
 8002104:	ec49 8b10 	vmov	d0, r8, r9
 8002108:	4629      	mov	r1, r5
 800210a:	4620      	mov	r0, r4
 800210c:	f7ff fc1b 	bl	8001946 <sumMatricies>
	sumMatricies(state_kp1, sum_bottom, L_rows, y_k_expected_columns);
 8002110:	4b21      	ldr	r3, [pc, #132]	; (8002198 <luenbergerObserver+0x24c>)
 8002112:	681c      	ldr	r4, [r3, #0]
 8002114:	4b37      	ldr	r3, [pc, #220]	; (80021f4 <luenbergerObserver+0x2a8>)
 8002116:	681d      	ldr	r5, [r3, #0]
 8002118:	4b2e      	ldr	r3, [pc, #184]	; (80021d4 <luenbergerObserver+0x288>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fa09 	bl	8000534 <__aeabi_i2d>
 8002122:	4680      	mov	r8, r0
 8002124:	4689      	mov	r9, r1
 8002126:	4b2e      	ldr	r3, [pc, #184]	; (80021e0 <luenbergerObserver+0x294>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fa02 	bl	8000534 <__aeabi_i2d>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	ec43 2b11 	vmov	d1, r2, r3
 8002138:	ec49 8b10 	vmov	d0, r8, r9
 800213c:	4629      	mov	r1, r5
 800213e:	4620      	mov	r0, r4
 8002140:	f7ff fc01 	bl	8001946 <sumMatricies>

	resetArray(sub_y, y_k_expected_rows, y_k_expected_columns);
 8002144:	4b21      	ldr	r3, [pc, #132]	; (80021cc <luenbergerObserver+0x280>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a24      	ldr	r2, [pc, #144]	; (80021dc <luenbergerObserver+0x290>)
 800214a:	6811      	ldr	r1, [r2, #0]
 800214c:	4a24      	ldr	r2, [pc, #144]	; (80021e0 <luenbergerObserver+0x294>)
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff fbc9 	bl	80018e8 <resetArray>
	resetArray(sum_top, L_rows, y_k_expected_columns);
 8002156:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <luenbergerObserver+0x298>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a1e      	ldr	r2, [pc, #120]	; (80021d4 <luenbergerObserver+0x288>)
 800215c:	6811      	ldr	r1, [r2, #0]
 800215e:	4a20      	ldr	r2, [pc, #128]	; (80021e0 <luenbergerObserver+0x294>)
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fbc0 	bl	80018e8 <resetArray>
	resetArray(sum_center, L_rows, y_k_expected_columns);
 8002168:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <luenbergerObserver+0x26c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a19      	ldr	r2, [pc, #100]	; (80021d4 <luenbergerObserver+0x288>)
 800216e:	6811      	ldr	r1, [r2, #0]
 8002170:	4a1b      	ldr	r2, [pc, #108]	; (80021e0 <luenbergerObserver+0x294>)
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fbb7 	bl	80018e8 <resetArray>
	resetArray(sum_bottom, L_rows, y_k_expected_columns);
 800217a:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <luenbergerObserver+0x2a8>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a15      	ldr	r2, [pc, #84]	; (80021d4 <luenbergerObserver+0x288>)
 8002180:	6811      	ldr	r1, [r2, #0]
 8002182:	4a17      	ldr	r2, [pc, #92]	; (80021e0 <luenbergerObserver+0x294>)
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fbae 	bl	80018e8 <resetArray>
}
 800218c:	bf00      	nop
 800218e:	371c      	adds	r7, #28
 8002190:	46bd      	mov	sp, r7
 8002192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002196:	bf00      	nop
 8002198:	20000414 	.word	0x20000414
 800219c:	20000418 	.word	0x20000418
 80021a0:	20000074 	.word	0x20000074
 80021a4:	20000070 	.word	0x20000070
 80021a8:	20000424 	.word	0x20000424
 80021ac:	2000040c 	.word	0x2000040c
 80021b0:	20000058 	.word	0x20000058
 80021b4:	2000005c 	.word	0x2000005c
 80021b8:	20000428 	.word	0x20000428
 80021bc:	20000410 	.word	0x20000410
 80021c0:	20000060 	.word	0x20000060
 80021c4:	20000064 	.word	0x20000064
 80021c8:	2000041c 	.word	0x2000041c
 80021cc:	2000042c 	.word	0x2000042c
 80021d0:	20000420 	.word	0x20000420
 80021d4:	20000068 	.word	0x20000068
 80021d8:	2000006c 	.word	0x2000006c
 80021dc:	20000078 	.word	0x20000078
 80021e0:	2000007c 	.word	0x2000007c
 80021e4:	20000430 	.word	0x20000430
 80021e8:	20000408 	.word	0x20000408
 80021ec:	20000050 	.word	0x20000050
 80021f0:	20000054 	.word	0x20000054
 80021f4:	20000434 	.word	0x20000434

080021f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80021f8:	b5b0      	push	{r4, r5, r7, lr}
 80021fa:	b094      	sub	sp, #80	; 0x50
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

	if (htim == &htim4) {
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a99      	ldr	r2, [pc, #612]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8002204:	4293      	cmp	r3, r2
 8002206:	f040 812a 	bne.w	800245e <HAL_TIM_PeriodElapsedCallback+0x266>
		controller_k = controller_k + 1;
 800220a:	4b98      	ldr	r3, [pc, #608]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x274>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	3301      	adds	r3, #1
 8002210:	4a96      	ldr	r2, [pc, #600]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002212:	6013      	str	r3, [r2, #0]

		if (controller_k == 0) {
 8002214:	4b95      	ldr	r3, [pc, #596]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d104      	bne.n	8002226 <HAL_TIM_PeriodElapsedCallback+0x2e>
			tic_control_step = HAL_GetTick();
 800221c:	f000 fc0a 	bl	8002a34 <HAL_GetTick>
 8002220:	4603      	mov	r3, r0
 8002222:	4a93      	ldr	r2, [pc, #588]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002224:	6013      	str	r3, [r2, #0]
		}

		toc_control_step = HAL_GetTick();
 8002226:	f000 fc05 	bl	8002a34 <HAL_GetTick>
 800222a:	4603      	mov	r3, r0
 800222c:	4a91      	ldr	r2, [pc, #580]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800222e:	6013      	str	r3, [r2, #0]

		current_ticks = (double) __HAL_TIM_GET_COUNTER(&htim1); //take current value of ticks counting the encoder edges
 8002230:	4b91      	ldr	r3, [pc, #580]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe f96c 	bl	8000514 <__aeabi_ui2d>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	498e      	ldr	r1, [pc, #568]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002242:	e9c1 2300 	strd	r2, r3, [r1]

		//take the current motor speed
		double speed = getSpeedByDelta(getTicksDelta(current_ticks, last_ticks, Ts), Ts);
 8002246:	4b8d      	ldr	r3, [pc, #564]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002248:	ed93 7b00 	vldr	d7, [r3]
 800224c:	4b8c      	ldr	r3, [pc, #560]	; (8002480 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800224e:	ed93 6b00 	vldr	d6, [r3]
 8002252:	4b8c      	ldr	r3, [pc, #560]	; (8002484 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002254:	ed93 5b00 	vldr	d5, [r3]
 8002258:	eeb0 2a45 	vmov.f32	s4, s10
 800225c:	eef0 2a65 	vmov.f32	s5, s11
 8002260:	eeb0 1a46 	vmov.f32	s2, s12
 8002264:	eef0 1a66 	vmov.f32	s3, s13
 8002268:	eeb0 0a47 	vmov.f32	s0, s14
 800226c:	eef0 0a67 	vmov.f32	s1, s15
 8002270:	f7ff f8ce 	bl	8001410 <getTicksDelta>
 8002274:	eeb0 6a40 	vmov.f32	s12, s0
 8002278:	eef0 6a60 	vmov.f32	s13, s1
 800227c:	4b81      	ldr	r3, [pc, #516]	; (8002484 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800227e:	ed93 7b00 	vldr	d7, [r3]
 8002282:	eeb0 1a47 	vmov.f32	s2, s14
 8002286:	eef0 1a67 	vmov.f32	s3, s15
 800228a:	eeb0 0a46 	vmov.f32	s0, s12
 800228e:	eef0 0a66 	vmov.f32	s1, s13
 8002292:	f7ff f889 	bl	80013a8 <getSpeedByDelta>
 8002296:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48

		// state estimation with Luenberger observer, after this function the state_k is updated
		luenbergerObserver(u, speed);
 800229a:	4b7b      	ldr	r3, [pc, #492]	; (8002488 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800229c:	ed93 7b00 	vldr	d7, [r3]
 80022a0:	ed97 1b12 	vldr	d1, [r7, #72]	; 0x48
 80022a4:	eeb0 0a47 	vmov.f32	s0, s14
 80022a8:	eef0 0a67 	vmov.f32	s1, s15
 80022ac:	f7ff fe4e 	bl	8001f4c <luenbergerObserver>

		// State Feedback --------------------------------------------
		double error = speed - reference;
 80022b0:	4b76      	ldr	r3, [pc, #472]	; (800248c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80022b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80022ba:	f7fd ffed 	bl	8000298 <__aeabi_dsub>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		z = z_last - ki*error_last;
 80022c6:	4b72      	ldr	r3, [pc, #456]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80022c8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80022cc:	4b71      	ldr	r3, [pc, #452]	; (8002494 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80022ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022d2:	4b71      	ldr	r3, [pc, #452]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80022d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d8:	f7fe f996 	bl	8000608 <__aeabi_dmul>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4620      	mov	r0, r4
 80022e2:	4629      	mov	r1, r5
 80022e4:	f7fd ffd8 	bl	8000298 <__aeabi_dsub>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	496b      	ldr	r1, [pc, #428]	; (800249c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80022ee:	e9c1 2300 	strd	r2, r3, [r1]

		double kx = kp_1*state_k[0][0] + kp_2*state_k[1][0];
 80022f2:	4b6b      	ldr	r3, [pc, #428]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022fc:	4b69      	ldr	r3, [pc, #420]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80022fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002302:	f7fe f981 	bl	8000608 <__aeabi_dmul>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4614      	mov	r4, r2
 800230c:	461d      	mov	r5, r3
 800230e:	4b64      	ldr	r3, [pc, #400]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	3304      	adds	r3, #4
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	e9d3 0100 	ldrd	r0, r1, [r3]
 800231a:	4b63      	ldr	r3, [pc, #396]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002320:	f7fe f972 	bl	8000608 <__aeabi_dmul>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4620      	mov	r0, r4
 800232a:	4629      	mov	r1, r5
 800232c:	f7fd ffb6 	bl	800029c <__adddf3>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

		double u = z - kx;
 8002338:	4b58      	ldr	r3, [pc, #352]	; (800249c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800233a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800233e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002342:	f7fd ffa9 	bl	8000298 <__aeabi_dsub>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		setPulseFromDutyValue(u * 100 / 12);
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	4b56      	ldr	r3, [pc, #344]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002354:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002358:	f7fe f956 	bl	8000608 <__aeabi_dmul>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4610      	mov	r0, r2
 8002362:	4619      	mov	r1, r3
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	4b51      	ldr	r3, [pc, #324]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800236a:	f7fe fa77 	bl	800085c <__aeabi_ddiv>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	ec43 2b17 	vmov	d7, r2, r3
 8002376:	eeb0 0a47 	vmov.f32	s0, s14
 800237a:	eef0 0a67 	vmov.f32	s1, s15
 800237e:	f7fe ff13 	bl	80011a8 <setPulseFromDutyValue>

		//------------------------------------------------------------

		error_last = error;
 8002382:	4945      	ldr	r1, [pc, #276]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002384:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002388:	e9c1 2300 	strd	r2, r3, [r1]
		z_last = z;
 800238c:	4b43      	ldr	r3, [pc, #268]	; (800249c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800238e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002392:	493f      	ldr	r1, [pc, #252]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002394:	e9c1 2300 	strd	r2, r3, [r1]

		control_computation_duration = HAL_GetTick() - toc_control_step;
 8002398:	f000 fb4c 	bl	8002a34 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	4b35      	ldr	r3, [pc, #212]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	4a43      	ldr	r2, [pc, #268]	; (80024b4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80023a6:	6013      	str	r3, [r2, #0]
		last_ticks = current_ticks;
 80023a8:	4b34      	ldr	r3, [pc, #208]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80023aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ae:	4934      	ldr	r1, [pc, #208]	; (8002480 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80023b0:	e9c1 2300 	strd	r2, r3, [r1]

		record r;
		r.current_u = u;
 80023b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80023b8:	e9c7 2302 	strd	r2, r3, [r7, #8]
		r.current_y = speed;
 80023bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80023c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		r.current_r = reference;
 80023c4:	4b31      	ldr	r3, [pc, #196]	; (800248c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80023c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
		r.cycle_core_duration = control_computation_duration;
 80023ce:	4b39      	ldr	r3, [pc, #228]	; (80024b4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	623b      	str	r3, [r7, #32]
		r.cycle_begin_delay = toc_control_step - tic_control_step - (controller_k * Ts * 1000);
 80023d4:	4b27      	ldr	r3, [pc, #156]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b25      	ldr	r3, [pc, #148]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe f898 	bl	8000514 <__aeabi_ui2d>
 80023e4:	4604      	mov	r4, r0
 80023e6:	460d      	mov	r5, r1
 80023e8:	4b20      	ldr	r3, [pc, #128]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe f891 	bl	8000514 <__aeabi_ui2d>
 80023f2:	4b24      	ldr	r3, [pc, #144]	; (8002484 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80023f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f8:	f7fe f906 	bl	8000608 <__aeabi_dmul>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800240a:	f7fe f8fd 	bl	8000608 <__aeabi_dmul>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4620      	mov	r0, r4
 8002414:	4629      	mov	r1, r5
 8002416:	f7fd ff3f 	bl	8000298 <__aeabi_dsub>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4610      	mov	r0, r2
 8002420:	4619      	mov	r1, r3
 8002422:	f7fe fbc9 	bl	8000bb8 <__aeabi_d2uiz>
 8002426:	4603      	mov	r3, r0
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
		r.current_timestamp = HAL_GetTick();
 800242a:	f000 fb03 	bl	8002a34 <HAL_GetTick>
 800242e:	4603      	mov	r3, r0
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28

		if (sampling_prescaler_counter == (sampling_prescaler - 1)) {
 8002432:	4b22      	ldr	r3, [pc, #136]	; (80024bc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	1e5a      	subs	r2, r3, #1
 8002438:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d109      	bne.n	8002454 <HAL_TIM_PeriodElapsedCallback+0x25c>
			circularBufferPushBack(&buffer, &r);
 8002440:	f107 0308 	add.w	r3, r7, #8
 8002444:	4619      	mov	r1, r3
 8002446:	481f      	ldr	r0, [pc, #124]	; (80024c4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002448:	f7fe fe16 	bl	8001078 <circularBufferPushBack>
			sampling_prescaler_counter = -1;
 800244c:	4b1c      	ldr	r3, [pc, #112]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800244e:	f04f 32ff 	mov.w	r2, #4294967295
 8002452:	601a      	str	r2, [r3, #0]
		}
		sampling_prescaler_counter++;
 8002454:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	3301      	adds	r3, #1
 800245a:	4a19      	ldr	r2, [pc, #100]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800245c:	6013      	str	r3, [r2, #0]
	}
}
 800245e:	bf00      	nop
 8002460:	3750      	adds	r7, #80	; 0x50
 8002462:	46bd      	mov	sp, r7
 8002464:	bdb0      	pop	{r4, r5, r7, pc}
 8002466:	bf00      	nop
 8002468:	2000032c 	.word	0x2000032c
 800246c:	20000000 	.word	0x20000000
 8002470:	200003e8 	.word	0x200003e8
 8002474:	200003ec 	.word	0x200003ec
 8002478:	2000029c 	.word	0x2000029c
 800247c:	200003e0 	.word	0x200003e0
 8002480:	200003d8 	.word	0x200003d8
 8002484:	20000008 	.word	0x20000008
 8002488:	20000400 	.word	0x20000400
 800248c:	200003f8 	.word	0x200003f8
 8002490:	20000440 	.word	0x20000440
 8002494:	20000098 	.word	0x20000098
 8002498:	20000448 	.word	0x20000448
 800249c:	20000438 	.word	0x20000438
 80024a0:	20000418 	.word	0x20000418
 80024a4:	20000088 	.word	0x20000088
 80024a8:	20000090 	.word	0x20000090
 80024ac:	40590000 	.word	0x40590000
 80024b0:	40280000 	.word	0x40280000
 80024b4:	200003f0 	.word	0x200003f0
 80024b8:	408f4000 	.word	0x408f4000
 80024bc:	20000004 	.word	0x20000004
 80024c0:	200003f4 	.word	0x200003f4
 80024c4:	200003b8 	.word	0x200003b8

080024c8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024cc:	b672      	cpsid	i
}
 80024ce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80024d0:	e7fe      	b.n	80024d0 <Error_Handler+0x8>
	...

080024d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	4b10      	ldr	r3, [pc, #64]	; (8002520 <HAL_MspInit+0x4c>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	4a0f      	ldr	r2, [pc, #60]	; (8002520 <HAL_MspInit+0x4c>)
 80024e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ea:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <HAL_MspInit+0x4c>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f2:	607b      	str	r3, [r7, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	603b      	str	r3, [r7, #0]
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_MspInit+0x4c>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	4a08      	ldr	r2, [pc, #32]	; (8002520 <HAL_MspInit+0x4c>)
 8002500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002504:	6413      	str	r3, [r2, #64]	; 0x40
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_MspInit+0x4c>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800

08002524 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	; 0x28
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 0314 	add.w	r3, r7, #20
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a19      	ldr	r2, [pc, #100]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d12c      	bne.n	80025a0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	4b18      	ldr	r3, [pc, #96]	; (80025ac <HAL_TIM_Encoder_MspInit+0x88>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	4a17      	ldr	r2, [pc, #92]	; (80025ac <HAL_TIM_Encoder_MspInit+0x88>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6453      	str	r3, [r2, #68]	; 0x44
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <HAL_TIM_Encoder_MspInit+0x88>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	4b11      	ldr	r3, [pc, #68]	; (80025ac <HAL_TIM_Encoder_MspInit+0x88>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a10      	ldr	r2, [pc, #64]	; (80025ac <HAL_TIM_Encoder_MspInit+0x88>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <HAL_TIM_Encoder_MspInit+0x88>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800257e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002584:	2302      	movs	r3, #2
 8002586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258c:	2300      	movs	r3, #0
 800258e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002590:	2301      	movs	r3, #1
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002594:	f107 0314 	add.w	r3, r7, #20
 8002598:	4619      	mov	r1, r3
 800259a:	4805      	ldr	r0, [pc, #20]	; (80025b0 <HAL_TIM_Encoder_MspInit+0x8c>)
 800259c:	f000 fb8c 	bl	8002cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80025a0:	bf00      	nop
 80025a2:	3728      	adds	r7, #40	; 0x28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40010000 	.word	0x40010000
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40020000 	.word	0x40020000

080025b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a18      	ldr	r2, [pc, #96]	; (8002624 <HAL_TIM_Base_MspInit+0x70>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d10e      	bne.n	80025e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	4b17      	ldr	r3, [pc, #92]	; (8002628 <HAL_TIM_Base_MspInit+0x74>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	4a16      	ldr	r2, [pc, #88]	; (8002628 <HAL_TIM_Base_MspInit+0x74>)
 80025d0:	f043 0302 	orr.w	r3, r3, #2
 80025d4:	6413      	str	r3, [r2, #64]	; 0x40
 80025d6:	4b14      	ldr	r3, [pc, #80]	; (8002628 <HAL_TIM_Base_MspInit+0x74>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80025e2:	e01a      	b.n	800261a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a10      	ldr	r2, [pc, #64]	; (800262c <HAL_TIM_Base_MspInit+0x78>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d115      	bne.n	800261a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <HAL_TIM_Base_MspInit+0x74>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	4a0c      	ldr	r2, [pc, #48]	; (8002628 <HAL_TIM_Base_MspInit+0x74>)
 80025f8:	f043 0304 	orr.w	r3, r3, #4
 80025fc:	6413      	str	r3, [r2, #64]	; 0x40
 80025fe:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <HAL_TIM_Base_MspInit+0x74>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	2100      	movs	r1, #0
 800260e:	201e      	movs	r0, #30
 8002610:	f000 fb1b 	bl	8002c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002614:	201e      	movs	r0, #30
 8002616:	f000 fb34 	bl	8002c82 <HAL_NVIC_EnableIRQ>
}
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40000400 	.word	0x40000400
 8002628:	40023800 	.word	0x40023800
 800262c:	40000800 	.word	0x40000800

08002630 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 030c 	add.w	r3, r7, #12
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a12      	ldr	r2, [pc, #72]	; (8002698 <HAL_TIM_MspPostInit+0x68>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d11d      	bne.n	800268e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	4b11      	ldr	r3, [pc, #68]	; (800269c <HAL_TIM_MspPostInit+0x6c>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4a10      	ldr	r2, [pc, #64]	; (800269c <HAL_TIM_MspPostInit+0x6c>)
 800265c:	f043 0302 	orr.w	r3, r3, #2
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	4b0e      	ldr	r3, [pc, #56]	; (800269c <HAL_TIM_MspPostInit+0x6c>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800266e:	2330      	movs	r3, #48	; 0x30
 8002670:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002672:	2302      	movs	r3, #2
 8002674:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267a:	2300      	movs	r3, #0
 800267c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800267e:	2302      	movs	r3, #2
 8002680:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002682:	f107 030c 	add.w	r3, r7, #12
 8002686:	4619      	mov	r1, r3
 8002688:	4805      	ldr	r0, [pc, #20]	; (80026a0 <HAL_TIM_MspPostInit+0x70>)
 800268a:	f000 fb15 	bl	8002cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800268e:	bf00      	nop
 8002690:	3720      	adds	r7, #32
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40000400 	.word	0x40000400
 800269c:	40023800 	.word	0x40023800
 80026a0:	40020400 	.word	0x40020400

080026a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	; 0x28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	f107 0314 	add.w	r3, r7, #20
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
 80026ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a19      	ldr	r2, [pc, #100]	; (8002728 <HAL_UART_MspInit+0x84>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d12b      	bne.n	800271e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	4b18      	ldr	r3, [pc, #96]	; (800272c <HAL_UART_MspInit+0x88>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	4a17      	ldr	r2, [pc, #92]	; (800272c <HAL_UART_MspInit+0x88>)
 80026d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d4:	6413      	str	r3, [r2, #64]	; 0x40
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <HAL_UART_MspInit+0x88>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	4b11      	ldr	r3, [pc, #68]	; (800272c <HAL_UART_MspInit+0x88>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	4a10      	ldr	r2, [pc, #64]	; (800272c <HAL_UART_MspInit+0x88>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	6313      	str	r3, [r2, #48]	; 0x30
 80026f2:	4b0e      	ldr	r3, [pc, #56]	; (800272c <HAL_UART_MspInit+0x88>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026fe:	230c      	movs	r3, #12
 8002700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002702:	2302      	movs	r3, #2
 8002704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270a:	2303      	movs	r3, #3
 800270c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800270e:	2307      	movs	r3, #7
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002712:	f107 0314 	add.w	r3, r7, #20
 8002716:	4619      	mov	r1, r3
 8002718:	4805      	ldr	r0, [pc, #20]	; (8002730 <HAL_UART_MspInit+0x8c>)
 800271a:	f000 facd 	bl	8002cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800271e:	bf00      	nop
 8002720:	3728      	adds	r7, #40	; 0x28
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40004400 	.word	0x40004400
 800272c:	40023800 	.word	0x40023800
 8002730:	40020000 	.word	0x40020000

08002734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002738:	e7fe      	b.n	8002738 <NMI_Handler+0x4>

0800273a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800273a:	b480      	push	{r7}
 800273c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800273e:	e7fe      	b.n	800273e <HardFault_Handler+0x4>

08002740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002744:	e7fe      	b.n	8002744 <MemManage_Handler+0x4>

08002746 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002746:	b480      	push	{r7}
 8002748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800274a:	e7fe      	b.n	800274a <BusFault_Handler+0x4>

0800274c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002750:	e7fe      	b.n	8002750 <UsageFault_Handler+0x4>

08002752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002752:	b480      	push	{r7}
 8002754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002780:	f000 f944 	bl	8002a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}

08002788 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800278c:	4802      	ldr	r0, [pc, #8]	; (8002798 <TIM4_IRQHandler+0x10>)
 800278e:	f001 fb45 	bl	8003e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	2000032c 	.word	0x2000032c

0800279c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
	return 1;
 80027a0:	2301      	movs	r3, #1
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <_kill>:

int _kill(int pid, int sig)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027b6:	f002 fd03 	bl	80051c0 <__errno>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2216      	movs	r2, #22
 80027be:	601a      	str	r2, [r3, #0]
	return -1;
 80027c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <_exit>:

void _exit (int status)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027d4:	f04f 31ff 	mov.w	r1, #4294967295
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff ffe7 	bl	80027ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80027de:	e7fe      	b.n	80027de <_exit+0x12>

080027e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	e00a      	b.n	8002808 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027f2:	f3af 8000 	nop.w
 80027f6:	4601      	mov	r1, r0
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	60ba      	str	r2, [r7, #8]
 80027fe:	b2ca      	uxtb	r2, r1
 8002800:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	3301      	adds	r3, #1
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	429a      	cmp	r2, r3
 800280e:	dbf0      	blt.n	80027f2 <_read+0x12>
	}

return len;
 8002810:	687b      	ldr	r3, [r7, #4]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <_close>:
	}
	return len;
}

int _close(int file)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
	return -1;
 8002822:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002842:	605a      	str	r2, [r3, #4]
	return 0;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <_isatty>:

int _isatty(int file)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
	return 1;
 800285a:	2301      	movs	r3, #1
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
	return 0;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
	...

08002884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800288c:	4a14      	ldr	r2, [pc, #80]	; (80028e0 <_sbrk+0x5c>)
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <_sbrk+0x60>)
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002898:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <_sbrk+0x64>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d102      	bne.n	80028a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028a0:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <_sbrk+0x64>)
 80028a2:	4a12      	ldr	r2, [pc, #72]	; (80028ec <_sbrk+0x68>)
 80028a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028a6:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <_sbrk+0x64>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4413      	add	r3, r2
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d207      	bcs.n	80028c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028b4:	f002 fc84 	bl	80051c0 <__errno>
 80028b8:	4603      	mov	r3, r0
 80028ba:	220c      	movs	r2, #12
 80028bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028be:	f04f 33ff 	mov.w	r3, #4294967295
 80028c2:	e009      	b.n	80028d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028c4:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <_sbrk+0x64>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ca:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <_sbrk+0x64>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4413      	add	r3, r2
 80028d2:	4a05      	ldr	r2, [pc, #20]	; (80028e8 <_sbrk+0x64>)
 80028d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028d6:	68fb      	ldr	r3, [r7, #12]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20018000 	.word	0x20018000
 80028e4:	00000400 	.word	0x00000400
 80028e8:	20000450 	.word	0x20000450
 80028ec:	20000468 	.word	0x20000468

080028f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <SystemInit+0x20>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fa:	4a05      	ldr	r2, [pc, #20]	; (8002910 <SystemInit+0x20>)
 80028fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800294c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002918:	480d      	ldr	r0, [pc, #52]	; (8002950 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800291a:	490e      	ldr	r1, [pc, #56]	; (8002954 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800291c:	4a0e      	ldr	r2, [pc, #56]	; (8002958 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800291e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002920:	e002      	b.n	8002928 <LoopCopyDataInit>

08002922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002926:	3304      	adds	r3, #4

08002928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800292a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800292c:	d3f9      	bcc.n	8002922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800292e:	4a0b      	ldr	r2, [pc, #44]	; (800295c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002930:	4c0b      	ldr	r4, [pc, #44]	; (8002960 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002934:	e001      	b.n	800293a <LoopFillZerobss>

08002936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002938:	3204      	adds	r2, #4

0800293a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800293a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800293c:	d3fb      	bcc.n	8002936 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800293e:	f7ff ffd7 	bl	80028f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002942:	f002 fc43 	bl	80051cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002946:	f7ff f853 	bl	80019f0 <main>
  bx  lr    
 800294a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800294c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002954:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 8002958:	0800a174 	.word	0x0800a174
  ldr r2, =_sbss
 800295c:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 8002960:	20000468 	.word	0x20000468

08002964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002964:	e7fe      	b.n	8002964 <ADC_IRQHandler>
	...

08002968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800296c:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <HAL_Init+0x40>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0d      	ldr	r2, [pc, #52]	; (80029a8 <HAL_Init+0x40>)
 8002972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002976:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_Init+0x40>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <HAL_Init+0x40>)
 800297e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002982:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002984:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <HAL_Init+0x40>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a07      	ldr	r2, [pc, #28]	; (80029a8 <HAL_Init+0x40>)
 800298a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002990:	2003      	movs	r0, #3
 8002992:	f000 f94f 	bl	8002c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002996:	200f      	movs	r0, #15
 8002998:	f000 f808 	bl	80029ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800299c:	f7ff fd9a 	bl	80024d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40023c00 	.word	0x40023c00

080029ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029b4:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <HAL_InitTick+0x54>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <HAL_InitTick+0x58>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	4619      	mov	r1, r3
 80029be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 f967 	bl	8002c9e <HAL_SYSTICK_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e00e      	b.n	80029f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b0f      	cmp	r3, #15
 80029de:	d80a      	bhi.n	80029f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029e0:	2200      	movs	r2, #0
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	f04f 30ff 	mov.w	r0, #4294967295
 80029e8:	f000 f92f 	bl	8002c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029ec:	4a06      	ldr	r2, [pc, #24]	; (8002a08 <HAL_InitTick+0x5c>)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	e000      	b.n	80029f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	200000a0 	.word	0x200000a0
 8002a04:	200000a8 	.word	0x200000a8
 8002a08:	200000a4 	.word	0x200000a4

08002a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <HAL_IncTick+0x20>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_IncTick+0x24>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	4a04      	ldr	r2, [pc, #16]	; (8002a30 <HAL_IncTick+0x24>)
 8002a1e:	6013      	str	r3, [r2, #0]
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	200000a8 	.word	0x200000a8
 8002a30:	20000454 	.word	0x20000454

08002a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return uwTick;
 8002a38:	4b03      	ldr	r3, [pc, #12]	; (8002a48 <HAL_GetTick+0x14>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	20000454 	.word	0x20000454

08002a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a54:	f7ff ffee 	bl	8002a34 <HAL_GetTick>
 8002a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a64:	d005      	beq.n	8002a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a66:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <HAL_Delay+0x44>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4413      	add	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a72:	bf00      	nop
 8002a74:	f7ff ffde 	bl	8002a34 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d8f7      	bhi.n	8002a74 <HAL_Delay+0x28>
  {
  }
}
 8002a84:	bf00      	nop
 8002a86:	bf00      	nop
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	200000a8 	.word	0x200000a8

08002a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ac6:	4a04      	ldr	r2, [pc, #16]	; (8002ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	60d3      	str	r3, [r2, #12]
}
 8002acc:	bf00      	nop
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ae0:	4b04      	ldr	r3, [pc, #16]	; (8002af4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	0a1b      	lsrs	r3, r3, #8
 8002ae6:	f003 0307 	and.w	r3, r3, #7
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	e000ed00 	.word	0xe000ed00

08002af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	db0b      	blt.n	8002b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	f003 021f 	and.w	r2, r3, #31
 8002b10:	4907      	ldr	r1, [pc, #28]	; (8002b30 <__NVIC_EnableIRQ+0x38>)
 8002b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	2001      	movs	r0, #1
 8002b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	e000e100 	.word	0xe000e100

08002b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	6039      	str	r1, [r7, #0]
 8002b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	db0a      	blt.n	8002b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	490c      	ldr	r1, [pc, #48]	; (8002b80 <__NVIC_SetPriority+0x4c>)
 8002b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b52:	0112      	lsls	r2, r2, #4
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	440b      	add	r3, r1
 8002b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b5c:	e00a      	b.n	8002b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	4908      	ldr	r1, [pc, #32]	; (8002b84 <__NVIC_SetPriority+0x50>)
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	3b04      	subs	r3, #4
 8002b6c:	0112      	lsls	r2, r2, #4
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	440b      	add	r3, r1
 8002b72:	761a      	strb	r2, [r3, #24]
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000e100 	.word	0xe000e100
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b089      	sub	sp, #36	; 0x24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	bf28      	it	cs
 8002ba6:	2304      	movcs	r3, #4
 8002ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	3304      	adds	r3, #4
 8002bae:	2b06      	cmp	r3, #6
 8002bb0:	d902      	bls.n	8002bb8 <NVIC_EncodePriority+0x30>
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	3b03      	subs	r3, #3
 8002bb6:	e000      	b.n	8002bba <NVIC_EncodePriority+0x32>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43da      	mvns	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	401a      	ands	r2, r3
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bda:	43d9      	mvns	r1, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be0:	4313      	orrs	r3, r2
         );
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3724      	adds	r7, #36	; 0x24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c00:	d301      	bcc.n	8002c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c02:	2301      	movs	r3, #1
 8002c04:	e00f      	b.n	8002c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c06:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <SysTick_Config+0x40>)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c0e:	210f      	movs	r1, #15
 8002c10:	f04f 30ff 	mov.w	r0, #4294967295
 8002c14:	f7ff ff8e 	bl	8002b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c18:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <SysTick_Config+0x40>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c1e:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <SysTick_Config+0x40>)
 8002c20:	2207      	movs	r2, #7
 8002c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	e000e010 	.word	0xe000e010

08002c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff ff29 	bl	8002a94 <__NVIC_SetPriorityGrouping>
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b086      	sub	sp, #24
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	4603      	mov	r3, r0
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c5c:	f7ff ff3e 	bl	8002adc <__NVIC_GetPriorityGrouping>
 8002c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	68b9      	ldr	r1, [r7, #8]
 8002c66:	6978      	ldr	r0, [r7, #20]
 8002c68:	f7ff ff8e 	bl	8002b88 <NVIC_EncodePriority>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff ff5d 	bl	8002b34 <__NVIC_SetPriority>
}
 8002c7a:	bf00      	nop
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	4603      	mov	r3, r0
 8002c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ff31 	bl	8002af8 <__NVIC_EnableIRQ>
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff ffa2 	bl	8002bf0 <SysTick_Config>
 8002cac:	4603      	mov	r3, r0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b089      	sub	sp, #36	; 0x24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61fb      	str	r3, [r7, #28]
 8002cd2:	e159      	b.n	8002f88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	f040 8148 	bne.w	8002f82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d005      	beq.n	8002d0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d130      	bne.n	8002d6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	2203      	movs	r2, #3
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d40:	2201      	movs	r2, #1
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	091b      	lsrs	r3, r3, #4
 8002d56:	f003 0201 	and.w	r2, r3, #1
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d017      	beq.n	8002da8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	2203      	movs	r2, #3
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d123      	bne.n	8002dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	08da      	lsrs	r2, r3, #3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3208      	adds	r2, #8
 8002dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	220f      	movs	r2, #15
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	691a      	ldr	r2, [r3, #16]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	08da      	lsrs	r2, r3, #3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3208      	adds	r2, #8
 8002df6:	69b9      	ldr	r1, [r7, #24]
 8002df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	2203      	movs	r2, #3
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 0203 	and.w	r2, r3, #3
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 80a2 	beq.w	8002f82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	4b57      	ldr	r3, [pc, #348]	; (8002fa0 <HAL_GPIO_Init+0x2e8>)
 8002e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e46:	4a56      	ldr	r2, [pc, #344]	; (8002fa0 <HAL_GPIO_Init+0x2e8>)
 8002e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e4e:	4b54      	ldr	r3, [pc, #336]	; (8002fa0 <HAL_GPIO_Init+0x2e8>)
 8002e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e5a:	4a52      	ldr	r2, [pc, #328]	; (8002fa4 <HAL_GPIO_Init+0x2ec>)
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	089b      	lsrs	r3, r3, #2
 8002e60:	3302      	adds	r3, #2
 8002e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	220f      	movs	r2, #15
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a49      	ldr	r2, [pc, #292]	; (8002fa8 <HAL_GPIO_Init+0x2f0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d019      	beq.n	8002eba <HAL_GPIO_Init+0x202>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a48      	ldr	r2, [pc, #288]	; (8002fac <HAL_GPIO_Init+0x2f4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d013      	beq.n	8002eb6 <HAL_GPIO_Init+0x1fe>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a47      	ldr	r2, [pc, #284]	; (8002fb0 <HAL_GPIO_Init+0x2f8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00d      	beq.n	8002eb2 <HAL_GPIO_Init+0x1fa>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a46      	ldr	r2, [pc, #280]	; (8002fb4 <HAL_GPIO_Init+0x2fc>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d007      	beq.n	8002eae <HAL_GPIO_Init+0x1f6>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a45      	ldr	r2, [pc, #276]	; (8002fb8 <HAL_GPIO_Init+0x300>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d101      	bne.n	8002eaa <HAL_GPIO_Init+0x1f2>
 8002ea6:	2304      	movs	r3, #4
 8002ea8:	e008      	b.n	8002ebc <HAL_GPIO_Init+0x204>
 8002eaa:	2307      	movs	r3, #7
 8002eac:	e006      	b.n	8002ebc <HAL_GPIO_Init+0x204>
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e004      	b.n	8002ebc <HAL_GPIO_Init+0x204>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e002      	b.n	8002ebc <HAL_GPIO_Init+0x204>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_GPIO_Init+0x204>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	69fa      	ldr	r2, [r7, #28]
 8002ebe:	f002 0203 	and.w	r2, r2, #3
 8002ec2:	0092      	lsls	r2, r2, #2
 8002ec4:	4093      	lsls	r3, r2
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ecc:	4935      	ldr	r1, [pc, #212]	; (8002fa4 <HAL_GPIO_Init+0x2ec>)
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	089b      	lsrs	r3, r3, #2
 8002ed2:	3302      	adds	r3, #2
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eda:	4b38      	ldr	r3, [pc, #224]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002efe:	4a2f      	ldr	r2, [pc, #188]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f04:	4b2d      	ldr	r3, [pc, #180]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f28:	4a24      	ldr	r2, [pc, #144]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f2e:	4b23      	ldr	r3, [pc, #140]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	43db      	mvns	r3, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f52:	4a1a      	ldr	r2, [pc, #104]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f58:	4b18      	ldr	r3, [pc, #96]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f7c:	4a0f      	ldr	r2, [pc, #60]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3301      	adds	r3, #1
 8002f86:	61fb      	str	r3, [r7, #28]
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	2b0f      	cmp	r3, #15
 8002f8c:	f67f aea2 	bls.w	8002cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
 8002f94:	3724      	adds	r7, #36	; 0x24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40013800 	.word	0x40013800
 8002fa8:	40020000 	.word	0x40020000
 8002fac:	40020400 	.word	0x40020400
 8002fb0:	40020800 	.word	0x40020800
 8002fb4:	40020c00 	.word	0x40020c00
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40013c00 	.word	0x40013c00

08002fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	807b      	strh	r3, [r7, #2]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fd0:	787b      	ldrb	r3, [r7, #1]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fd6:	887a      	ldrh	r2, [r7, #2]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fdc:	e003      	b.n	8002fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fde:	887b      	ldrh	r3, [r7, #2]
 8002fe0:	041a      	lsls	r2, r3, #16
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	619a      	str	r2, [r3, #24]
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
	...

08002ff4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e267      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d075      	beq.n	80030fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003012:	4b88      	ldr	r3, [pc, #544]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b04      	cmp	r3, #4
 800301c:	d00c      	beq.n	8003038 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800301e:	4b85      	ldr	r3, [pc, #532]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003026:	2b08      	cmp	r3, #8
 8003028:	d112      	bne.n	8003050 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800302a:	4b82      	ldr	r3, [pc, #520]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003036:	d10b      	bne.n	8003050 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003038:	4b7e      	ldr	r3, [pc, #504]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d05b      	beq.n	80030fc <HAL_RCC_OscConfig+0x108>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d157      	bne.n	80030fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e242      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003058:	d106      	bne.n	8003068 <HAL_RCC_OscConfig+0x74>
 800305a:	4b76      	ldr	r3, [pc, #472]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a75      	ldr	r2, [pc, #468]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	e01d      	b.n	80030a4 <HAL_RCC_OscConfig+0xb0>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003070:	d10c      	bne.n	800308c <HAL_RCC_OscConfig+0x98>
 8003072:	4b70      	ldr	r3, [pc, #448]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a6f      	ldr	r2, [pc, #444]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	4b6d      	ldr	r3, [pc, #436]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a6c      	ldr	r2, [pc, #432]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e00b      	b.n	80030a4 <HAL_RCC_OscConfig+0xb0>
 800308c:	4b69      	ldr	r3, [pc, #420]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a68      	ldr	r2, [pc, #416]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b66      	ldr	r3, [pc, #408]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a65      	ldr	r2, [pc, #404]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 800309e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d013      	beq.n	80030d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ac:	f7ff fcc2 	bl	8002a34 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b4:	f7ff fcbe 	bl	8002a34 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	; 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e207      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	4b5b      	ldr	r3, [pc, #364]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0xc0>
 80030d2:	e014      	b.n	80030fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7ff fcae 	bl	8002a34 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030dc:	f7ff fcaa 	bl	8002a34 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	; 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e1f3      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ee:	4b51      	ldr	r3, [pc, #324]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0xe8>
 80030fa:	e000      	b.n	80030fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d063      	beq.n	80031d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800310a:	4b4a      	ldr	r3, [pc, #296]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00b      	beq.n	800312e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003116:	4b47      	ldr	r3, [pc, #284]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800311e:	2b08      	cmp	r3, #8
 8003120:	d11c      	bne.n	800315c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003122:	4b44      	ldr	r3, [pc, #272]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d116      	bne.n	800315c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312e:	4b41      	ldr	r3, [pc, #260]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_RCC_OscConfig+0x152>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d001      	beq.n	8003146 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e1c7      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003146:	4b3b      	ldr	r3, [pc, #236]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4937      	ldr	r1, [pc, #220]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003156:	4313      	orrs	r3, r2
 8003158:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315a:	e03a      	b.n	80031d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d020      	beq.n	80031a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003164:	4b34      	ldr	r3, [pc, #208]	; (8003238 <HAL_RCC_OscConfig+0x244>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316a:	f7ff fc63 	bl	8002a34 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003172:	f7ff fc5f 	bl	8002a34 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e1a8      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003184:	4b2b      	ldr	r3, [pc, #172]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003190:	4b28      	ldr	r3, [pc, #160]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4925      	ldr	r1, [pc, #148]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	600b      	str	r3, [r1, #0]
 80031a4:	e015      	b.n	80031d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a6:	4b24      	ldr	r3, [pc, #144]	; (8003238 <HAL_RCC_OscConfig+0x244>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7ff fc42 	bl	8002a34 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b4:	f7ff fc3e 	bl	8002a34 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e187      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c6:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d036      	beq.n	800324c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d016      	beq.n	8003214 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e6:	4b15      	ldr	r3, [pc, #84]	; (800323c <HAL_RCC_OscConfig+0x248>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ec:	f7ff fc22 	bl	8002a34 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031f4:	f7ff fc1e 	bl	8002a34 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e167      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003206:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0x200>
 8003212:	e01b      	b.n	800324c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003214:	4b09      	ldr	r3, [pc, #36]	; (800323c <HAL_RCC_OscConfig+0x248>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321a:	f7ff fc0b 	bl	8002a34 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003220:	e00e      	b.n	8003240 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003222:	f7ff fc07 	bl	8002a34 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d907      	bls.n	8003240 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e150      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
 8003234:	40023800 	.word	0x40023800
 8003238:	42470000 	.word	0x42470000
 800323c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003240:	4b88      	ldr	r3, [pc, #544]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1ea      	bne.n	8003222 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 8097 	beq.w	8003388 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800325a:	2300      	movs	r3, #0
 800325c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800325e:	4b81      	ldr	r3, [pc, #516]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10f      	bne.n	800328a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	4b7d      	ldr	r3, [pc, #500]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	4a7c      	ldr	r2, [pc, #496]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003278:	6413      	str	r3, [r2, #64]	; 0x40
 800327a:	4b7a      	ldr	r3, [pc, #488]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003286:	2301      	movs	r3, #1
 8003288:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328a:	4b77      	ldr	r3, [pc, #476]	; (8003468 <HAL_RCC_OscConfig+0x474>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003292:	2b00      	cmp	r3, #0
 8003294:	d118      	bne.n	80032c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003296:	4b74      	ldr	r3, [pc, #464]	; (8003468 <HAL_RCC_OscConfig+0x474>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a73      	ldr	r2, [pc, #460]	; (8003468 <HAL_RCC_OscConfig+0x474>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a2:	f7ff fbc7 	bl	8002a34 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032aa:	f7ff fbc3 	bl	8002a34 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e10c      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032bc:	4b6a      	ldr	r3, [pc, #424]	; (8003468 <HAL_RCC_OscConfig+0x474>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d106      	bne.n	80032de <HAL_RCC_OscConfig+0x2ea>
 80032d0:	4b64      	ldr	r3, [pc, #400]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 80032d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d4:	4a63      	ldr	r2, [pc, #396]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	6713      	str	r3, [r2, #112]	; 0x70
 80032dc:	e01c      	b.n	8003318 <HAL_RCC_OscConfig+0x324>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b05      	cmp	r3, #5
 80032e4:	d10c      	bne.n	8003300 <HAL_RCC_OscConfig+0x30c>
 80032e6:	4b5f      	ldr	r3, [pc, #380]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 80032e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ea:	4a5e      	ldr	r2, [pc, #376]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 80032ec:	f043 0304 	orr.w	r3, r3, #4
 80032f0:	6713      	str	r3, [r2, #112]	; 0x70
 80032f2:	4b5c      	ldr	r3, [pc, #368]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 80032f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f6:	4a5b      	ldr	r2, [pc, #364]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	6713      	str	r3, [r2, #112]	; 0x70
 80032fe:	e00b      	b.n	8003318 <HAL_RCC_OscConfig+0x324>
 8003300:	4b58      	ldr	r3, [pc, #352]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003304:	4a57      	ldr	r2, [pc, #348]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003306:	f023 0301 	bic.w	r3, r3, #1
 800330a:	6713      	str	r3, [r2, #112]	; 0x70
 800330c:	4b55      	ldr	r3, [pc, #340]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 800330e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003310:	4a54      	ldr	r2, [pc, #336]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003312:	f023 0304 	bic.w	r3, r3, #4
 8003316:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d015      	beq.n	800334c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003320:	f7ff fb88 	bl	8002a34 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003326:	e00a      	b.n	800333e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003328:	f7ff fb84 	bl	8002a34 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f241 3288 	movw	r2, #5000	; 0x1388
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e0cb      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333e:	4b49      	ldr	r3, [pc, #292]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0ee      	beq.n	8003328 <HAL_RCC_OscConfig+0x334>
 800334a:	e014      	b.n	8003376 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334c:	f7ff fb72 	bl	8002a34 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003352:	e00a      	b.n	800336a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003354:	f7ff fb6e 	bl	8002a34 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e0b5      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336a:	4b3e      	ldr	r3, [pc, #248]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1ee      	bne.n	8003354 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003376:	7dfb      	ldrb	r3, [r7, #23]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d105      	bne.n	8003388 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800337c:	4b39      	ldr	r3, [pc, #228]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	4a38      	ldr	r2, [pc, #224]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003386:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80a1 	beq.w	80034d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003392:	4b34      	ldr	r3, [pc, #208]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	2b08      	cmp	r3, #8
 800339c:	d05c      	beq.n	8003458 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d141      	bne.n	800342a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a6:	4b31      	ldr	r3, [pc, #196]	; (800346c <HAL_RCC_OscConfig+0x478>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ac:	f7ff fb42 	bl	8002a34 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b4:	f7ff fb3e 	bl	8002a34 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e087      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c6:	4b27      	ldr	r3, [pc, #156]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69da      	ldr	r2, [r3, #28]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	019b      	lsls	r3, r3, #6
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	085b      	lsrs	r3, r3, #1
 80033ea:	3b01      	subs	r3, #1
 80033ec:	041b      	lsls	r3, r3, #16
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	061b      	lsls	r3, r3, #24
 80033f6:	491b      	ldr	r1, [pc, #108]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033fc:	4b1b      	ldr	r3, [pc, #108]	; (800346c <HAL_RCC_OscConfig+0x478>)
 80033fe:	2201      	movs	r2, #1
 8003400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003402:	f7ff fb17 	bl	8002a34 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800340a:	f7ff fb13 	bl	8002a34 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e05c      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341c:	4b11      	ldr	r3, [pc, #68]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x416>
 8003428:	e054      	b.n	80034d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342a:	4b10      	ldr	r3, [pc, #64]	; (800346c <HAL_RCC_OscConfig+0x478>)
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7ff fb00 	bl	8002a34 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003438:	f7ff fafc 	bl	8002a34 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e045      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344a:	4b06      	ldr	r3, [pc, #24]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0x444>
 8003456:	e03d      	b.n	80034d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d107      	bne.n	8003470 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e038      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
 8003464:	40023800 	.word	0x40023800
 8003468:	40007000 	.word	0x40007000
 800346c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003470:	4b1b      	ldr	r3, [pc, #108]	; (80034e0 <HAL_RCC_OscConfig+0x4ec>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d028      	beq.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003488:	429a      	cmp	r2, r3
 800348a:	d121      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003496:	429a      	cmp	r2, r3
 8003498:	d11a      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034a0:	4013      	ands	r3, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d111      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b6:	085b      	lsrs	r3, r3, #1
 80034b8:	3b01      	subs	r3, #1
 80034ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034bc:	429a      	cmp	r2, r3
 80034be:	d107      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d001      	beq.n	80034d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800

080034e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0cc      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034f8:	4b68      	ldr	r3, [pc, #416]	; (800369c <HAL_RCC_ClockConfig+0x1b8>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d90c      	bls.n	8003520 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003506:	4b65      	ldr	r3, [pc, #404]	; (800369c <HAL_RCC_ClockConfig+0x1b8>)
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800350e:	4b63      	ldr	r3, [pc, #396]	; (800369c <HAL_RCC_ClockConfig+0x1b8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0b8      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d020      	beq.n	800356e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003538:	4b59      	ldr	r3, [pc, #356]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4a58      	ldr	r2, [pc, #352]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003542:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003550:	4b53      	ldr	r3, [pc, #332]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4a52      	ldr	r2, [pc, #328]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800355a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800355c:	4b50      	ldr	r3, [pc, #320]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	494d      	ldr	r1, [pc, #308]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	4313      	orrs	r3, r2
 800356c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d044      	beq.n	8003604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d107      	bne.n	8003592 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003582:	4b47      	ldr	r3, [pc, #284]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d119      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e07f      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d003      	beq.n	80035a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d107      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a2:	4b3f      	ldr	r3, [pc, #252]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d109      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e06f      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b2:	4b3b      	ldr	r3, [pc, #236]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e067      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035c2:	4b37      	ldr	r3, [pc, #220]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f023 0203 	bic.w	r2, r3, #3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	4934      	ldr	r1, [pc, #208]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035d4:	f7ff fa2e 	bl	8002a34 <HAL_GetTick>
 80035d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035da:	e00a      	b.n	80035f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035dc:	f7ff fa2a 	bl	8002a34 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e04f      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	4b2b      	ldr	r3, [pc, #172]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 020c 	and.w	r2, r3, #12
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	429a      	cmp	r2, r3
 8003602:	d1eb      	bne.n	80035dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003604:	4b25      	ldr	r3, [pc, #148]	; (800369c <HAL_RCC_ClockConfig+0x1b8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d20c      	bcs.n	800362c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003612:	4b22      	ldr	r3, [pc, #136]	; (800369c <HAL_RCC_ClockConfig+0x1b8>)
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800361a:	4b20      	ldr	r3, [pc, #128]	; (800369c <HAL_RCC_ClockConfig+0x1b8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d001      	beq.n	800362c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e032      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003638:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	4916      	ldr	r1, [pc, #88]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003656:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	490e      	ldr	r1, [pc, #56]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	4313      	orrs	r3, r2
 8003668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800366a:	f000 f821 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 800366e:	4602      	mov	r2, r0
 8003670:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	091b      	lsrs	r3, r3, #4
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	490a      	ldr	r1, [pc, #40]	; (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 800367c:	5ccb      	ldrb	r3, [r1, r3]
 800367e:	fa22 f303 	lsr.w	r3, r2, r3
 8003682:	4a09      	ldr	r2, [pc, #36]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003686:	4b09      	ldr	r3, [pc, #36]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff f98e 	bl	80029ac <HAL_InitTick>

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40023c00 	.word	0x40023c00
 80036a0:	40023800 	.word	0x40023800
 80036a4:	08009ca0 	.word	0x08009ca0
 80036a8:	200000a0 	.word	0x200000a0
 80036ac:	200000a4 	.word	0x200000a4

080036b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036b4:	b090      	sub	sp, #64	; 0x40
 80036b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	637b      	str	r3, [r7, #52]	; 0x34
 80036bc:	2300      	movs	r3, #0
 80036be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036c0:	2300      	movs	r3, #0
 80036c2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036c8:	4b59      	ldr	r3, [pc, #356]	; (8003830 <HAL_RCC_GetSysClockFreq+0x180>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d00d      	beq.n	80036f0 <HAL_RCC_GetSysClockFreq+0x40>
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	f200 80a1 	bhi.w	800381c <HAL_RCC_GetSysClockFreq+0x16c>
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <HAL_RCC_GetSysClockFreq+0x34>
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d003      	beq.n	80036ea <HAL_RCC_GetSysClockFreq+0x3a>
 80036e2:	e09b      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036e4:	4b53      	ldr	r3, [pc, #332]	; (8003834 <HAL_RCC_GetSysClockFreq+0x184>)
 80036e6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80036e8:	e09b      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ea:	4b53      	ldr	r3, [pc, #332]	; (8003838 <HAL_RCC_GetSysClockFreq+0x188>)
 80036ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036ee:	e098      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036f0:	4b4f      	ldr	r3, [pc, #316]	; (8003830 <HAL_RCC_GetSysClockFreq+0x180>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036fa:	4b4d      	ldr	r3, [pc, #308]	; (8003830 <HAL_RCC_GetSysClockFreq+0x180>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d028      	beq.n	8003758 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003706:	4b4a      	ldr	r3, [pc, #296]	; (8003830 <HAL_RCC_GetSysClockFreq+0x180>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	099b      	lsrs	r3, r3, #6
 800370c:	2200      	movs	r2, #0
 800370e:	623b      	str	r3, [r7, #32]
 8003710:	627a      	str	r2, [r7, #36]	; 0x24
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003718:	2100      	movs	r1, #0
 800371a:	4b47      	ldr	r3, [pc, #284]	; (8003838 <HAL_RCC_GetSysClockFreq+0x188>)
 800371c:	fb03 f201 	mul.w	r2, r3, r1
 8003720:	2300      	movs	r3, #0
 8003722:	fb00 f303 	mul.w	r3, r0, r3
 8003726:	4413      	add	r3, r2
 8003728:	4a43      	ldr	r2, [pc, #268]	; (8003838 <HAL_RCC_GetSysClockFreq+0x188>)
 800372a:	fba0 1202 	umull	r1, r2, r0, r2
 800372e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003730:	460a      	mov	r2, r1
 8003732:	62ba      	str	r2, [r7, #40]	; 0x28
 8003734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003736:	4413      	add	r3, r2
 8003738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800373a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800373c:	2200      	movs	r2, #0
 800373e:	61bb      	str	r3, [r7, #24]
 8003740:	61fa      	str	r2, [r7, #28]
 8003742:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003746:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800374a:	f7fd faa5 	bl	8000c98 <__aeabi_uldivmod>
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	4613      	mov	r3, r2
 8003754:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003756:	e053      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003758:	4b35      	ldr	r3, [pc, #212]	; (8003830 <HAL_RCC_GetSysClockFreq+0x180>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	099b      	lsrs	r3, r3, #6
 800375e:	2200      	movs	r2, #0
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	617a      	str	r2, [r7, #20]
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800376a:	f04f 0b00 	mov.w	fp, #0
 800376e:	4652      	mov	r2, sl
 8003770:	465b      	mov	r3, fp
 8003772:	f04f 0000 	mov.w	r0, #0
 8003776:	f04f 0100 	mov.w	r1, #0
 800377a:	0159      	lsls	r1, r3, #5
 800377c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003780:	0150      	lsls	r0, r2, #5
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	ebb2 080a 	subs.w	r8, r2, sl
 800378a:	eb63 090b 	sbc.w	r9, r3, fp
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800379a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800379e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037a2:	ebb2 0408 	subs.w	r4, r2, r8
 80037a6:	eb63 0509 	sbc.w	r5, r3, r9
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	00eb      	lsls	r3, r5, #3
 80037b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037b8:	00e2      	lsls	r2, r4, #3
 80037ba:	4614      	mov	r4, r2
 80037bc:	461d      	mov	r5, r3
 80037be:	eb14 030a 	adds.w	r3, r4, sl
 80037c2:	603b      	str	r3, [r7, #0]
 80037c4:	eb45 030b 	adc.w	r3, r5, fp
 80037c8:	607b      	str	r3, [r7, #4]
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037d6:	4629      	mov	r1, r5
 80037d8:	028b      	lsls	r3, r1, #10
 80037da:	4621      	mov	r1, r4
 80037dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037e0:	4621      	mov	r1, r4
 80037e2:	028a      	lsls	r2, r1, #10
 80037e4:	4610      	mov	r0, r2
 80037e6:	4619      	mov	r1, r3
 80037e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ea:	2200      	movs	r2, #0
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	60fa      	str	r2, [r7, #12]
 80037f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037f4:	f7fd fa50 	bl	8000c98 <__aeabi_uldivmod>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4613      	mov	r3, r2
 80037fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <HAL_RCC_GetSysClockFreq+0x180>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	0c1b      	lsrs	r3, r3, #16
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	3301      	adds	r3, #1
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003810:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003814:	fbb2 f3f3 	udiv	r3, r2, r3
 8003818:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800381a:	e002      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800381c:	4b05      	ldr	r3, [pc, #20]	; (8003834 <HAL_RCC_GetSysClockFreq+0x184>)
 800381e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003824:	4618      	mov	r0, r3
 8003826:	3740      	adds	r7, #64	; 0x40
 8003828:	46bd      	mov	sp, r7
 800382a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800382e:	bf00      	nop
 8003830:	40023800 	.word	0x40023800
 8003834:	00f42400 	.word	0x00f42400
 8003838:	017d7840 	.word	0x017d7840

0800383c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003840:	4b03      	ldr	r3, [pc, #12]	; (8003850 <HAL_RCC_GetHCLKFreq+0x14>)
 8003842:	681b      	ldr	r3, [r3, #0]
}
 8003844:	4618      	mov	r0, r3
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	200000a0 	.word	0x200000a0

08003854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003858:	f7ff fff0 	bl	800383c <HAL_RCC_GetHCLKFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	4b05      	ldr	r3, [pc, #20]	; (8003874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	0a9b      	lsrs	r3, r3, #10
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	4903      	ldr	r1, [pc, #12]	; (8003878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800386a:	5ccb      	ldrb	r3, [r1, r3]
 800386c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003870:	4618      	mov	r0, r3
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40023800 	.word	0x40023800
 8003878:	08009cb0 	.word	0x08009cb0

0800387c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003880:	f7ff ffdc 	bl	800383c <HAL_RCC_GetHCLKFreq>
 8003884:	4602      	mov	r2, r0
 8003886:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	0b5b      	lsrs	r3, r3, #13
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	4903      	ldr	r1, [pc, #12]	; (80038a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003892:	5ccb      	ldrb	r3, [r1, r3]
 8003894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003898:	4618      	mov	r0, r3
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40023800 	.word	0x40023800
 80038a0:	08009cb0 	.word	0x08009cb0

080038a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e041      	b.n	800393a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d106      	bne.n	80038d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fe fe72 	bl	80025b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3304      	adds	r3, #4
 80038e0:	4619      	mov	r1, r3
 80038e2:	4610      	mov	r0, r2
 80038e4:	f000 fd54 	bl	8004390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b01      	cmp	r3, #1
 8003956:	d001      	beq.n	800395c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e03c      	b.n	80039d6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1e      	ldr	r2, [pc, #120]	; (80039e4 <HAL_TIM_Base_Start+0xa0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d018      	beq.n	80039a0 <HAL_TIM_Base_Start+0x5c>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003976:	d013      	beq.n	80039a0 <HAL_TIM_Base_Start+0x5c>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a1a      	ldr	r2, [pc, #104]	; (80039e8 <HAL_TIM_Base_Start+0xa4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00e      	beq.n	80039a0 <HAL_TIM_Base_Start+0x5c>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a19      	ldr	r2, [pc, #100]	; (80039ec <HAL_TIM_Base_Start+0xa8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d009      	beq.n	80039a0 <HAL_TIM_Base_Start+0x5c>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a17      	ldr	r2, [pc, #92]	; (80039f0 <HAL_TIM_Base_Start+0xac>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d004      	beq.n	80039a0 <HAL_TIM_Base_Start+0x5c>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a16      	ldr	r2, [pc, #88]	; (80039f4 <HAL_TIM_Base_Start+0xb0>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d111      	bne.n	80039c4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b06      	cmp	r3, #6
 80039b0:	d010      	beq.n	80039d4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f042 0201 	orr.w	r2, r2, #1
 80039c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c2:	e007      	b.n	80039d4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0201 	orr.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40010000 	.word	0x40010000
 80039e8:	40000400 	.word	0x40000400
 80039ec:	40000800 	.word	0x40000800
 80039f0:	40000c00 	.word	0x40000c00
 80039f4:	40014000 	.word	0x40014000

080039f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d001      	beq.n	8003a10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e044      	b.n	8003a9a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1e      	ldr	r2, [pc, #120]	; (8003aa8 <HAL_TIM_Base_Start_IT+0xb0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d018      	beq.n	8003a64 <HAL_TIM_Base_Start_IT+0x6c>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3a:	d013      	beq.n	8003a64 <HAL_TIM_Base_Start_IT+0x6c>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1a      	ldr	r2, [pc, #104]	; (8003aac <HAL_TIM_Base_Start_IT+0xb4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00e      	beq.n	8003a64 <HAL_TIM_Base_Start_IT+0x6c>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a19      	ldr	r2, [pc, #100]	; (8003ab0 <HAL_TIM_Base_Start_IT+0xb8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d009      	beq.n	8003a64 <HAL_TIM_Base_Start_IT+0x6c>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a17      	ldr	r2, [pc, #92]	; (8003ab4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d004      	beq.n	8003a64 <HAL_TIM_Base_Start_IT+0x6c>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a16      	ldr	r2, [pc, #88]	; (8003ab8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d111      	bne.n	8003a88 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b06      	cmp	r3, #6
 8003a74:	d010      	beq.n	8003a98 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f042 0201 	orr.w	r2, r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a86:	e007      	b.n	8003a98 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0201 	orr.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40010000 	.word	0x40010000
 8003aac:	40000400 	.word	0x40000400
 8003ab0:	40000800 	.word	0x40000800
 8003ab4:	40000c00 	.word	0x40000c00
 8003ab8:	40014000 	.word	0x40014000

08003abc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e041      	b.n	8003b52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f839 	bl	8003b5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3304      	adds	r3, #4
 8003af8:	4619      	mov	r1, r3
 8003afa:	4610      	mov	r0, r2
 8003afc:	f000 fc48 	bl	8004390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
	...

08003b70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d109      	bne.n	8003b94 <HAL_TIM_PWM_Start+0x24>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	bf14      	ite	ne
 8003b8c:	2301      	movne	r3, #1
 8003b8e:	2300      	moveq	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	e022      	b.n	8003bda <HAL_TIM_PWM_Start+0x6a>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d109      	bne.n	8003bae <HAL_TIM_PWM_Start+0x3e>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	bf14      	ite	ne
 8003ba6:	2301      	movne	r3, #1
 8003ba8:	2300      	moveq	r3, #0
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	e015      	b.n	8003bda <HAL_TIM_PWM_Start+0x6a>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d109      	bne.n	8003bc8 <HAL_TIM_PWM_Start+0x58>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	bf14      	ite	ne
 8003bc0:	2301      	movne	r3, #1
 8003bc2:	2300      	moveq	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	e008      	b.n	8003bda <HAL_TIM_PWM_Start+0x6a>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	bf14      	ite	ne
 8003bd4:	2301      	movne	r3, #1
 8003bd6:	2300      	moveq	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e068      	b.n	8003cb4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d104      	bne.n	8003bf2 <HAL_TIM_PWM_Start+0x82>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bf0:	e013      	b.n	8003c1a <HAL_TIM_PWM_Start+0xaa>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d104      	bne.n	8003c02 <HAL_TIM_PWM_Start+0x92>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c00:	e00b      	b.n	8003c1a <HAL_TIM_PWM_Start+0xaa>
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d104      	bne.n	8003c12 <HAL_TIM_PWM_Start+0xa2>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c10:	e003      	b.n	8003c1a <HAL_TIM_PWM_Start+0xaa>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2202      	movs	r2, #2
 8003c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	6839      	ldr	r1, [r7, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fe5a 	bl	80048dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a23      	ldr	r2, [pc, #140]	; (8003cbc <HAL_TIM_PWM_Start+0x14c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d107      	bne.n	8003c42 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a1d      	ldr	r2, [pc, #116]	; (8003cbc <HAL_TIM_PWM_Start+0x14c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d018      	beq.n	8003c7e <HAL_TIM_PWM_Start+0x10e>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c54:	d013      	beq.n	8003c7e <HAL_TIM_PWM_Start+0x10e>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a19      	ldr	r2, [pc, #100]	; (8003cc0 <HAL_TIM_PWM_Start+0x150>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d00e      	beq.n	8003c7e <HAL_TIM_PWM_Start+0x10e>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a17      	ldr	r2, [pc, #92]	; (8003cc4 <HAL_TIM_PWM_Start+0x154>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d009      	beq.n	8003c7e <HAL_TIM_PWM_Start+0x10e>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a16      	ldr	r2, [pc, #88]	; (8003cc8 <HAL_TIM_PWM_Start+0x158>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d004      	beq.n	8003c7e <HAL_TIM_PWM_Start+0x10e>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <HAL_TIM_PWM_Start+0x15c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d111      	bne.n	8003ca2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2b06      	cmp	r3, #6
 8003c8e:	d010      	beq.n	8003cb2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca0:	e007      	b.n	8003cb2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f042 0201 	orr.w	r2, r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40010000 	.word	0x40010000
 8003cc0:	40000400 	.word	0x40000400
 8003cc4:	40000800 	.word	0x40000800
 8003cc8:	40000c00 	.word	0x40000c00
 8003ccc:	40014000 	.word	0x40014000

08003cd0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e097      	b.n	8003e14 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d106      	bne.n	8003cfe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7fe fc13 	bl	8002524 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2202      	movs	r2, #2
 8003d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d14:	f023 0307 	bic.w	r3, r3, #7
 8003d18:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3304      	adds	r3, #4
 8003d22:	4619      	mov	r1, r3
 8003d24:	4610      	mov	r0, r2
 8003d26:	f000 fb33 	bl	8004390 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d52:	f023 0303 	bic.w	r3, r3, #3
 8003d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	021b      	lsls	r3, r3, #8
 8003d62:	4313      	orrs	r3, r2
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003d70:	f023 030c 	bic.w	r3, r3, #12
 8003d74:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	021b      	lsls	r3, r3, #8
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	011a      	lsls	r2, r3, #4
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	031b      	lsls	r3, r3, #12
 8003da0:	4313      	orrs	r3, r2
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003dae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003db6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d122      	bne.n	8003e78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d11b      	bne.n	8003e78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f06f 0202 	mvn.w	r2, #2
 8003e48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fa77 	bl	8004352 <HAL_TIM_IC_CaptureCallback>
 8003e64:	e005      	b.n	8003e72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fa69 	bl	800433e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fa7a 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d122      	bne.n	8003ecc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d11b      	bne.n	8003ecc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f06f 0204 	mvn.w	r2, #4
 8003e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fa4d 	bl	8004352 <HAL_TIM_IC_CaptureCallback>
 8003eb8:	e005      	b.n	8003ec6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fa3f 	bl	800433e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 fa50 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d122      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d11b      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0208 	mvn.w	r2, #8
 8003ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2204      	movs	r2, #4
 8003ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 fa23 	bl	8004352 <HAL_TIM_IC_CaptureCallback>
 8003f0c:	e005      	b.n	8003f1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fa15 	bl	800433e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 fa26 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f003 0310 	and.w	r3, r3, #16
 8003f2a:	2b10      	cmp	r3, #16
 8003f2c:	d122      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0310 	and.w	r3, r3, #16
 8003f38:	2b10      	cmp	r3, #16
 8003f3a:	d11b      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0210 	mvn.w	r2, #16
 8003f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2208      	movs	r2, #8
 8003f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f9f9 	bl	8004352 <HAL_TIM_IC_CaptureCallback>
 8003f60:	e005      	b.n	8003f6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f9eb 	bl	800433e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f9fc 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d10e      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d107      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0201 	mvn.w	r2, #1
 8003f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7fe f92c 	bl	80021f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003faa:	2b80      	cmp	r3, #128	; 0x80
 8003fac:	d10e      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb8:	2b80      	cmp	r3, #128	; 0x80
 8003fba:	d107      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fd26 	bl	8004a18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd6:	2b40      	cmp	r3, #64	; 0x40
 8003fd8:	d10e      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe4:	2b40      	cmp	r3, #64	; 0x40
 8003fe6:	d107      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f9c1 	bl	800437a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b20      	cmp	r3, #32
 8004004:	d10e      	bne.n	8004024 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0320 	and.w	r3, r3, #32
 8004010:	2b20      	cmp	r3, #32
 8004012:	d107      	bne.n	8004024 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0220 	mvn.w	r2, #32
 800401c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fcf0 	bl	8004a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004024:	bf00      	nop
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004038:	2300      	movs	r3, #0
 800403a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004046:	2302      	movs	r3, #2
 8004048:	e0ae      	b.n	80041a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b0c      	cmp	r3, #12
 8004056:	f200 809f 	bhi.w	8004198 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800405a:	a201      	add	r2, pc, #4	; (adr r2, 8004060 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800405c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004060:	08004095 	.word	0x08004095
 8004064:	08004199 	.word	0x08004199
 8004068:	08004199 	.word	0x08004199
 800406c:	08004199 	.word	0x08004199
 8004070:	080040d5 	.word	0x080040d5
 8004074:	08004199 	.word	0x08004199
 8004078:	08004199 	.word	0x08004199
 800407c:	08004199 	.word	0x08004199
 8004080:	08004117 	.word	0x08004117
 8004084:	08004199 	.word	0x08004199
 8004088:	08004199 	.word	0x08004199
 800408c:	08004199 	.word	0x08004199
 8004090:	08004157 	.word	0x08004157
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68b9      	ldr	r1, [r7, #8]
 800409a:	4618      	mov	r0, r3
 800409c:	f000 f9f8 	bl	8004490 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699a      	ldr	r2, [r3, #24]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0208 	orr.w	r2, r2, #8
 80040ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699a      	ldr	r2, [r3, #24]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0204 	bic.w	r2, r2, #4
 80040be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6999      	ldr	r1, [r3, #24]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	691a      	ldr	r2, [r3, #16]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	619a      	str	r2, [r3, #24]
      break;
 80040d2:	e064      	b.n	800419e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fa3e 	bl	800455c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699a      	ldr	r2, [r3, #24]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699a      	ldr	r2, [r3, #24]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6999      	ldr	r1, [r3, #24]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	021a      	lsls	r2, r3, #8
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	619a      	str	r2, [r3, #24]
      break;
 8004114:	e043      	b.n	800419e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68b9      	ldr	r1, [r7, #8]
 800411c:	4618      	mov	r0, r3
 800411e:	f000 fa89 	bl	8004634 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	69da      	ldr	r2, [r3, #28]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f042 0208 	orr.w	r2, r2, #8
 8004130:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	69da      	ldr	r2, [r3, #28]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0204 	bic.w	r2, r2, #4
 8004140:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69d9      	ldr	r1, [r3, #28]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	61da      	str	r2, [r3, #28]
      break;
 8004154:	e023      	b.n	800419e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68b9      	ldr	r1, [r7, #8]
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fad3 	bl	8004708 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	69da      	ldr	r2, [r3, #28]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	69da      	ldr	r2, [r3, #28]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69d9      	ldr	r1, [r3, #28]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	021a      	lsls	r2, r3, #8
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	61da      	str	r2, [r3, #28]
      break;
 8004196:	e002      	b.n	800419e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	75fb      	strb	r3, [r7, #23]
      break;
 800419c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3718      	adds	r7, #24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_TIM_ConfigClockSource+0x1c>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e0b4      	b.n	8004336 <HAL_TIM_ConfigClockSource+0x186>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004204:	d03e      	beq.n	8004284 <HAL_TIM_ConfigClockSource+0xd4>
 8004206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800420a:	f200 8087 	bhi.w	800431c <HAL_TIM_ConfigClockSource+0x16c>
 800420e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004212:	f000 8086 	beq.w	8004322 <HAL_TIM_ConfigClockSource+0x172>
 8004216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421a:	d87f      	bhi.n	800431c <HAL_TIM_ConfigClockSource+0x16c>
 800421c:	2b70      	cmp	r3, #112	; 0x70
 800421e:	d01a      	beq.n	8004256 <HAL_TIM_ConfigClockSource+0xa6>
 8004220:	2b70      	cmp	r3, #112	; 0x70
 8004222:	d87b      	bhi.n	800431c <HAL_TIM_ConfigClockSource+0x16c>
 8004224:	2b60      	cmp	r3, #96	; 0x60
 8004226:	d050      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0x11a>
 8004228:	2b60      	cmp	r3, #96	; 0x60
 800422a:	d877      	bhi.n	800431c <HAL_TIM_ConfigClockSource+0x16c>
 800422c:	2b50      	cmp	r3, #80	; 0x50
 800422e:	d03c      	beq.n	80042aa <HAL_TIM_ConfigClockSource+0xfa>
 8004230:	2b50      	cmp	r3, #80	; 0x50
 8004232:	d873      	bhi.n	800431c <HAL_TIM_ConfigClockSource+0x16c>
 8004234:	2b40      	cmp	r3, #64	; 0x40
 8004236:	d058      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x13a>
 8004238:	2b40      	cmp	r3, #64	; 0x40
 800423a:	d86f      	bhi.n	800431c <HAL_TIM_ConfigClockSource+0x16c>
 800423c:	2b30      	cmp	r3, #48	; 0x30
 800423e:	d064      	beq.n	800430a <HAL_TIM_ConfigClockSource+0x15a>
 8004240:	2b30      	cmp	r3, #48	; 0x30
 8004242:	d86b      	bhi.n	800431c <HAL_TIM_ConfigClockSource+0x16c>
 8004244:	2b20      	cmp	r3, #32
 8004246:	d060      	beq.n	800430a <HAL_TIM_ConfigClockSource+0x15a>
 8004248:	2b20      	cmp	r3, #32
 800424a:	d867      	bhi.n	800431c <HAL_TIM_ConfigClockSource+0x16c>
 800424c:	2b00      	cmp	r3, #0
 800424e:	d05c      	beq.n	800430a <HAL_TIM_ConfigClockSource+0x15a>
 8004250:	2b10      	cmp	r3, #16
 8004252:	d05a      	beq.n	800430a <HAL_TIM_ConfigClockSource+0x15a>
 8004254:	e062      	b.n	800431c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6899      	ldr	r1, [r3, #8]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f000 fb19 	bl	800489c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004278:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	609a      	str	r2, [r3, #8]
      break;
 8004282:	e04f      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6818      	ldr	r0, [r3, #0]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	6899      	ldr	r1, [r3, #8]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f000 fb02 	bl	800489c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689a      	ldr	r2, [r3, #8]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042a6:	609a      	str	r2, [r3, #8]
      break;
 80042a8:	e03c      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6859      	ldr	r1, [r3, #4]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	461a      	mov	r2, r3
 80042b8:	f000 fa76 	bl	80047a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2150      	movs	r1, #80	; 0x50
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 facf 	bl	8004866 <TIM_ITRx_SetConfig>
      break;
 80042c8:	e02c      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6818      	ldr	r0, [r3, #0]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	6859      	ldr	r1, [r3, #4]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	461a      	mov	r2, r3
 80042d8:	f000 fa95 	bl	8004806 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2160      	movs	r1, #96	; 0x60
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fabf 	bl	8004866 <TIM_ITRx_SetConfig>
      break;
 80042e8:	e01c      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6818      	ldr	r0, [r3, #0]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	6859      	ldr	r1, [r3, #4]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	461a      	mov	r2, r3
 80042f8:	f000 fa56 	bl	80047a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2140      	movs	r1, #64	; 0x40
 8004302:	4618      	mov	r0, r3
 8004304:	f000 faaf 	bl	8004866 <TIM_ITRx_SetConfig>
      break;
 8004308:	e00c      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4619      	mov	r1, r3
 8004314:	4610      	mov	r0, r2
 8004316:	f000 faa6 	bl	8004866 <TIM_ITRx_SetConfig>
      break;
 800431a:	e003      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	73fb      	strb	r3, [r7, #15]
      break;
 8004320:	e000      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004322:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004334:	7bfb      	ldrb	r3, [r7, #15]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
	...

08004390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a34      	ldr	r2, [pc, #208]	; (8004474 <TIM_Base_SetConfig+0xe4>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d00f      	beq.n	80043c8 <TIM_Base_SetConfig+0x38>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ae:	d00b      	beq.n	80043c8 <TIM_Base_SetConfig+0x38>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a31      	ldr	r2, [pc, #196]	; (8004478 <TIM_Base_SetConfig+0xe8>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d007      	beq.n	80043c8 <TIM_Base_SetConfig+0x38>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a30      	ldr	r2, [pc, #192]	; (800447c <TIM_Base_SetConfig+0xec>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d003      	beq.n	80043c8 <TIM_Base_SetConfig+0x38>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a2f      	ldr	r2, [pc, #188]	; (8004480 <TIM_Base_SetConfig+0xf0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d108      	bne.n	80043da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a25      	ldr	r2, [pc, #148]	; (8004474 <TIM_Base_SetConfig+0xe4>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d01b      	beq.n	800441a <TIM_Base_SetConfig+0x8a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e8:	d017      	beq.n	800441a <TIM_Base_SetConfig+0x8a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a22      	ldr	r2, [pc, #136]	; (8004478 <TIM_Base_SetConfig+0xe8>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d013      	beq.n	800441a <TIM_Base_SetConfig+0x8a>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a21      	ldr	r2, [pc, #132]	; (800447c <TIM_Base_SetConfig+0xec>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00f      	beq.n	800441a <TIM_Base_SetConfig+0x8a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a20      	ldr	r2, [pc, #128]	; (8004480 <TIM_Base_SetConfig+0xf0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d00b      	beq.n	800441a <TIM_Base_SetConfig+0x8a>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a1f      	ldr	r2, [pc, #124]	; (8004484 <TIM_Base_SetConfig+0xf4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d007      	beq.n	800441a <TIM_Base_SetConfig+0x8a>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a1e      	ldr	r2, [pc, #120]	; (8004488 <TIM_Base_SetConfig+0xf8>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d003      	beq.n	800441a <TIM_Base_SetConfig+0x8a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a1d      	ldr	r2, [pc, #116]	; (800448c <TIM_Base_SetConfig+0xfc>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d108      	bne.n	800442c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4313      	orrs	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a08      	ldr	r2, [pc, #32]	; (8004474 <TIM_Base_SetConfig+0xe4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d103      	bne.n	8004460 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	615a      	str	r2, [r3, #20]
}
 8004466:	bf00      	nop
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	40010000 	.word	0x40010000
 8004478:	40000400 	.word	0x40000400
 800447c:	40000800 	.word	0x40000800
 8004480:	40000c00 	.word	0x40000c00
 8004484:	40014000 	.word	0x40014000
 8004488:	40014400 	.word	0x40014400
 800448c:	40014800 	.word	0x40014800

08004490 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	f023 0201 	bic.w	r2, r3, #1
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f023 0303 	bic.w	r3, r3, #3
 80044c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f023 0302 	bic.w	r3, r3, #2
 80044d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a1c      	ldr	r2, [pc, #112]	; (8004558 <TIM_OC1_SetConfig+0xc8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d10c      	bne.n	8004506 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f023 0308 	bic.w	r3, r3, #8
 80044f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f023 0304 	bic.w	r3, r3, #4
 8004504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a13      	ldr	r2, [pc, #76]	; (8004558 <TIM_OC1_SetConfig+0xc8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d111      	bne.n	8004532 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800451c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	621a      	str	r2, [r3, #32]
}
 800454c:	bf00      	nop
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	40010000 	.word	0x40010000

0800455c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	f023 0210 	bic.w	r2, r3, #16
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800458a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	021b      	lsls	r3, r3, #8
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f023 0320 	bic.w	r3, r3, #32
 80045a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a1e      	ldr	r2, [pc, #120]	; (8004630 <TIM_OC2_SetConfig+0xd4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d10d      	bne.n	80045d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a15      	ldr	r2, [pc, #84]	; (8004630 <TIM_OC2_SetConfig+0xd4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d113      	bne.n	8004608 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	621a      	str	r2, [r3, #32]
}
 8004622:	bf00      	nop
 8004624:	371c      	adds	r7, #28
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40010000 	.word	0x40010000

08004634 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f023 0303 	bic.w	r3, r3, #3
 800466a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800467c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	021b      	lsls	r3, r3, #8
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a1d      	ldr	r2, [pc, #116]	; (8004704 <TIM_OC3_SetConfig+0xd0>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d10d      	bne.n	80046ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004698:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	021b      	lsls	r3, r3, #8
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a14      	ldr	r2, [pc, #80]	; (8004704 <TIM_OC3_SetConfig+0xd0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d113      	bne.n	80046de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	4313      	orrs	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	621a      	str	r2, [r3, #32]
}
 80046f8:	bf00      	nop
 80046fa:	371c      	adds	r7, #28
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	40010000 	.word	0x40010000

08004708 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800473e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	021b      	lsls	r3, r3, #8
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4313      	orrs	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004752:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	031b      	lsls	r3, r3, #12
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4313      	orrs	r3, r2
 800475e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a10      	ldr	r2, [pc, #64]	; (80047a4 <TIM_OC4_SetConfig+0x9c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d109      	bne.n	800477c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800476e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	019b      	lsls	r3, r3, #6
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	4313      	orrs	r3, r2
 800477a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	621a      	str	r2, [r3, #32]
}
 8004796:	bf00      	nop
 8004798:	371c      	adds	r7, #28
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40010000 	.word	0x40010000

080047a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	f023 0201 	bic.w	r2, r3, #1
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	4313      	orrs	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f023 030a 	bic.w	r3, r3, #10
 80047e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	621a      	str	r2, [r3, #32]
}
 80047fa:	bf00      	nop
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004806:	b480      	push	{r7}
 8004808:	b087      	sub	sp, #28
 800480a:	af00      	add	r7, sp, #0
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	f023 0210 	bic.w	r2, r3, #16
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004830:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	031b      	lsls	r3, r3, #12
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	4313      	orrs	r3, r2
 800483a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004842:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4313      	orrs	r3, r2
 800484c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	621a      	str	r2, [r3, #32]
}
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004866:	b480      	push	{r7}
 8004868:	b085      	sub	sp, #20
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	f043 0307 	orr.w	r3, r3, #7
 8004888:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	609a      	str	r2, [r3, #8]
}
 8004890:	bf00      	nop
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	021a      	lsls	r2, r3, #8
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	431a      	orrs	r2, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	609a      	str	r2, [r3, #8]
}
 80048d0:	bf00      	nop
 80048d2:	371c      	adds	r7, #28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f003 031f 	and.w	r3, r3, #31
 80048ee:	2201      	movs	r2, #1
 80048f0:	fa02 f303 	lsl.w	r3, r2, r3
 80048f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a1a      	ldr	r2, [r3, #32]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	43db      	mvns	r3, r3
 80048fe:	401a      	ands	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a1a      	ldr	r2, [r3, #32]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f003 031f 	and.w	r3, r3, #31
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	fa01 f303 	lsl.w	r3, r1, r3
 8004914:	431a      	orrs	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	621a      	str	r2, [r3, #32]
}
 800491a:	bf00      	nop
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
	...

08004928 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800493c:	2302      	movs	r3, #2
 800493e:	e050      	b.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004966:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a1c      	ldr	r2, [pc, #112]	; (80049f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d018      	beq.n	80049b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498c:	d013      	beq.n	80049b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a18      	ldr	r2, [pc, #96]	; (80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d00e      	beq.n	80049b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a16      	ldr	r2, [pc, #88]	; (80049f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d009      	beq.n	80049b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a15      	ldr	r2, [pc, #84]	; (80049fc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d004      	beq.n	80049b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a13      	ldr	r2, [pc, #76]	; (8004a00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d10c      	bne.n	80049d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40010000 	.word	0x40010000
 80049f4:	40000400 	.word	0x40000400
 80049f8:	40000800 	.word	0x40000800
 80049fc:	40000c00 	.word	0x40000c00
 8004a00:	40014000 	.word	0x40014000

08004a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e03f      	b.n	8004abe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d106      	bne.n	8004a58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fd fe26 	bl	80026a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2224      	movs	r2, #36	; 0x24
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f929 	bl	8004cc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	691a      	ldr	r2, [r3, #16]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	695a      	ldr	r2, [r3, #20]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68da      	ldr	r2, [r3, #12]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004aa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b08a      	sub	sp, #40	; 0x28
 8004aca:	af02      	add	r7, sp, #8
 8004acc:	60f8      	str	r0, [r7, #12]
 8004ace:	60b9      	str	r1, [r7, #8]
 8004ad0:	603b      	str	r3, [r7, #0]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	d17c      	bne.n	8004be0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d002      	beq.n	8004af2 <HAL_UART_Transmit+0x2c>
 8004aec:	88fb      	ldrh	r3, [r7, #6]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e075      	b.n	8004be2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <HAL_UART_Transmit+0x3e>
 8004b00:	2302      	movs	r3, #2
 8004b02:	e06e      	b.n	8004be2 <HAL_UART_Transmit+0x11c>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2221      	movs	r2, #33	; 0x21
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b1a:	f7fd ff8b 	bl	8002a34 <HAL_GetTick>
 8004b1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	88fa      	ldrh	r2, [r7, #6]
 8004b24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	88fa      	ldrh	r2, [r7, #6]
 8004b2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b34:	d108      	bne.n	8004b48 <HAL_UART_Transmit+0x82>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d104      	bne.n	8004b48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	61bb      	str	r3, [r7, #24]
 8004b46:	e003      	b.n	8004b50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b58:	e02a      	b.n	8004bb0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2200      	movs	r2, #0
 8004b62:	2180      	movs	r1, #128	; 0x80
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 f840 	bl	8004bea <UART_WaitOnFlagUntilTimeout>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e036      	b.n	8004be2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10b      	bne.n	8004b92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	3302      	adds	r3, #2
 8004b8e:	61bb      	str	r3, [r7, #24]
 8004b90:	e007      	b.n	8004ba2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	781a      	ldrb	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1cf      	bne.n	8004b5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	2140      	movs	r1, #64	; 0x40
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 f810 	bl	8004bea <UART_WaitOnFlagUntilTimeout>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e006      	b.n	8004be2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	e000      	b.n	8004be2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004be0:	2302      	movs	r3, #2
  }
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3720      	adds	r7, #32
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b090      	sub	sp, #64	; 0x40
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	60f8      	str	r0, [r7, #12]
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	603b      	str	r3, [r7, #0]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bfa:	e050      	b.n	8004c9e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c02:	d04c      	beq.n	8004c9e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d007      	beq.n	8004c1a <UART_WaitOnFlagUntilTimeout+0x30>
 8004c0a:	f7fd ff13 	bl	8002a34 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d241      	bcs.n	8004c9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	330c      	adds	r3, #12
 8004c20:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c24:	e853 3f00 	ldrex	r3, [r3]
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	330c      	adds	r3, #12
 8004c38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c3a:	637a      	str	r2, [r7, #52]	; 0x34
 8004c3c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c42:	e841 2300 	strex	r3, r2, [r1]
 8004c46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1e5      	bne.n	8004c1a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3314      	adds	r3, #20
 8004c54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	e853 3f00 	ldrex	r3, [r3]
 8004c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f023 0301 	bic.w	r3, r3, #1
 8004c64:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3314      	adds	r3, #20
 8004c6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c6e:	623a      	str	r2, [r7, #32]
 8004c70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c72:	69f9      	ldr	r1, [r7, #28]
 8004c74:	6a3a      	ldr	r2, [r7, #32]
 8004c76:	e841 2300 	strex	r3, r2, [r1]
 8004c7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1e5      	bne.n	8004c4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e00f      	b.n	8004cbe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	bf0c      	ite	eq
 8004cae:	2301      	moveq	r3, #1
 8004cb0:	2300      	movne	r3, #0
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	79fb      	ldrb	r3, [r7, #7]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d09f      	beq.n	8004bfc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3740      	adds	r7, #64	; 0x40
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ccc:	b0c0      	sub	sp, #256	; 0x100
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce4:	68d9      	ldr	r1, [r3, #12]
 8004ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	ea40 0301 	orr.w	r3, r0, r1
 8004cf0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	431a      	orrs	r2, r3
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d20:	f021 010c 	bic.w	r1, r1, #12
 8004d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d2e:	430b      	orrs	r3, r1
 8004d30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d42:	6999      	ldr	r1, [r3, #24]
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	ea40 0301 	orr.w	r3, r0, r1
 8004d4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	4b8f      	ldr	r3, [pc, #572]	; (8004f94 <UART_SetConfig+0x2cc>)
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d005      	beq.n	8004d68 <UART_SetConfig+0xa0>
 8004d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	4b8d      	ldr	r3, [pc, #564]	; (8004f98 <UART_SetConfig+0x2d0>)
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d104      	bne.n	8004d72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d68:	f7fe fd88 	bl	800387c <HAL_RCC_GetPCLK2Freq>
 8004d6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d70:	e003      	b.n	8004d7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d72:	f7fe fd6f 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 8004d76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d84:	f040 810c 	bne.w	8004fa0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d9a:	4622      	mov	r2, r4
 8004d9c:	462b      	mov	r3, r5
 8004d9e:	1891      	adds	r1, r2, r2
 8004da0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004da2:	415b      	adcs	r3, r3
 8004da4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004da6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004daa:	4621      	mov	r1, r4
 8004dac:	eb12 0801 	adds.w	r8, r2, r1
 8004db0:	4629      	mov	r1, r5
 8004db2:	eb43 0901 	adc.w	r9, r3, r1
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dca:	4690      	mov	r8, r2
 8004dcc:	4699      	mov	r9, r3
 8004dce:	4623      	mov	r3, r4
 8004dd0:	eb18 0303 	adds.w	r3, r8, r3
 8004dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dd8:	462b      	mov	r3, r5
 8004dda:	eb49 0303 	adc.w	r3, r9, r3
 8004dde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004df2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004df6:	460b      	mov	r3, r1
 8004df8:	18db      	adds	r3, r3, r3
 8004dfa:	653b      	str	r3, [r7, #80]	; 0x50
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	eb42 0303 	adc.w	r3, r2, r3
 8004e02:	657b      	str	r3, [r7, #84]	; 0x54
 8004e04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e0c:	f7fb ff44 	bl	8000c98 <__aeabi_uldivmod>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4b61      	ldr	r3, [pc, #388]	; (8004f9c <UART_SetConfig+0x2d4>)
 8004e16:	fba3 2302 	umull	r2, r3, r3, r2
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	011c      	lsls	r4, r3, #4
 8004e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e22:	2200      	movs	r2, #0
 8004e24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e30:	4642      	mov	r2, r8
 8004e32:	464b      	mov	r3, r9
 8004e34:	1891      	adds	r1, r2, r2
 8004e36:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e38:	415b      	adcs	r3, r3
 8004e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e40:	4641      	mov	r1, r8
 8004e42:	eb12 0a01 	adds.w	sl, r2, r1
 8004e46:	4649      	mov	r1, r9
 8004e48:	eb43 0b01 	adc.w	fp, r3, r1
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e60:	4692      	mov	sl, r2
 8004e62:	469b      	mov	fp, r3
 8004e64:	4643      	mov	r3, r8
 8004e66:	eb1a 0303 	adds.w	r3, sl, r3
 8004e6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e6e:	464b      	mov	r3, r9
 8004e70:	eb4b 0303 	adc.w	r3, fp, r3
 8004e74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	18db      	adds	r3, r3, r3
 8004e90:	643b      	str	r3, [r7, #64]	; 0x40
 8004e92:	4613      	mov	r3, r2
 8004e94:	eb42 0303 	adc.w	r3, r2, r3
 8004e98:	647b      	str	r3, [r7, #68]	; 0x44
 8004e9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ea2:	f7fb fef9 	bl	8000c98 <__aeabi_uldivmod>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	4611      	mov	r1, r2
 8004eac:	4b3b      	ldr	r3, [pc, #236]	; (8004f9c <UART_SetConfig+0x2d4>)
 8004eae:	fba3 2301 	umull	r2, r3, r3, r1
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	2264      	movs	r2, #100	; 0x64
 8004eb6:	fb02 f303 	mul.w	r3, r2, r3
 8004eba:	1acb      	subs	r3, r1, r3
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ec2:	4b36      	ldr	r3, [pc, #216]	; (8004f9c <UART_SetConfig+0x2d4>)
 8004ec4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ec8:	095b      	lsrs	r3, r3, #5
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ed0:	441c      	add	r4, r3
 8004ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004edc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ee0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ee4:	4642      	mov	r2, r8
 8004ee6:	464b      	mov	r3, r9
 8004ee8:	1891      	adds	r1, r2, r2
 8004eea:	63b9      	str	r1, [r7, #56]	; 0x38
 8004eec:	415b      	adcs	r3, r3
 8004eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ef0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ef4:	4641      	mov	r1, r8
 8004ef6:	1851      	adds	r1, r2, r1
 8004ef8:	6339      	str	r1, [r7, #48]	; 0x30
 8004efa:	4649      	mov	r1, r9
 8004efc:	414b      	adcs	r3, r1
 8004efe:	637b      	str	r3, [r7, #52]	; 0x34
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	f04f 0300 	mov.w	r3, #0
 8004f08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f0c:	4659      	mov	r1, fp
 8004f0e:	00cb      	lsls	r3, r1, #3
 8004f10:	4651      	mov	r1, sl
 8004f12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f16:	4651      	mov	r1, sl
 8004f18:	00ca      	lsls	r2, r1, #3
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4603      	mov	r3, r0
 8004f20:	4642      	mov	r2, r8
 8004f22:	189b      	adds	r3, r3, r2
 8004f24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f28:	464b      	mov	r3, r9
 8004f2a:	460a      	mov	r2, r1
 8004f2c:	eb42 0303 	adc.w	r3, r2, r3
 8004f30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f48:	460b      	mov	r3, r1
 8004f4a:	18db      	adds	r3, r3, r3
 8004f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f4e:	4613      	mov	r3, r2
 8004f50:	eb42 0303 	adc.w	r3, r2, r3
 8004f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f5e:	f7fb fe9b 	bl	8000c98 <__aeabi_uldivmod>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4b0d      	ldr	r3, [pc, #52]	; (8004f9c <UART_SetConfig+0x2d4>)
 8004f68:	fba3 1302 	umull	r1, r3, r3, r2
 8004f6c:	095b      	lsrs	r3, r3, #5
 8004f6e:	2164      	movs	r1, #100	; 0x64
 8004f70:	fb01 f303 	mul.w	r3, r1, r3
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	3332      	adds	r3, #50	; 0x32
 8004f7a:	4a08      	ldr	r2, [pc, #32]	; (8004f9c <UART_SetConfig+0x2d4>)
 8004f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f80:	095b      	lsrs	r3, r3, #5
 8004f82:	f003 0207 	and.w	r2, r3, #7
 8004f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4422      	add	r2, r4
 8004f8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f90:	e105      	b.n	800519e <UART_SetConfig+0x4d6>
 8004f92:	bf00      	nop
 8004f94:	40011000 	.word	0x40011000
 8004f98:	40011400 	.word	0x40011400
 8004f9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004faa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004fae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fb2:	4642      	mov	r2, r8
 8004fb4:	464b      	mov	r3, r9
 8004fb6:	1891      	adds	r1, r2, r2
 8004fb8:	6239      	str	r1, [r7, #32]
 8004fba:	415b      	adcs	r3, r3
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8004fbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fc2:	4641      	mov	r1, r8
 8004fc4:	1854      	adds	r4, r2, r1
 8004fc6:	4649      	mov	r1, r9
 8004fc8:	eb43 0501 	adc.w	r5, r3, r1
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	00eb      	lsls	r3, r5, #3
 8004fd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fda:	00e2      	lsls	r2, r4, #3
 8004fdc:	4614      	mov	r4, r2
 8004fde:	461d      	mov	r5, r3
 8004fe0:	4643      	mov	r3, r8
 8004fe2:	18e3      	adds	r3, r4, r3
 8004fe4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fe8:	464b      	mov	r3, r9
 8004fea:	eb45 0303 	adc.w	r3, r5, r3
 8004fee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ffe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005002:	f04f 0200 	mov.w	r2, #0
 8005006:	f04f 0300 	mov.w	r3, #0
 800500a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800500e:	4629      	mov	r1, r5
 8005010:	008b      	lsls	r3, r1, #2
 8005012:	4621      	mov	r1, r4
 8005014:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005018:	4621      	mov	r1, r4
 800501a:	008a      	lsls	r2, r1, #2
 800501c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005020:	f7fb fe3a 	bl	8000c98 <__aeabi_uldivmod>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4b60      	ldr	r3, [pc, #384]	; (80051ac <UART_SetConfig+0x4e4>)
 800502a:	fba3 2302 	umull	r2, r3, r3, r2
 800502e:	095b      	lsrs	r3, r3, #5
 8005030:	011c      	lsls	r4, r3, #4
 8005032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005036:	2200      	movs	r2, #0
 8005038:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800503c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005040:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005044:	4642      	mov	r2, r8
 8005046:	464b      	mov	r3, r9
 8005048:	1891      	adds	r1, r2, r2
 800504a:	61b9      	str	r1, [r7, #24]
 800504c:	415b      	adcs	r3, r3
 800504e:	61fb      	str	r3, [r7, #28]
 8005050:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005054:	4641      	mov	r1, r8
 8005056:	1851      	adds	r1, r2, r1
 8005058:	6139      	str	r1, [r7, #16]
 800505a:	4649      	mov	r1, r9
 800505c:	414b      	adcs	r3, r1
 800505e:	617b      	str	r3, [r7, #20]
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	f04f 0300 	mov.w	r3, #0
 8005068:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800506c:	4659      	mov	r1, fp
 800506e:	00cb      	lsls	r3, r1, #3
 8005070:	4651      	mov	r1, sl
 8005072:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005076:	4651      	mov	r1, sl
 8005078:	00ca      	lsls	r2, r1, #3
 800507a:	4610      	mov	r0, r2
 800507c:	4619      	mov	r1, r3
 800507e:	4603      	mov	r3, r0
 8005080:	4642      	mov	r2, r8
 8005082:	189b      	adds	r3, r3, r2
 8005084:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005088:	464b      	mov	r3, r9
 800508a:	460a      	mov	r2, r1
 800508c:	eb42 0303 	adc.w	r3, r2, r3
 8005090:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	67bb      	str	r3, [r7, #120]	; 0x78
 800509e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050a0:	f04f 0200 	mov.w	r2, #0
 80050a4:	f04f 0300 	mov.w	r3, #0
 80050a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050ac:	4649      	mov	r1, r9
 80050ae:	008b      	lsls	r3, r1, #2
 80050b0:	4641      	mov	r1, r8
 80050b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050b6:	4641      	mov	r1, r8
 80050b8:	008a      	lsls	r2, r1, #2
 80050ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050be:	f7fb fdeb 	bl	8000c98 <__aeabi_uldivmod>
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	4b39      	ldr	r3, [pc, #228]	; (80051ac <UART_SetConfig+0x4e4>)
 80050c8:	fba3 1302 	umull	r1, r3, r3, r2
 80050cc:	095b      	lsrs	r3, r3, #5
 80050ce:	2164      	movs	r1, #100	; 0x64
 80050d0:	fb01 f303 	mul.w	r3, r1, r3
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	3332      	adds	r3, #50	; 0x32
 80050da:	4a34      	ldr	r2, [pc, #208]	; (80051ac <UART_SetConfig+0x4e4>)
 80050dc:	fba2 2303 	umull	r2, r3, r2, r3
 80050e0:	095b      	lsrs	r3, r3, #5
 80050e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050e6:	441c      	add	r4, r3
 80050e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050ec:	2200      	movs	r2, #0
 80050ee:	673b      	str	r3, [r7, #112]	; 0x70
 80050f0:	677a      	str	r2, [r7, #116]	; 0x74
 80050f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050f6:	4642      	mov	r2, r8
 80050f8:	464b      	mov	r3, r9
 80050fa:	1891      	adds	r1, r2, r2
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	415b      	adcs	r3, r3
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005106:	4641      	mov	r1, r8
 8005108:	1851      	adds	r1, r2, r1
 800510a:	6039      	str	r1, [r7, #0]
 800510c:	4649      	mov	r1, r9
 800510e:	414b      	adcs	r3, r1
 8005110:	607b      	str	r3, [r7, #4]
 8005112:	f04f 0200 	mov.w	r2, #0
 8005116:	f04f 0300 	mov.w	r3, #0
 800511a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800511e:	4659      	mov	r1, fp
 8005120:	00cb      	lsls	r3, r1, #3
 8005122:	4651      	mov	r1, sl
 8005124:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005128:	4651      	mov	r1, sl
 800512a:	00ca      	lsls	r2, r1, #3
 800512c:	4610      	mov	r0, r2
 800512e:	4619      	mov	r1, r3
 8005130:	4603      	mov	r3, r0
 8005132:	4642      	mov	r2, r8
 8005134:	189b      	adds	r3, r3, r2
 8005136:	66bb      	str	r3, [r7, #104]	; 0x68
 8005138:	464b      	mov	r3, r9
 800513a:	460a      	mov	r2, r1
 800513c:	eb42 0303 	adc.w	r3, r2, r3
 8005140:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	663b      	str	r3, [r7, #96]	; 0x60
 800514c:	667a      	str	r2, [r7, #100]	; 0x64
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	f04f 0300 	mov.w	r3, #0
 8005156:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800515a:	4649      	mov	r1, r9
 800515c:	008b      	lsls	r3, r1, #2
 800515e:	4641      	mov	r1, r8
 8005160:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005164:	4641      	mov	r1, r8
 8005166:	008a      	lsls	r2, r1, #2
 8005168:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800516c:	f7fb fd94 	bl	8000c98 <__aeabi_uldivmod>
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	4b0d      	ldr	r3, [pc, #52]	; (80051ac <UART_SetConfig+0x4e4>)
 8005176:	fba3 1302 	umull	r1, r3, r3, r2
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	2164      	movs	r1, #100	; 0x64
 800517e:	fb01 f303 	mul.w	r3, r1, r3
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	3332      	adds	r3, #50	; 0x32
 8005188:	4a08      	ldr	r2, [pc, #32]	; (80051ac <UART_SetConfig+0x4e4>)
 800518a:	fba2 2303 	umull	r2, r3, r2, r3
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	f003 020f 	and.w	r2, r3, #15
 8005194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4422      	add	r2, r4
 800519c:	609a      	str	r2, [r3, #8]
}
 800519e:	bf00      	nop
 80051a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80051a4:	46bd      	mov	sp, r7
 80051a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051aa:	bf00      	nop
 80051ac:	51eb851f 	.word	0x51eb851f

080051b0 <calloc>:
 80051b0:	4b02      	ldr	r3, [pc, #8]	; (80051bc <calloc+0xc>)
 80051b2:	460a      	mov	r2, r1
 80051b4:	4601      	mov	r1, r0
 80051b6:	6818      	ldr	r0, [r3, #0]
 80051b8:	f000 b856 	b.w	8005268 <_calloc_r>
 80051bc:	200000ac 	.word	0x200000ac

080051c0 <__errno>:
 80051c0:	4b01      	ldr	r3, [pc, #4]	; (80051c8 <__errno+0x8>)
 80051c2:	6818      	ldr	r0, [r3, #0]
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	200000ac 	.word	0x200000ac

080051cc <__libc_init_array>:
 80051cc:	b570      	push	{r4, r5, r6, lr}
 80051ce:	4d0d      	ldr	r5, [pc, #52]	; (8005204 <__libc_init_array+0x38>)
 80051d0:	4c0d      	ldr	r4, [pc, #52]	; (8005208 <__libc_init_array+0x3c>)
 80051d2:	1b64      	subs	r4, r4, r5
 80051d4:	10a4      	asrs	r4, r4, #2
 80051d6:	2600      	movs	r6, #0
 80051d8:	42a6      	cmp	r6, r4
 80051da:	d109      	bne.n	80051f0 <__libc_init_array+0x24>
 80051dc:	4d0b      	ldr	r5, [pc, #44]	; (800520c <__libc_init_array+0x40>)
 80051de:	4c0c      	ldr	r4, [pc, #48]	; (8005210 <__libc_init_array+0x44>)
 80051e0:	f004 fd2e 	bl	8009c40 <_init>
 80051e4:	1b64      	subs	r4, r4, r5
 80051e6:	10a4      	asrs	r4, r4, #2
 80051e8:	2600      	movs	r6, #0
 80051ea:	42a6      	cmp	r6, r4
 80051ec:	d105      	bne.n	80051fa <__libc_init_array+0x2e>
 80051ee:	bd70      	pop	{r4, r5, r6, pc}
 80051f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051f4:	4798      	blx	r3
 80051f6:	3601      	adds	r6, #1
 80051f8:	e7ee      	b.n	80051d8 <__libc_init_array+0xc>
 80051fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80051fe:	4798      	blx	r3
 8005200:	3601      	adds	r6, #1
 8005202:	e7f2      	b.n	80051ea <__libc_init_array+0x1e>
 8005204:	0800a16c 	.word	0x0800a16c
 8005208:	0800a16c 	.word	0x0800a16c
 800520c:	0800a16c 	.word	0x0800a16c
 8005210:	0800a170 	.word	0x0800a170

08005214 <malloc>:
 8005214:	4b02      	ldr	r3, [pc, #8]	; (8005220 <malloc+0xc>)
 8005216:	4601      	mov	r1, r0
 8005218:	6818      	ldr	r0, [r3, #0]
 800521a:	f000 b8a7 	b.w	800536c <_malloc_r>
 800521e:	bf00      	nop
 8005220:	200000ac 	.word	0x200000ac

08005224 <memmove>:
 8005224:	4288      	cmp	r0, r1
 8005226:	b510      	push	{r4, lr}
 8005228:	eb01 0402 	add.w	r4, r1, r2
 800522c:	d902      	bls.n	8005234 <memmove+0x10>
 800522e:	4284      	cmp	r4, r0
 8005230:	4623      	mov	r3, r4
 8005232:	d807      	bhi.n	8005244 <memmove+0x20>
 8005234:	1e43      	subs	r3, r0, #1
 8005236:	42a1      	cmp	r1, r4
 8005238:	d008      	beq.n	800524c <memmove+0x28>
 800523a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800523e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005242:	e7f8      	b.n	8005236 <memmove+0x12>
 8005244:	4402      	add	r2, r0
 8005246:	4601      	mov	r1, r0
 8005248:	428a      	cmp	r2, r1
 800524a:	d100      	bne.n	800524e <memmove+0x2a>
 800524c:	bd10      	pop	{r4, pc}
 800524e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005252:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005256:	e7f7      	b.n	8005248 <memmove+0x24>

08005258 <memset>:
 8005258:	4402      	add	r2, r0
 800525a:	4603      	mov	r3, r0
 800525c:	4293      	cmp	r3, r2
 800525e:	d100      	bne.n	8005262 <memset+0xa>
 8005260:	4770      	bx	lr
 8005262:	f803 1b01 	strb.w	r1, [r3], #1
 8005266:	e7f9      	b.n	800525c <memset+0x4>

08005268 <_calloc_r>:
 8005268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800526a:	fba1 2402 	umull	r2, r4, r1, r2
 800526e:	b94c      	cbnz	r4, 8005284 <_calloc_r+0x1c>
 8005270:	4611      	mov	r1, r2
 8005272:	9201      	str	r2, [sp, #4]
 8005274:	f000 f87a 	bl	800536c <_malloc_r>
 8005278:	9a01      	ldr	r2, [sp, #4]
 800527a:	4605      	mov	r5, r0
 800527c:	b930      	cbnz	r0, 800528c <_calloc_r+0x24>
 800527e:	4628      	mov	r0, r5
 8005280:	b003      	add	sp, #12
 8005282:	bd30      	pop	{r4, r5, pc}
 8005284:	220c      	movs	r2, #12
 8005286:	6002      	str	r2, [r0, #0]
 8005288:	2500      	movs	r5, #0
 800528a:	e7f8      	b.n	800527e <_calloc_r+0x16>
 800528c:	4621      	mov	r1, r4
 800528e:	f7ff ffe3 	bl	8005258 <memset>
 8005292:	e7f4      	b.n	800527e <_calloc_r+0x16>

08005294 <_free_r>:
 8005294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005296:	2900      	cmp	r1, #0
 8005298:	d044      	beq.n	8005324 <_free_r+0x90>
 800529a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800529e:	9001      	str	r0, [sp, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f1a1 0404 	sub.w	r4, r1, #4
 80052a6:	bfb8      	it	lt
 80052a8:	18e4      	addlt	r4, r4, r3
 80052aa:	f003 f94f 	bl	800854c <__malloc_lock>
 80052ae:	4a1e      	ldr	r2, [pc, #120]	; (8005328 <_free_r+0x94>)
 80052b0:	9801      	ldr	r0, [sp, #4]
 80052b2:	6813      	ldr	r3, [r2, #0]
 80052b4:	b933      	cbnz	r3, 80052c4 <_free_r+0x30>
 80052b6:	6063      	str	r3, [r4, #4]
 80052b8:	6014      	str	r4, [r2, #0]
 80052ba:	b003      	add	sp, #12
 80052bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052c0:	f003 b94a 	b.w	8008558 <__malloc_unlock>
 80052c4:	42a3      	cmp	r3, r4
 80052c6:	d908      	bls.n	80052da <_free_r+0x46>
 80052c8:	6825      	ldr	r5, [r4, #0]
 80052ca:	1961      	adds	r1, r4, r5
 80052cc:	428b      	cmp	r3, r1
 80052ce:	bf01      	itttt	eq
 80052d0:	6819      	ldreq	r1, [r3, #0]
 80052d2:	685b      	ldreq	r3, [r3, #4]
 80052d4:	1949      	addeq	r1, r1, r5
 80052d6:	6021      	streq	r1, [r4, #0]
 80052d8:	e7ed      	b.n	80052b6 <_free_r+0x22>
 80052da:	461a      	mov	r2, r3
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	b10b      	cbz	r3, 80052e4 <_free_r+0x50>
 80052e0:	42a3      	cmp	r3, r4
 80052e2:	d9fa      	bls.n	80052da <_free_r+0x46>
 80052e4:	6811      	ldr	r1, [r2, #0]
 80052e6:	1855      	adds	r5, r2, r1
 80052e8:	42a5      	cmp	r5, r4
 80052ea:	d10b      	bne.n	8005304 <_free_r+0x70>
 80052ec:	6824      	ldr	r4, [r4, #0]
 80052ee:	4421      	add	r1, r4
 80052f0:	1854      	adds	r4, r2, r1
 80052f2:	42a3      	cmp	r3, r4
 80052f4:	6011      	str	r1, [r2, #0]
 80052f6:	d1e0      	bne.n	80052ba <_free_r+0x26>
 80052f8:	681c      	ldr	r4, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	6053      	str	r3, [r2, #4]
 80052fe:	4421      	add	r1, r4
 8005300:	6011      	str	r1, [r2, #0]
 8005302:	e7da      	b.n	80052ba <_free_r+0x26>
 8005304:	d902      	bls.n	800530c <_free_r+0x78>
 8005306:	230c      	movs	r3, #12
 8005308:	6003      	str	r3, [r0, #0]
 800530a:	e7d6      	b.n	80052ba <_free_r+0x26>
 800530c:	6825      	ldr	r5, [r4, #0]
 800530e:	1961      	adds	r1, r4, r5
 8005310:	428b      	cmp	r3, r1
 8005312:	bf04      	itt	eq
 8005314:	6819      	ldreq	r1, [r3, #0]
 8005316:	685b      	ldreq	r3, [r3, #4]
 8005318:	6063      	str	r3, [r4, #4]
 800531a:	bf04      	itt	eq
 800531c:	1949      	addeq	r1, r1, r5
 800531e:	6021      	streq	r1, [r4, #0]
 8005320:	6054      	str	r4, [r2, #4]
 8005322:	e7ca      	b.n	80052ba <_free_r+0x26>
 8005324:	b003      	add	sp, #12
 8005326:	bd30      	pop	{r4, r5, pc}
 8005328:	20000458 	.word	0x20000458

0800532c <sbrk_aligned>:
 800532c:	b570      	push	{r4, r5, r6, lr}
 800532e:	4e0e      	ldr	r6, [pc, #56]	; (8005368 <sbrk_aligned+0x3c>)
 8005330:	460c      	mov	r4, r1
 8005332:	6831      	ldr	r1, [r6, #0]
 8005334:	4605      	mov	r5, r0
 8005336:	b911      	cbnz	r1, 800533e <sbrk_aligned+0x12>
 8005338:	f000 ff1e 	bl	8006178 <_sbrk_r>
 800533c:	6030      	str	r0, [r6, #0]
 800533e:	4621      	mov	r1, r4
 8005340:	4628      	mov	r0, r5
 8005342:	f000 ff19 	bl	8006178 <_sbrk_r>
 8005346:	1c43      	adds	r3, r0, #1
 8005348:	d00a      	beq.n	8005360 <sbrk_aligned+0x34>
 800534a:	1cc4      	adds	r4, r0, #3
 800534c:	f024 0403 	bic.w	r4, r4, #3
 8005350:	42a0      	cmp	r0, r4
 8005352:	d007      	beq.n	8005364 <sbrk_aligned+0x38>
 8005354:	1a21      	subs	r1, r4, r0
 8005356:	4628      	mov	r0, r5
 8005358:	f000 ff0e 	bl	8006178 <_sbrk_r>
 800535c:	3001      	adds	r0, #1
 800535e:	d101      	bne.n	8005364 <sbrk_aligned+0x38>
 8005360:	f04f 34ff 	mov.w	r4, #4294967295
 8005364:	4620      	mov	r0, r4
 8005366:	bd70      	pop	{r4, r5, r6, pc}
 8005368:	2000045c 	.word	0x2000045c

0800536c <_malloc_r>:
 800536c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005370:	1ccd      	adds	r5, r1, #3
 8005372:	f025 0503 	bic.w	r5, r5, #3
 8005376:	3508      	adds	r5, #8
 8005378:	2d0c      	cmp	r5, #12
 800537a:	bf38      	it	cc
 800537c:	250c      	movcc	r5, #12
 800537e:	2d00      	cmp	r5, #0
 8005380:	4607      	mov	r7, r0
 8005382:	db01      	blt.n	8005388 <_malloc_r+0x1c>
 8005384:	42a9      	cmp	r1, r5
 8005386:	d905      	bls.n	8005394 <_malloc_r+0x28>
 8005388:	230c      	movs	r3, #12
 800538a:	603b      	str	r3, [r7, #0]
 800538c:	2600      	movs	r6, #0
 800538e:	4630      	mov	r0, r6
 8005390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005394:	4e2e      	ldr	r6, [pc, #184]	; (8005450 <_malloc_r+0xe4>)
 8005396:	f003 f8d9 	bl	800854c <__malloc_lock>
 800539a:	6833      	ldr	r3, [r6, #0]
 800539c:	461c      	mov	r4, r3
 800539e:	bb34      	cbnz	r4, 80053ee <_malloc_r+0x82>
 80053a0:	4629      	mov	r1, r5
 80053a2:	4638      	mov	r0, r7
 80053a4:	f7ff ffc2 	bl	800532c <sbrk_aligned>
 80053a8:	1c43      	adds	r3, r0, #1
 80053aa:	4604      	mov	r4, r0
 80053ac:	d14d      	bne.n	800544a <_malloc_r+0xde>
 80053ae:	6834      	ldr	r4, [r6, #0]
 80053b0:	4626      	mov	r6, r4
 80053b2:	2e00      	cmp	r6, #0
 80053b4:	d140      	bne.n	8005438 <_malloc_r+0xcc>
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	4631      	mov	r1, r6
 80053ba:	4638      	mov	r0, r7
 80053bc:	eb04 0803 	add.w	r8, r4, r3
 80053c0:	f000 feda 	bl	8006178 <_sbrk_r>
 80053c4:	4580      	cmp	r8, r0
 80053c6:	d13a      	bne.n	800543e <_malloc_r+0xd2>
 80053c8:	6821      	ldr	r1, [r4, #0]
 80053ca:	3503      	adds	r5, #3
 80053cc:	1a6d      	subs	r5, r5, r1
 80053ce:	f025 0503 	bic.w	r5, r5, #3
 80053d2:	3508      	adds	r5, #8
 80053d4:	2d0c      	cmp	r5, #12
 80053d6:	bf38      	it	cc
 80053d8:	250c      	movcc	r5, #12
 80053da:	4629      	mov	r1, r5
 80053dc:	4638      	mov	r0, r7
 80053de:	f7ff ffa5 	bl	800532c <sbrk_aligned>
 80053e2:	3001      	adds	r0, #1
 80053e4:	d02b      	beq.n	800543e <_malloc_r+0xd2>
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	442b      	add	r3, r5
 80053ea:	6023      	str	r3, [r4, #0]
 80053ec:	e00e      	b.n	800540c <_malloc_r+0xa0>
 80053ee:	6822      	ldr	r2, [r4, #0]
 80053f0:	1b52      	subs	r2, r2, r5
 80053f2:	d41e      	bmi.n	8005432 <_malloc_r+0xc6>
 80053f4:	2a0b      	cmp	r2, #11
 80053f6:	d916      	bls.n	8005426 <_malloc_r+0xba>
 80053f8:	1961      	adds	r1, r4, r5
 80053fa:	42a3      	cmp	r3, r4
 80053fc:	6025      	str	r5, [r4, #0]
 80053fe:	bf18      	it	ne
 8005400:	6059      	strne	r1, [r3, #4]
 8005402:	6863      	ldr	r3, [r4, #4]
 8005404:	bf08      	it	eq
 8005406:	6031      	streq	r1, [r6, #0]
 8005408:	5162      	str	r2, [r4, r5]
 800540a:	604b      	str	r3, [r1, #4]
 800540c:	4638      	mov	r0, r7
 800540e:	f104 060b 	add.w	r6, r4, #11
 8005412:	f003 f8a1 	bl	8008558 <__malloc_unlock>
 8005416:	f026 0607 	bic.w	r6, r6, #7
 800541a:	1d23      	adds	r3, r4, #4
 800541c:	1af2      	subs	r2, r6, r3
 800541e:	d0b6      	beq.n	800538e <_malloc_r+0x22>
 8005420:	1b9b      	subs	r3, r3, r6
 8005422:	50a3      	str	r3, [r4, r2]
 8005424:	e7b3      	b.n	800538e <_malloc_r+0x22>
 8005426:	6862      	ldr	r2, [r4, #4]
 8005428:	42a3      	cmp	r3, r4
 800542a:	bf0c      	ite	eq
 800542c:	6032      	streq	r2, [r6, #0]
 800542e:	605a      	strne	r2, [r3, #4]
 8005430:	e7ec      	b.n	800540c <_malloc_r+0xa0>
 8005432:	4623      	mov	r3, r4
 8005434:	6864      	ldr	r4, [r4, #4]
 8005436:	e7b2      	b.n	800539e <_malloc_r+0x32>
 8005438:	4634      	mov	r4, r6
 800543a:	6876      	ldr	r6, [r6, #4]
 800543c:	e7b9      	b.n	80053b2 <_malloc_r+0x46>
 800543e:	230c      	movs	r3, #12
 8005440:	603b      	str	r3, [r7, #0]
 8005442:	4638      	mov	r0, r7
 8005444:	f003 f888 	bl	8008558 <__malloc_unlock>
 8005448:	e7a1      	b.n	800538e <_malloc_r+0x22>
 800544a:	6025      	str	r5, [r4, #0]
 800544c:	e7de      	b.n	800540c <_malloc_r+0xa0>
 800544e:	bf00      	nop
 8005450:	20000458 	.word	0x20000458

08005454 <__cvt>:
 8005454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005458:	ec55 4b10 	vmov	r4, r5, d0
 800545c:	2d00      	cmp	r5, #0
 800545e:	460e      	mov	r6, r1
 8005460:	4619      	mov	r1, r3
 8005462:	462b      	mov	r3, r5
 8005464:	bfbb      	ittet	lt
 8005466:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800546a:	461d      	movlt	r5, r3
 800546c:	2300      	movge	r3, #0
 800546e:	232d      	movlt	r3, #45	; 0x2d
 8005470:	700b      	strb	r3, [r1, #0]
 8005472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005474:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005478:	4691      	mov	r9, r2
 800547a:	f023 0820 	bic.w	r8, r3, #32
 800547e:	bfbc      	itt	lt
 8005480:	4622      	movlt	r2, r4
 8005482:	4614      	movlt	r4, r2
 8005484:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005488:	d005      	beq.n	8005496 <__cvt+0x42>
 800548a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800548e:	d100      	bne.n	8005492 <__cvt+0x3e>
 8005490:	3601      	adds	r6, #1
 8005492:	2102      	movs	r1, #2
 8005494:	e000      	b.n	8005498 <__cvt+0x44>
 8005496:	2103      	movs	r1, #3
 8005498:	ab03      	add	r3, sp, #12
 800549a:	9301      	str	r3, [sp, #4]
 800549c:	ab02      	add	r3, sp, #8
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	ec45 4b10 	vmov	d0, r4, r5
 80054a4:	4653      	mov	r3, sl
 80054a6:	4632      	mov	r2, r6
 80054a8:	f001 fdd6 	bl	8007058 <_dtoa_r>
 80054ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80054b0:	4607      	mov	r7, r0
 80054b2:	d102      	bne.n	80054ba <__cvt+0x66>
 80054b4:	f019 0f01 	tst.w	r9, #1
 80054b8:	d022      	beq.n	8005500 <__cvt+0xac>
 80054ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054be:	eb07 0906 	add.w	r9, r7, r6
 80054c2:	d110      	bne.n	80054e6 <__cvt+0x92>
 80054c4:	783b      	ldrb	r3, [r7, #0]
 80054c6:	2b30      	cmp	r3, #48	; 0x30
 80054c8:	d10a      	bne.n	80054e0 <__cvt+0x8c>
 80054ca:	2200      	movs	r2, #0
 80054cc:	2300      	movs	r3, #0
 80054ce:	4620      	mov	r0, r4
 80054d0:	4629      	mov	r1, r5
 80054d2:	f7fb fb01 	bl	8000ad8 <__aeabi_dcmpeq>
 80054d6:	b918      	cbnz	r0, 80054e0 <__cvt+0x8c>
 80054d8:	f1c6 0601 	rsb	r6, r6, #1
 80054dc:	f8ca 6000 	str.w	r6, [sl]
 80054e0:	f8da 3000 	ldr.w	r3, [sl]
 80054e4:	4499      	add	r9, r3
 80054e6:	2200      	movs	r2, #0
 80054e8:	2300      	movs	r3, #0
 80054ea:	4620      	mov	r0, r4
 80054ec:	4629      	mov	r1, r5
 80054ee:	f7fb faf3 	bl	8000ad8 <__aeabi_dcmpeq>
 80054f2:	b108      	cbz	r0, 80054f8 <__cvt+0xa4>
 80054f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80054f8:	2230      	movs	r2, #48	; 0x30
 80054fa:	9b03      	ldr	r3, [sp, #12]
 80054fc:	454b      	cmp	r3, r9
 80054fe:	d307      	bcc.n	8005510 <__cvt+0xbc>
 8005500:	9b03      	ldr	r3, [sp, #12]
 8005502:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005504:	1bdb      	subs	r3, r3, r7
 8005506:	4638      	mov	r0, r7
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	b004      	add	sp, #16
 800550c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005510:	1c59      	adds	r1, r3, #1
 8005512:	9103      	str	r1, [sp, #12]
 8005514:	701a      	strb	r2, [r3, #0]
 8005516:	e7f0      	b.n	80054fa <__cvt+0xa6>

08005518 <__exponent>:
 8005518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800551a:	4603      	mov	r3, r0
 800551c:	2900      	cmp	r1, #0
 800551e:	bfb8      	it	lt
 8005520:	4249      	neglt	r1, r1
 8005522:	f803 2b02 	strb.w	r2, [r3], #2
 8005526:	bfb4      	ite	lt
 8005528:	222d      	movlt	r2, #45	; 0x2d
 800552a:	222b      	movge	r2, #43	; 0x2b
 800552c:	2909      	cmp	r1, #9
 800552e:	7042      	strb	r2, [r0, #1]
 8005530:	dd2a      	ble.n	8005588 <__exponent+0x70>
 8005532:	f10d 0407 	add.w	r4, sp, #7
 8005536:	46a4      	mov	ip, r4
 8005538:	270a      	movs	r7, #10
 800553a:	46a6      	mov	lr, r4
 800553c:	460a      	mov	r2, r1
 800553e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005542:	fb07 1516 	mls	r5, r7, r6, r1
 8005546:	3530      	adds	r5, #48	; 0x30
 8005548:	2a63      	cmp	r2, #99	; 0x63
 800554a:	f104 34ff 	add.w	r4, r4, #4294967295
 800554e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005552:	4631      	mov	r1, r6
 8005554:	dcf1      	bgt.n	800553a <__exponent+0x22>
 8005556:	3130      	adds	r1, #48	; 0x30
 8005558:	f1ae 0502 	sub.w	r5, lr, #2
 800555c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005560:	1c44      	adds	r4, r0, #1
 8005562:	4629      	mov	r1, r5
 8005564:	4561      	cmp	r1, ip
 8005566:	d30a      	bcc.n	800557e <__exponent+0x66>
 8005568:	f10d 0209 	add.w	r2, sp, #9
 800556c:	eba2 020e 	sub.w	r2, r2, lr
 8005570:	4565      	cmp	r5, ip
 8005572:	bf88      	it	hi
 8005574:	2200      	movhi	r2, #0
 8005576:	4413      	add	r3, r2
 8005578:	1a18      	subs	r0, r3, r0
 800557a:	b003      	add	sp, #12
 800557c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800557e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005582:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005586:	e7ed      	b.n	8005564 <__exponent+0x4c>
 8005588:	2330      	movs	r3, #48	; 0x30
 800558a:	3130      	adds	r1, #48	; 0x30
 800558c:	7083      	strb	r3, [r0, #2]
 800558e:	70c1      	strb	r1, [r0, #3]
 8005590:	1d03      	adds	r3, r0, #4
 8005592:	e7f1      	b.n	8005578 <__exponent+0x60>

08005594 <_printf_float>:
 8005594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005598:	ed2d 8b02 	vpush	{d8}
 800559c:	b08d      	sub	sp, #52	; 0x34
 800559e:	460c      	mov	r4, r1
 80055a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80055a4:	4616      	mov	r6, r2
 80055a6:	461f      	mov	r7, r3
 80055a8:	4605      	mov	r5, r0
 80055aa:	f002 ffa7 	bl	80084fc <_localeconv_r>
 80055ae:	f8d0 a000 	ldr.w	sl, [r0]
 80055b2:	4650      	mov	r0, sl
 80055b4:	f7fa fe14 	bl	80001e0 <strlen>
 80055b8:	2300      	movs	r3, #0
 80055ba:	930a      	str	r3, [sp, #40]	; 0x28
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	9305      	str	r3, [sp, #20]
 80055c0:	f8d8 3000 	ldr.w	r3, [r8]
 80055c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80055c8:	3307      	adds	r3, #7
 80055ca:	f023 0307 	bic.w	r3, r3, #7
 80055ce:	f103 0208 	add.w	r2, r3, #8
 80055d2:	f8c8 2000 	str.w	r2, [r8]
 80055d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80055e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055e6:	9307      	str	r3, [sp, #28]
 80055e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80055ec:	ee08 0a10 	vmov	s16, r0
 80055f0:	4b9f      	ldr	r3, [pc, #636]	; (8005870 <_printf_float+0x2dc>)
 80055f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055f6:	f04f 32ff 	mov.w	r2, #4294967295
 80055fa:	f7fb fa9f 	bl	8000b3c <__aeabi_dcmpun>
 80055fe:	bb88      	cbnz	r0, 8005664 <_printf_float+0xd0>
 8005600:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005604:	4b9a      	ldr	r3, [pc, #616]	; (8005870 <_printf_float+0x2dc>)
 8005606:	f04f 32ff 	mov.w	r2, #4294967295
 800560a:	f7fb fa79 	bl	8000b00 <__aeabi_dcmple>
 800560e:	bb48      	cbnz	r0, 8005664 <_printf_float+0xd0>
 8005610:	2200      	movs	r2, #0
 8005612:	2300      	movs	r3, #0
 8005614:	4640      	mov	r0, r8
 8005616:	4649      	mov	r1, r9
 8005618:	f7fb fa68 	bl	8000aec <__aeabi_dcmplt>
 800561c:	b110      	cbz	r0, 8005624 <_printf_float+0x90>
 800561e:	232d      	movs	r3, #45	; 0x2d
 8005620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005624:	4b93      	ldr	r3, [pc, #588]	; (8005874 <_printf_float+0x2e0>)
 8005626:	4894      	ldr	r0, [pc, #592]	; (8005878 <_printf_float+0x2e4>)
 8005628:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800562c:	bf94      	ite	ls
 800562e:	4698      	movls	r8, r3
 8005630:	4680      	movhi	r8, r0
 8005632:	2303      	movs	r3, #3
 8005634:	6123      	str	r3, [r4, #16]
 8005636:	9b05      	ldr	r3, [sp, #20]
 8005638:	f023 0204 	bic.w	r2, r3, #4
 800563c:	6022      	str	r2, [r4, #0]
 800563e:	f04f 0900 	mov.w	r9, #0
 8005642:	9700      	str	r7, [sp, #0]
 8005644:	4633      	mov	r3, r6
 8005646:	aa0b      	add	r2, sp, #44	; 0x2c
 8005648:	4621      	mov	r1, r4
 800564a:	4628      	mov	r0, r5
 800564c:	f000 f9d8 	bl	8005a00 <_printf_common>
 8005650:	3001      	adds	r0, #1
 8005652:	f040 8090 	bne.w	8005776 <_printf_float+0x1e2>
 8005656:	f04f 30ff 	mov.w	r0, #4294967295
 800565a:	b00d      	add	sp, #52	; 0x34
 800565c:	ecbd 8b02 	vpop	{d8}
 8005660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005664:	4642      	mov	r2, r8
 8005666:	464b      	mov	r3, r9
 8005668:	4640      	mov	r0, r8
 800566a:	4649      	mov	r1, r9
 800566c:	f7fb fa66 	bl	8000b3c <__aeabi_dcmpun>
 8005670:	b140      	cbz	r0, 8005684 <_printf_float+0xf0>
 8005672:	464b      	mov	r3, r9
 8005674:	2b00      	cmp	r3, #0
 8005676:	bfbc      	itt	lt
 8005678:	232d      	movlt	r3, #45	; 0x2d
 800567a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800567e:	487f      	ldr	r0, [pc, #508]	; (800587c <_printf_float+0x2e8>)
 8005680:	4b7f      	ldr	r3, [pc, #508]	; (8005880 <_printf_float+0x2ec>)
 8005682:	e7d1      	b.n	8005628 <_printf_float+0x94>
 8005684:	6863      	ldr	r3, [r4, #4]
 8005686:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800568a:	9206      	str	r2, [sp, #24]
 800568c:	1c5a      	adds	r2, r3, #1
 800568e:	d13f      	bne.n	8005710 <_printf_float+0x17c>
 8005690:	2306      	movs	r3, #6
 8005692:	6063      	str	r3, [r4, #4]
 8005694:	9b05      	ldr	r3, [sp, #20]
 8005696:	6861      	ldr	r1, [r4, #4]
 8005698:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800569c:	2300      	movs	r3, #0
 800569e:	9303      	str	r3, [sp, #12]
 80056a0:	ab0a      	add	r3, sp, #40	; 0x28
 80056a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80056a6:	ab09      	add	r3, sp, #36	; 0x24
 80056a8:	ec49 8b10 	vmov	d0, r8, r9
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	6022      	str	r2, [r4, #0]
 80056b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80056b4:	4628      	mov	r0, r5
 80056b6:	f7ff fecd 	bl	8005454 <__cvt>
 80056ba:	9b06      	ldr	r3, [sp, #24]
 80056bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056be:	2b47      	cmp	r3, #71	; 0x47
 80056c0:	4680      	mov	r8, r0
 80056c2:	d108      	bne.n	80056d6 <_printf_float+0x142>
 80056c4:	1cc8      	adds	r0, r1, #3
 80056c6:	db02      	blt.n	80056ce <_printf_float+0x13a>
 80056c8:	6863      	ldr	r3, [r4, #4]
 80056ca:	4299      	cmp	r1, r3
 80056cc:	dd41      	ble.n	8005752 <_printf_float+0x1be>
 80056ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80056d2:	fa5f fb8b 	uxtb.w	fp, fp
 80056d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056da:	d820      	bhi.n	800571e <_printf_float+0x18a>
 80056dc:	3901      	subs	r1, #1
 80056de:	465a      	mov	r2, fp
 80056e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056e4:	9109      	str	r1, [sp, #36]	; 0x24
 80056e6:	f7ff ff17 	bl	8005518 <__exponent>
 80056ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056ec:	1813      	adds	r3, r2, r0
 80056ee:	2a01      	cmp	r2, #1
 80056f0:	4681      	mov	r9, r0
 80056f2:	6123      	str	r3, [r4, #16]
 80056f4:	dc02      	bgt.n	80056fc <_printf_float+0x168>
 80056f6:	6822      	ldr	r2, [r4, #0]
 80056f8:	07d2      	lsls	r2, r2, #31
 80056fa:	d501      	bpl.n	8005700 <_printf_float+0x16c>
 80056fc:	3301      	adds	r3, #1
 80056fe:	6123      	str	r3, [r4, #16]
 8005700:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005704:	2b00      	cmp	r3, #0
 8005706:	d09c      	beq.n	8005642 <_printf_float+0xae>
 8005708:	232d      	movs	r3, #45	; 0x2d
 800570a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800570e:	e798      	b.n	8005642 <_printf_float+0xae>
 8005710:	9a06      	ldr	r2, [sp, #24]
 8005712:	2a47      	cmp	r2, #71	; 0x47
 8005714:	d1be      	bne.n	8005694 <_printf_float+0x100>
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1bc      	bne.n	8005694 <_printf_float+0x100>
 800571a:	2301      	movs	r3, #1
 800571c:	e7b9      	b.n	8005692 <_printf_float+0xfe>
 800571e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005722:	d118      	bne.n	8005756 <_printf_float+0x1c2>
 8005724:	2900      	cmp	r1, #0
 8005726:	6863      	ldr	r3, [r4, #4]
 8005728:	dd0b      	ble.n	8005742 <_printf_float+0x1ae>
 800572a:	6121      	str	r1, [r4, #16]
 800572c:	b913      	cbnz	r3, 8005734 <_printf_float+0x1a0>
 800572e:	6822      	ldr	r2, [r4, #0]
 8005730:	07d0      	lsls	r0, r2, #31
 8005732:	d502      	bpl.n	800573a <_printf_float+0x1a6>
 8005734:	3301      	adds	r3, #1
 8005736:	440b      	add	r3, r1
 8005738:	6123      	str	r3, [r4, #16]
 800573a:	65a1      	str	r1, [r4, #88]	; 0x58
 800573c:	f04f 0900 	mov.w	r9, #0
 8005740:	e7de      	b.n	8005700 <_printf_float+0x16c>
 8005742:	b913      	cbnz	r3, 800574a <_printf_float+0x1b6>
 8005744:	6822      	ldr	r2, [r4, #0]
 8005746:	07d2      	lsls	r2, r2, #31
 8005748:	d501      	bpl.n	800574e <_printf_float+0x1ba>
 800574a:	3302      	adds	r3, #2
 800574c:	e7f4      	b.n	8005738 <_printf_float+0x1a4>
 800574e:	2301      	movs	r3, #1
 8005750:	e7f2      	b.n	8005738 <_printf_float+0x1a4>
 8005752:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005758:	4299      	cmp	r1, r3
 800575a:	db05      	blt.n	8005768 <_printf_float+0x1d4>
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	6121      	str	r1, [r4, #16]
 8005760:	07d8      	lsls	r0, r3, #31
 8005762:	d5ea      	bpl.n	800573a <_printf_float+0x1a6>
 8005764:	1c4b      	adds	r3, r1, #1
 8005766:	e7e7      	b.n	8005738 <_printf_float+0x1a4>
 8005768:	2900      	cmp	r1, #0
 800576a:	bfd4      	ite	le
 800576c:	f1c1 0202 	rsble	r2, r1, #2
 8005770:	2201      	movgt	r2, #1
 8005772:	4413      	add	r3, r2
 8005774:	e7e0      	b.n	8005738 <_printf_float+0x1a4>
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	055a      	lsls	r2, r3, #21
 800577a:	d407      	bmi.n	800578c <_printf_float+0x1f8>
 800577c:	6923      	ldr	r3, [r4, #16]
 800577e:	4642      	mov	r2, r8
 8005780:	4631      	mov	r1, r6
 8005782:	4628      	mov	r0, r5
 8005784:	47b8      	blx	r7
 8005786:	3001      	adds	r0, #1
 8005788:	d12c      	bne.n	80057e4 <_printf_float+0x250>
 800578a:	e764      	b.n	8005656 <_printf_float+0xc2>
 800578c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005790:	f240 80e0 	bls.w	8005954 <_printf_float+0x3c0>
 8005794:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005798:	2200      	movs	r2, #0
 800579a:	2300      	movs	r3, #0
 800579c:	f7fb f99c 	bl	8000ad8 <__aeabi_dcmpeq>
 80057a0:	2800      	cmp	r0, #0
 80057a2:	d034      	beq.n	800580e <_printf_float+0x27a>
 80057a4:	4a37      	ldr	r2, [pc, #220]	; (8005884 <_printf_float+0x2f0>)
 80057a6:	2301      	movs	r3, #1
 80057a8:	4631      	mov	r1, r6
 80057aa:	4628      	mov	r0, r5
 80057ac:	47b8      	blx	r7
 80057ae:	3001      	adds	r0, #1
 80057b0:	f43f af51 	beq.w	8005656 <_printf_float+0xc2>
 80057b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057b8:	429a      	cmp	r2, r3
 80057ba:	db02      	blt.n	80057c2 <_printf_float+0x22e>
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	07d8      	lsls	r0, r3, #31
 80057c0:	d510      	bpl.n	80057e4 <_printf_float+0x250>
 80057c2:	ee18 3a10 	vmov	r3, s16
 80057c6:	4652      	mov	r2, sl
 80057c8:	4631      	mov	r1, r6
 80057ca:	4628      	mov	r0, r5
 80057cc:	47b8      	blx	r7
 80057ce:	3001      	adds	r0, #1
 80057d0:	f43f af41 	beq.w	8005656 <_printf_float+0xc2>
 80057d4:	f04f 0800 	mov.w	r8, #0
 80057d8:	f104 091a 	add.w	r9, r4, #26
 80057dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057de:	3b01      	subs	r3, #1
 80057e0:	4543      	cmp	r3, r8
 80057e2:	dc09      	bgt.n	80057f8 <_printf_float+0x264>
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	079b      	lsls	r3, r3, #30
 80057e8:	f100 8105 	bmi.w	80059f6 <_printf_float+0x462>
 80057ec:	68e0      	ldr	r0, [r4, #12]
 80057ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057f0:	4298      	cmp	r0, r3
 80057f2:	bfb8      	it	lt
 80057f4:	4618      	movlt	r0, r3
 80057f6:	e730      	b.n	800565a <_printf_float+0xc6>
 80057f8:	2301      	movs	r3, #1
 80057fa:	464a      	mov	r2, r9
 80057fc:	4631      	mov	r1, r6
 80057fe:	4628      	mov	r0, r5
 8005800:	47b8      	blx	r7
 8005802:	3001      	adds	r0, #1
 8005804:	f43f af27 	beq.w	8005656 <_printf_float+0xc2>
 8005808:	f108 0801 	add.w	r8, r8, #1
 800580c:	e7e6      	b.n	80057dc <_printf_float+0x248>
 800580e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005810:	2b00      	cmp	r3, #0
 8005812:	dc39      	bgt.n	8005888 <_printf_float+0x2f4>
 8005814:	4a1b      	ldr	r2, [pc, #108]	; (8005884 <_printf_float+0x2f0>)
 8005816:	2301      	movs	r3, #1
 8005818:	4631      	mov	r1, r6
 800581a:	4628      	mov	r0, r5
 800581c:	47b8      	blx	r7
 800581e:	3001      	adds	r0, #1
 8005820:	f43f af19 	beq.w	8005656 <_printf_float+0xc2>
 8005824:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005828:	4313      	orrs	r3, r2
 800582a:	d102      	bne.n	8005832 <_printf_float+0x29e>
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	07d9      	lsls	r1, r3, #31
 8005830:	d5d8      	bpl.n	80057e4 <_printf_float+0x250>
 8005832:	ee18 3a10 	vmov	r3, s16
 8005836:	4652      	mov	r2, sl
 8005838:	4631      	mov	r1, r6
 800583a:	4628      	mov	r0, r5
 800583c:	47b8      	blx	r7
 800583e:	3001      	adds	r0, #1
 8005840:	f43f af09 	beq.w	8005656 <_printf_float+0xc2>
 8005844:	f04f 0900 	mov.w	r9, #0
 8005848:	f104 0a1a 	add.w	sl, r4, #26
 800584c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800584e:	425b      	negs	r3, r3
 8005850:	454b      	cmp	r3, r9
 8005852:	dc01      	bgt.n	8005858 <_printf_float+0x2c4>
 8005854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005856:	e792      	b.n	800577e <_printf_float+0x1ea>
 8005858:	2301      	movs	r3, #1
 800585a:	4652      	mov	r2, sl
 800585c:	4631      	mov	r1, r6
 800585e:	4628      	mov	r0, r5
 8005860:	47b8      	blx	r7
 8005862:	3001      	adds	r0, #1
 8005864:	f43f aef7 	beq.w	8005656 <_printf_float+0xc2>
 8005868:	f109 0901 	add.w	r9, r9, #1
 800586c:	e7ee      	b.n	800584c <_printf_float+0x2b8>
 800586e:	bf00      	nop
 8005870:	7fefffff 	.word	0x7fefffff
 8005874:	08009cbc 	.word	0x08009cbc
 8005878:	08009cc0 	.word	0x08009cc0
 800587c:	08009cc8 	.word	0x08009cc8
 8005880:	08009cc4 	.word	0x08009cc4
 8005884:	08009ccc 	.word	0x08009ccc
 8005888:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800588a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800588c:	429a      	cmp	r2, r3
 800588e:	bfa8      	it	ge
 8005890:	461a      	movge	r2, r3
 8005892:	2a00      	cmp	r2, #0
 8005894:	4691      	mov	r9, r2
 8005896:	dc37      	bgt.n	8005908 <_printf_float+0x374>
 8005898:	f04f 0b00 	mov.w	fp, #0
 800589c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058a0:	f104 021a 	add.w	r2, r4, #26
 80058a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058a6:	9305      	str	r3, [sp, #20]
 80058a8:	eba3 0309 	sub.w	r3, r3, r9
 80058ac:	455b      	cmp	r3, fp
 80058ae:	dc33      	bgt.n	8005918 <_printf_float+0x384>
 80058b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058b4:	429a      	cmp	r2, r3
 80058b6:	db3b      	blt.n	8005930 <_printf_float+0x39c>
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	07da      	lsls	r2, r3, #31
 80058bc:	d438      	bmi.n	8005930 <_printf_float+0x39c>
 80058be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058c0:	9a05      	ldr	r2, [sp, #20]
 80058c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058c4:	1a9a      	subs	r2, r3, r2
 80058c6:	eba3 0901 	sub.w	r9, r3, r1
 80058ca:	4591      	cmp	r9, r2
 80058cc:	bfa8      	it	ge
 80058ce:	4691      	movge	r9, r2
 80058d0:	f1b9 0f00 	cmp.w	r9, #0
 80058d4:	dc35      	bgt.n	8005942 <_printf_float+0x3ae>
 80058d6:	f04f 0800 	mov.w	r8, #0
 80058da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058de:	f104 0a1a 	add.w	sl, r4, #26
 80058e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058e6:	1a9b      	subs	r3, r3, r2
 80058e8:	eba3 0309 	sub.w	r3, r3, r9
 80058ec:	4543      	cmp	r3, r8
 80058ee:	f77f af79 	ble.w	80057e4 <_printf_float+0x250>
 80058f2:	2301      	movs	r3, #1
 80058f4:	4652      	mov	r2, sl
 80058f6:	4631      	mov	r1, r6
 80058f8:	4628      	mov	r0, r5
 80058fa:	47b8      	blx	r7
 80058fc:	3001      	adds	r0, #1
 80058fe:	f43f aeaa 	beq.w	8005656 <_printf_float+0xc2>
 8005902:	f108 0801 	add.w	r8, r8, #1
 8005906:	e7ec      	b.n	80058e2 <_printf_float+0x34e>
 8005908:	4613      	mov	r3, r2
 800590a:	4631      	mov	r1, r6
 800590c:	4642      	mov	r2, r8
 800590e:	4628      	mov	r0, r5
 8005910:	47b8      	blx	r7
 8005912:	3001      	adds	r0, #1
 8005914:	d1c0      	bne.n	8005898 <_printf_float+0x304>
 8005916:	e69e      	b.n	8005656 <_printf_float+0xc2>
 8005918:	2301      	movs	r3, #1
 800591a:	4631      	mov	r1, r6
 800591c:	4628      	mov	r0, r5
 800591e:	9205      	str	r2, [sp, #20]
 8005920:	47b8      	blx	r7
 8005922:	3001      	adds	r0, #1
 8005924:	f43f ae97 	beq.w	8005656 <_printf_float+0xc2>
 8005928:	9a05      	ldr	r2, [sp, #20]
 800592a:	f10b 0b01 	add.w	fp, fp, #1
 800592e:	e7b9      	b.n	80058a4 <_printf_float+0x310>
 8005930:	ee18 3a10 	vmov	r3, s16
 8005934:	4652      	mov	r2, sl
 8005936:	4631      	mov	r1, r6
 8005938:	4628      	mov	r0, r5
 800593a:	47b8      	blx	r7
 800593c:	3001      	adds	r0, #1
 800593e:	d1be      	bne.n	80058be <_printf_float+0x32a>
 8005940:	e689      	b.n	8005656 <_printf_float+0xc2>
 8005942:	9a05      	ldr	r2, [sp, #20]
 8005944:	464b      	mov	r3, r9
 8005946:	4442      	add	r2, r8
 8005948:	4631      	mov	r1, r6
 800594a:	4628      	mov	r0, r5
 800594c:	47b8      	blx	r7
 800594e:	3001      	adds	r0, #1
 8005950:	d1c1      	bne.n	80058d6 <_printf_float+0x342>
 8005952:	e680      	b.n	8005656 <_printf_float+0xc2>
 8005954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005956:	2a01      	cmp	r2, #1
 8005958:	dc01      	bgt.n	800595e <_printf_float+0x3ca>
 800595a:	07db      	lsls	r3, r3, #31
 800595c:	d538      	bpl.n	80059d0 <_printf_float+0x43c>
 800595e:	2301      	movs	r3, #1
 8005960:	4642      	mov	r2, r8
 8005962:	4631      	mov	r1, r6
 8005964:	4628      	mov	r0, r5
 8005966:	47b8      	blx	r7
 8005968:	3001      	adds	r0, #1
 800596a:	f43f ae74 	beq.w	8005656 <_printf_float+0xc2>
 800596e:	ee18 3a10 	vmov	r3, s16
 8005972:	4652      	mov	r2, sl
 8005974:	4631      	mov	r1, r6
 8005976:	4628      	mov	r0, r5
 8005978:	47b8      	blx	r7
 800597a:	3001      	adds	r0, #1
 800597c:	f43f ae6b 	beq.w	8005656 <_printf_float+0xc2>
 8005980:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005984:	2200      	movs	r2, #0
 8005986:	2300      	movs	r3, #0
 8005988:	f7fb f8a6 	bl	8000ad8 <__aeabi_dcmpeq>
 800598c:	b9d8      	cbnz	r0, 80059c6 <_printf_float+0x432>
 800598e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005990:	f108 0201 	add.w	r2, r8, #1
 8005994:	3b01      	subs	r3, #1
 8005996:	4631      	mov	r1, r6
 8005998:	4628      	mov	r0, r5
 800599a:	47b8      	blx	r7
 800599c:	3001      	adds	r0, #1
 800599e:	d10e      	bne.n	80059be <_printf_float+0x42a>
 80059a0:	e659      	b.n	8005656 <_printf_float+0xc2>
 80059a2:	2301      	movs	r3, #1
 80059a4:	4652      	mov	r2, sl
 80059a6:	4631      	mov	r1, r6
 80059a8:	4628      	mov	r0, r5
 80059aa:	47b8      	blx	r7
 80059ac:	3001      	adds	r0, #1
 80059ae:	f43f ae52 	beq.w	8005656 <_printf_float+0xc2>
 80059b2:	f108 0801 	add.w	r8, r8, #1
 80059b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059b8:	3b01      	subs	r3, #1
 80059ba:	4543      	cmp	r3, r8
 80059bc:	dcf1      	bgt.n	80059a2 <_printf_float+0x40e>
 80059be:	464b      	mov	r3, r9
 80059c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80059c4:	e6dc      	b.n	8005780 <_printf_float+0x1ec>
 80059c6:	f04f 0800 	mov.w	r8, #0
 80059ca:	f104 0a1a 	add.w	sl, r4, #26
 80059ce:	e7f2      	b.n	80059b6 <_printf_float+0x422>
 80059d0:	2301      	movs	r3, #1
 80059d2:	4642      	mov	r2, r8
 80059d4:	e7df      	b.n	8005996 <_printf_float+0x402>
 80059d6:	2301      	movs	r3, #1
 80059d8:	464a      	mov	r2, r9
 80059da:	4631      	mov	r1, r6
 80059dc:	4628      	mov	r0, r5
 80059de:	47b8      	blx	r7
 80059e0:	3001      	adds	r0, #1
 80059e2:	f43f ae38 	beq.w	8005656 <_printf_float+0xc2>
 80059e6:	f108 0801 	add.w	r8, r8, #1
 80059ea:	68e3      	ldr	r3, [r4, #12]
 80059ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059ee:	1a5b      	subs	r3, r3, r1
 80059f0:	4543      	cmp	r3, r8
 80059f2:	dcf0      	bgt.n	80059d6 <_printf_float+0x442>
 80059f4:	e6fa      	b.n	80057ec <_printf_float+0x258>
 80059f6:	f04f 0800 	mov.w	r8, #0
 80059fa:	f104 0919 	add.w	r9, r4, #25
 80059fe:	e7f4      	b.n	80059ea <_printf_float+0x456>

08005a00 <_printf_common>:
 8005a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a04:	4616      	mov	r6, r2
 8005a06:	4699      	mov	r9, r3
 8005a08:	688a      	ldr	r2, [r1, #8]
 8005a0a:	690b      	ldr	r3, [r1, #16]
 8005a0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a10:	4293      	cmp	r3, r2
 8005a12:	bfb8      	it	lt
 8005a14:	4613      	movlt	r3, r2
 8005a16:	6033      	str	r3, [r6, #0]
 8005a18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a1c:	4607      	mov	r7, r0
 8005a1e:	460c      	mov	r4, r1
 8005a20:	b10a      	cbz	r2, 8005a26 <_printf_common+0x26>
 8005a22:	3301      	adds	r3, #1
 8005a24:	6033      	str	r3, [r6, #0]
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	0699      	lsls	r1, r3, #26
 8005a2a:	bf42      	ittt	mi
 8005a2c:	6833      	ldrmi	r3, [r6, #0]
 8005a2e:	3302      	addmi	r3, #2
 8005a30:	6033      	strmi	r3, [r6, #0]
 8005a32:	6825      	ldr	r5, [r4, #0]
 8005a34:	f015 0506 	ands.w	r5, r5, #6
 8005a38:	d106      	bne.n	8005a48 <_printf_common+0x48>
 8005a3a:	f104 0a19 	add.w	sl, r4, #25
 8005a3e:	68e3      	ldr	r3, [r4, #12]
 8005a40:	6832      	ldr	r2, [r6, #0]
 8005a42:	1a9b      	subs	r3, r3, r2
 8005a44:	42ab      	cmp	r3, r5
 8005a46:	dc26      	bgt.n	8005a96 <_printf_common+0x96>
 8005a48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a4c:	1e13      	subs	r3, r2, #0
 8005a4e:	6822      	ldr	r2, [r4, #0]
 8005a50:	bf18      	it	ne
 8005a52:	2301      	movne	r3, #1
 8005a54:	0692      	lsls	r2, r2, #26
 8005a56:	d42b      	bmi.n	8005ab0 <_printf_common+0xb0>
 8005a58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	4638      	mov	r0, r7
 8005a60:	47c0      	blx	r8
 8005a62:	3001      	adds	r0, #1
 8005a64:	d01e      	beq.n	8005aa4 <_printf_common+0xa4>
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	68e5      	ldr	r5, [r4, #12]
 8005a6a:	6832      	ldr	r2, [r6, #0]
 8005a6c:	f003 0306 	and.w	r3, r3, #6
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	bf08      	it	eq
 8005a74:	1aad      	subeq	r5, r5, r2
 8005a76:	68a3      	ldr	r3, [r4, #8]
 8005a78:	6922      	ldr	r2, [r4, #16]
 8005a7a:	bf0c      	ite	eq
 8005a7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a80:	2500      	movne	r5, #0
 8005a82:	4293      	cmp	r3, r2
 8005a84:	bfc4      	itt	gt
 8005a86:	1a9b      	subgt	r3, r3, r2
 8005a88:	18ed      	addgt	r5, r5, r3
 8005a8a:	2600      	movs	r6, #0
 8005a8c:	341a      	adds	r4, #26
 8005a8e:	42b5      	cmp	r5, r6
 8005a90:	d11a      	bne.n	8005ac8 <_printf_common+0xc8>
 8005a92:	2000      	movs	r0, #0
 8005a94:	e008      	b.n	8005aa8 <_printf_common+0xa8>
 8005a96:	2301      	movs	r3, #1
 8005a98:	4652      	mov	r2, sl
 8005a9a:	4649      	mov	r1, r9
 8005a9c:	4638      	mov	r0, r7
 8005a9e:	47c0      	blx	r8
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	d103      	bne.n	8005aac <_printf_common+0xac>
 8005aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aac:	3501      	adds	r5, #1
 8005aae:	e7c6      	b.n	8005a3e <_printf_common+0x3e>
 8005ab0:	18e1      	adds	r1, r4, r3
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	2030      	movs	r0, #48	; 0x30
 8005ab6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005aba:	4422      	add	r2, r4
 8005abc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ac0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ac4:	3302      	adds	r3, #2
 8005ac6:	e7c7      	b.n	8005a58 <_printf_common+0x58>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	4622      	mov	r2, r4
 8005acc:	4649      	mov	r1, r9
 8005ace:	4638      	mov	r0, r7
 8005ad0:	47c0      	blx	r8
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	d0e6      	beq.n	8005aa4 <_printf_common+0xa4>
 8005ad6:	3601      	adds	r6, #1
 8005ad8:	e7d9      	b.n	8005a8e <_printf_common+0x8e>
	...

08005adc <_printf_i>:
 8005adc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae0:	7e0f      	ldrb	r7, [r1, #24]
 8005ae2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ae4:	2f78      	cmp	r7, #120	; 0x78
 8005ae6:	4691      	mov	r9, r2
 8005ae8:	4680      	mov	r8, r0
 8005aea:	460c      	mov	r4, r1
 8005aec:	469a      	mov	sl, r3
 8005aee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005af2:	d807      	bhi.n	8005b04 <_printf_i+0x28>
 8005af4:	2f62      	cmp	r7, #98	; 0x62
 8005af6:	d80a      	bhi.n	8005b0e <_printf_i+0x32>
 8005af8:	2f00      	cmp	r7, #0
 8005afa:	f000 80d8 	beq.w	8005cae <_printf_i+0x1d2>
 8005afe:	2f58      	cmp	r7, #88	; 0x58
 8005b00:	f000 80a3 	beq.w	8005c4a <_printf_i+0x16e>
 8005b04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b0c:	e03a      	b.n	8005b84 <_printf_i+0xa8>
 8005b0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b12:	2b15      	cmp	r3, #21
 8005b14:	d8f6      	bhi.n	8005b04 <_printf_i+0x28>
 8005b16:	a101      	add	r1, pc, #4	; (adr r1, 8005b1c <_printf_i+0x40>)
 8005b18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b1c:	08005b75 	.word	0x08005b75
 8005b20:	08005b89 	.word	0x08005b89
 8005b24:	08005b05 	.word	0x08005b05
 8005b28:	08005b05 	.word	0x08005b05
 8005b2c:	08005b05 	.word	0x08005b05
 8005b30:	08005b05 	.word	0x08005b05
 8005b34:	08005b89 	.word	0x08005b89
 8005b38:	08005b05 	.word	0x08005b05
 8005b3c:	08005b05 	.word	0x08005b05
 8005b40:	08005b05 	.word	0x08005b05
 8005b44:	08005b05 	.word	0x08005b05
 8005b48:	08005c95 	.word	0x08005c95
 8005b4c:	08005bb9 	.word	0x08005bb9
 8005b50:	08005c77 	.word	0x08005c77
 8005b54:	08005b05 	.word	0x08005b05
 8005b58:	08005b05 	.word	0x08005b05
 8005b5c:	08005cb7 	.word	0x08005cb7
 8005b60:	08005b05 	.word	0x08005b05
 8005b64:	08005bb9 	.word	0x08005bb9
 8005b68:	08005b05 	.word	0x08005b05
 8005b6c:	08005b05 	.word	0x08005b05
 8005b70:	08005c7f 	.word	0x08005c7f
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	1d1a      	adds	r2, r3, #4
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	602a      	str	r2, [r5, #0]
 8005b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b84:	2301      	movs	r3, #1
 8005b86:	e0a3      	b.n	8005cd0 <_printf_i+0x1f4>
 8005b88:	6820      	ldr	r0, [r4, #0]
 8005b8a:	6829      	ldr	r1, [r5, #0]
 8005b8c:	0606      	lsls	r6, r0, #24
 8005b8e:	f101 0304 	add.w	r3, r1, #4
 8005b92:	d50a      	bpl.n	8005baa <_printf_i+0xce>
 8005b94:	680e      	ldr	r6, [r1, #0]
 8005b96:	602b      	str	r3, [r5, #0]
 8005b98:	2e00      	cmp	r6, #0
 8005b9a:	da03      	bge.n	8005ba4 <_printf_i+0xc8>
 8005b9c:	232d      	movs	r3, #45	; 0x2d
 8005b9e:	4276      	negs	r6, r6
 8005ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ba4:	485e      	ldr	r0, [pc, #376]	; (8005d20 <_printf_i+0x244>)
 8005ba6:	230a      	movs	r3, #10
 8005ba8:	e019      	b.n	8005bde <_printf_i+0x102>
 8005baa:	680e      	ldr	r6, [r1, #0]
 8005bac:	602b      	str	r3, [r5, #0]
 8005bae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bb2:	bf18      	it	ne
 8005bb4:	b236      	sxthne	r6, r6
 8005bb6:	e7ef      	b.n	8005b98 <_printf_i+0xbc>
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	6820      	ldr	r0, [r4, #0]
 8005bbc:	1d19      	adds	r1, r3, #4
 8005bbe:	6029      	str	r1, [r5, #0]
 8005bc0:	0601      	lsls	r1, r0, #24
 8005bc2:	d501      	bpl.n	8005bc8 <_printf_i+0xec>
 8005bc4:	681e      	ldr	r6, [r3, #0]
 8005bc6:	e002      	b.n	8005bce <_printf_i+0xf2>
 8005bc8:	0646      	lsls	r6, r0, #25
 8005bca:	d5fb      	bpl.n	8005bc4 <_printf_i+0xe8>
 8005bcc:	881e      	ldrh	r6, [r3, #0]
 8005bce:	4854      	ldr	r0, [pc, #336]	; (8005d20 <_printf_i+0x244>)
 8005bd0:	2f6f      	cmp	r7, #111	; 0x6f
 8005bd2:	bf0c      	ite	eq
 8005bd4:	2308      	moveq	r3, #8
 8005bd6:	230a      	movne	r3, #10
 8005bd8:	2100      	movs	r1, #0
 8005bda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bde:	6865      	ldr	r5, [r4, #4]
 8005be0:	60a5      	str	r5, [r4, #8]
 8005be2:	2d00      	cmp	r5, #0
 8005be4:	bfa2      	ittt	ge
 8005be6:	6821      	ldrge	r1, [r4, #0]
 8005be8:	f021 0104 	bicge.w	r1, r1, #4
 8005bec:	6021      	strge	r1, [r4, #0]
 8005bee:	b90e      	cbnz	r6, 8005bf4 <_printf_i+0x118>
 8005bf0:	2d00      	cmp	r5, #0
 8005bf2:	d04d      	beq.n	8005c90 <_printf_i+0x1b4>
 8005bf4:	4615      	mov	r5, r2
 8005bf6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bfa:	fb03 6711 	mls	r7, r3, r1, r6
 8005bfe:	5dc7      	ldrb	r7, [r0, r7]
 8005c00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c04:	4637      	mov	r7, r6
 8005c06:	42bb      	cmp	r3, r7
 8005c08:	460e      	mov	r6, r1
 8005c0a:	d9f4      	bls.n	8005bf6 <_printf_i+0x11a>
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d10b      	bne.n	8005c28 <_printf_i+0x14c>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	07de      	lsls	r6, r3, #31
 8005c14:	d508      	bpl.n	8005c28 <_printf_i+0x14c>
 8005c16:	6923      	ldr	r3, [r4, #16]
 8005c18:	6861      	ldr	r1, [r4, #4]
 8005c1a:	4299      	cmp	r1, r3
 8005c1c:	bfde      	ittt	le
 8005c1e:	2330      	movle	r3, #48	; 0x30
 8005c20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c28:	1b52      	subs	r2, r2, r5
 8005c2a:	6122      	str	r2, [r4, #16]
 8005c2c:	f8cd a000 	str.w	sl, [sp]
 8005c30:	464b      	mov	r3, r9
 8005c32:	aa03      	add	r2, sp, #12
 8005c34:	4621      	mov	r1, r4
 8005c36:	4640      	mov	r0, r8
 8005c38:	f7ff fee2 	bl	8005a00 <_printf_common>
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	d14c      	bne.n	8005cda <_printf_i+0x1fe>
 8005c40:	f04f 30ff 	mov.w	r0, #4294967295
 8005c44:	b004      	add	sp, #16
 8005c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c4a:	4835      	ldr	r0, [pc, #212]	; (8005d20 <_printf_i+0x244>)
 8005c4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c50:	6829      	ldr	r1, [r5, #0]
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c58:	6029      	str	r1, [r5, #0]
 8005c5a:	061d      	lsls	r5, r3, #24
 8005c5c:	d514      	bpl.n	8005c88 <_printf_i+0x1ac>
 8005c5e:	07df      	lsls	r7, r3, #31
 8005c60:	bf44      	itt	mi
 8005c62:	f043 0320 	orrmi.w	r3, r3, #32
 8005c66:	6023      	strmi	r3, [r4, #0]
 8005c68:	b91e      	cbnz	r6, 8005c72 <_printf_i+0x196>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	f023 0320 	bic.w	r3, r3, #32
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	2310      	movs	r3, #16
 8005c74:	e7b0      	b.n	8005bd8 <_printf_i+0xfc>
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	f043 0320 	orr.w	r3, r3, #32
 8005c7c:	6023      	str	r3, [r4, #0]
 8005c7e:	2378      	movs	r3, #120	; 0x78
 8005c80:	4828      	ldr	r0, [pc, #160]	; (8005d24 <_printf_i+0x248>)
 8005c82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c86:	e7e3      	b.n	8005c50 <_printf_i+0x174>
 8005c88:	0659      	lsls	r1, r3, #25
 8005c8a:	bf48      	it	mi
 8005c8c:	b2b6      	uxthmi	r6, r6
 8005c8e:	e7e6      	b.n	8005c5e <_printf_i+0x182>
 8005c90:	4615      	mov	r5, r2
 8005c92:	e7bb      	b.n	8005c0c <_printf_i+0x130>
 8005c94:	682b      	ldr	r3, [r5, #0]
 8005c96:	6826      	ldr	r6, [r4, #0]
 8005c98:	6961      	ldr	r1, [r4, #20]
 8005c9a:	1d18      	adds	r0, r3, #4
 8005c9c:	6028      	str	r0, [r5, #0]
 8005c9e:	0635      	lsls	r5, r6, #24
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	d501      	bpl.n	8005ca8 <_printf_i+0x1cc>
 8005ca4:	6019      	str	r1, [r3, #0]
 8005ca6:	e002      	b.n	8005cae <_printf_i+0x1d2>
 8005ca8:	0670      	lsls	r0, r6, #25
 8005caa:	d5fb      	bpl.n	8005ca4 <_printf_i+0x1c8>
 8005cac:	8019      	strh	r1, [r3, #0]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	6123      	str	r3, [r4, #16]
 8005cb2:	4615      	mov	r5, r2
 8005cb4:	e7ba      	b.n	8005c2c <_printf_i+0x150>
 8005cb6:	682b      	ldr	r3, [r5, #0]
 8005cb8:	1d1a      	adds	r2, r3, #4
 8005cba:	602a      	str	r2, [r5, #0]
 8005cbc:	681d      	ldr	r5, [r3, #0]
 8005cbe:	6862      	ldr	r2, [r4, #4]
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f7fa fa94 	bl	80001f0 <memchr>
 8005cc8:	b108      	cbz	r0, 8005cce <_printf_i+0x1f2>
 8005cca:	1b40      	subs	r0, r0, r5
 8005ccc:	6060      	str	r0, [r4, #4]
 8005cce:	6863      	ldr	r3, [r4, #4]
 8005cd0:	6123      	str	r3, [r4, #16]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cd8:	e7a8      	b.n	8005c2c <_printf_i+0x150>
 8005cda:	6923      	ldr	r3, [r4, #16]
 8005cdc:	462a      	mov	r2, r5
 8005cde:	4649      	mov	r1, r9
 8005ce0:	4640      	mov	r0, r8
 8005ce2:	47d0      	blx	sl
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	d0ab      	beq.n	8005c40 <_printf_i+0x164>
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	079b      	lsls	r3, r3, #30
 8005cec:	d413      	bmi.n	8005d16 <_printf_i+0x23a>
 8005cee:	68e0      	ldr	r0, [r4, #12]
 8005cf0:	9b03      	ldr	r3, [sp, #12]
 8005cf2:	4298      	cmp	r0, r3
 8005cf4:	bfb8      	it	lt
 8005cf6:	4618      	movlt	r0, r3
 8005cf8:	e7a4      	b.n	8005c44 <_printf_i+0x168>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	4632      	mov	r2, r6
 8005cfe:	4649      	mov	r1, r9
 8005d00:	4640      	mov	r0, r8
 8005d02:	47d0      	blx	sl
 8005d04:	3001      	adds	r0, #1
 8005d06:	d09b      	beq.n	8005c40 <_printf_i+0x164>
 8005d08:	3501      	adds	r5, #1
 8005d0a:	68e3      	ldr	r3, [r4, #12]
 8005d0c:	9903      	ldr	r1, [sp, #12]
 8005d0e:	1a5b      	subs	r3, r3, r1
 8005d10:	42ab      	cmp	r3, r5
 8005d12:	dcf2      	bgt.n	8005cfa <_printf_i+0x21e>
 8005d14:	e7eb      	b.n	8005cee <_printf_i+0x212>
 8005d16:	2500      	movs	r5, #0
 8005d18:	f104 0619 	add.w	r6, r4, #25
 8005d1c:	e7f5      	b.n	8005d0a <_printf_i+0x22e>
 8005d1e:	bf00      	nop
 8005d20:	08009cce 	.word	0x08009cce
 8005d24:	08009cdf 	.word	0x08009cdf

08005d28 <_scanf_float>:
 8005d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d2c:	b087      	sub	sp, #28
 8005d2e:	4617      	mov	r7, r2
 8005d30:	9303      	str	r3, [sp, #12]
 8005d32:	688b      	ldr	r3, [r1, #8]
 8005d34:	1e5a      	subs	r2, r3, #1
 8005d36:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005d3a:	bf83      	ittte	hi
 8005d3c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005d40:	195b      	addhi	r3, r3, r5
 8005d42:	9302      	strhi	r3, [sp, #8]
 8005d44:	2300      	movls	r3, #0
 8005d46:	bf86      	itte	hi
 8005d48:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005d4c:	608b      	strhi	r3, [r1, #8]
 8005d4e:	9302      	strls	r3, [sp, #8]
 8005d50:	680b      	ldr	r3, [r1, #0]
 8005d52:	468b      	mov	fp, r1
 8005d54:	2500      	movs	r5, #0
 8005d56:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005d5a:	f84b 3b1c 	str.w	r3, [fp], #28
 8005d5e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005d62:	4680      	mov	r8, r0
 8005d64:	460c      	mov	r4, r1
 8005d66:	465e      	mov	r6, fp
 8005d68:	46aa      	mov	sl, r5
 8005d6a:	46a9      	mov	r9, r5
 8005d6c:	9501      	str	r5, [sp, #4]
 8005d6e:	68a2      	ldr	r2, [r4, #8]
 8005d70:	b152      	cbz	r2, 8005d88 <_scanf_float+0x60>
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b4e      	cmp	r3, #78	; 0x4e
 8005d78:	d864      	bhi.n	8005e44 <_scanf_float+0x11c>
 8005d7a:	2b40      	cmp	r3, #64	; 0x40
 8005d7c:	d83c      	bhi.n	8005df8 <_scanf_float+0xd0>
 8005d7e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005d82:	b2c8      	uxtb	r0, r1
 8005d84:	280e      	cmp	r0, #14
 8005d86:	d93a      	bls.n	8005dfe <_scanf_float+0xd6>
 8005d88:	f1b9 0f00 	cmp.w	r9, #0
 8005d8c:	d003      	beq.n	8005d96 <_scanf_float+0x6e>
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d94:	6023      	str	r3, [r4, #0]
 8005d96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d9a:	f1ba 0f01 	cmp.w	sl, #1
 8005d9e:	f200 8113 	bhi.w	8005fc8 <_scanf_float+0x2a0>
 8005da2:	455e      	cmp	r6, fp
 8005da4:	f200 8105 	bhi.w	8005fb2 <_scanf_float+0x28a>
 8005da8:	2501      	movs	r5, #1
 8005daa:	4628      	mov	r0, r5
 8005dac:	b007      	add	sp, #28
 8005dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005db6:	2a0d      	cmp	r2, #13
 8005db8:	d8e6      	bhi.n	8005d88 <_scanf_float+0x60>
 8005dba:	a101      	add	r1, pc, #4	; (adr r1, 8005dc0 <_scanf_float+0x98>)
 8005dbc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005dc0:	08005eff 	.word	0x08005eff
 8005dc4:	08005d89 	.word	0x08005d89
 8005dc8:	08005d89 	.word	0x08005d89
 8005dcc:	08005d89 	.word	0x08005d89
 8005dd0:	08005f5f 	.word	0x08005f5f
 8005dd4:	08005f37 	.word	0x08005f37
 8005dd8:	08005d89 	.word	0x08005d89
 8005ddc:	08005d89 	.word	0x08005d89
 8005de0:	08005f0d 	.word	0x08005f0d
 8005de4:	08005d89 	.word	0x08005d89
 8005de8:	08005d89 	.word	0x08005d89
 8005dec:	08005d89 	.word	0x08005d89
 8005df0:	08005d89 	.word	0x08005d89
 8005df4:	08005ec5 	.word	0x08005ec5
 8005df8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005dfc:	e7db      	b.n	8005db6 <_scanf_float+0x8e>
 8005dfe:	290e      	cmp	r1, #14
 8005e00:	d8c2      	bhi.n	8005d88 <_scanf_float+0x60>
 8005e02:	a001      	add	r0, pc, #4	; (adr r0, 8005e08 <_scanf_float+0xe0>)
 8005e04:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005e08:	08005eb7 	.word	0x08005eb7
 8005e0c:	08005d89 	.word	0x08005d89
 8005e10:	08005eb7 	.word	0x08005eb7
 8005e14:	08005f4b 	.word	0x08005f4b
 8005e18:	08005d89 	.word	0x08005d89
 8005e1c:	08005e65 	.word	0x08005e65
 8005e20:	08005ea1 	.word	0x08005ea1
 8005e24:	08005ea1 	.word	0x08005ea1
 8005e28:	08005ea1 	.word	0x08005ea1
 8005e2c:	08005ea1 	.word	0x08005ea1
 8005e30:	08005ea1 	.word	0x08005ea1
 8005e34:	08005ea1 	.word	0x08005ea1
 8005e38:	08005ea1 	.word	0x08005ea1
 8005e3c:	08005ea1 	.word	0x08005ea1
 8005e40:	08005ea1 	.word	0x08005ea1
 8005e44:	2b6e      	cmp	r3, #110	; 0x6e
 8005e46:	d809      	bhi.n	8005e5c <_scanf_float+0x134>
 8005e48:	2b60      	cmp	r3, #96	; 0x60
 8005e4a:	d8b2      	bhi.n	8005db2 <_scanf_float+0x8a>
 8005e4c:	2b54      	cmp	r3, #84	; 0x54
 8005e4e:	d077      	beq.n	8005f40 <_scanf_float+0x218>
 8005e50:	2b59      	cmp	r3, #89	; 0x59
 8005e52:	d199      	bne.n	8005d88 <_scanf_float+0x60>
 8005e54:	2d07      	cmp	r5, #7
 8005e56:	d197      	bne.n	8005d88 <_scanf_float+0x60>
 8005e58:	2508      	movs	r5, #8
 8005e5a:	e029      	b.n	8005eb0 <_scanf_float+0x188>
 8005e5c:	2b74      	cmp	r3, #116	; 0x74
 8005e5e:	d06f      	beq.n	8005f40 <_scanf_float+0x218>
 8005e60:	2b79      	cmp	r3, #121	; 0x79
 8005e62:	e7f6      	b.n	8005e52 <_scanf_float+0x12a>
 8005e64:	6821      	ldr	r1, [r4, #0]
 8005e66:	05c8      	lsls	r0, r1, #23
 8005e68:	d51a      	bpl.n	8005ea0 <_scanf_float+0x178>
 8005e6a:	9b02      	ldr	r3, [sp, #8]
 8005e6c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005e70:	6021      	str	r1, [r4, #0]
 8005e72:	f109 0901 	add.w	r9, r9, #1
 8005e76:	b11b      	cbz	r3, 8005e80 <_scanf_float+0x158>
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	3201      	adds	r2, #1
 8005e7c:	9302      	str	r3, [sp, #8]
 8005e7e:	60a2      	str	r2, [r4, #8]
 8005e80:	68a3      	ldr	r3, [r4, #8]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	60a3      	str	r3, [r4, #8]
 8005e86:	6923      	ldr	r3, [r4, #16]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	6123      	str	r3, [r4, #16]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	607b      	str	r3, [r7, #4]
 8005e94:	f340 8084 	ble.w	8005fa0 <_scanf_float+0x278>
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	603b      	str	r3, [r7, #0]
 8005e9e:	e766      	b.n	8005d6e <_scanf_float+0x46>
 8005ea0:	eb1a 0f05 	cmn.w	sl, r5
 8005ea4:	f47f af70 	bne.w	8005d88 <_scanf_float+0x60>
 8005ea8:	6822      	ldr	r2, [r4, #0]
 8005eaa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005eae:	6022      	str	r2, [r4, #0]
 8005eb0:	f806 3b01 	strb.w	r3, [r6], #1
 8005eb4:	e7e4      	b.n	8005e80 <_scanf_float+0x158>
 8005eb6:	6822      	ldr	r2, [r4, #0]
 8005eb8:	0610      	lsls	r0, r2, #24
 8005eba:	f57f af65 	bpl.w	8005d88 <_scanf_float+0x60>
 8005ebe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ec2:	e7f4      	b.n	8005eae <_scanf_float+0x186>
 8005ec4:	f1ba 0f00 	cmp.w	sl, #0
 8005ec8:	d10e      	bne.n	8005ee8 <_scanf_float+0x1c0>
 8005eca:	f1b9 0f00 	cmp.w	r9, #0
 8005ece:	d10e      	bne.n	8005eee <_scanf_float+0x1c6>
 8005ed0:	6822      	ldr	r2, [r4, #0]
 8005ed2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005ed6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005eda:	d108      	bne.n	8005eee <_scanf_float+0x1c6>
 8005edc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ee0:	6022      	str	r2, [r4, #0]
 8005ee2:	f04f 0a01 	mov.w	sl, #1
 8005ee6:	e7e3      	b.n	8005eb0 <_scanf_float+0x188>
 8005ee8:	f1ba 0f02 	cmp.w	sl, #2
 8005eec:	d055      	beq.n	8005f9a <_scanf_float+0x272>
 8005eee:	2d01      	cmp	r5, #1
 8005ef0:	d002      	beq.n	8005ef8 <_scanf_float+0x1d0>
 8005ef2:	2d04      	cmp	r5, #4
 8005ef4:	f47f af48 	bne.w	8005d88 <_scanf_float+0x60>
 8005ef8:	3501      	adds	r5, #1
 8005efa:	b2ed      	uxtb	r5, r5
 8005efc:	e7d8      	b.n	8005eb0 <_scanf_float+0x188>
 8005efe:	f1ba 0f01 	cmp.w	sl, #1
 8005f02:	f47f af41 	bne.w	8005d88 <_scanf_float+0x60>
 8005f06:	f04f 0a02 	mov.w	sl, #2
 8005f0a:	e7d1      	b.n	8005eb0 <_scanf_float+0x188>
 8005f0c:	b97d      	cbnz	r5, 8005f2e <_scanf_float+0x206>
 8005f0e:	f1b9 0f00 	cmp.w	r9, #0
 8005f12:	f47f af3c 	bne.w	8005d8e <_scanf_float+0x66>
 8005f16:	6822      	ldr	r2, [r4, #0]
 8005f18:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005f1c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005f20:	f47f af39 	bne.w	8005d96 <_scanf_float+0x6e>
 8005f24:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005f28:	6022      	str	r2, [r4, #0]
 8005f2a:	2501      	movs	r5, #1
 8005f2c:	e7c0      	b.n	8005eb0 <_scanf_float+0x188>
 8005f2e:	2d03      	cmp	r5, #3
 8005f30:	d0e2      	beq.n	8005ef8 <_scanf_float+0x1d0>
 8005f32:	2d05      	cmp	r5, #5
 8005f34:	e7de      	b.n	8005ef4 <_scanf_float+0x1cc>
 8005f36:	2d02      	cmp	r5, #2
 8005f38:	f47f af26 	bne.w	8005d88 <_scanf_float+0x60>
 8005f3c:	2503      	movs	r5, #3
 8005f3e:	e7b7      	b.n	8005eb0 <_scanf_float+0x188>
 8005f40:	2d06      	cmp	r5, #6
 8005f42:	f47f af21 	bne.w	8005d88 <_scanf_float+0x60>
 8005f46:	2507      	movs	r5, #7
 8005f48:	e7b2      	b.n	8005eb0 <_scanf_float+0x188>
 8005f4a:	6822      	ldr	r2, [r4, #0]
 8005f4c:	0591      	lsls	r1, r2, #22
 8005f4e:	f57f af1b 	bpl.w	8005d88 <_scanf_float+0x60>
 8005f52:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005f56:	6022      	str	r2, [r4, #0]
 8005f58:	f8cd 9004 	str.w	r9, [sp, #4]
 8005f5c:	e7a8      	b.n	8005eb0 <_scanf_float+0x188>
 8005f5e:	6822      	ldr	r2, [r4, #0]
 8005f60:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005f64:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005f68:	d006      	beq.n	8005f78 <_scanf_float+0x250>
 8005f6a:	0550      	lsls	r0, r2, #21
 8005f6c:	f57f af0c 	bpl.w	8005d88 <_scanf_float+0x60>
 8005f70:	f1b9 0f00 	cmp.w	r9, #0
 8005f74:	f43f af0f 	beq.w	8005d96 <_scanf_float+0x6e>
 8005f78:	0591      	lsls	r1, r2, #22
 8005f7a:	bf58      	it	pl
 8005f7c:	9901      	ldrpl	r1, [sp, #4]
 8005f7e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005f82:	bf58      	it	pl
 8005f84:	eba9 0101 	subpl.w	r1, r9, r1
 8005f88:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005f8c:	bf58      	it	pl
 8005f8e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005f92:	6022      	str	r2, [r4, #0]
 8005f94:	f04f 0900 	mov.w	r9, #0
 8005f98:	e78a      	b.n	8005eb0 <_scanf_float+0x188>
 8005f9a:	f04f 0a03 	mov.w	sl, #3
 8005f9e:	e787      	b.n	8005eb0 <_scanf_float+0x188>
 8005fa0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005fa4:	4639      	mov	r1, r7
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	4798      	blx	r3
 8005faa:	2800      	cmp	r0, #0
 8005fac:	f43f aedf 	beq.w	8005d6e <_scanf_float+0x46>
 8005fb0:	e6ea      	b.n	8005d88 <_scanf_float+0x60>
 8005fb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005fba:	463a      	mov	r2, r7
 8005fbc:	4640      	mov	r0, r8
 8005fbe:	4798      	blx	r3
 8005fc0:	6923      	ldr	r3, [r4, #16]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	6123      	str	r3, [r4, #16]
 8005fc6:	e6ec      	b.n	8005da2 <_scanf_float+0x7a>
 8005fc8:	1e6b      	subs	r3, r5, #1
 8005fca:	2b06      	cmp	r3, #6
 8005fcc:	d825      	bhi.n	800601a <_scanf_float+0x2f2>
 8005fce:	2d02      	cmp	r5, #2
 8005fd0:	d836      	bhi.n	8006040 <_scanf_float+0x318>
 8005fd2:	455e      	cmp	r6, fp
 8005fd4:	f67f aee8 	bls.w	8005da8 <_scanf_float+0x80>
 8005fd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fdc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005fe0:	463a      	mov	r2, r7
 8005fe2:	4640      	mov	r0, r8
 8005fe4:	4798      	blx	r3
 8005fe6:	6923      	ldr	r3, [r4, #16]
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	6123      	str	r3, [r4, #16]
 8005fec:	e7f1      	b.n	8005fd2 <_scanf_float+0x2aa>
 8005fee:	9802      	ldr	r0, [sp, #8]
 8005ff0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ff4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005ff8:	9002      	str	r0, [sp, #8]
 8005ffa:	463a      	mov	r2, r7
 8005ffc:	4640      	mov	r0, r8
 8005ffe:	4798      	blx	r3
 8006000:	6923      	ldr	r3, [r4, #16]
 8006002:	3b01      	subs	r3, #1
 8006004:	6123      	str	r3, [r4, #16]
 8006006:	f10a 3aff 	add.w	sl, sl, #4294967295
 800600a:	fa5f fa8a 	uxtb.w	sl, sl
 800600e:	f1ba 0f02 	cmp.w	sl, #2
 8006012:	d1ec      	bne.n	8005fee <_scanf_float+0x2c6>
 8006014:	3d03      	subs	r5, #3
 8006016:	b2ed      	uxtb	r5, r5
 8006018:	1b76      	subs	r6, r6, r5
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	05da      	lsls	r2, r3, #23
 800601e:	d52f      	bpl.n	8006080 <_scanf_float+0x358>
 8006020:	055b      	lsls	r3, r3, #21
 8006022:	d510      	bpl.n	8006046 <_scanf_float+0x31e>
 8006024:	455e      	cmp	r6, fp
 8006026:	f67f aebf 	bls.w	8005da8 <_scanf_float+0x80>
 800602a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800602e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006032:	463a      	mov	r2, r7
 8006034:	4640      	mov	r0, r8
 8006036:	4798      	blx	r3
 8006038:	6923      	ldr	r3, [r4, #16]
 800603a:	3b01      	subs	r3, #1
 800603c:	6123      	str	r3, [r4, #16]
 800603e:	e7f1      	b.n	8006024 <_scanf_float+0x2fc>
 8006040:	46aa      	mov	sl, r5
 8006042:	9602      	str	r6, [sp, #8]
 8006044:	e7df      	b.n	8006006 <_scanf_float+0x2de>
 8006046:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800604a:	6923      	ldr	r3, [r4, #16]
 800604c:	2965      	cmp	r1, #101	; 0x65
 800604e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006052:	f106 35ff 	add.w	r5, r6, #4294967295
 8006056:	6123      	str	r3, [r4, #16]
 8006058:	d00c      	beq.n	8006074 <_scanf_float+0x34c>
 800605a:	2945      	cmp	r1, #69	; 0x45
 800605c:	d00a      	beq.n	8006074 <_scanf_float+0x34c>
 800605e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006062:	463a      	mov	r2, r7
 8006064:	4640      	mov	r0, r8
 8006066:	4798      	blx	r3
 8006068:	6923      	ldr	r3, [r4, #16]
 800606a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800606e:	3b01      	subs	r3, #1
 8006070:	1eb5      	subs	r5, r6, #2
 8006072:	6123      	str	r3, [r4, #16]
 8006074:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006078:	463a      	mov	r2, r7
 800607a:	4640      	mov	r0, r8
 800607c:	4798      	blx	r3
 800607e:	462e      	mov	r6, r5
 8006080:	6825      	ldr	r5, [r4, #0]
 8006082:	f015 0510 	ands.w	r5, r5, #16
 8006086:	d159      	bne.n	800613c <_scanf_float+0x414>
 8006088:	7035      	strb	r5, [r6, #0]
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006094:	d11b      	bne.n	80060ce <_scanf_float+0x3a6>
 8006096:	9b01      	ldr	r3, [sp, #4]
 8006098:	454b      	cmp	r3, r9
 800609a:	eba3 0209 	sub.w	r2, r3, r9
 800609e:	d123      	bne.n	80060e8 <_scanf_float+0x3c0>
 80060a0:	2200      	movs	r2, #0
 80060a2:	4659      	mov	r1, fp
 80060a4:	4640      	mov	r0, r8
 80060a6:	f000 fec1 	bl	8006e2c <_strtod_r>
 80060aa:	6822      	ldr	r2, [r4, #0]
 80060ac:	9b03      	ldr	r3, [sp, #12]
 80060ae:	f012 0f02 	tst.w	r2, #2
 80060b2:	ec57 6b10 	vmov	r6, r7, d0
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	d021      	beq.n	80060fe <_scanf_float+0x3d6>
 80060ba:	9903      	ldr	r1, [sp, #12]
 80060bc:	1d1a      	adds	r2, r3, #4
 80060be:	600a      	str	r2, [r1, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	e9c3 6700 	strd	r6, r7, [r3]
 80060c6:	68e3      	ldr	r3, [r4, #12]
 80060c8:	3301      	adds	r3, #1
 80060ca:	60e3      	str	r3, [r4, #12]
 80060cc:	e66d      	b.n	8005daa <_scanf_float+0x82>
 80060ce:	9b04      	ldr	r3, [sp, #16]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d0e5      	beq.n	80060a0 <_scanf_float+0x378>
 80060d4:	9905      	ldr	r1, [sp, #20]
 80060d6:	230a      	movs	r3, #10
 80060d8:	462a      	mov	r2, r5
 80060da:	3101      	adds	r1, #1
 80060dc:	4640      	mov	r0, r8
 80060de:	f000 ff2d 	bl	8006f3c <_strtol_r>
 80060e2:	9b04      	ldr	r3, [sp, #16]
 80060e4:	9e05      	ldr	r6, [sp, #20]
 80060e6:	1ac2      	subs	r2, r0, r3
 80060e8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80060ec:	429e      	cmp	r6, r3
 80060ee:	bf28      	it	cs
 80060f0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80060f4:	4912      	ldr	r1, [pc, #72]	; (8006140 <_scanf_float+0x418>)
 80060f6:	4630      	mov	r0, r6
 80060f8:	f000 f854 	bl	80061a4 <siprintf>
 80060fc:	e7d0      	b.n	80060a0 <_scanf_float+0x378>
 80060fe:	9903      	ldr	r1, [sp, #12]
 8006100:	f012 0f04 	tst.w	r2, #4
 8006104:	f103 0204 	add.w	r2, r3, #4
 8006108:	600a      	str	r2, [r1, #0]
 800610a:	d1d9      	bne.n	80060c0 <_scanf_float+0x398>
 800610c:	f8d3 8000 	ldr.w	r8, [r3]
 8006110:	ee10 2a10 	vmov	r2, s0
 8006114:	ee10 0a10 	vmov	r0, s0
 8006118:	463b      	mov	r3, r7
 800611a:	4639      	mov	r1, r7
 800611c:	f7fa fd0e 	bl	8000b3c <__aeabi_dcmpun>
 8006120:	b128      	cbz	r0, 800612e <_scanf_float+0x406>
 8006122:	4808      	ldr	r0, [pc, #32]	; (8006144 <_scanf_float+0x41c>)
 8006124:	f000 f838 	bl	8006198 <nanf>
 8006128:	ed88 0a00 	vstr	s0, [r8]
 800612c:	e7cb      	b.n	80060c6 <_scanf_float+0x39e>
 800612e:	4630      	mov	r0, r6
 8006130:	4639      	mov	r1, r7
 8006132:	f7fa fd61 	bl	8000bf8 <__aeabi_d2f>
 8006136:	f8c8 0000 	str.w	r0, [r8]
 800613a:	e7c4      	b.n	80060c6 <_scanf_float+0x39e>
 800613c:	2500      	movs	r5, #0
 800613e:	e634      	b.n	8005daa <_scanf_float+0x82>
 8006140:	08009cf0 	.word	0x08009cf0
 8006144:	0800a160 	.word	0x0800a160

08006148 <iprintf>:
 8006148:	b40f      	push	{r0, r1, r2, r3}
 800614a:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <iprintf+0x2c>)
 800614c:	b513      	push	{r0, r1, r4, lr}
 800614e:	681c      	ldr	r4, [r3, #0]
 8006150:	b124      	cbz	r4, 800615c <iprintf+0x14>
 8006152:	69a3      	ldr	r3, [r4, #24]
 8006154:	b913      	cbnz	r3, 800615c <iprintf+0x14>
 8006156:	4620      	mov	r0, r4
 8006158:	f001 fdc4 	bl	8007ce4 <__sinit>
 800615c:	ab05      	add	r3, sp, #20
 800615e:	9a04      	ldr	r2, [sp, #16]
 8006160:	68a1      	ldr	r1, [r4, #8]
 8006162:	9301      	str	r3, [sp, #4]
 8006164:	4620      	mov	r0, r4
 8006166:	f003 f843 	bl	80091f0 <_vfiprintf_r>
 800616a:	b002      	add	sp, #8
 800616c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006170:	b004      	add	sp, #16
 8006172:	4770      	bx	lr
 8006174:	200000ac 	.word	0x200000ac

08006178 <_sbrk_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	4d06      	ldr	r5, [pc, #24]	; (8006194 <_sbrk_r+0x1c>)
 800617c:	2300      	movs	r3, #0
 800617e:	4604      	mov	r4, r0
 8006180:	4608      	mov	r0, r1
 8006182:	602b      	str	r3, [r5, #0]
 8006184:	f7fc fb7e 	bl	8002884 <_sbrk>
 8006188:	1c43      	adds	r3, r0, #1
 800618a:	d102      	bne.n	8006192 <_sbrk_r+0x1a>
 800618c:	682b      	ldr	r3, [r5, #0]
 800618e:	b103      	cbz	r3, 8006192 <_sbrk_r+0x1a>
 8006190:	6023      	str	r3, [r4, #0]
 8006192:	bd38      	pop	{r3, r4, r5, pc}
 8006194:	20000464 	.word	0x20000464

08006198 <nanf>:
 8006198:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80061a0 <nanf+0x8>
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	7fc00000 	.word	0x7fc00000

080061a4 <siprintf>:
 80061a4:	b40e      	push	{r1, r2, r3}
 80061a6:	b500      	push	{lr}
 80061a8:	b09c      	sub	sp, #112	; 0x70
 80061aa:	ab1d      	add	r3, sp, #116	; 0x74
 80061ac:	9002      	str	r0, [sp, #8]
 80061ae:	9006      	str	r0, [sp, #24]
 80061b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061b4:	4809      	ldr	r0, [pc, #36]	; (80061dc <siprintf+0x38>)
 80061b6:	9107      	str	r1, [sp, #28]
 80061b8:	9104      	str	r1, [sp, #16]
 80061ba:	4909      	ldr	r1, [pc, #36]	; (80061e0 <siprintf+0x3c>)
 80061bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80061c0:	9105      	str	r1, [sp, #20]
 80061c2:	6800      	ldr	r0, [r0, #0]
 80061c4:	9301      	str	r3, [sp, #4]
 80061c6:	a902      	add	r1, sp, #8
 80061c8:	f002 fee8 	bl	8008f9c <_svfiprintf_r>
 80061cc:	9b02      	ldr	r3, [sp, #8]
 80061ce:	2200      	movs	r2, #0
 80061d0:	701a      	strb	r2, [r3, #0]
 80061d2:	b01c      	add	sp, #112	; 0x70
 80061d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80061d8:	b003      	add	sp, #12
 80061da:	4770      	bx	lr
 80061dc:	200000ac 	.word	0x200000ac
 80061e0:	ffff0208 	.word	0xffff0208

080061e4 <sulp>:
 80061e4:	b570      	push	{r4, r5, r6, lr}
 80061e6:	4604      	mov	r4, r0
 80061e8:	460d      	mov	r5, r1
 80061ea:	ec45 4b10 	vmov	d0, r4, r5
 80061ee:	4616      	mov	r6, r2
 80061f0:	f002 fd2a 	bl	8008c48 <__ulp>
 80061f4:	ec51 0b10 	vmov	r0, r1, d0
 80061f8:	b17e      	cbz	r6, 800621a <sulp+0x36>
 80061fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80061fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006202:	2b00      	cmp	r3, #0
 8006204:	dd09      	ble.n	800621a <sulp+0x36>
 8006206:	051b      	lsls	r3, r3, #20
 8006208:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800620c:	2400      	movs	r4, #0
 800620e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006212:	4622      	mov	r2, r4
 8006214:	462b      	mov	r3, r5
 8006216:	f7fa f9f7 	bl	8000608 <__aeabi_dmul>
 800621a:	bd70      	pop	{r4, r5, r6, pc}
 800621c:	0000      	movs	r0, r0
	...

08006220 <_strtod_l>:
 8006220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006224:	ed2d 8b02 	vpush	{d8}
 8006228:	b09d      	sub	sp, #116	; 0x74
 800622a:	461f      	mov	r7, r3
 800622c:	2300      	movs	r3, #0
 800622e:	9318      	str	r3, [sp, #96]	; 0x60
 8006230:	4ba2      	ldr	r3, [pc, #648]	; (80064bc <_strtod_l+0x29c>)
 8006232:	9213      	str	r2, [sp, #76]	; 0x4c
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	9305      	str	r3, [sp, #20]
 8006238:	4604      	mov	r4, r0
 800623a:	4618      	mov	r0, r3
 800623c:	4688      	mov	r8, r1
 800623e:	f7f9 ffcf 	bl	80001e0 <strlen>
 8006242:	f04f 0a00 	mov.w	sl, #0
 8006246:	4605      	mov	r5, r0
 8006248:	f04f 0b00 	mov.w	fp, #0
 800624c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006250:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006252:	781a      	ldrb	r2, [r3, #0]
 8006254:	2a2b      	cmp	r2, #43	; 0x2b
 8006256:	d04e      	beq.n	80062f6 <_strtod_l+0xd6>
 8006258:	d83b      	bhi.n	80062d2 <_strtod_l+0xb2>
 800625a:	2a0d      	cmp	r2, #13
 800625c:	d834      	bhi.n	80062c8 <_strtod_l+0xa8>
 800625e:	2a08      	cmp	r2, #8
 8006260:	d834      	bhi.n	80062cc <_strtod_l+0xac>
 8006262:	2a00      	cmp	r2, #0
 8006264:	d03e      	beq.n	80062e4 <_strtod_l+0xc4>
 8006266:	2300      	movs	r3, #0
 8006268:	930a      	str	r3, [sp, #40]	; 0x28
 800626a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800626c:	7833      	ldrb	r3, [r6, #0]
 800626e:	2b30      	cmp	r3, #48	; 0x30
 8006270:	f040 80b0 	bne.w	80063d4 <_strtod_l+0x1b4>
 8006274:	7873      	ldrb	r3, [r6, #1]
 8006276:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800627a:	2b58      	cmp	r3, #88	; 0x58
 800627c:	d168      	bne.n	8006350 <_strtod_l+0x130>
 800627e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006280:	9301      	str	r3, [sp, #4]
 8006282:	ab18      	add	r3, sp, #96	; 0x60
 8006284:	9702      	str	r7, [sp, #8]
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	4a8d      	ldr	r2, [pc, #564]	; (80064c0 <_strtod_l+0x2a0>)
 800628a:	ab19      	add	r3, sp, #100	; 0x64
 800628c:	a917      	add	r1, sp, #92	; 0x5c
 800628e:	4620      	mov	r0, r4
 8006290:	f001 fe2c 	bl	8007eec <__gethex>
 8006294:	f010 0707 	ands.w	r7, r0, #7
 8006298:	4605      	mov	r5, r0
 800629a:	d005      	beq.n	80062a8 <_strtod_l+0x88>
 800629c:	2f06      	cmp	r7, #6
 800629e:	d12c      	bne.n	80062fa <_strtod_l+0xda>
 80062a0:	3601      	adds	r6, #1
 80062a2:	2300      	movs	r3, #0
 80062a4:	9617      	str	r6, [sp, #92]	; 0x5c
 80062a6:	930a      	str	r3, [sp, #40]	; 0x28
 80062a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f040 8590 	bne.w	8006dd0 <_strtod_l+0xbb0>
 80062b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062b2:	b1eb      	cbz	r3, 80062f0 <_strtod_l+0xd0>
 80062b4:	4652      	mov	r2, sl
 80062b6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80062ba:	ec43 2b10 	vmov	d0, r2, r3
 80062be:	b01d      	add	sp, #116	; 0x74
 80062c0:	ecbd 8b02 	vpop	{d8}
 80062c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c8:	2a20      	cmp	r2, #32
 80062ca:	d1cc      	bne.n	8006266 <_strtod_l+0x46>
 80062cc:	3301      	adds	r3, #1
 80062ce:	9317      	str	r3, [sp, #92]	; 0x5c
 80062d0:	e7be      	b.n	8006250 <_strtod_l+0x30>
 80062d2:	2a2d      	cmp	r2, #45	; 0x2d
 80062d4:	d1c7      	bne.n	8006266 <_strtod_l+0x46>
 80062d6:	2201      	movs	r2, #1
 80062d8:	920a      	str	r2, [sp, #40]	; 0x28
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80062de:	785b      	ldrb	r3, [r3, #1]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1c2      	bne.n	800626a <_strtod_l+0x4a>
 80062e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80062e6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f040 856e 	bne.w	8006dcc <_strtod_l+0xbac>
 80062f0:	4652      	mov	r2, sl
 80062f2:	465b      	mov	r3, fp
 80062f4:	e7e1      	b.n	80062ba <_strtod_l+0x9a>
 80062f6:	2200      	movs	r2, #0
 80062f8:	e7ee      	b.n	80062d8 <_strtod_l+0xb8>
 80062fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80062fc:	b13a      	cbz	r2, 800630e <_strtod_l+0xee>
 80062fe:	2135      	movs	r1, #53	; 0x35
 8006300:	a81a      	add	r0, sp, #104	; 0x68
 8006302:	f002 fdac 	bl	8008e5e <__copybits>
 8006306:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006308:	4620      	mov	r0, r4
 800630a:	f002 f96b 	bl	80085e4 <_Bfree>
 800630e:	3f01      	subs	r7, #1
 8006310:	2f04      	cmp	r7, #4
 8006312:	d806      	bhi.n	8006322 <_strtod_l+0x102>
 8006314:	e8df f007 	tbb	[pc, r7]
 8006318:	1714030a 	.word	0x1714030a
 800631c:	0a          	.byte	0x0a
 800631d:	00          	.byte	0x00
 800631e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006322:	0728      	lsls	r0, r5, #28
 8006324:	d5c0      	bpl.n	80062a8 <_strtod_l+0x88>
 8006326:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800632a:	e7bd      	b.n	80062a8 <_strtod_l+0x88>
 800632c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006330:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006332:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006336:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800633a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800633e:	e7f0      	b.n	8006322 <_strtod_l+0x102>
 8006340:	f8df b180 	ldr.w	fp, [pc, #384]	; 80064c4 <_strtod_l+0x2a4>
 8006344:	e7ed      	b.n	8006322 <_strtod_l+0x102>
 8006346:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800634a:	f04f 3aff 	mov.w	sl, #4294967295
 800634e:	e7e8      	b.n	8006322 <_strtod_l+0x102>
 8006350:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	9217      	str	r2, [sp, #92]	; 0x5c
 8006356:	785b      	ldrb	r3, [r3, #1]
 8006358:	2b30      	cmp	r3, #48	; 0x30
 800635a:	d0f9      	beq.n	8006350 <_strtod_l+0x130>
 800635c:	2b00      	cmp	r3, #0
 800635e:	d0a3      	beq.n	80062a8 <_strtod_l+0x88>
 8006360:	2301      	movs	r3, #1
 8006362:	f04f 0900 	mov.w	r9, #0
 8006366:	9304      	str	r3, [sp, #16]
 8006368:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800636a:	9308      	str	r3, [sp, #32]
 800636c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006370:	464f      	mov	r7, r9
 8006372:	220a      	movs	r2, #10
 8006374:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006376:	7806      	ldrb	r6, [r0, #0]
 8006378:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800637c:	b2d9      	uxtb	r1, r3
 800637e:	2909      	cmp	r1, #9
 8006380:	d92a      	bls.n	80063d8 <_strtod_l+0x1b8>
 8006382:	9905      	ldr	r1, [sp, #20]
 8006384:	462a      	mov	r2, r5
 8006386:	f003 f8ae 	bl	80094e6 <strncmp>
 800638a:	b398      	cbz	r0, 80063f4 <_strtod_l+0x1d4>
 800638c:	2000      	movs	r0, #0
 800638e:	4632      	mov	r2, r6
 8006390:	463d      	mov	r5, r7
 8006392:	9005      	str	r0, [sp, #20]
 8006394:	4603      	mov	r3, r0
 8006396:	2a65      	cmp	r2, #101	; 0x65
 8006398:	d001      	beq.n	800639e <_strtod_l+0x17e>
 800639a:	2a45      	cmp	r2, #69	; 0x45
 800639c:	d118      	bne.n	80063d0 <_strtod_l+0x1b0>
 800639e:	b91d      	cbnz	r5, 80063a8 <_strtod_l+0x188>
 80063a0:	9a04      	ldr	r2, [sp, #16]
 80063a2:	4302      	orrs	r2, r0
 80063a4:	d09e      	beq.n	80062e4 <_strtod_l+0xc4>
 80063a6:	2500      	movs	r5, #0
 80063a8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80063ac:	f108 0201 	add.w	r2, r8, #1
 80063b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80063b2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80063b6:	2a2b      	cmp	r2, #43	; 0x2b
 80063b8:	d075      	beq.n	80064a6 <_strtod_l+0x286>
 80063ba:	2a2d      	cmp	r2, #45	; 0x2d
 80063bc:	d07b      	beq.n	80064b6 <_strtod_l+0x296>
 80063be:	f04f 0c00 	mov.w	ip, #0
 80063c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80063c6:	2909      	cmp	r1, #9
 80063c8:	f240 8082 	bls.w	80064d0 <_strtod_l+0x2b0>
 80063cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80063d0:	2600      	movs	r6, #0
 80063d2:	e09d      	b.n	8006510 <_strtod_l+0x2f0>
 80063d4:	2300      	movs	r3, #0
 80063d6:	e7c4      	b.n	8006362 <_strtod_l+0x142>
 80063d8:	2f08      	cmp	r7, #8
 80063da:	bfd8      	it	le
 80063dc:	9907      	ldrle	r1, [sp, #28]
 80063de:	f100 0001 	add.w	r0, r0, #1
 80063e2:	bfda      	itte	le
 80063e4:	fb02 3301 	mlale	r3, r2, r1, r3
 80063e8:	9307      	strle	r3, [sp, #28]
 80063ea:	fb02 3909 	mlagt	r9, r2, r9, r3
 80063ee:	3701      	adds	r7, #1
 80063f0:	9017      	str	r0, [sp, #92]	; 0x5c
 80063f2:	e7bf      	b.n	8006374 <_strtod_l+0x154>
 80063f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063f6:	195a      	adds	r2, r3, r5
 80063f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80063fa:	5d5a      	ldrb	r2, [r3, r5]
 80063fc:	2f00      	cmp	r7, #0
 80063fe:	d037      	beq.n	8006470 <_strtod_l+0x250>
 8006400:	9005      	str	r0, [sp, #20]
 8006402:	463d      	mov	r5, r7
 8006404:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006408:	2b09      	cmp	r3, #9
 800640a:	d912      	bls.n	8006432 <_strtod_l+0x212>
 800640c:	2301      	movs	r3, #1
 800640e:	e7c2      	b.n	8006396 <_strtod_l+0x176>
 8006410:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	9217      	str	r2, [sp, #92]	; 0x5c
 8006416:	785a      	ldrb	r2, [r3, #1]
 8006418:	3001      	adds	r0, #1
 800641a:	2a30      	cmp	r2, #48	; 0x30
 800641c:	d0f8      	beq.n	8006410 <_strtod_l+0x1f0>
 800641e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006422:	2b08      	cmp	r3, #8
 8006424:	f200 84d9 	bhi.w	8006dda <_strtod_l+0xbba>
 8006428:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800642a:	9005      	str	r0, [sp, #20]
 800642c:	2000      	movs	r0, #0
 800642e:	9308      	str	r3, [sp, #32]
 8006430:	4605      	mov	r5, r0
 8006432:	3a30      	subs	r2, #48	; 0x30
 8006434:	f100 0301 	add.w	r3, r0, #1
 8006438:	d014      	beq.n	8006464 <_strtod_l+0x244>
 800643a:	9905      	ldr	r1, [sp, #20]
 800643c:	4419      	add	r1, r3
 800643e:	9105      	str	r1, [sp, #20]
 8006440:	462b      	mov	r3, r5
 8006442:	eb00 0e05 	add.w	lr, r0, r5
 8006446:	210a      	movs	r1, #10
 8006448:	4573      	cmp	r3, lr
 800644a:	d113      	bne.n	8006474 <_strtod_l+0x254>
 800644c:	182b      	adds	r3, r5, r0
 800644e:	2b08      	cmp	r3, #8
 8006450:	f105 0501 	add.w	r5, r5, #1
 8006454:	4405      	add	r5, r0
 8006456:	dc1c      	bgt.n	8006492 <_strtod_l+0x272>
 8006458:	9907      	ldr	r1, [sp, #28]
 800645a:	230a      	movs	r3, #10
 800645c:	fb03 2301 	mla	r3, r3, r1, r2
 8006460:	9307      	str	r3, [sp, #28]
 8006462:	2300      	movs	r3, #0
 8006464:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006466:	1c51      	adds	r1, r2, #1
 8006468:	9117      	str	r1, [sp, #92]	; 0x5c
 800646a:	7852      	ldrb	r2, [r2, #1]
 800646c:	4618      	mov	r0, r3
 800646e:	e7c9      	b.n	8006404 <_strtod_l+0x1e4>
 8006470:	4638      	mov	r0, r7
 8006472:	e7d2      	b.n	800641a <_strtod_l+0x1fa>
 8006474:	2b08      	cmp	r3, #8
 8006476:	dc04      	bgt.n	8006482 <_strtod_l+0x262>
 8006478:	9e07      	ldr	r6, [sp, #28]
 800647a:	434e      	muls	r6, r1
 800647c:	9607      	str	r6, [sp, #28]
 800647e:	3301      	adds	r3, #1
 8006480:	e7e2      	b.n	8006448 <_strtod_l+0x228>
 8006482:	f103 0c01 	add.w	ip, r3, #1
 8006486:	f1bc 0f10 	cmp.w	ip, #16
 800648a:	bfd8      	it	le
 800648c:	fb01 f909 	mulle.w	r9, r1, r9
 8006490:	e7f5      	b.n	800647e <_strtod_l+0x25e>
 8006492:	2d10      	cmp	r5, #16
 8006494:	bfdc      	itt	le
 8006496:	230a      	movle	r3, #10
 8006498:	fb03 2909 	mlale	r9, r3, r9, r2
 800649c:	e7e1      	b.n	8006462 <_strtod_l+0x242>
 800649e:	2300      	movs	r3, #0
 80064a0:	9305      	str	r3, [sp, #20]
 80064a2:	2301      	movs	r3, #1
 80064a4:	e77c      	b.n	80063a0 <_strtod_l+0x180>
 80064a6:	f04f 0c00 	mov.w	ip, #0
 80064aa:	f108 0202 	add.w	r2, r8, #2
 80064ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80064b0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80064b4:	e785      	b.n	80063c2 <_strtod_l+0x1a2>
 80064b6:	f04f 0c01 	mov.w	ip, #1
 80064ba:	e7f6      	b.n	80064aa <_strtod_l+0x28a>
 80064bc:	08009fa4 	.word	0x08009fa4
 80064c0:	08009cf8 	.word	0x08009cf8
 80064c4:	7ff00000 	.word	0x7ff00000
 80064c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80064ca:	1c51      	adds	r1, r2, #1
 80064cc:	9117      	str	r1, [sp, #92]	; 0x5c
 80064ce:	7852      	ldrb	r2, [r2, #1]
 80064d0:	2a30      	cmp	r2, #48	; 0x30
 80064d2:	d0f9      	beq.n	80064c8 <_strtod_l+0x2a8>
 80064d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80064d8:	2908      	cmp	r1, #8
 80064da:	f63f af79 	bhi.w	80063d0 <_strtod_l+0x1b0>
 80064de:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80064e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80064e4:	9206      	str	r2, [sp, #24]
 80064e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80064e8:	1c51      	adds	r1, r2, #1
 80064ea:	9117      	str	r1, [sp, #92]	; 0x5c
 80064ec:	7852      	ldrb	r2, [r2, #1]
 80064ee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80064f2:	2e09      	cmp	r6, #9
 80064f4:	d937      	bls.n	8006566 <_strtod_l+0x346>
 80064f6:	9e06      	ldr	r6, [sp, #24]
 80064f8:	1b89      	subs	r1, r1, r6
 80064fa:	2908      	cmp	r1, #8
 80064fc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006500:	dc02      	bgt.n	8006508 <_strtod_l+0x2e8>
 8006502:	4576      	cmp	r6, lr
 8006504:	bfa8      	it	ge
 8006506:	4676      	movge	r6, lr
 8006508:	f1bc 0f00 	cmp.w	ip, #0
 800650c:	d000      	beq.n	8006510 <_strtod_l+0x2f0>
 800650e:	4276      	negs	r6, r6
 8006510:	2d00      	cmp	r5, #0
 8006512:	d14d      	bne.n	80065b0 <_strtod_l+0x390>
 8006514:	9904      	ldr	r1, [sp, #16]
 8006516:	4301      	orrs	r1, r0
 8006518:	f47f aec6 	bne.w	80062a8 <_strtod_l+0x88>
 800651c:	2b00      	cmp	r3, #0
 800651e:	f47f aee1 	bne.w	80062e4 <_strtod_l+0xc4>
 8006522:	2a69      	cmp	r2, #105	; 0x69
 8006524:	d027      	beq.n	8006576 <_strtod_l+0x356>
 8006526:	dc24      	bgt.n	8006572 <_strtod_l+0x352>
 8006528:	2a49      	cmp	r2, #73	; 0x49
 800652a:	d024      	beq.n	8006576 <_strtod_l+0x356>
 800652c:	2a4e      	cmp	r2, #78	; 0x4e
 800652e:	f47f aed9 	bne.w	80062e4 <_strtod_l+0xc4>
 8006532:	499f      	ldr	r1, [pc, #636]	; (80067b0 <_strtod_l+0x590>)
 8006534:	a817      	add	r0, sp, #92	; 0x5c
 8006536:	f001 ff31 	bl	800839c <__match>
 800653a:	2800      	cmp	r0, #0
 800653c:	f43f aed2 	beq.w	80062e4 <_strtod_l+0xc4>
 8006540:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	2b28      	cmp	r3, #40	; 0x28
 8006546:	d12d      	bne.n	80065a4 <_strtod_l+0x384>
 8006548:	499a      	ldr	r1, [pc, #616]	; (80067b4 <_strtod_l+0x594>)
 800654a:	aa1a      	add	r2, sp, #104	; 0x68
 800654c:	a817      	add	r0, sp, #92	; 0x5c
 800654e:	f001 ff39 	bl	80083c4 <__hexnan>
 8006552:	2805      	cmp	r0, #5
 8006554:	d126      	bne.n	80065a4 <_strtod_l+0x384>
 8006556:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006558:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800655c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006560:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006564:	e6a0      	b.n	80062a8 <_strtod_l+0x88>
 8006566:	210a      	movs	r1, #10
 8006568:	fb01 2e0e 	mla	lr, r1, lr, r2
 800656c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006570:	e7b9      	b.n	80064e6 <_strtod_l+0x2c6>
 8006572:	2a6e      	cmp	r2, #110	; 0x6e
 8006574:	e7db      	b.n	800652e <_strtod_l+0x30e>
 8006576:	4990      	ldr	r1, [pc, #576]	; (80067b8 <_strtod_l+0x598>)
 8006578:	a817      	add	r0, sp, #92	; 0x5c
 800657a:	f001 ff0f 	bl	800839c <__match>
 800657e:	2800      	cmp	r0, #0
 8006580:	f43f aeb0 	beq.w	80062e4 <_strtod_l+0xc4>
 8006584:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006586:	498d      	ldr	r1, [pc, #564]	; (80067bc <_strtod_l+0x59c>)
 8006588:	3b01      	subs	r3, #1
 800658a:	a817      	add	r0, sp, #92	; 0x5c
 800658c:	9317      	str	r3, [sp, #92]	; 0x5c
 800658e:	f001 ff05 	bl	800839c <__match>
 8006592:	b910      	cbnz	r0, 800659a <_strtod_l+0x37a>
 8006594:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006596:	3301      	adds	r3, #1
 8006598:	9317      	str	r3, [sp, #92]	; 0x5c
 800659a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80067cc <_strtod_l+0x5ac>
 800659e:	f04f 0a00 	mov.w	sl, #0
 80065a2:	e681      	b.n	80062a8 <_strtod_l+0x88>
 80065a4:	4886      	ldr	r0, [pc, #536]	; (80067c0 <_strtod_l+0x5a0>)
 80065a6:	f002 ff53 	bl	8009450 <nan>
 80065aa:	ec5b ab10 	vmov	sl, fp, d0
 80065ae:	e67b      	b.n	80062a8 <_strtod_l+0x88>
 80065b0:	9b05      	ldr	r3, [sp, #20]
 80065b2:	9807      	ldr	r0, [sp, #28]
 80065b4:	1af3      	subs	r3, r6, r3
 80065b6:	2f00      	cmp	r7, #0
 80065b8:	bf08      	it	eq
 80065ba:	462f      	moveq	r7, r5
 80065bc:	2d10      	cmp	r5, #16
 80065be:	9306      	str	r3, [sp, #24]
 80065c0:	46a8      	mov	r8, r5
 80065c2:	bfa8      	it	ge
 80065c4:	f04f 0810 	movge.w	r8, #16
 80065c8:	f7f9 ffa4 	bl	8000514 <__aeabi_ui2d>
 80065cc:	2d09      	cmp	r5, #9
 80065ce:	4682      	mov	sl, r0
 80065d0:	468b      	mov	fp, r1
 80065d2:	dd13      	ble.n	80065fc <_strtod_l+0x3dc>
 80065d4:	4b7b      	ldr	r3, [pc, #492]	; (80067c4 <_strtod_l+0x5a4>)
 80065d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80065da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80065de:	f7fa f813 	bl	8000608 <__aeabi_dmul>
 80065e2:	4682      	mov	sl, r0
 80065e4:	4648      	mov	r0, r9
 80065e6:	468b      	mov	fp, r1
 80065e8:	f7f9 ff94 	bl	8000514 <__aeabi_ui2d>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	4650      	mov	r0, sl
 80065f2:	4659      	mov	r1, fp
 80065f4:	f7f9 fe52 	bl	800029c <__adddf3>
 80065f8:	4682      	mov	sl, r0
 80065fa:	468b      	mov	fp, r1
 80065fc:	2d0f      	cmp	r5, #15
 80065fe:	dc38      	bgt.n	8006672 <_strtod_l+0x452>
 8006600:	9b06      	ldr	r3, [sp, #24]
 8006602:	2b00      	cmp	r3, #0
 8006604:	f43f ae50 	beq.w	80062a8 <_strtod_l+0x88>
 8006608:	dd24      	ble.n	8006654 <_strtod_l+0x434>
 800660a:	2b16      	cmp	r3, #22
 800660c:	dc0b      	bgt.n	8006626 <_strtod_l+0x406>
 800660e:	496d      	ldr	r1, [pc, #436]	; (80067c4 <_strtod_l+0x5a4>)
 8006610:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006614:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006618:	4652      	mov	r2, sl
 800661a:	465b      	mov	r3, fp
 800661c:	f7f9 fff4 	bl	8000608 <__aeabi_dmul>
 8006620:	4682      	mov	sl, r0
 8006622:	468b      	mov	fp, r1
 8006624:	e640      	b.n	80062a8 <_strtod_l+0x88>
 8006626:	9a06      	ldr	r2, [sp, #24]
 8006628:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800662c:	4293      	cmp	r3, r2
 800662e:	db20      	blt.n	8006672 <_strtod_l+0x452>
 8006630:	4c64      	ldr	r4, [pc, #400]	; (80067c4 <_strtod_l+0x5a4>)
 8006632:	f1c5 050f 	rsb	r5, r5, #15
 8006636:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800663a:	4652      	mov	r2, sl
 800663c:	465b      	mov	r3, fp
 800663e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006642:	f7f9 ffe1 	bl	8000608 <__aeabi_dmul>
 8006646:	9b06      	ldr	r3, [sp, #24]
 8006648:	1b5d      	subs	r5, r3, r5
 800664a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800664e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006652:	e7e3      	b.n	800661c <_strtod_l+0x3fc>
 8006654:	9b06      	ldr	r3, [sp, #24]
 8006656:	3316      	adds	r3, #22
 8006658:	db0b      	blt.n	8006672 <_strtod_l+0x452>
 800665a:	9b05      	ldr	r3, [sp, #20]
 800665c:	1b9e      	subs	r6, r3, r6
 800665e:	4b59      	ldr	r3, [pc, #356]	; (80067c4 <_strtod_l+0x5a4>)
 8006660:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006664:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006668:	4650      	mov	r0, sl
 800666a:	4659      	mov	r1, fp
 800666c:	f7fa f8f6 	bl	800085c <__aeabi_ddiv>
 8006670:	e7d6      	b.n	8006620 <_strtod_l+0x400>
 8006672:	9b06      	ldr	r3, [sp, #24]
 8006674:	eba5 0808 	sub.w	r8, r5, r8
 8006678:	4498      	add	r8, r3
 800667a:	f1b8 0f00 	cmp.w	r8, #0
 800667e:	dd74      	ble.n	800676a <_strtod_l+0x54a>
 8006680:	f018 030f 	ands.w	r3, r8, #15
 8006684:	d00a      	beq.n	800669c <_strtod_l+0x47c>
 8006686:	494f      	ldr	r1, [pc, #316]	; (80067c4 <_strtod_l+0x5a4>)
 8006688:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800668c:	4652      	mov	r2, sl
 800668e:	465b      	mov	r3, fp
 8006690:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006694:	f7f9 ffb8 	bl	8000608 <__aeabi_dmul>
 8006698:	4682      	mov	sl, r0
 800669a:	468b      	mov	fp, r1
 800669c:	f038 080f 	bics.w	r8, r8, #15
 80066a0:	d04f      	beq.n	8006742 <_strtod_l+0x522>
 80066a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80066a6:	dd22      	ble.n	80066ee <_strtod_l+0x4ce>
 80066a8:	2500      	movs	r5, #0
 80066aa:	462e      	mov	r6, r5
 80066ac:	9507      	str	r5, [sp, #28]
 80066ae:	9505      	str	r5, [sp, #20]
 80066b0:	2322      	movs	r3, #34	; 0x22
 80066b2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80067cc <_strtod_l+0x5ac>
 80066b6:	6023      	str	r3, [r4, #0]
 80066b8:	f04f 0a00 	mov.w	sl, #0
 80066bc:	9b07      	ldr	r3, [sp, #28]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f43f adf2 	beq.w	80062a8 <_strtod_l+0x88>
 80066c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80066c6:	4620      	mov	r0, r4
 80066c8:	f001 ff8c 	bl	80085e4 <_Bfree>
 80066cc:	9905      	ldr	r1, [sp, #20]
 80066ce:	4620      	mov	r0, r4
 80066d0:	f001 ff88 	bl	80085e4 <_Bfree>
 80066d4:	4631      	mov	r1, r6
 80066d6:	4620      	mov	r0, r4
 80066d8:	f001 ff84 	bl	80085e4 <_Bfree>
 80066dc:	9907      	ldr	r1, [sp, #28]
 80066de:	4620      	mov	r0, r4
 80066e0:	f001 ff80 	bl	80085e4 <_Bfree>
 80066e4:	4629      	mov	r1, r5
 80066e6:	4620      	mov	r0, r4
 80066e8:	f001 ff7c 	bl	80085e4 <_Bfree>
 80066ec:	e5dc      	b.n	80062a8 <_strtod_l+0x88>
 80066ee:	4b36      	ldr	r3, [pc, #216]	; (80067c8 <_strtod_l+0x5a8>)
 80066f0:	9304      	str	r3, [sp, #16]
 80066f2:	2300      	movs	r3, #0
 80066f4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80066f8:	4650      	mov	r0, sl
 80066fa:	4659      	mov	r1, fp
 80066fc:	4699      	mov	r9, r3
 80066fe:	f1b8 0f01 	cmp.w	r8, #1
 8006702:	dc21      	bgt.n	8006748 <_strtod_l+0x528>
 8006704:	b10b      	cbz	r3, 800670a <_strtod_l+0x4ea>
 8006706:	4682      	mov	sl, r0
 8006708:	468b      	mov	fp, r1
 800670a:	4b2f      	ldr	r3, [pc, #188]	; (80067c8 <_strtod_l+0x5a8>)
 800670c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006710:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006714:	4652      	mov	r2, sl
 8006716:	465b      	mov	r3, fp
 8006718:	e9d9 0100 	ldrd	r0, r1, [r9]
 800671c:	f7f9 ff74 	bl	8000608 <__aeabi_dmul>
 8006720:	4b2a      	ldr	r3, [pc, #168]	; (80067cc <_strtod_l+0x5ac>)
 8006722:	460a      	mov	r2, r1
 8006724:	400b      	ands	r3, r1
 8006726:	492a      	ldr	r1, [pc, #168]	; (80067d0 <_strtod_l+0x5b0>)
 8006728:	428b      	cmp	r3, r1
 800672a:	4682      	mov	sl, r0
 800672c:	d8bc      	bhi.n	80066a8 <_strtod_l+0x488>
 800672e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006732:	428b      	cmp	r3, r1
 8006734:	bf86      	itte	hi
 8006736:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80067d4 <_strtod_l+0x5b4>
 800673a:	f04f 3aff 	movhi.w	sl, #4294967295
 800673e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006742:	2300      	movs	r3, #0
 8006744:	9304      	str	r3, [sp, #16]
 8006746:	e084      	b.n	8006852 <_strtod_l+0x632>
 8006748:	f018 0f01 	tst.w	r8, #1
 800674c:	d005      	beq.n	800675a <_strtod_l+0x53a>
 800674e:	9b04      	ldr	r3, [sp, #16]
 8006750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006754:	f7f9 ff58 	bl	8000608 <__aeabi_dmul>
 8006758:	2301      	movs	r3, #1
 800675a:	9a04      	ldr	r2, [sp, #16]
 800675c:	3208      	adds	r2, #8
 800675e:	f109 0901 	add.w	r9, r9, #1
 8006762:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006766:	9204      	str	r2, [sp, #16]
 8006768:	e7c9      	b.n	80066fe <_strtod_l+0x4de>
 800676a:	d0ea      	beq.n	8006742 <_strtod_l+0x522>
 800676c:	f1c8 0800 	rsb	r8, r8, #0
 8006770:	f018 020f 	ands.w	r2, r8, #15
 8006774:	d00a      	beq.n	800678c <_strtod_l+0x56c>
 8006776:	4b13      	ldr	r3, [pc, #76]	; (80067c4 <_strtod_l+0x5a4>)
 8006778:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800677c:	4650      	mov	r0, sl
 800677e:	4659      	mov	r1, fp
 8006780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006784:	f7fa f86a 	bl	800085c <__aeabi_ddiv>
 8006788:	4682      	mov	sl, r0
 800678a:	468b      	mov	fp, r1
 800678c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006790:	d0d7      	beq.n	8006742 <_strtod_l+0x522>
 8006792:	f1b8 0f1f 	cmp.w	r8, #31
 8006796:	dd1f      	ble.n	80067d8 <_strtod_l+0x5b8>
 8006798:	2500      	movs	r5, #0
 800679a:	462e      	mov	r6, r5
 800679c:	9507      	str	r5, [sp, #28]
 800679e:	9505      	str	r5, [sp, #20]
 80067a0:	2322      	movs	r3, #34	; 0x22
 80067a2:	f04f 0a00 	mov.w	sl, #0
 80067a6:	f04f 0b00 	mov.w	fp, #0
 80067aa:	6023      	str	r3, [r4, #0]
 80067ac:	e786      	b.n	80066bc <_strtod_l+0x49c>
 80067ae:	bf00      	nop
 80067b0:	08009cc9 	.word	0x08009cc9
 80067b4:	08009d0c 	.word	0x08009d0c
 80067b8:	08009cc1 	.word	0x08009cc1
 80067bc:	08009e4c 	.word	0x08009e4c
 80067c0:	0800a160 	.word	0x0800a160
 80067c4:	0800a040 	.word	0x0800a040
 80067c8:	0800a018 	.word	0x0800a018
 80067cc:	7ff00000 	.word	0x7ff00000
 80067d0:	7ca00000 	.word	0x7ca00000
 80067d4:	7fefffff 	.word	0x7fefffff
 80067d8:	f018 0310 	ands.w	r3, r8, #16
 80067dc:	bf18      	it	ne
 80067de:	236a      	movne	r3, #106	; 0x6a
 80067e0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006b90 <_strtod_l+0x970>
 80067e4:	9304      	str	r3, [sp, #16]
 80067e6:	4650      	mov	r0, sl
 80067e8:	4659      	mov	r1, fp
 80067ea:	2300      	movs	r3, #0
 80067ec:	f018 0f01 	tst.w	r8, #1
 80067f0:	d004      	beq.n	80067fc <_strtod_l+0x5dc>
 80067f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80067f6:	f7f9 ff07 	bl	8000608 <__aeabi_dmul>
 80067fa:	2301      	movs	r3, #1
 80067fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006800:	f109 0908 	add.w	r9, r9, #8
 8006804:	d1f2      	bne.n	80067ec <_strtod_l+0x5cc>
 8006806:	b10b      	cbz	r3, 800680c <_strtod_l+0x5ec>
 8006808:	4682      	mov	sl, r0
 800680a:	468b      	mov	fp, r1
 800680c:	9b04      	ldr	r3, [sp, #16]
 800680e:	b1c3      	cbz	r3, 8006842 <_strtod_l+0x622>
 8006810:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006814:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006818:	2b00      	cmp	r3, #0
 800681a:	4659      	mov	r1, fp
 800681c:	dd11      	ble.n	8006842 <_strtod_l+0x622>
 800681e:	2b1f      	cmp	r3, #31
 8006820:	f340 8124 	ble.w	8006a6c <_strtod_l+0x84c>
 8006824:	2b34      	cmp	r3, #52	; 0x34
 8006826:	bfde      	ittt	le
 8006828:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800682c:	f04f 33ff 	movle.w	r3, #4294967295
 8006830:	fa03 f202 	lslle.w	r2, r3, r2
 8006834:	f04f 0a00 	mov.w	sl, #0
 8006838:	bfcc      	ite	gt
 800683a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800683e:	ea02 0b01 	andle.w	fp, r2, r1
 8006842:	2200      	movs	r2, #0
 8006844:	2300      	movs	r3, #0
 8006846:	4650      	mov	r0, sl
 8006848:	4659      	mov	r1, fp
 800684a:	f7fa f945 	bl	8000ad8 <__aeabi_dcmpeq>
 800684e:	2800      	cmp	r0, #0
 8006850:	d1a2      	bne.n	8006798 <_strtod_l+0x578>
 8006852:	9b07      	ldr	r3, [sp, #28]
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	9908      	ldr	r1, [sp, #32]
 8006858:	462b      	mov	r3, r5
 800685a:	463a      	mov	r2, r7
 800685c:	4620      	mov	r0, r4
 800685e:	f001 ff29 	bl	80086b4 <__s2b>
 8006862:	9007      	str	r0, [sp, #28]
 8006864:	2800      	cmp	r0, #0
 8006866:	f43f af1f 	beq.w	80066a8 <_strtod_l+0x488>
 800686a:	9b05      	ldr	r3, [sp, #20]
 800686c:	1b9e      	subs	r6, r3, r6
 800686e:	9b06      	ldr	r3, [sp, #24]
 8006870:	2b00      	cmp	r3, #0
 8006872:	bfb4      	ite	lt
 8006874:	4633      	movlt	r3, r6
 8006876:	2300      	movge	r3, #0
 8006878:	930c      	str	r3, [sp, #48]	; 0x30
 800687a:	9b06      	ldr	r3, [sp, #24]
 800687c:	2500      	movs	r5, #0
 800687e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006882:	9312      	str	r3, [sp, #72]	; 0x48
 8006884:	462e      	mov	r6, r5
 8006886:	9b07      	ldr	r3, [sp, #28]
 8006888:	4620      	mov	r0, r4
 800688a:	6859      	ldr	r1, [r3, #4]
 800688c:	f001 fe6a 	bl	8008564 <_Balloc>
 8006890:	9005      	str	r0, [sp, #20]
 8006892:	2800      	cmp	r0, #0
 8006894:	f43f af0c 	beq.w	80066b0 <_strtod_l+0x490>
 8006898:	9b07      	ldr	r3, [sp, #28]
 800689a:	691a      	ldr	r2, [r3, #16]
 800689c:	3202      	adds	r2, #2
 800689e:	f103 010c 	add.w	r1, r3, #12
 80068a2:	0092      	lsls	r2, r2, #2
 80068a4:	300c      	adds	r0, #12
 80068a6:	f001 fe42 	bl	800852e <memcpy>
 80068aa:	ec4b ab10 	vmov	d0, sl, fp
 80068ae:	aa1a      	add	r2, sp, #104	; 0x68
 80068b0:	a919      	add	r1, sp, #100	; 0x64
 80068b2:	4620      	mov	r0, r4
 80068b4:	f002 fa44 	bl	8008d40 <__d2b>
 80068b8:	ec4b ab18 	vmov	d8, sl, fp
 80068bc:	9018      	str	r0, [sp, #96]	; 0x60
 80068be:	2800      	cmp	r0, #0
 80068c0:	f43f aef6 	beq.w	80066b0 <_strtod_l+0x490>
 80068c4:	2101      	movs	r1, #1
 80068c6:	4620      	mov	r0, r4
 80068c8:	f001 ff8e 	bl	80087e8 <__i2b>
 80068cc:	4606      	mov	r6, r0
 80068ce:	2800      	cmp	r0, #0
 80068d0:	f43f aeee 	beq.w	80066b0 <_strtod_l+0x490>
 80068d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068d6:	9904      	ldr	r1, [sp, #16]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	bfab      	itete	ge
 80068dc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80068de:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80068e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80068e2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80068e6:	bfac      	ite	ge
 80068e8:	eb03 0902 	addge.w	r9, r3, r2
 80068ec:	1ad7      	sublt	r7, r2, r3
 80068ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80068f0:	eba3 0801 	sub.w	r8, r3, r1
 80068f4:	4490      	add	r8, r2
 80068f6:	4ba1      	ldr	r3, [pc, #644]	; (8006b7c <_strtod_l+0x95c>)
 80068f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80068fc:	4598      	cmp	r8, r3
 80068fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006902:	f280 80c7 	bge.w	8006a94 <_strtod_l+0x874>
 8006906:	eba3 0308 	sub.w	r3, r3, r8
 800690a:	2b1f      	cmp	r3, #31
 800690c:	eba2 0203 	sub.w	r2, r2, r3
 8006910:	f04f 0101 	mov.w	r1, #1
 8006914:	f300 80b1 	bgt.w	8006a7a <_strtod_l+0x85a>
 8006918:	fa01 f303 	lsl.w	r3, r1, r3
 800691c:	930d      	str	r3, [sp, #52]	; 0x34
 800691e:	2300      	movs	r3, #0
 8006920:	9308      	str	r3, [sp, #32]
 8006922:	eb09 0802 	add.w	r8, r9, r2
 8006926:	9b04      	ldr	r3, [sp, #16]
 8006928:	45c1      	cmp	r9, r8
 800692a:	4417      	add	r7, r2
 800692c:	441f      	add	r7, r3
 800692e:	464b      	mov	r3, r9
 8006930:	bfa8      	it	ge
 8006932:	4643      	movge	r3, r8
 8006934:	42bb      	cmp	r3, r7
 8006936:	bfa8      	it	ge
 8006938:	463b      	movge	r3, r7
 800693a:	2b00      	cmp	r3, #0
 800693c:	bfc2      	ittt	gt
 800693e:	eba8 0803 	subgt.w	r8, r8, r3
 8006942:	1aff      	subgt	r7, r7, r3
 8006944:	eba9 0903 	subgt.w	r9, r9, r3
 8006948:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800694a:	2b00      	cmp	r3, #0
 800694c:	dd17      	ble.n	800697e <_strtod_l+0x75e>
 800694e:	4631      	mov	r1, r6
 8006950:	461a      	mov	r2, r3
 8006952:	4620      	mov	r0, r4
 8006954:	f002 f808 	bl	8008968 <__pow5mult>
 8006958:	4606      	mov	r6, r0
 800695a:	2800      	cmp	r0, #0
 800695c:	f43f aea8 	beq.w	80066b0 <_strtod_l+0x490>
 8006960:	4601      	mov	r1, r0
 8006962:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006964:	4620      	mov	r0, r4
 8006966:	f001 ff55 	bl	8008814 <__multiply>
 800696a:	900b      	str	r0, [sp, #44]	; 0x2c
 800696c:	2800      	cmp	r0, #0
 800696e:	f43f ae9f 	beq.w	80066b0 <_strtod_l+0x490>
 8006972:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006974:	4620      	mov	r0, r4
 8006976:	f001 fe35 	bl	80085e4 <_Bfree>
 800697a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800697c:	9318      	str	r3, [sp, #96]	; 0x60
 800697e:	f1b8 0f00 	cmp.w	r8, #0
 8006982:	f300 808c 	bgt.w	8006a9e <_strtod_l+0x87e>
 8006986:	9b06      	ldr	r3, [sp, #24]
 8006988:	2b00      	cmp	r3, #0
 800698a:	dd08      	ble.n	800699e <_strtod_l+0x77e>
 800698c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800698e:	9905      	ldr	r1, [sp, #20]
 8006990:	4620      	mov	r0, r4
 8006992:	f001 ffe9 	bl	8008968 <__pow5mult>
 8006996:	9005      	str	r0, [sp, #20]
 8006998:	2800      	cmp	r0, #0
 800699a:	f43f ae89 	beq.w	80066b0 <_strtod_l+0x490>
 800699e:	2f00      	cmp	r7, #0
 80069a0:	dd08      	ble.n	80069b4 <_strtod_l+0x794>
 80069a2:	9905      	ldr	r1, [sp, #20]
 80069a4:	463a      	mov	r2, r7
 80069a6:	4620      	mov	r0, r4
 80069a8:	f002 f838 	bl	8008a1c <__lshift>
 80069ac:	9005      	str	r0, [sp, #20]
 80069ae:	2800      	cmp	r0, #0
 80069b0:	f43f ae7e 	beq.w	80066b0 <_strtod_l+0x490>
 80069b4:	f1b9 0f00 	cmp.w	r9, #0
 80069b8:	dd08      	ble.n	80069cc <_strtod_l+0x7ac>
 80069ba:	4631      	mov	r1, r6
 80069bc:	464a      	mov	r2, r9
 80069be:	4620      	mov	r0, r4
 80069c0:	f002 f82c 	bl	8008a1c <__lshift>
 80069c4:	4606      	mov	r6, r0
 80069c6:	2800      	cmp	r0, #0
 80069c8:	f43f ae72 	beq.w	80066b0 <_strtod_l+0x490>
 80069cc:	9a05      	ldr	r2, [sp, #20]
 80069ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80069d0:	4620      	mov	r0, r4
 80069d2:	f002 f8af 	bl	8008b34 <__mdiff>
 80069d6:	4605      	mov	r5, r0
 80069d8:	2800      	cmp	r0, #0
 80069da:	f43f ae69 	beq.w	80066b0 <_strtod_l+0x490>
 80069de:	68c3      	ldr	r3, [r0, #12]
 80069e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80069e2:	2300      	movs	r3, #0
 80069e4:	60c3      	str	r3, [r0, #12]
 80069e6:	4631      	mov	r1, r6
 80069e8:	f002 f888 	bl	8008afc <__mcmp>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	da60      	bge.n	8006ab2 <_strtod_l+0x892>
 80069f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069f2:	ea53 030a 	orrs.w	r3, r3, sl
 80069f6:	f040 8082 	bne.w	8006afe <_strtod_l+0x8de>
 80069fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d17d      	bne.n	8006afe <_strtod_l+0x8de>
 8006a02:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006a06:	0d1b      	lsrs	r3, r3, #20
 8006a08:	051b      	lsls	r3, r3, #20
 8006a0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006a0e:	d976      	bls.n	8006afe <_strtod_l+0x8de>
 8006a10:	696b      	ldr	r3, [r5, #20]
 8006a12:	b913      	cbnz	r3, 8006a1a <_strtod_l+0x7fa>
 8006a14:	692b      	ldr	r3, [r5, #16]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	dd71      	ble.n	8006afe <_strtod_l+0x8de>
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f001 fffc 	bl	8008a1c <__lshift>
 8006a24:	4631      	mov	r1, r6
 8006a26:	4605      	mov	r5, r0
 8006a28:	f002 f868 	bl	8008afc <__mcmp>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	dd66      	ble.n	8006afe <_strtod_l+0x8de>
 8006a30:	9904      	ldr	r1, [sp, #16]
 8006a32:	4a53      	ldr	r2, [pc, #332]	; (8006b80 <_strtod_l+0x960>)
 8006a34:	465b      	mov	r3, fp
 8006a36:	2900      	cmp	r1, #0
 8006a38:	f000 8081 	beq.w	8006b3e <_strtod_l+0x91e>
 8006a3c:	ea02 010b 	and.w	r1, r2, fp
 8006a40:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006a44:	dc7b      	bgt.n	8006b3e <_strtod_l+0x91e>
 8006a46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006a4a:	f77f aea9 	ble.w	80067a0 <_strtod_l+0x580>
 8006a4e:	4b4d      	ldr	r3, [pc, #308]	; (8006b84 <_strtod_l+0x964>)
 8006a50:	4650      	mov	r0, sl
 8006a52:	4659      	mov	r1, fp
 8006a54:	2200      	movs	r2, #0
 8006a56:	f7f9 fdd7 	bl	8000608 <__aeabi_dmul>
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	4303      	orrs	r3, r0
 8006a5e:	bf08      	it	eq
 8006a60:	2322      	moveq	r3, #34	; 0x22
 8006a62:	4682      	mov	sl, r0
 8006a64:	468b      	mov	fp, r1
 8006a66:	bf08      	it	eq
 8006a68:	6023      	streq	r3, [r4, #0]
 8006a6a:	e62b      	b.n	80066c4 <_strtod_l+0x4a4>
 8006a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a70:	fa02 f303 	lsl.w	r3, r2, r3
 8006a74:	ea03 0a0a 	and.w	sl, r3, sl
 8006a78:	e6e3      	b.n	8006842 <_strtod_l+0x622>
 8006a7a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006a7e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006a82:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006a86:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006a8a:	fa01 f308 	lsl.w	r3, r1, r8
 8006a8e:	9308      	str	r3, [sp, #32]
 8006a90:	910d      	str	r1, [sp, #52]	; 0x34
 8006a92:	e746      	b.n	8006922 <_strtod_l+0x702>
 8006a94:	2300      	movs	r3, #0
 8006a96:	9308      	str	r3, [sp, #32]
 8006a98:	2301      	movs	r3, #1
 8006a9a:	930d      	str	r3, [sp, #52]	; 0x34
 8006a9c:	e741      	b.n	8006922 <_strtod_l+0x702>
 8006a9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006aa0:	4642      	mov	r2, r8
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f001 ffba 	bl	8008a1c <__lshift>
 8006aa8:	9018      	str	r0, [sp, #96]	; 0x60
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	f47f af6b 	bne.w	8006986 <_strtod_l+0x766>
 8006ab0:	e5fe      	b.n	80066b0 <_strtod_l+0x490>
 8006ab2:	465f      	mov	r7, fp
 8006ab4:	d16e      	bne.n	8006b94 <_strtod_l+0x974>
 8006ab6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ab8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006abc:	b342      	cbz	r2, 8006b10 <_strtod_l+0x8f0>
 8006abe:	4a32      	ldr	r2, [pc, #200]	; (8006b88 <_strtod_l+0x968>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d128      	bne.n	8006b16 <_strtod_l+0x8f6>
 8006ac4:	9b04      	ldr	r3, [sp, #16]
 8006ac6:	4651      	mov	r1, sl
 8006ac8:	b1eb      	cbz	r3, 8006b06 <_strtod_l+0x8e6>
 8006aca:	4b2d      	ldr	r3, [pc, #180]	; (8006b80 <_strtod_l+0x960>)
 8006acc:	403b      	ands	r3, r7
 8006ace:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad6:	d819      	bhi.n	8006b0c <_strtod_l+0x8ec>
 8006ad8:	0d1b      	lsrs	r3, r3, #20
 8006ada:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ade:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae2:	4299      	cmp	r1, r3
 8006ae4:	d117      	bne.n	8006b16 <_strtod_l+0x8f6>
 8006ae6:	4b29      	ldr	r3, [pc, #164]	; (8006b8c <_strtod_l+0x96c>)
 8006ae8:	429f      	cmp	r7, r3
 8006aea:	d102      	bne.n	8006af2 <_strtod_l+0x8d2>
 8006aec:	3101      	adds	r1, #1
 8006aee:	f43f addf 	beq.w	80066b0 <_strtod_l+0x490>
 8006af2:	4b23      	ldr	r3, [pc, #140]	; (8006b80 <_strtod_l+0x960>)
 8006af4:	403b      	ands	r3, r7
 8006af6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006afa:	f04f 0a00 	mov.w	sl, #0
 8006afe:	9b04      	ldr	r3, [sp, #16]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1a4      	bne.n	8006a4e <_strtod_l+0x82e>
 8006b04:	e5de      	b.n	80066c4 <_strtod_l+0x4a4>
 8006b06:	f04f 33ff 	mov.w	r3, #4294967295
 8006b0a:	e7ea      	b.n	8006ae2 <_strtod_l+0x8c2>
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	e7e8      	b.n	8006ae2 <_strtod_l+0x8c2>
 8006b10:	ea53 030a 	orrs.w	r3, r3, sl
 8006b14:	d08c      	beq.n	8006a30 <_strtod_l+0x810>
 8006b16:	9b08      	ldr	r3, [sp, #32]
 8006b18:	b1db      	cbz	r3, 8006b52 <_strtod_l+0x932>
 8006b1a:	423b      	tst	r3, r7
 8006b1c:	d0ef      	beq.n	8006afe <_strtod_l+0x8de>
 8006b1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b20:	9a04      	ldr	r2, [sp, #16]
 8006b22:	4650      	mov	r0, sl
 8006b24:	4659      	mov	r1, fp
 8006b26:	b1c3      	cbz	r3, 8006b5a <_strtod_l+0x93a>
 8006b28:	f7ff fb5c 	bl	80061e4 <sulp>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	ec51 0b18 	vmov	r0, r1, d8
 8006b34:	f7f9 fbb2 	bl	800029c <__adddf3>
 8006b38:	4682      	mov	sl, r0
 8006b3a:	468b      	mov	fp, r1
 8006b3c:	e7df      	b.n	8006afe <_strtod_l+0x8de>
 8006b3e:	4013      	ands	r3, r2
 8006b40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006b44:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006b48:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006b4c:	f04f 3aff 	mov.w	sl, #4294967295
 8006b50:	e7d5      	b.n	8006afe <_strtod_l+0x8de>
 8006b52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b54:	ea13 0f0a 	tst.w	r3, sl
 8006b58:	e7e0      	b.n	8006b1c <_strtod_l+0x8fc>
 8006b5a:	f7ff fb43 	bl	80061e4 <sulp>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	ec51 0b18 	vmov	r0, r1, d8
 8006b66:	f7f9 fb97 	bl	8000298 <__aeabi_dsub>
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	4682      	mov	sl, r0
 8006b70:	468b      	mov	fp, r1
 8006b72:	f7f9 ffb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b76:	2800      	cmp	r0, #0
 8006b78:	d0c1      	beq.n	8006afe <_strtod_l+0x8de>
 8006b7a:	e611      	b.n	80067a0 <_strtod_l+0x580>
 8006b7c:	fffffc02 	.word	0xfffffc02
 8006b80:	7ff00000 	.word	0x7ff00000
 8006b84:	39500000 	.word	0x39500000
 8006b88:	000fffff 	.word	0x000fffff
 8006b8c:	7fefffff 	.word	0x7fefffff
 8006b90:	08009d20 	.word	0x08009d20
 8006b94:	4631      	mov	r1, r6
 8006b96:	4628      	mov	r0, r5
 8006b98:	f002 f92e 	bl	8008df8 <__ratio>
 8006b9c:	ec59 8b10 	vmov	r8, r9, d0
 8006ba0:	ee10 0a10 	vmov	r0, s0
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006baa:	4649      	mov	r1, r9
 8006bac:	f7f9 ffa8 	bl	8000b00 <__aeabi_dcmple>
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	d07a      	beq.n	8006caa <_strtod_l+0xa8a>
 8006bb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d04a      	beq.n	8006c50 <_strtod_l+0xa30>
 8006bba:	4b95      	ldr	r3, [pc, #596]	; (8006e10 <_strtod_l+0xbf0>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006bc2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006e10 <_strtod_l+0xbf0>
 8006bc6:	f04f 0800 	mov.w	r8, #0
 8006bca:	4b92      	ldr	r3, [pc, #584]	; (8006e14 <_strtod_l+0xbf4>)
 8006bcc:	403b      	ands	r3, r7
 8006bce:	930d      	str	r3, [sp, #52]	; 0x34
 8006bd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006bd2:	4b91      	ldr	r3, [pc, #580]	; (8006e18 <_strtod_l+0xbf8>)
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	f040 80b0 	bne.w	8006d3a <_strtod_l+0xb1a>
 8006bda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006bde:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006be2:	ec4b ab10 	vmov	d0, sl, fp
 8006be6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006bea:	f002 f82d 	bl	8008c48 <__ulp>
 8006bee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006bf2:	ec53 2b10 	vmov	r2, r3, d0
 8006bf6:	f7f9 fd07 	bl	8000608 <__aeabi_dmul>
 8006bfa:	4652      	mov	r2, sl
 8006bfc:	465b      	mov	r3, fp
 8006bfe:	f7f9 fb4d 	bl	800029c <__adddf3>
 8006c02:	460b      	mov	r3, r1
 8006c04:	4983      	ldr	r1, [pc, #524]	; (8006e14 <_strtod_l+0xbf4>)
 8006c06:	4a85      	ldr	r2, [pc, #532]	; (8006e1c <_strtod_l+0xbfc>)
 8006c08:	4019      	ands	r1, r3
 8006c0a:	4291      	cmp	r1, r2
 8006c0c:	4682      	mov	sl, r0
 8006c0e:	d960      	bls.n	8006cd2 <_strtod_l+0xab2>
 8006c10:	ee18 3a90 	vmov	r3, s17
 8006c14:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d104      	bne.n	8006c26 <_strtod_l+0xa06>
 8006c1c:	ee18 3a10 	vmov	r3, s16
 8006c20:	3301      	adds	r3, #1
 8006c22:	f43f ad45 	beq.w	80066b0 <_strtod_l+0x490>
 8006c26:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006e28 <_strtod_l+0xc08>
 8006c2a:	f04f 3aff 	mov.w	sl, #4294967295
 8006c2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006c30:	4620      	mov	r0, r4
 8006c32:	f001 fcd7 	bl	80085e4 <_Bfree>
 8006c36:	9905      	ldr	r1, [sp, #20]
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f001 fcd3 	bl	80085e4 <_Bfree>
 8006c3e:	4631      	mov	r1, r6
 8006c40:	4620      	mov	r0, r4
 8006c42:	f001 fccf 	bl	80085e4 <_Bfree>
 8006c46:	4629      	mov	r1, r5
 8006c48:	4620      	mov	r0, r4
 8006c4a:	f001 fccb 	bl	80085e4 <_Bfree>
 8006c4e:	e61a      	b.n	8006886 <_strtod_l+0x666>
 8006c50:	f1ba 0f00 	cmp.w	sl, #0
 8006c54:	d11b      	bne.n	8006c8e <_strtod_l+0xa6e>
 8006c56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c5a:	b9f3      	cbnz	r3, 8006c9a <_strtod_l+0xa7a>
 8006c5c:	4b6c      	ldr	r3, [pc, #432]	; (8006e10 <_strtod_l+0xbf0>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	4640      	mov	r0, r8
 8006c62:	4649      	mov	r1, r9
 8006c64:	f7f9 ff42 	bl	8000aec <__aeabi_dcmplt>
 8006c68:	b9d0      	cbnz	r0, 8006ca0 <_strtod_l+0xa80>
 8006c6a:	4640      	mov	r0, r8
 8006c6c:	4649      	mov	r1, r9
 8006c6e:	4b6c      	ldr	r3, [pc, #432]	; (8006e20 <_strtod_l+0xc00>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	f7f9 fcc9 	bl	8000608 <__aeabi_dmul>
 8006c76:	4680      	mov	r8, r0
 8006c78:	4689      	mov	r9, r1
 8006c7a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006c7e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006c82:	9315      	str	r3, [sp, #84]	; 0x54
 8006c84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006c88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006c8c:	e79d      	b.n	8006bca <_strtod_l+0x9aa>
 8006c8e:	f1ba 0f01 	cmp.w	sl, #1
 8006c92:	d102      	bne.n	8006c9a <_strtod_l+0xa7a>
 8006c94:	2f00      	cmp	r7, #0
 8006c96:	f43f ad83 	beq.w	80067a0 <_strtod_l+0x580>
 8006c9a:	4b62      	ldr	r3, [pc, #392]	; (8006e24 <_strtod_l+0xc04>)
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	e78e      	b.n	8006bbe <_strtod_l+0x99e>
 8006ca0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006e20 <_strtod_l+0xc00>
 8006ca4:	f04f 0800 	mov.w	r8, #0
 8006ca8:	e7e7      	b.n	8006c7a <_strtod_l+0xa5a>
 8006caa:	4b5d      	ldr	r3, [pc, #372]	; (8006e20 <_strtod_l+0xc00>)
 8006cac:	4640      	mov	r0, r8
 8006cae:	4649      	mov	r1, r9
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f7f9 fca9 	bl	8000608 <__aeabi_dmul>
 8006cb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cb8:	4680      	mov	r8, r0
 8006cba:	4689      	mov	r9, r1
 8006cbc:	b933      	cbnz	r3, 8006ccc <_strtod_l+0xaac>
 8006cbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006cc2:	900e      	str	r0, [sp, #56]	; 0x38
 8006cc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006cc6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006cca:	e7dd      	b.n	8006c88 <_strtod_l+0xa68>
 8006ccc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006cd0:	e7f9      	b.n	8006cc6 <_strtod_l+0xaa6>
 8006cd2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006cd6:	9b04      	ldr	r3, [sp, #16]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1a8      	bne.n	8006c2e <_strtod_l+0xa0e>
 8006cdc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006ce0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ce2:	0d1b      	lsrs	r3, r3, #20
 8006ce4:	051b      	lsls	r3, r3, #20
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d1a1      	bne.n	8006c2e <_strtod_l+0xa0e>
 8006cea:	4640      	mov	r0, r8
 8006cec:	4649      	mov	r1, r9
 8006cee:	f7f9 ffeb 	bl	8000cc8 <__aeabi_d2lz>
 8006cf2:	f7f9 fc5b 	bl	80005ac <__aeabi_l2d>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	4640      	mov	r0, r8
 8006cfc:	4649      	mov	r1, r9
 8006cfe:	f7f9 facb 	bl	8000298 <__aeabi_dsub>
 8006d02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d08:	ea43 030a 	orr.w	r3, r3, sl
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	4680      	mov	r8, r0
 8006d10:	4689      	mov	r9, r1
 8006d12:	d055      	beq.n	8006dc0 <_strtod_l+0xba0>
 8006d14:	a336      	add	r3, pc, #216	; (adr r3, 8006df0 <_strtod_l+0xbd0>)
 8006d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1a:	f7f9 fee7 	bl	8000aec <__aeabi_dcmplt>
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	f47f acd0 	bne.w	80066c4 <_strtod_l+0x4a4>
 8006d24:	a334      	add	r3, pc, #208	; (adr r3, 8006df8 <_strtod_l+0xbd8>)
 8006d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2a:	4640      	mov	r0, r8
 8006d2c:	4649      	mov	r1, r9
 8006d2e:	f7f9 fefb 	bl	8000b28 <__aeabi_dcmpgt>
 8006d32:	2800      	cmp	r0, #0
 8006d34:	f43f af7b 	beq.w	8006c2e <_strtod_l+0xa0e>
 8006d38:	e4c4      	b.n	80066c4 <_strtod_l+0x4a4>
 8006d3a:	9b04      	ldr	r3, [sp, #16]
 8006d3c:	b333      	cbz	r3, 8006d8c <_strtod_l+0xb6c>
 8006d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d40:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006d44:	d822      	bhi.n	8006d8c <_strtod_l+0xb6c>
 8006d46:	a32e      	add	r3, pc, #184	; (adr r3, 8006e00 <_strtod_l+0xbe0>)
 8006d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4c:	4640      	mov	r0, r8
 8006d4e:	4649      	mov	r1, r9
 8006d50:	f7f9 fed6 	bl	8000b00 <__aeabi_dcmple>
 8006d54:	b1a0      	cbz	r0, 8006d80 <_strtod_l+0xb60>
 8006d56:	4649      	mov	r1, r9
 8006d58:	4640      	mov	r0, r8
 8006d5a:	f7f9 ff2d 	bl	8000bb8 <__aeabi_d2uiz>
 8006d5e:	2801      	cmp	r0, #1
 8006d60:	bf38      	it	cc
 8006d62:	2001      	movcc	r0, #1
 8006d64:	f7f9 fbd6 	bl	8000514 <__aeabi_ui2d>
 8006d68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d6a:	4680      	mov	r8, r0
 8006d6c:	4689      	mov	r9, r1
 8006d6e:	bb23      	cbnz	r3, 8006dba <_strtod_l+0xb9a>
 8006d70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d74:	9010      	str	r0, [sp, #64]	; 0x40
 8006d76:	9311      	str	r3, [sp, #68]	; 0x44
 8006d78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d84:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006d88:	1a9b      	subs	r3, r3, r2
 8006d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006d90:	eeb0 0a48 	vmov.f32	s0, s16
 8006d94:	eef0 0a68 	vmov.f32	s1, s17
 8006d98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006d9c:	f001 ff54 	bl	8008c48 <__ulp>
 8006da0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006da4:	ec53 2b10 	vmov	r2, r3, d0
 8006da8:	f7f9 fc2e 	bl	8000608 <__aeabi_dmul>
 8006dac:	ec53 2b18 	vmov	r2, r3, d8
 8006db0:	f7f9 fa74 	bl	800029c <__adddf3>
 8006db4:	4682      	mov	sl, r0
 8006db6:	468b      	mov	fp, r1
 8006db8:	e78d      	b.n	8006cd6 <_strtod_l+0xab6>
 8006dba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006dbe:	e7db      	b.n	8006d78 <_strtod_l+0xb58>
 8006dc0:	a311      	add	r3, pc, #68	; (adr r3, 8006e08 <_strtod_l+0xbe8>)
 8006dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc6:	f7f9 fe91 	bl	8000aec <__aeabi_dcmplt>
 8006dca:	e7b2      	b.n	8006d32 <_strtod_l+0xb12>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	930a      	str	r3, [sp, #40]	; 0x28
 8006dd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006dd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006dd4:	6013      	str	r3, [r2, #0]
 8006dd6:	f7ff ba6b 	b.w	80062b0 <_strtod_l+0x90>
 8006dda:	2a65      	cmp	r2, #101	; 0x65
 8006ddc:	f43f ab5f 	beq.w	800649e <_strtod_l+0x27e>
 8006de0:	2a45      	cmp	r2, #69	; 0x45
 8006de2:	f43f ab5c 	beq.w	800649e <_strtod_l+0x27e>
 8006de6:	2301      	movs	r3, #1
 8006de8:	f7ff bb94 	b.w	8006514 <_strtod_l+0x2f4>
 8006dec:	f3af 8000 	nop.w
 8006df0:	94a03595 	.word	0x94a03595
 8006df4:	3fdfffff 	.word	0x3fdfffff
 8006df8:	35afe535 	.word	0x35afe535
 8006dfc:	3fe00000 	.word	0x3fe00000
 8006e00:	ffc00000 	.word	0xffc00000
 8006e04:	41dfffff 	.word	0x41dfffff
 8006e08:	94a03595 	.word	0x94a03595
 8006e0c:	3fcfffff 	.word	0x3fcfffff
 8006e10:	3ff00000 	.word	0x3ff00000
 8006e14:	7ff00000 	.word	0x7ff00000
 8006e18:	7fe00000 	.word	0x7fe00000
 8006e1c:	7c9fffff 	.word	0x7c9fffff
 8006e20:	3fe00000 	.word	0x3fe00000
 8006e24:	bff00000 	.word	0xbff00000
 8006e28:	7fefffff 	.word	0x7fefffff

08006e2c <_strtod_r>:
 8006e2c:	4b01      	ldr	r3, [pc, #4]	; (8006e34 <_strtod_r+0x8>)
 8006e2e:	f7ff b9f7 	b.w	8006220 <_strtod_l>
 8006e32:	bf00      	nop
 8006e34:	20000114 	.word	0x20000114

08006e38 <_strtol_l.constprop.0>:
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e3e:	d001      	beq.n	8006e44 <_strtol_l.constprop.0+0xc>
 8006e40:	2b24      	cmp	r3, #36	; 0x24
 8006e42:	d906      	bls.n	8006e52 <_strtol_l.constprop.0+0x1a>
 8006e44:	f7fe f9bc 	bl	80051c0 <__errno>
 8006e48:	2316      	movs	r3, #22
 8006e4a:	6003      	str	r3, [r0, #0]
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e52:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006f38 <_strtol_l.constprop.0+0x100>
 8006e56:	460d      	mov	r5, r1
 8006e58:	462e      	mov	r6, r5
 8006e5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e5e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006e62:	f017 0708 	ands.w	r7, r7, #8
 8006e66:	d1f7      	bne.n	8006e58 <_strtol_l.constprop.0+0x20>
 8006e68:	2c2d      	cmp	r4, #45	; 0x2d
 8006e6a:	d132      	bne.n	8006ed2 <_strtol_l.constprop.0+0x9a>
 8006e6c:	782c      	ldrb	r4, [r5, #0]
 8006e6e:	2701      	movs	r7, #1
 8006e70:	1cb5      	adds	r5, r6, #2
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d05b      	beq.n	8006f2e <_strtol_l.constprop.0+0xf6>
 8006e76:	2b10      	cmp	r3, #16
 8006e78:	d109      	bne.n	8006e8e <_strtol_l.constprop.0+0x56>
 8006e7a:	2c30      	cmp	r4, #48	; 0x30
 8006e7c:	d107      	bne.n	8006e8e <_strtol_l.constprop.0+0x56>
 8006e7e:	782c      	ldrb	r4, [r5, #0]
 8006e80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006e84:	2c58      	cmp	r4, #88	; 0x58
 8006e86:	d14d      	bne.n	8006f24 <_strtol_l.constprop.0+0xec>
 8006e88:	786c      	ldrb	r4, [r5, #1]
 8006e8a:	2310      	movs	r3, #16
 8006e8c:	3502      	adds	r5, #2
 8006e8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006e92:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e96:	f04f 0c00 	mov.w	ip, #0
 8006e9a:	fbb8 f9f3 	udiv	r9, r8, r3
 8006e9e:	4666      	mov	r6, ip
 8006ea0:	fb03 8a19 	mls	sl, r3, r9, r8
 8006ea4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006ea8:	f1be 0f09 	cmp.w	lr, #9
 8006eac:	d816      	bhi.n	8006edc <_strtol_l.constprop.0+0xa4>
 8006eae:	4674      	mov	r4, lr
 8006eb0:	42a3      	cmp	r3, r4
 8006eb2:	dd24      	ble.n	8006efe <_strtol_l.constprop.0+0xc6>
 8006eb4:	f1bc 0f00 	cmp.w	ip, #0
 8006eb8:	db1e      	blt.n	8006ef8 <_strtol_l.constprop.0+0xc0>
 8006eba:	45b1      	cmp	r9, r6
 8006ebc:	d31c      	bcc.n	8006ef8 <_strtol_l.constprop.0+0xc0>
 8006ebe:	d101      	bne.n	8006ec4 <_strtol_l.constprop.0+0x8c>
 8006ec0:	45a2      	cmp	sl, r4
 8006ec2:	db19      	blt.n	8006ef8 <_strtol_l.constprop.0+0xc0>
 8006ec4:	fb06 4603 	mla	r6, r6, r3, r4
 8006ec8:	f04f 0c01 	mov.w	ip, #1
 8006ecc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ed0:	e7e8      	b.n	8006ea4 <_strtol_l.constprop.0+0x6c>
 8006ed2:	2c2b      	cmp	r4, #43	; 0x2b
 8006ed4:	bf04      	itt	eq
 8006ed6:	782c      	ldrbeq	r4, [r5, #0]
 8006ed8:	1cb5      	addeq	r5, r6, #2
 8006eda:	e7ca      	b.n	8006e72 <_strtol_l.constprop.0+0x3a>
 8006edc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006ee0:	f1be 0f19 	cmp.w	lr, #25
 8006ee4:	d801      	bhi.n	8006eea <_strtol_l.constprop.0+0xb2>
 8006ee6:	3c37      	subs	r4, #55	; 0x37
 8006ee8:	e7e2      	b.n	8006eb0 <_strtol_l.constprop.0+0x78>
 8006eea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006eee:	f1be 0f19 	cmp.w	lr, #25
 8006ef2:	d804      	bhi.n	8006efe <_strtol_l.constprop.0+0xc6>
 8006ef4:	3c57      	subs	r4, #87	; 0x57
 8006ef6:	e7db      	b.n	8006eb0 <_strtol_l.constprop.0+0x78>
 8006ef8:	f04f 3cff 	mov.w	ip, #4294967295
 8006efc:	e7e6      	b.n	8006ecc <_strtol_l.constprop.0+0x94>
 8006efe:	f1bc 0f00 	cmp.w	ip, #0
 8006f02:	da05      	bge.n	8006f10 <_strtol_l.constprop.0+0xd8>
 8006f04:	2322      	movs	r3, #34	; 0x22
 8006f06:	6003      	str	r3, [r0, #0]
 8006f08:	4646      	mov	r6, r8
 8006f0a:	b942      	cbnz	r2, 8006f1e <_strtol_l.constprop.0+0xe6>
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	e79e      	b.n	8006e4e <_strtol_l.constprop.0+0x16>
 8006f10:	b107      	cbz	r7, 8006f14 <_strtol_l.constprop.0+0xdc>
 8006f12:	4276      	negs	r6, r6
 8006f14:	2a00      	cmp	r2, #0
 8006f16:	d0f9      	beq.n	8006f0c <_strtol_l.constprop.0+0xd4>
 8006f18:	f1bc 0f00 	cmp.w	ip, #0
 8006f1c:	d000      	beq.n	8006f20 <_strtol_l.constprop.0+0xe8>
 8006f1e:	1e69      	subs	r1, r5, #1
 8006f20:	6011      	str	r1, [r2, #0]
 8006f22:	e7f3      	b.n	8006f0c <_strtol_l.constprop.0+0xd4>
 8006f24:	2430      	movs	r4, #48	; 0x30
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1b1      	bne.n	8006e8e <_strtol_l.constprop.0+0x56>
 8006f2a:	2308      	movs	r3, #8
 8006f2c:	e7af      	b.n	8006e8e <_strtol_l.constprop.0+0x56>
 8006f2e:	2c30      	cmp	r4, #48	; 0x30
 8006f30:	d0a5      	beq.n	8006e7e <_strtol_l.constprop.0+0x46>
 8006f32:	230a      	movs	r3, #10
 8006f34:	e7ab      	b.n	8006e8e <_strtol_l.constprop.0+0x56>
 8006f36:	bf00      	nop
 8006f38:	08009d49 	.word	0x08009d49

08006f3c <_strtol_r>:
 8006f3c:	f7ff bf7c 	b.w	8006e38 <_strtol_l.constprop.0>

08006f40 <quorem>:
 8006f40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f44:	6903      	ldr	r3, [r0, #16]
 8006f46:	690c      	ldr	r4, [r1, #16]
 8006f48:	42a3      	cmp	r3, r4
 8006f4a:	4607      	mov	r7, r0
 8006f4c:	f2c0 8081 	blt.w	8007052 <quorem+0x112>
 8006f50:	3c01      	subs	r4, #1
 8006f52:	f101 0814 	add.w	r8, r1, #20
 8006f56:	f100 0514 	add.w	r5, r0, #20
 8006f5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f5e:	9301      	str	r3, [sp, #4]
 8006f60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f74:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f78:	d331      	bcc.n	8006fde <quorem+0x9e>
 8006f7a:	f04f 0e00 	mov.w	lr, #0
 8006f7e:	4640      	mov	r0, r8
 8006f80:	46ac      	mov	ip, r5
 8006f82:	46f2      	mov	sl, lr
 8006f84:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f88:	b293      	uxth	r3, r2
 8006f8a:	fb06 e303 	mla	r3, r6, r3, lr
 8006f8e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	ebaa 0303 	sub.w	r3, sl, r3
 8006f98:	f8dc a000 	ldr.w	sl, [ip]
 8006f9c:	0c12      	lsrs	r2, r2, #16
 8006f9e:	fa13 f38a 	uxtah	r3, r3, sl
 8006fa2:	fb06 e202 	mla	r2, r6, r2, lr
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	9b00      	ldr	r3, [sp, #0]
 8006faa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006fae:	b292      	uxth	r2, r2
 8006fb0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006fb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fb8:	f8bd 3000 	ldrh.w	r3, [sp]
 8006fbc:	4581      	cmp	r9, r0
 8006fbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fc2:	f84c 3b04 	str.w	r3, [ip], #4
 8006fc6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006fca:	d2db      	bcs.n	8006f84 <quorem+0x44>
 8006fcc:	f855 300b 	ldr.w	r3, [r5, fp]
 8006fd0:	b92b      	cbnz	r3, 8006fde <quorem+0x9e>
 8006fd2:	9b01      	ldr	r3, [sp, #4]
 8006fd4:	3b04      	subs	r3, #4
 8006fd6:	429d      	cmp	r5, r3
 8006fd8:	461a      	mov	r2, r3
 8006fda:	d32e      	bcc.n	800703a <quorem+0xfa>
 8006fdc:	613c      	str	r4, [r7, #16]
 8006fde:	4638      	mov	r0, r7
 8006fe0:	f001 fd8c 	bl	8008afc <__mcmp>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	db24      	blt.n	8007032 <quorem+0xf2>
 8006fe8:	3601      	adds	r6, #1
 8006fea:	4628      	mov	r0, r5
 8006fec:	f04f 0c00 	mov.w	ip, #0
 8006ff0:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ff4:	f8d0 e000 	ldr.w	lr, [r0]
 8006ff8:	b293      	uxth	r3, r2
 8006ffa:	ebac 0303 	sub.w	r3, ip, r3
 8006ffe:	0c12      	lsrs	r2, r2, #16
 8007000:	fa13 f38e 	uxtah	r3, r3, lr
 8007004:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007008:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800700c:	b29b      	uxth	r3, r3
 800700e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007012:	45c1      	cmp	r9, r8
 8007014:	f840 3b04 	str.w	r3, [r0], #4
 8007018:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800701c:	d2e8      	bcs.n	8006ff0 <quorem+0xb0>
 800701e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007022:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007026:	b922      	cbnz	r2, 8007032 <quorem+0xf2>
 8007028:	3b04      	subs	r3, #4
 800702a:	429d      	cmp	r5, r3
 800702c:	461a      	mov	r2, r3
 800702e:	d30a      	bcc.n	8007046 <quorem+0x106>
 8007030:	613c      	str	r4, [r7, #16]
 8007032:	4630      	mov	r0, r6
 8007034:	b003      	add	sp, #12
 8007036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800703a:	6812      	ldr	r2, [r2, #0]
 800703c:	3b04      	subs	r3, #4
 800703e:	2a00      	cmp	r2, #0
 8007040:	d1cc      	bne.n	8006fdc <quorem+0x9c>
 8007042:	3c01      	subs	r4, #1
 8007044:	e7c7      	b.n	8006fd6 <quorem+0x96>
 8007046:	6812      	ldr	r2, [r2, #0]
 8007048:	3b04      	subs	r3, #4
 800704a:	2a00      	cmp	r2, #0
 800704c:	d1f0      	bne.n	8007030 <quorem+0xf0>
 800704e:	3c01      	subs	r4, #1
 8007050:	e7eb      	b.n	800702a <quorem+0xea>
 8007052:	2000      	movs	r0, #0
 8007054:	e7ee      	b.n	8007034 <quorem+0xf4>
	...

08007058 <_dtoa_r>:
 8007058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800705c:	ed2d 8b04 	vpush	{d8-d9}
 8007060:	ec57 6b10 	vmov	r6, r7, d0
 8007064:	b093      	sub	sp, #76	; 0x4c
 8007066:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007068:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800706c:	9106      	str	r1, [sp, #24]
 800706e:	ee10 aa10 	vmov	sl, s0
 8007072:	4604      	mov	r4, r0
 8007074:	9209      	str	r2, [sp, #36]	; 0x24
 8007076:	930c      	str	r3, [sp, #48]	; 0x30
 8007078:	46bb      	mov	fp, r7
 800707a:	b975      	cbnz	r5, 800709a <_dtoa_r+0x42>
 800707c:	2010      	movs	r0, #16
 800707e:	f7fe f8c9 	bl	8005214 <malloc>
 8007082:	4602      	mov	r2, r0
 8007084:	6260      	str	r0, [r4, #36]	; 0x24
 8007086:	b920      	cbnz	r0, 8007092 <_dtoa_r+0x3a>
 8007088:	4ba7      	ldr	r3, [pc, #668]	; (8007328 <_dtoa_r+0x2d0>)
 800708a:	21ea      	movs	r1, #234	; 0xea
 800708c:	48a7      	ldr	r0, [pc, #668]	; (800732c <_dtoa_r+0x2d4>)
 800708e:	f002 fb1f 	bl	80096d0 <__assert_func>
 8007092:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007096:	6005      	str	r5, [r0, #0]
 8007098:	60c5      	str	r5, [r0, #12]
 800709a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800709c:	6819      	ldr	r1, [r3, #0]
 800709e:	b151      	cbz	r1, 80070b6 <_dtoa_r+0x5e>
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	604a      	str	r2, [r1, #4]
 80070a4:	2301      	movs	r3, #1
 80070a6:	4093      	lsls	r3, r2
 80070a8:	608b      	str	r3, [r1, #8]
 80070aa:	4620      	mov	r0, r4
 80070ac:	f001 fa9a 	bl	80085e4 <_Bfree>
 80070b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070b2:	2200      	movs	r2, #0
 80070b4:	601a      	str	r2, [r3, #0]
 80070b6:	1e3b      	subs	r3, r7, #0
 80070b8:	bfaa      	itet	ge
 80070ba:	2300      	movge	r3, #0
 80070bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80070c0:	f8c8 3000 	strge.w	r3, [r8]
 80070c4:	4b9a      	ldr	r3, [pc, #616]	; (8007330 <_dtoa_r+0x2d8>)
 80070c6:	bfbc      	itt	lt
 80070c8:	2201      	movlt	r2, #1
 80070ca:	f8c8 2000 	strlt.w	r2, [r8]
 80070ce:	ea33 030b 	bics.w	r3, r3, fp
 80070d2:	d11b      	bne.n	800710c <_dtoa_r+0xb4>
 80070d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80070da:	6013      	str	r3, [r2, #0]
 80070dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070e0:	4333      	orrs	r3, r6
 80070e2:	f000 8592 	beq.w	8007c0a <_dtoa_r+0xbb2>
 80070e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070e8:	b963      	cbnz	r3, 8007104 <_dtoa_r+0xac>
 80070ea:	4b92      	ldr	r3, [pc, #584]	; (8007334 <_dtoa_r+0x2dc>)
 80070ec:	e022      	b.n	8007134 <_dtoa_r+0xdc>
 80070ee:	4b92      	ldr	r3, [pc, #584]	; (8007338 <_dtoa_r+0x2e0>)
 80070f0:	9301      	str	r3, [sp, #4]
 80070f2:	3308      	adds	r3, #8
 80070f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80070f6:	6013      	str	r3, [r2, #0]
 80070f8:	9801      	ldr	r0, [sp, #4]
 80070fa:	b013      	add	sp, #76	; 0x4c
 80070fc:	ecbd 8b04 	vpop	{d8-d9}
 8007100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007104:	4b8b      	ldr	r3, [pc, #556]	; (8007334 <_dtoa_r+0x2dc>)
 8007106:	9301      	str	r3, [sp, #4]
 8007108:	3303      	adds	r3, #3
 800710a:	e7f3      	b.n	80070f4 <_dtoa_r+0x9c>
 800710c:	2200      	movs	r2, #0
 800710e:	2300      	movs	r3, #0
 8007110:	4650      	mov	r0, sl
 8007112:	4659      	mov	r1, fp
 8007114:	f7f9 fce0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007118:	ec4b ab19 	vmov	d9, sl, fp
 800711c:	4680      	mov	r8, r0
 800711e:	b158      	cbz	r0, 8007138 <_dtoa_r+0xe0>
 8007120:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007122:	2301      	movs	r3, #1
 8007124:	6013      	str	r3, [r2, #0]
 8007126:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007128:	2b00      	cmp	r3, #0
 800712a:	f000 856b 	beq.w	8007c04 <_dtoa_r+0xbac>
 800712e:	4883      	ldr	r0, [pc, #524]	; (800733c <_dtoa_r+0x2e4>)
 8007130:	6018      	str	r0, [r3, #0]
 8007132:	1e43      	subs	r3, r0, #1
 8007134:	9301      	str	r3, [sp, #4]
 8007136:	e7df      	b.n	80070f8 <_dtoa_r+0xa0>
 8007138:	ec4b ab10 	vmov	d0, sl, fp
 800713c:	aa10      	add	r2, sp, #64	; 0x40
 800713e:	a911      	add	r1, sp, #68	; 0x44
 8007140:	4620      	mov	r0, r4
 8007142:	f001 fdfd 	bl	8008d40 <__d2b>
 8007146:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800714a:	ee08 0a10 	vmov	s16, r0
 800714e:	2d00      	cmp	r5, #0
 8007150:	f000 8084 	beq.w	800725c <_dtoa_r+0x204>
 8007154:	ee19 3a90 	vmov	r3, s19
 8007158:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800715c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007160:	4656      	mov	r6, sl
 8007162:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007166:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800716a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800716e:	4b74      	ldr	r3, [pc, #464]	; (8007340 <_dtoa_r+0x2e8>)
 8007170:	2200      	movs	r2, #0
 8007172:	4630      	mov	r0, r6
 8007174:	4639      	mov	r1, r7
 8007176:	f7f9 f88f 	bl	8000298 <__aeabi_dsub>
 800717a:	a365      	add	r3, pc, #404	; (adr r3, 8007310 <_dtoa_r+0x2b8>)
 800717c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007180:	f7f9 fa42 	bl	8000608 <__aeabi_dmul>
 8007184:	a364      	add	r3, pc, #400	; (adr r3, 8007318 <_dtoa_r+0x2c0>)
 8007186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718a:	f7f9 f887 	bl	800029c <__adddf3>
 800718e:	4606      	mov	r6, r0
 8007190:	4628      	mov	r0, r5
 8007192:	460f      	mov	r7, r1
 8007194:	f7f9 f9ce 	bl	8000534 <__aeabi_i2d>
 8007198:	a361      	add	r3, pc, #388	; (adr r3, 8007320 <_dtoa_r+0x2c8>)
 800719a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719e:	f7f9 fa33 	bl	8000608 <__aeabi_dmul>
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	4630      	mov	r0, r6
 80071a8:	4639      	mov	r1, r7
 80071aa:	f7f9 f877 	bl	800029c <__adddf3>
 80071ae:	4606      	mov	r6, r0
 80071b0:	460f      	mov	r7, r1
 80071b2:	f7f9 fcd9 	bl	8000b68 <__aeabi_d2iz>
 80071b6:	2200      	movs	r2, #0
 80071b8:	9000      	str	r0, [sp, #0]
 80071ba:	2300      	movs	r3, #0
 80071bc:	4630      	mov	r0, r6
 80071be:	4639      	mov	r1, r7
 80071c0:	f7f9 fc94 	bl	8000aec <__aeabi_dcmplt>
 80071c4:	b150      	cbz	r0, 80071dc <_dtoa_r+0x184>
 80071c6:	9800      	ldr	r0, [sp, #0]
 80071c8:	f7f9 f9b4 	bl	8000534 <__aeabi_i2d>
 80071cc:	4632      	mov	r2, r6
 80071ce:	463b      	mov	r3, r7
 80071d0:	f7f9 fc82 	bl	8000ad8 <__aeabi_dcmpeq>
 80071d4:	b910      	cbnz	r0, 80071dc <_dtoa_r+0x184>
 80071d6:	9b00      	ldr	r3, [sp, #0]
 80071d8:	3b01      	subs	r3, #1
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	9b00      	ldr	r3, [sp, #0]
 80071de:	2b16      	cmp	r3, #22
 80071e0:	d85a      	bhi.n	8007298 <_dtoa_r+0x240>
 80071e2:	9a00      	ldr	r2, [sp, #0]
 80071e4:	4b57      	ldr	r3, [pc, #348]	; (8007344 <_dtoa_r+0x2ec>)
 80071e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ee:	ec51 0b19 	vmov	r0, r1, d9
 80071f2:	f7f9 fc7b 	bl	8000aec <__aeabi_dcmplt>
 80071f6:	2800      	cmp	r0, #0
 80071f8:	d050      	beq.n	800729c <_dtoa_r+0x244>
 80071fa:	9b00      	ldr	r3, [sp, #0]
 80071fc:	3b01      	subs	r3, #1
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	2300      	movs	r3, #0
 8007202:	930b      	str	r3, [sp, #44]	; 0x2c
 8007204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007206:	1b5d      	subs	r5, r3, r5
 8007208:	1e6b      	subs	r3, r5, #1
 800720a:	9305      	str	r3, [sp, #20]
 800720c:	bf45      	ittet	mi
 800720e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007212:	9304      	strmi	r3, [sp, #16]
 8007214:	2300      	movpl	r3, #0
 8007216:	2300      	movmi	r3, #0
 8007218:	bf4c      	ite	mi
 800721a:	9305      	strmi	r3, [sp, #20]
 800721c:	9304      	strpl	r3, [sp, #16]
 800721e:	9b00      	ldr	r3, [sp, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	db3d      	blt.n	80072a0 <_dtoa_r+0x248>
 8007224:	9b05      	ldr	r3, [sp, #20]
 8007226:	9a00      	ldr	r2, [sp, #0]
 8007228:	920a      	str	r2, [sp, #40]	; 0x28
 800722a:	4413      	add	r3, r2
 800722c:	9305      	str	r3, [sp, #20]
 800722e:	2300      	movs	r3, #0
 8007230:	9307      	str	r3, [sp, #28]
 8007232:	9b06      	ldr	r3, [sp, #24]
 8007234:	2b09      	cmp	r3, #9
 8007236:	f200 8089 	bhi.w	800734c <_dtoa_r+0x2f4>
 800723a:	2b05      	cmp	r3, #5
 800723c:	bfc4      	itt	gt
 800723e:	3b04      	subgt	r3, #4
 8007240:	9306      	strgt	r3, [sp, #24]
 8007242:	9b06      	ldr	r3, [sp, #24]
 8007244:	f1a3 0302 	sub.w	r3, r3, #2
 8007248:	bfcc      	ite	gt
 800724a:	2500      	movgt	r5, #0
 800724c:	2501      	movle	r5, #1
 800724e:	2b03      	cmp	r3, #3
 8007250:	f200 8087 	bhi.w	8007362 <_dtoa_r+0x30a>
 8007254:	e8df f003 	tbb	[pc, r3]
 8007258:	59383a2d 	.word	0x59383a2d
 800725c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007260:	441d      	add	r5, r3
 8007262:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007266:	2b20      	cmp	r3, #32
 8007268:	bfc1      	itttt	gt
 800726a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800726e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007272:	fa0b f303 	lslgt.w	r3, fp, r3
 8007276:	fa26 f000 	lsrgt.w	r0, r6, r0
 800727a:	bfda      	itte	le
 800727c:	f1c3 0320 	rsble	r3, r3, #32
 8007280:	fa06 f003 	lslle.w	r0, r6, r3
 8007284:	4318      	orrgt	r0, r3
 8007286:	f7f9 f945 	bl	8000514 <__aeabi_ui2d>
 800728a:	2301      	movs	r3, #1
 800728c:	4606      	mov	r6, r0
 800728e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007292:	3d01      	subs	r5, #1
 8007294:	930e      	str	r3, [sp, #56]	; 0x38
 8007296:	e76a      	b.n	800716e <_dtoa_r+0x116>
 8007298:	2301      	movs	r3, #1
 800729a:	e7b2      	b.n	8007202 <_dtoa_r+0x1aa>
 800729c:	900b      	str	r0, [sp, #44]	; 0x2c
 800729e:	e7b1      	b.n	8007204 <_dtoa_r+0x1ac>
 80072a0:	9b04      	ldr	r3, [sp, #16]
 80072a2:	9a00      	ldr	r2, [sp, #0]
 80072a4:	1a9b      	subs	r3, r3, r2
 80072a6:	9304      	str	r3, [sp, #16]
 80072a8:	4253      	negs	r3, r2
 80072aa:	9307      	str	r3, [sp, #28]
 80072ac:	2300      	movs	r3, #0
 80072ae:	930a      	str	r3, [sp, #40]	; 0x28
 80072b0:	e7bf      	b.n	8007232 <_dtoa_r+0x1da>
 80072b2:	2300      	movs	r3, #0
 80072b4:	9308      	str	r3, [sp, #32]
 80072b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	dc55      	bgt.n	8007368 <_dtoa_r+0x310>
 80072bc:	2301      	movs	r3, #1
 80072be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80072c2:	461a      	mov	r2, r3
 80072c4:	9209      	str	r2, [sp, #36]	; 0x24
 80072c6:	e00c      	b.n	80072e2 <_dtoa_r+0x28a>
 80072c8:	2301      	movs	r3, #1
 80072ca:	e7f3      	b.n	80072b4 <_dtoa_r+0x25c>
 80072cc:	2300      	movs	r3, #0
 80072ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072d0:	9308      	str	r3, [sp, #32]
 80072d2:	9b00      	ldr	r3, [sp, #0]
 80072d4:	4413      	add	r3, r2
 80072d6:	9302      	str	r3, [sp, #8]
 80072d8:	3301      	adds	r3, #1
 80072da:	2b01      	cmp	r3, #1
 80072dc:	9303      	str	r3, [sp, #12]
 80072de:	bfb8      	it	lt
 80072e0:	2301      	movlt	r3, #1
 80072e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80072e4:	2200      	movs	r2, #0
 80072e6:	6042      	str	r2, [r0, #4]
 80072e8:	2204      	movs	r2, #4
 80072ea:	f102 0614 	add.w	r6, r2, #20
 80072ee:	429e      	cmp	r6, r3
 80072f0:	6841      	ldr	r1, [r0, #4]
 80072f2:	d93d      	bls.n	8007370 <_dtoa_r+0x318>
 80072f4:	4620      	mov	r0, r4
 80072f6:	f001 f935 	bl	8008564 <_Balloc>
 80072fa:	9001      	str	r0, [sp, #4]
 80072fc:	2800      	cmp	r0, #0
 80072fe:	d13b      	bne.n	8007378 <_dtoa_r+0x320>
 8007300:	4b11      	ldr	r3, [pc, #68]	; (8007348 <_dtoa_r+0x2f0>)
 8007302:	4602      	mov	r2, r0
 8007304:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007308:	e6c0      	b.n	800708c <_dtoa_r+0x34>
 800730a:	2301      	movs	r3, #1
 800730c:	e7df      	b.n	80072ce <_dtoa_r+0x276>
 800730e:	bf00      	nop
 8007310:	636f4361 	.word	0x636f4361
 8007314:	3fd287a7 	.word	0x3fd287a7
 8007318:	8b60c8b3 	.word	0x8b60c8b3
 800731c:	3fc68a28 	.word	0x3fc68a28
 8007320:	509f79fb 	.word	0x509f79fb
 8007324:	3fd34413 	.word	0x3fd34413
 8007328:	08009e56 	.word	0x08009e56
 800732c:	08009e6d 	.word	0x08009e6d
 8007330:	7ff00000 	.word	0x7ff00000
 8007334:	08009e52 	.word	0x08009e52
 8007338:	08009e49 	.word	0x08009e49
 800733c:	08009ccd 	.word	0x08009ccd
 8007340:	3ff80000 	.word	0x3ff80000
 8007344:	0800a040 	.word	0x0800a040
 8007348:	08009ec8 	.word	0x08009ec8
 800734c:	2501      	movs	r5, #1
 800734e:	2300      	movs	r3, #0
 8007350:	9306      	str	r3, [sp, #24]
 8007352:	9508      	str	r5, [sp, #32]
 8007354:	f04f 33ff 	mov.w	r3, #4294967295
 8007358:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800735c:	2200      	movs	r2, #0
 800735e:	2312      	movs	r3, #18
 8007360:	e7b0      	b.n	80072c4 <_dtoa_r+0x26c>
 8007362:	2301      	movs	r3, #1
 8007364:	9308      	str	r3, [sp, #32]
 8007366:	e7f5      	b.n	8007354 <_dtoa_r+0x2fc>
 8007368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800736a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800736e:	e7b8      	b.n	80072e2 <_dtoa_r+0x28a>
 8007370:	3101      	adds	r1, #1
 8007372:	6041      	str	r1, [r0, #4]
 8007374:	0052      	lsls	r2, r2, #1
 8007376:	e7b8      	b.n	80072ea <_dtoa_r+0x292>
 8007378:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800737a:	9a01      	ldr	r2, [sp, #4]
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	9b03      	ldr	r3, [sp, #12]
 8007380:	2b0e      	cmp	r3, #14
 8007382:	f200 809d 	bhi.w	80074c0 <_dtoa_r+0x468>
 8007386:	2d00      	cmp	r5, #0
 8007388:	f000 809a 	beq.w	80074c0 <_dtoa_r+0x468>
 800738c:	9b00      	ldr	r3, [sp, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	dd32      	ble.n	80073f8 <_dtoa_r+0x3a0>
 8007392:	4ab7      	ldr	r2, [pc, #732]	; (8007670 <_dtoa_r+0x618>)
 8007394:	f003 030f 	and.w	r3, r3, #15
 8007398:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800739c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80073a0:	9b00      	ldr	r3, [sp, #0]
 80073a2:	05d8      	lsls	r0, r3, #23
 80073a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80073a8:	d516      	bpl.n	80073d8 <_dtoa_r+0x380>
 80073aa:	4bb2      	ldr	r3, [pc, #712]	; (8007674 <_dtoa_r+0x61c>)
 80073ac:	ec51 0b19 	vmov	r0, r1, d9
 80073b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073b4:	f7f9 fa52 	bl	800085c <__aeabi_ddiv>
 80073b8:	f007 070f 	and.w	r7, r7, #15
 80073bc:	4682      	mov	sl, r0
 80073be:	468b      	mov	fp, r1
 80073c0:	2503      	movs	r5, #3
 80073c2:	4eac      	ldr	r6, [pc, #688]	; (8007674 <_dtoa_r+0x61c>)
 80073c4:	b957      	cbnz	r7, 80073dc <_dtoa_r+0x384>
 80073c6:	4642      	mov	r2, r8
 80073c8:	464b      	mov	r3, r9
 80073ca:	4650      	mov	r0, sl
 80073cc:	4659      	mov	r1, fp
 80073ce:	f7f9 fa45 	bl	800085c <__aeabi_ddiv>
 80073d2:	4682      	mov	sl, r0
 80073d4:	468b      	mov	fp, r1
 80073d6:	e028      	b.n	800742a <_dtoa_r+0x3d2>
 80073d8:	2502      	movs	r5, #2
 80073da:	e7f2      	b.n	80073c2 <_dtoa_r+0x36a>
 80073dc:	07f9      	lsls	r1, r7, #31
 80073de:	d508      	bpl.n	80073f2 <_dtoa_r+0x39a>
 80073e0:	4640      	mov	r0, r8
 80073e2:	4649      	mov	r1, r9
 80073e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80073e8:	f7f9 f90e 	bl	8000608 <__aeabi_dmul>
 80073ec:	3501      	adds	r5, #1
 80073ee:	4680      	mov	r8, r0
 80073f0:	4689      	mov	r9, r1
 80073f2:	107f      	asrs	r7, r7, #1
 80073f4:	3608      	adds	r6, #8
 80073f6:	e7e5      	b.n	80073c4 <_dtoa_r+0x36c>
 80073f8:	f000 809b 	beq.w	8007532 <_dtoa_r+0x4da>
 80073fc:	9b00      	ldr	r3, [sp, #0]
 80073fe:	4f9d      	ldr	r7, [pc, #628]	; (8007674 <_dtoa_r+0x61c>)
 8007400:	425e      	negs	r6, r3
 8007402:	4b9b      	ldr	r3, [pc, #620]	; (8007670 <_dtoa_r+0x618>)
 8007404:	f006 020f 	and.w	r2, r6, #15
 8007408:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007410:	ec51 0b19 	vmov	r0, r1, d9
 8007414:	f7f9 f8f8 	bl	8000608 <__aeabi_dmul>
 8007418:	1136      	asrs	r6, r6, #4
 800741a:	4682      	mov	sl, r0
 800741c:	468b      	mov	fp, r1
 800741e:	2300      	movs	r3, #0
 8007420:	2502      	movs	r5, #2
 8007422:	2e00      	cmp	r6, #0
 8007424:	d17a      	bne.n	800751c <_dtoa_r+0x4c4>
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1d3      	bne.n	80073d2 <_dtoa_r+0x37a>
 800742a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 8082 	beq.w	8007536 <_dtoa_r+0x4de>
 8007432:	4b91      	ldr	r3, [pc, #580]	; (8007678 <_dtoa_r+0x620>)
 8007434:	2200      	movs	r2, #0
 8007436:	4650      	mov	r0, sl
 8007438:	4659      	mov	r1, fp
 800743a:	f7f9 fb57 	bl	8000aec <__aeabi_dcmplt>
 800743e:	2800      	cmp	r0, #0
 8007440:	d079      	beq.n	8007536 <_dtoa_r+0x4de>
 8007442:	9b03      	ldr	r3, [sp, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d076      	beq.n	8007536 <_dtoa_r+0x4de>
 8007448:	9b02      	ldr	r3, [sp, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	dd36      	ble.n	80074bc <_dtoa_r+0x464>
 800744e:	9b00      	ldr	r3, [sp, #0]
 8007450:	4650      	mov	r0, sl
 8007452:	4659      	mov	r1, fp
 8007454:	1e5f      	subs	r7, r3, #1
 8007456:	2200      	movs	r2, #0
 8007458:	4b88      	ldr	r3, [pc, #544]	; (800767c <_dtoa_r+0x624>)
 800745a:	f7f9 f8d5 	bl	8000608 <__aeabi_dmul>
 800745e:	9e02      	ldr	r6, [sp, #8]
 8007460:	4682      	mov	sl, r0
 8007462:	468b      	mov	fp, r1
 8007464:	3501      	adds	r5, #1
 8007466:	4628      	mov	r0, r5
 8007468:	f7f9 f864 	bl	8000534 <__aeabi_i2d>
 800746c:	4652      	mov	r2, sl
 800746e:	465b      	mov	r3, fp
 8007470:	f7f9 f8ca 	bl	8000608 <__aeabi_dmul>
 8007474:	4b82      	ldr	r3, [pc, #520]	; (8007680 <_dtoa_r+0x628>)
 8007476:	2200      	movs	r2, #0
 8007478:	f7f8 ff10 	bl	800029c <__adddf3>
 800747c:	46d0      	mov	r8, sl
 800747e:	46d9      	mov	r9, fp
 8007480:	4682      	mov	sl, r0
 8007482:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007486:	2e00      	cmp	r6, #0
 8007488:	d158      	bne.n	800753c <_dtoa_r+0x4e4>
 800748a:	4b7e      	ldr	r3, [pc, #504]	; (8007684 <_dtoa_r+0x62c>)
 800748c:	2200      	movs	r2, #0
 800748e:	4640      	mov	r0, r8
 8007490:	4649      	mov	r1, r9
 8007492:	f7f8 ff01 	bl	8000298 <__aeabi_dsub>
 8007496:	4652      	mov	r2, sl
 8007498:	465b      	mov	r3, fp
 800749a:	4680      	mov	r8, r0
 800749c:	4689      	mov	r9, r1
 800749e:	f7f9 fb43 	bl	8000b28 <__aeabi_dcmpgt>
 80074a2:	2800      	cmp	r0, #0
 80074a4:	f040 8295 	bne.w	80079d2 <_dtoa_r+0x97a>
 80074a8:	4652      	mov	r2, sl
 80074aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80074ae:	4640      	mov	r0, r8
 80074b0:	4649      	mov	r1, r9
 80074b2:	f7f9 fb1b 	bl	8000aec <__aeabi_dcmplt>
 80074b6:	2800      	cmp	r0, #0
 80074b8:	f040 8289 	bne.w	80079ce <_dtoa_r+0x976>
 80074bc:	ec5b ab19 	vmov	sl, fp, d9
 80074c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f2c0 8148 	blt.w	8007758 <_dtoa_r+0x700>
 80074c8:	9a00      	ldr	r2, [sp, #0]
 80074ca:	2a0e      	cmp	r2, #14
 80074cc:	f300 8144 	bgt.w	8007758 <_dtoa_r+0x700>
 80074d0:	4b67      	ldr	r3, [pc, #412]	; (8007670 <_dtoa_r+0x618>)
 80074d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80074da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f280 80d5 	bge.w	800768c <_dtoa_r+0x634>
 80074e2:	9b03      	ldr	r3, [sp, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f300 80d1 	bgt.w	800768c <_dtoa_r+0x634>
 80074ea:	f040 826f 	bne.w	80079cc <_dtoa_r+0x974>
 80074ee:	4b65      	ldr	r3, [pc, #404]	; (8007684 <_dtoa_r+0x62c>)
 80074f0:	2200      	movs	r2, #0
 80074f2:	4640      	mov	r0, r8
 80074f4:	4649      	mov	r1, r9
 80074f6:	f7f9 f887 	bl	8000608 <__aeabi_dmul>
 80074fa:	4652      	mov	r2, sl
 80074fc:	465b      	mov	r3, fp
 80074fe:	f7f9 fb09 	bl	8000b14 <__aeabi_dcmpge>
 8007502:	9e03      	ldr	r6, [sp, #12]
 8007504:	4637      	mov	r7, r6
 8007506:	2800      	cmp	r0, #0
 8007508:	f040 8245 	bne.w	8007996 <_dtoa_r+0x93e>
 800750c:	9d01      	ldr	r5, [sp, #4]
 800750e:	2331      	movs	r3, #49	; 0x31
 8007510:	f805 3b01 	strb.w	r3, [r5], #1
 8007514:	9b00      	ldr	r3, [sp, #0]
 8007516:	3301      	adds	r3, #1
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	e240      	b.n	800799e <_dtoa_r+0x946>
 800751c:	07f2      	lsls	r2, r6, #31
 800751e:	d505      	bpl.n	800752c <_dtoa_r+0x4d4>
 8007520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007524:	f7f9 f870 	bl	8000608 <__aeabi_dmul>
 8007528:	3501      	adds	r5, #1
 800752a:	2301      	movs	r3, #1
 800752c:	1076      	asrs	r6, r6, #1
 800752e:	3708      	adds	r7, #8
 8007530:	e777      	b.n	8007422 <_dtoa_r+0x3ca>
 8007532:	2502      	movs	r5, #2
 8007534:	e779      	b.n	800742a <_dtoa_r+0x3d2>
 8007536:	9f00      	ldr	r7, [sp, #0]
 8007538:	9e03      	ldr	r6, [sp, #12]
 800753a:	e794      	b.n	8007466 <_dtoa_r+0x40e>
 800753c:	9901      	ldr	r1, [sp, #4]
 800753e:	4b4c      	ldr	r3, [pc, #304]	; (8007670 <_dtoa_r+0x618>)
 8007540:	4431      	add	r1, r6
 8007542:	910d      	str	r1, [sp, #52]	; 0x34
 8007544:	9908      	ldr	r1, [sp, #32]
 8007546:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800754a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800754e:	2900      	cmp	r1, #0
 8007550:	d043      	beq.n	80075da <_dtoa_r+0x582>
 8007552:	494d      	ldr	r1, [pc, #308]	; (8007688 <_dtoa_r+0x630>)
 8007554:	2000      	movs	r0, #0
 8007556:	f7f9 f981 	bl	800085c <__aeabi_ddiv>
 800755a:	4652      	mov	r2, sl
 800755c:	465b      	mov	r3, fp
 800755e:	f7f8 fe9b 	bl	8000298 <__aeabi_dsub>
 8007562:	9d01      	ldr	r5, [sp, #4]
 8007564:	4682      	mov	sl, r0
 8007566:	468b      	mov	fp, r1
 8007568:	4649      	mov	r1, r9
 800756a:	4640      	mov	r0, r8
 800756c:	f7f9 fafc 	bl	8000b68 <__aeabi_d2iz>
 8007570:	4606      	mov	r6, r0
 8007572:	f7f8 ffdf 	bl	8000534 <__aeabi_i2d>
 8007576:	4602      	mov	r2, r0
 8007578:	460b      	mov	r3, r1
 800757a:	4640      	mov	r0, r8
 800757c:	4649      	mov	r1, r9
 800757e:	f7f8 fe8b 	bl	8000298 <__aeabi_dsub>
 8007582:	3630      	adds	r6, #48	; 0x30
 8007584:	f805 6b01 	strb.w	r6, [r5], #1
 8007588:	4652      	mov	r2, sl
 800758a:	465b      	mov	r3, fp
 800758c:	4680      	mov	r8, r0
 800758e:	4689      	mov	r9, r1
 8007590:	f7f9 faac 	bl	8000aec <__aeabi_dcmplt>
 8007594:	2800      	cmp	r0, #0
 8007596:	d163      	bne.n	8007660 <_dtoa_r+0x608>
 8007598:	4642      	mov	r2, r8
 800759a:	464b      	mov	r3, r9
 800759c:	4936      	ldr	r1, [pc, #216]	; (8007678 <_dtoa_r+0x620>)
 800759e:	2000      	movs	r0, #0
 80075a0:	f7f8 fe7a 	bl	8000298 <__aeabi_dsub>
 80075a4:	4652      	mov	r2, sl
 80075a6:	465b      	mov	r3, fp
 80075a8:	f7f9 faa0 	bl	8000aec <__aeabi_dcmplt>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	f040 80b5 	bne.w	800771c <_dtoa_r+0x6c4>
 80075b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075b4:	429d      	cmp	r5, r3
 80075b6:	d081      	beq.n	80074bc <_dtoa_r+0x464>
 80075b8:	4b30      	ldr	r3, [pc, #192]	; (800767c <_dtoa_r+0x624>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	4650      	mov	r0, sl
 80075be:	4659      	mov	r1, fp
 80075c0:	f7f9 f822 	bl	8000608 <__aeabi_dmul>
 80075c4:	4b2d      	ldr	r3, [pc, #180]	; (800767c <_dtoa_r+0x624>)
 80075c6:	4682      	mov	sl, r0
 80075c8:	468b      	mov	fp, r1
 80075ca:	4640      	mov	r0, r8
 80075cc:	4649      	mov	r1, r9
 80075ce:	2200      	movs	r2, #0
 80075d0:	f7f9 f81a 	bl	8000608 <__aeabi_dmul>
 80075d4:	4680      	mov	r8, r0
 80075d6:	4689      	mov	r9, r1
 80075d8:	e7c6      	b.n	8007568 <_dtoa_r+0x510>
 80075da:	4650      	mov	r0, sl
 80075dc:	4659      	mov	r1, fp
 80075de:	f7f9 f813 	bl	8000608 <__aeabi_dmul>
 80075e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075e4:	9d01      	ldr	r5, [sp, #4]
 80075e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80075e8:	4682      	mov	sl, r0
 80075ea:	468b      	mov	fp, r1
 80075ec:	4649      	mov	r1, r9
 80075ee:	4640      	mov	r0, r8
 80075f0:	f7f9 faba 	bl	8000b68 <__aeabi_d2iz>
 80075f4:	4606      	mov	r6, r0
 80075f6:	f7f8 ff9d 	bl	8000534 <__aeabi_i2d>
 80075fa:	3630      	adds	r6, #48	; 0x30
 80075fc:	4602      	mov	r2, r0
 80075fe:	460b      	mov	r3, r1
 8007600:	4640      	mov	r0, r8
 8007602:	4649      	mov	r1, r9
 8007604:	f7f8 fe48 	bl	8000298 <__aeabi_dsub>
 8007608:	f805 6b01 	strb.w	r6, [r5], #1
 800760c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800760e:	429d      	cmp	r5, r3
 8007610:	4680      	mov	r8, r0
 8007612:	4689      	mov	r9, r1
 8007614:	f04f 0200 	mov.w	r2, #0
 8007618:	d124      	bne.n	8007664 <_dtoa_r+0x60c>
 800761a:	4b1b      	ldr	r3, [pc, #108]	; (8007688 <_dtoa_r+0x630>)
 800761c:	4650      	mov	r0, sl
 800761e:	4659      	mov	r1, fp
 8007620:	f7f8 fe3c 	bl	800029c <__adddf3>
 8007624:	4602      	mov	r2, r0
 8007626:	460b      	mov	r3, r1
 8007628:	4640      	mov	r0, r8
 800762a:	4649      	mov	r1, r9
 800762c:	f7f9 fa7c 	bl	8000b28 <__aeabi_dcmpgt>
 8007630:	2800      	cmp	r0, #0
 8007632:	d173      	bne.n	800771c <_dtoa_r+0x6c4>
 8007634:	4652      	mov	r2, sl
 8007636:	465b      	mov	r3, fp
 8007638:	4913      	ldr	r1, [pc, #76]	; (8007688 <_dtoa_r+0x630>)
 800763a:	2000      	movs	r0, #0
 800763c:	f7f8 fe2c 	bl	8000298 <__aeabi_dsub>
 8007640:	4602      	mov	r2, r0
 8007642:	460b      	mov	r3, r1
 8007644:	4640      	mov	r0, r8
 8007646:	4649      	mov	r1, r9
 8007648:	f7f9 fa50 	bl	8000aec <__aeabi_dcmplt>
 800764c:	2800      	cmp	r0, #0
 800764e:	f43f af35 	beq.w	80074bc <_dtoa_r+0x464>
 8007652:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007654:	1e6b      	subs	r3, r5, #1
 8007656:	930f      	str	r3, [sp, #60]	; 0x3c
 8007658:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800765c:	2b30      	cmp	r3, #48	; 0x30
 800765e:	d0f8      	beq.n	8007652 <_dtoa_r+0x5fa>
 8007660:	9700      	str	r7, [sp, #0]
 8007662:	e049      	b.n	80076f8 <_dtoa_r+0x6a0>
 8007664:	4b05      	ldr	r3, [pc, #20]	; (800767c <_dtoa_r+0x624>)
 8007666:	f7f8 ffcf 	bl	8000608 <__aeabi_dmul>
 800766a:	4680      	mov	r8, r0
 800766c:	4689      	mov	r9, r1
 800766e:	e7bd      	b.n	80075ec <_dtoa_r+0x594>
 8007670:	0800a040 	.word	0x0800a040
 8007674:	0800a018 	.word	0x0800a018
 8007678:	3ff00000 	.word	0x3ff00000
 800767c:	40240000 	.word	0x40240000
 8007680:	401c0000 	.word	0x401c0000
 8007684:	40140000 	.word	0x40140000
 8007688:	3fe00000 	.word	0x3fe00000
 800768c:	9d01      	ldr	r5, [sp, #4]
 800768e:	4656      	mov	r6, sl
 8007690:	465f      	mov	r7, fp
 8007692:	4642      	mov	r2, r8
 8007694:	464b      	mov	r3, r9
 8007696:	4630      	mov	r0, r6
 8007698:	4639      	mov	r1, r7
 800769a:	f7f9 f8df 	bl	800085c <__aeabi_ddiv>
 800769e:	f7f9 fa63 	bl	8000b68 <__aeabi_d2iz>
 80076a2:	4682      	mov	sl, r0
 80076a4:	f7f8 ff46 	bl	8000534 <__aeabi_i2d>
 80076a8:	4642      	mov	r2, r8
 80076aa:	464b      	mov	r3, r9
 80076ac:	f7f8 ffac 	bl	8000608 <__aeabi_dmul>
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	4630      	mov	r0, r6
 80076b6:	4639      	mov	r1, r7
 80076b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80076bc:	f7f8 fdec 	bl	8000298 <__aeabi_dsub>
 80076c0:	f805 6b01 	strb.w	r6, [r5], #1
 80076c4:	9e01      	ldr	r6, [sp, #4]
 80076c6:	9f03      	ldr	r7, [sp, #12]
 80076c8:	1bae      	subs	r6, r5, r6
 80076ca:	42b7      	cmp	r7, r6
 80076cc:	4602      	mov	r2, r0
 80076ce:	460b      	mov	r3, r1
 80076d0:	d135      	bne.n	800773e <_dtoa_r+0x6e6>
 80076d2:	f7f8 fde3 	bl	800029c <__adddf3>
 80076d6:	4642      	mov	r2, r8
 80076d8:	464b      	mov	r3, r9
 80076da:	4606      	mov	r6, r0
 80076dc:	460f      	mov	r7, r1
 80076de:	f7f9 fa23 	bl	8000b28 <__aeabi_dcmpgt>
 80076e2:	b9d0      	cbnz	r0, 800771a <_dtoa_r+0x6c2>
 80076e4:	4642      	mov	r2, r8
 80076e6:	464b      	mov	r3, r9
 80076e8:	4630      	mov	r0, r6
 80076ea:	4639      	mov	r1, r7
 80076ec:	f7f9 f9f4 	bl	8000ad8 <__aeabi_dcmpeq>
 80076f0:	b110      	cbz	r0, 80076f8 <_dtoa_r+0x6a0>
 80076f2:	f01a 0f01 	tst.w	sl, #1
 80076f6:	d110      	bne.n	800771a <_dtoa_r+0x6c2>
 80076f8:	4620      	mov	r0, r4
 80076fa:	ee18 1a10 	vmov	r1, s16
 80076fe:	f000 ff71 	bl	80085e4 <_Bfree>
 8007702:	2300      	movs	r3, #0
 8007704:	9800      	ldr	r0, [sp, #0]
 8007706:	702b      	strb	r3, [r5, #0]
 8007708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800770a:	3001      	adds	r0, #1
 800770c:	6018      	str	r0, [r3, #0]
 800770e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007710:	2b00      	cmp	r3, #0
 8007712:	f43f acf1 	beq.w	80070f8 <_dtoa_r+0xa0>
 8007716:	601d      	str	r5, [r3, #0]
 8007718:	e4ee      	b.n	80070f8 <_dtoa_r+0xa0>
 800771a:	9f00      	ldr	r7, [sp, #0]
 800771c:	462b      	mov	r3, r5
 800771e:	461d      	mov	r5, r3
 8007720:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007724:	2a39      	cmp	r2, #57	; 0x39
 8007726:	d106      	bne.n	8007736 <_dtoa_r+0x6de>
 8007728:	9a01      	ldr	r2, [sp, #4]
 800772a:	429a      	cmp	r2, r3
 800772c:	d1f7      	bne.n	800771e <_dtoa_r+0x6c6>
 800772e:	9901      	ldr	r1, [sp, #4]
 8007730:	2230      	movs	r2, #48	; 0x30
 8007732:	3701      	adds	r7, #1
 8007734:	700a      	strb	r2, [r1, #0]
 8007736:	781a      	ldrb	r2, [r3, #0]
 8007738:	3201      	adds	r2, #1
 800773a:	701a      	strb	r2, [r3, #0]
 800773c:	e790      	b.n	8007660 <_dtoa_r+0x608>
 800773e:	4ba6      	ldr	r3, [pc, #664]	; (80079d8 <_dtoa_r+0x980>)
 8007740:	2200      	movs	r2, #0
 8007742:	f7f8 ff61 	bl	8000608 <__aeabi_dmul>
 8007746:	2200      	movs	r2, #0
 8007748:	2300      	movs	r3, #0
 800774a:	4606      	mov	r6, r0
 800774c:	460f      	mov	r7, r1
 800774e:	f7f9 f9c3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007752:	2800      	cmp	r0, #0
 8007754:	d09d      	beq.n	8007692 <_dtoa_r+0x63a>
 8007756:	e7cf      	b.n	80076f8 <_dtoa_r+0x6a0>
 8007758:	9a08      	ldr	r2, [sp, #32]
 800775a:	2a00      	cmp	r2, #0
 800775c:	f000 80d7 	beq.w	800790e <_dtoa_r+0x8b6>
 8007760:	9a06      	ldr	r2, [sp, #24]
 8007762:	2a01      	cmp	r2, #1
 8007764:	f300 80ba 	bgt.w	80078dc <_dtoa_r+0x884>
 8007768:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800776a:	2a00      	cmp	r2, #0
 800776c:	f000 80b2 	beq.w	80078d4 <_dtoa_r+0x87c>
 8007770:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007774:	9e07      	ldr	r6, [sp, #28]
 8007776:	9d04      	ldr	r5, [sp, #16]
 8007778:	9a04      	ldr	r2, [sp, #16]
 800777a:	441a      	add	r2, r3
 800777c:	9204      	str	r2, [sp, #16]
 800777e:	9a05      	ldr	r2, [sp, #20]
 8007780:	2101      	movs	r1, #1
 8007782:	441a      	add	r2, r3
 8007784:	4620      	mov	r0, r4
 8007786:	9205      	str	r2, [sp, #20]
 8007788:	f001 f82e 	bl	80087e8 <__i2b>
 800778c:	4607      	mov	r7, r0
 800778e:	2d00      	cmp	r5, #0
 8007790:	dd0c      	ble.n	80077ac <_dtoa_r+0x754>
 8007792:	9b05      	ldr	r3, [sp, #20]
 8007794:	2b00      	cmp	r3, #0
 8007796:	dd09      	ble.n	80077ac <_dtoa_r+0x754>
 8007798:	42ab      	cmp	r3, r5
 800779a:	9a04      	ldr	r2, [sp, #16]
 800779c:	bfa8      	it	ge
 800779e:	462b      	movge	r3, r5
 80077a0:	1ad2      	subs	r2, r2, r3
 80077a2:	9204      	str	r2, [sp, #16]
 80077a4:	9a05      	ldr	r2, [sp, #20]
 80077a6:	1aed      	subs	r5, r5, r3
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	9305      	str	r3, [sp, #20]
 80077ac:	9b07      	ldr	r3, [sp, #28]
 80077ae:	b31b      	cbz	r3, 80077f8 <_dtoa_r+0x7a0>
 80077b0:	9b08      	ldr	r3, [sp, #32]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 80af 	beq.w	8007916 <_dtoa_r+0x8be>
 80077b8:	2e00      	cmp	r6, #0
 80077ba:	dd13      	ble.n	80077e4 <_dtoa_r+0x78c>
 80077bc:	4639      	mov	r1, r7
 80077be:	4632      	mov	r2, r6
 80077c0:	4620      	mov	r0, r4
 80077c2:	f001 f8d1 	bl	8008968 <__pow5mult>
 80077c6:	ee18 2a10 	vmov	r2, s16
 80077ca:	4601      	mov	r1, r0
 80077cc:	4607      	mov	r7, r0
 80077ce:	4620      	mov	r0, r4
 80077d0:	f001 f820 	bl	8008814 <__multiply>
 80077d4:	ee18 1a10 	vmov	r1, s16
 80077d8:	4680      	mov	r8, r0
 80077da:	4620      	mov	r0, r4
 80077dc:	f000 ff02 	bl	80085e4 <_Bfree>
 80077e0:	ee08 8a10 	vmov	s16, r8
 80077e4:	9b07      	ldr	r3, [sp, #28]
 80077e6:	1b9a      	subs	r2, r3, r6
 80077e8:	d006      	beq.n	80077f8 <_dtoa_r+0x7a0>
 80077ea:	ee18 1a10 	vmov	r1, s16
 80077ee:	4620      	mov	r0, r4
 80077f0:	f001 f8ba 	bl	8008968 <__pow5mult>
 80077f4:	ee08 0a10 	vmov	s16, r0
 80077f8:	2101      	movs	r1, #1
 80077fa:	4620      	mov	r0, r4
 80077fc:	f000 fff4 	bl	80087e8 <__i2b>
 8007800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007802:	2b00      	cmp	r3, #0
 8007804:	4606      	mov	r6, r0
 8007806:	f340 8088 	ble.w	800791a <_dtoa_r+0x8c2>
 800780a:	461a      	mov	r2, r3
 800780c:	4601      	mov	r1, r0
 800780e:	4620      	mov	r0, r4
 8007810:	f001 f8aa 	bl	8008968 <__pow5mult>
 8007814:	9b06      	ldr	r3, [sp, #24]
 8007816:	2b01      	cmp	r3, #1
 8007818:	4606      	mov	r6, r0
 800781a:	f340 8081 	ble.w	8007920 <_dtoa_r+0x8c8>
 800781e:	f04f 0800 	mov.w	r8, #0
 8007822:	6933      	ldr	r3, [r6, #16]
 8007824:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007828:	6918      	ldr	r0, [r3, #16]
 800782a:	f000 ff8d 	bl	8008748 <__hi0bits>
 800782e:	f1c0 0020 	rsb	r0, r0, #32
 8007832:	9b05      	ldr	r3, [sp, #20]
 8007834:	4418      	add	r0, r3
 8007836:	f010 001f 	ands.w	r0, r0, #31
 800783a:	f000 8092 	beq.w	8007962 <_dtoa_r+0x90a>
 800783e:	f1c0 0320 	rsb	r3, r0, #32
 8007842:	2b04      	cmp	r3, #4
 8007844:	f340 808a 	ble.w	800795c <_dtoa_r+0x904>
 8007848:	f1c0 001c 	rsb	r0, r0, #28
 800784c:	9b04      	ldr	r3, [sp, #16]
 800784e:	4403      	add	r3, r0
 8007850:	9304      	str	r3, [sp, #16]
 8007852:	9b05      	ldr	r3, [sp, #20]
 8007854:	4403      	add	r3, r0
 8007856:	4405      	add	r5, r0
 8007858:	9305      	str	r3, [sp, #20]
 800785a:	9b04      	ldr	r3, [sp, #16]
 800785c:	2b00      	cmp	r3, #0
 800785e:	dd07      	ble.n	8007870 <_dtoa_r+0x818>
 8007860:	ee18 1a10 	vmov	r1, s16
 8007864:	461a      	mov	r2, r3
 8007866:	4620      	mov	r0, r4
 8007868:	f001 f8d8 	bl	8008a1c <__lshift>
 800786c:	ee08 0a10 	vmov	s16, r0
 8007870:	9b05      	ldr	r3, [sp, #20]
 8007872:	2b00      	cmp	r3, #0
 8007874:	dd05      	ble.n	8007882 <_dtoa_r+0x82a>
 8007876:	4631      	mov	r1, r6
 8007878:	461a      	mov	r2, r3
 800787a:	4620      	mov	r0, r4
 800787c:	f001 f8ce 	bl	8008a1c <__lshift>
 8007880:	4606      	mov	r6, r0
 8007882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007884:	2b00      	cmp	r3, #0
 8007886:	d06e      	beq.n	8007966 <_dtoa_r+0x90e>
 8007888:	ee18 0a10 	vmov	r0, s16
 800788c:	4631      	mov	r1, r6
 800788e:	f001 f935 	bl	8008afc <__mcmp>
 8007892:	2800      	cmp	r0, #0
 8007894:	da67      	bge.n	8007966 <_dtoa_r+0x90e>
 8007896:	9b00      	ldr	r3, [sp, #0]
 8007898:	3b01      	subs	r3, #1
 800789a:	ee18 1a10 	vmov	r1, s16
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	220a      	movs	r2, #10
 80078a2:	2300      	movs	r3, #0
 80078a4:	4620      	mov	r0, r4
 80078a6:	f000 febf 	bl	8008628 <__multadd>
 80078aa:	9b08      	ldr	r3, [sp, #32]
 80078ac:	ee08 0a10 	vmov	s16, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f000 81b1 	beq.w	8007c18 <_dtoa_r+0xbc0>
 80078b6:	2300      	movs	r3, #0
 80078b8:	4639      	mov	r1, r7
 80078ba:	220a      	movs	r2, #10
 80078bc:	4620      	mov	r0, r4
 80078be:	f000 feb3 	bl	8008628 <__multadd>
 80078c2:	9b02      	ldr	r3, [sp, #8]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	4607      	mov	r7, r0
 80078c8:	f300 808e 	bgt.w	80079e8 <_dtoa_r+0x990>
 80078cc:	9b06      	ldr	r3, [sp, #24]
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	dc51      	bgt.n	8007976 <_dtoa_r+0x91e>
 80078d2:	e089      	b.n	80079e8 <_dtoa_r+0x990>
 80078d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80078da:	e74b      	b.n	8007774 <_dtoa_r+0x71c>
 80078dc:	9b03      	ldr	r3, [sp, #12]
 80078de:	1e5e      	subs	r6, r3, #1
 80078e0:	9b07      	ldr	r3, [sp, #28]
 80078e2:	42b3      	cmp	r3, r6
 80078e4:	bfbf      	itttt	lt
 80078e6:	9b07      	ldrlt	r3, [sp, #28]
 80078e8:	9607      	strlt	r6, [sp, #28]
 80078ea:	1af2      	sublt	r2, r6, r3
 80078ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80078ee:	bfb6      	itet	lt
 80078f0:	189b      	addlt	r3, r3, r2
 80078f2:	1b9e      	subge	r6, r3, r6
 80078f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80078f6:	9b03      	ldr	r3, [sp, #12]
 80078f8:	bfb8      	it	lt
 80078fa:	2600      	movlt	r6, #0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	bfb7      	itett	lt
 8007900:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007904:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007908:	1a9d      	sublt	r5, r3, r2
 800790a:	2300      	movlt	r3, #0
 800790c:	e734      	b.n	8007778 <_dtoa_r+0x720>
 800790e:	9e07      	ldr	r6, [sp, #28]
 8007910:	9d04      	ldr	r5, [sp, #16]
 8007912:	9f08      	ldr	r7, [sp, #32]
 8007914:	e73b      	b.n	800778e <_dtoa_r+0x736>
 8007916:	9a07      	ldr	r2, [sp, #28]
 8007918:	e767      	b.n	80077ea <_dtoa_r+0x792>
 800791a:	9b06      	ldr	r3, [sp, #24]
 800791c:	2b01      	cmp	r3, #1
 800791e:	dc18      	bgt.n	8007952 <_dtoa_r+0x8fa>
 8007920:	f1ba 0f00 	cmp.w	sl, #0
 8007924:	d115      	bne.n	8007952 <_dtoa_r+0x8fa>
 8007926:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800792a:	b993      	cbnz	r3, 8007952 <_dtoa_r+0x8fa>
 800792c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007930:	0d1b      	lsrs	r3, r3, #20
 8007932:	051b      	lsls	r3, r3, #20
 8007934:	b183      	cbz	r3, 8007958 <_dtoa_r+0x900>
 8007936:	9b04      	ldr	r3, [sp, #16]
 8007938:	3301      	adds	r3, #1
 800793a:	9304      	str	r3, [sp, #16]
 800793c:	9b05      	ldr	r3, [sp, #20]
 800793e:	3301      	adds	r3, #1
 8007940:	9305      	str	r3, [sp, #20]
 8007942:	f04f 0801 	mov.w	r8, #1
 8007946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007948:	2b00      	cmp	r3, #0
 800794a:	f47f af6a 	bne.w	8007822 <_dtoa_r+0x7ca>
 800794e:	2001      	movs	r0, #1
 8007950:	e76f      	b.n	8007832 <_dtoa_r+0x7da>
 8007952:	f04f 0800 	mov.w	r8, #0
 8007956:	e7f6      	b.n	8007946 <_dtoa_r+0x8ee>
 8007958:	4698      	mov	r8, r3
 800795a:	e7f4      	b.n	8007946 <_dtoa_r+0x8ee>
 800795c:	f43f af7d 	beq.w	800785a <_dtoa_r+0x802>
 8007960:	4618      	mov	r0, r3
 8007962:	301c      	adds	r0, #28
 8007964:	e772      	b.n	800784c <_dtoa_r+0x7f4>
 8007966:	9b03      	ldr	r3, [sp, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	dc37      	bgt.n	80079dc <_dtoa_r+0x984>
 800796c:	9b06      	ldr	r3, [sp, #24]
 800796e:	2b02      	cmp	r3, #2
 8007970:	dd34      	ble.n	80079dc <_dtoa_r+0x984>
 8007972:	9b03      	ldr	r3, [sp, #12]
 8007974:	9302      	str	r3, [sp, #8]
 8007976:	9b02      	ldr	r3, [sp, #8]
 8007978:	b96b      	cbnz	r3, 8007996 <_dtoa_r+0x93e>
 800797a:	4631      	mov	r1, r6
 800797c:	2205      	movs	r2, #5
 800797e:	4620      	mov	r0, r4
 8007980:	f000 fe52 	bl	8008628 <__multadd>
 8007984:	4601      	mov	r1, r0
 8007986:	4606      	mov	r6, r0
 8007988:	ee18 0a10 	vmov	r0, s16
 800798c:	f001 f8b6 	bl	8008afc <__mcmp>
 8007990:	2800      	cmp	r0, #0
 8007992:	f73f adbb 	bgt.w	800750c <_dtoa_r+0x4b4>
 8007996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007998:	9d01      	ldr	r5, [sp, #4]
 800799a:	43db      	mvns	r3, r3
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	f04f 0800 	mov.w	r8, #0
 80079a2:	4631      	mov	r1, r6
 80079a4:	4620      	mov	r0, r4
 80079a6:	f000 fe1d 	bl	80085e4 <_Bfree>
 80079aa:	2f00      	cmp	r7, #0
 80079ac:	f43f aea4 	beq.w	80076f8 <_dtoa_r+0x6a0>
 80079b0:	f1b8 0f00 	cmp.w	r8, #0
 80079b4:	d005      	beq.n	80079c2 <_dtoa_r+0x96a>
 80079b6:	45b8      	cmp	r8, r7
 80079b8:	d003      	beq.n	80079c2 <_dtoa_r+0x96a>
 80079ba:	4641      	mov	r1, r8
 80079bc:	4620      	mov	r0, r4
 80079be:	f000 fe11 	bl	80085e4 <_Bfree>
 80079c2:	4639      	mov	r1, r7
 80079c4:	4620      	mov	r0, r4
 80079c6:	f000 fe0d 	bl	80085e4 <_Bfree>
 80079ca:	e695      	b.n	80076f8 <_dtoa_r+0x6a0>
 80079cc:	2600      	movs	r6, #0
 80079ce:	4637      	mov	r7, r6
 80079d0:	e7e1      	b.n	8007996 <_dtoa_r+0x93e>
 80079d2:	9700      	str	r7, [sp, #0]
 80079d4:	4637      	mov	r7, r6
 80079d6:	e599      	b.n	800750c <_dtoa_r+0x4b4>
 80079d8:	40240000 	.word	0x40240000
 80079dc:	9b08      	ldr	r3, [sp, #32]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 80ca 	beq.w	8007b78 <_dtoa_r+0xb20>
 80079e4:	9b03      	ldr	r3, [sp, #12]
 80079e6:	9302      	str	r3, [sp, #8]
 80079e8:	2d00      	cmp	r5, #0
 80079ea:	dd05      	ble.n	80079f8 <_dtoa_r+0x9a0>
 80079ec:	4639      	mov	r1, r7
 80079ee:	462a      	mov	r2, r5
 80079f0:	4620      	mov	r0, r4
 80079f2:	f001 f813 	bl	8008a1c <__lshift>
 80079f6:	4607      	mov	r7, r0
 80079f8:	f1b8 0f00 	cmp.w	r8, #0
 80079fc:	d05b      	beq.n	8007ab6 <_dtoa_r+0xa5e>
 80079fe:	6879      	ldr	r1, [r7, #4]
 8007a00:	4620      	mov	r0, r4
 8007a02:	f000 fdaf 	bl	8008564 <_Balloc>
 8007a06:	4605      	mov	r5, r0
 8007a08:	b928      	cbnz	r0, 8007a16 <_dtoa_r+0x9be>
 8007a0a:	4b87      	ldr	r3, [pc, #540]	; (8007c28 <_dtoa_r+0xbd0>)
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007a12:	f7ff bb3b 	b.w	800708c <_dtoa_r+0x34>
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	3202      	adds	r2, #2
 8007a1a:	0092      	lsls	r2, r2, #2
 8007a1c:	f107 010c 	add.w	r1, r7, #12
 8007a20:	300c      	adds	r0, #12
 8007a22:	f000 fd84 	bl	800852e <memcpy>
 8007a26:	2201      	movs	r2, #1
 8007a28:	4629      	mov	r1, r5
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	f000 fff6 	bl	8008a1c <__lshift>
 8007a30:	9b01      	ldr	r3, [sp, #4]
 8007a32:	f103 0901 	add.w	r9, r3, #1
 8007a36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	9305      	str	r3, [sp, #20]
 8007a3e:	f00a 0301 	and.w	r3, sl, #1
 8007a42:	46b8      	mov	r8, r7
 8007a44:	9304      	str	r3, [sp, #16]
 8007a46:	4607      	mov	r7, r0
 8007a48:	4631      	mov	r1, r6
 8007a4a:	ee18 0a10 	vmov	r0, s16
 8007a4e:	f7ff fa77 	bl	8006f40 <quorem>
 8007a52:	4641      	mov	r1, r8
 8007a54:	9002      	str	r0, [sp, #8]
 8007a56:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007a5a:	ee18 0a10 	vmov	r0, s16
 8007a5e:	f001 f84d 	bl	8008afc <__mcmp>
 8007a62:	463a      	mov	r2, r7
 8007a64:	9003      	str	r0, [sp, #12]
 8007a66:	4631      	mov	r1, r6
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f001 f863 	bl	8008b34 <__mdiff>
 8007a6e:	68c2      	ldr	r2, [r0, #12]
 8007a70:	f109 3bff 	add.w	fp, r9, #4294967295
 8007a74:	4605      	mov	r5, r0
 8007a76:	bb02      	cbnz	r2, 8007aba <_dtoa_r+0xa62>
 8007a78:	4601      	mov	r1, r0
 8007a7a:	ee18 0a10 	vmov	r0, s16
 8007a7e:	f001 f83d 	bl	8008afc <__mcmp>
 8007a82:	4602      	mov	r2, r0
 8007a84:	4629      	mov	r1, r5
 8007a86:	4620      	mov	r0, r4
 8007a88:	9207      	str	r2, [sp, #28]
 8007a8a:	f000 fdab 	bl	80085e4 <_Bfree>
 8007a8e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007a92:	ea43 0102 	orr.w	r1, r3, r2
 8007a96:	9b04      	ldr	r3, [sp, #16]
 8007a98:	430b      	orrs	r3, r1
 8007a9a:	464d      	mov	r5, r9
 8007a9c:	d10f      	bne.n	8007abe <_dtoa_r+0xa66>
 8007a9e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007aa2:	d02a      	beq.n	8007afa <_dtoa_r+0xaa2>
 8007aa4:	9b03      	ldr	r3, [sp, #12]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	dd02      	ble.n	8007ab0 <_dtoa_r+0xa58>
 8007aaa:	9b02      	ldr	r3, [sp, #8]
 8007aac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007ab0:	f88b a000 	strb.w	sl, [fp]
 8007ab4:	e775      	b.n	80079a2 <_dtoa_r+0x94a>
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	e7ba      	b.n	8007a30 <_dtoa_r+0x9d8>
 8007aba:	2201      	movs	r2, #1
 8007abc:	e7e2      	b.n	8007a84 <_dtoa_r+0xa2c>
 8007abe:	9b03      	ldr	r3, [sp, #12]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	db04      	blt.n	8007ace <_dtoa_r+0xa76>
 8007ac4:	9906      	ldr	r1, [sp, #24]
 8007ac6:	430b      	orrs	r3, r1
 8007ac8:	9904      	ldr	r1, [sp, #16]
 8007aca:	430b      	orrs	r3, r1
 8007acc:	d122      	bne.n	8007b14 <_dtoa_r+0xabc>
 8007ace:	2a00      	cmp	r2, #0
 8007ad0:	ddee      	ble.n	8007ab0 <_dtoa_r+0xa58>
 8007ad2:	ee18 1a10 	vmov	r1, s16
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f000 ff9f 	bl	8008a1c <__lshift>
 8007ade:	4631      	mov	r1, r6
 8007ae0:	ee08 0a10 	vmov	s16, r0
 8007ae4:	f001 f80a 	bl	8008afc <__mcmp>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	dc03      	bgt.n	8007af4 <_dtoa_r+0xa9c>
 8007aec:	d1e0      	bne.n	8007ab0 <_dtoa_r+0xa58>
 8007aee:	f01a 0f01 	tst.w	sl, #1
 8007af2:	d0dd      	beq.n	8007ab0 <_dtoa_r+0xa58>
 8007af4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007af8:	d1d7      	bne.n	8007aaa <_dtoa_r+0xa52>
 8007afa:	2339      	movs	r3, #57	; 0x39
 8007afc:	f88b 3000 	strb.w	r3, [fp]
 8007b00:	462b      	mov	r3, r5
 8007b02:	461d      	mov	r5, r3
 8007b04:	3b01      	subs	r3, #1
 8007b06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007b0a:	2a39      	cmp	r2, #57	; 0x39
 8007b0c:	d071      	beq.n	8007bf2 <_dtoa_r+0xb9a>
 8007b0e:	3201      	adds	r2, #1
 8007b10:	701a      	strb	r2, [r3, #0]
 8007b12:	e746      	b.n	80079a2 <_dtoa_r+0x94a>
 8007b14:	2a00      	cmp	r2, #0
 8007b16:	dd07      	ble.n	8007b28 <_dtoa_r+0xad0>
 8007b18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007b1c:	d0ed      	beq.n	8007afa <_dtoa_r+0xaa2>
 8007b1e:	f10a 0301 	add.w	r3, sl, #1
 8007b22:	f88b 3000 	strb.w	r3, [fp]
 8007b26:	e73c      	b.n	80079a2 <_dtoa_r+0x94a>
 8007b28:	9b05      	ldr	r3, [sp, #20]
 8007b2a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007b2e:	4599      	cmp	r9, r3
 8007b30:	d047      	beq.n	8007bc2 <_dtoa_r+0xb6a>
 8007b32:	ee18 1a10 	vmov	r1, s16
 8007b36:	2300      	movs	r3, #0
 8007b38:	220a      	movs	r2, #10
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	f000 fd74 	bl	8008628 <__multadd>
 8007b40:	45b8      	cmp	r8, r7
 8007b42:	ee08 0a10 	vmov	s16, r0
 8007b46:	f04f 0300 	mov.w	r3, #0
 8007b4a:	f04f 020a 	mov.w	r2, #10
 8007b4e:	4641      	mov	r1, r8
 8007b50:	4620      	mov	r0, r4
 8007b52:	d106      	bne.n	8007b62 <_dtoa_r+0xb0a>
 8007b54:	f000 fd68 	bl	8008628 <__multadd>
 8007b58:	4680      	mov	r8, r0
 8007b5a:	4607      	mov	r7, r0
 8007b5c:	f109 0901 	add.w	r9, r9, #1
 8007b60:	e772      	b.n	8007a48 <_dtoa_r+0x9f0>
 8007b62:	f000 fd61 	bl	8008628 <__multadd>
 8007b66:	4639      	mov	r1, r7
 8007b68:	4680      	mov	r8, r0
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	220a      	movs	r2, #10
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f000 fd5a 	bl	8008628 <__multadd>
 8007b74:	4607      	mov	r7, r0
 8007b76:	e7f1      	b.n	8007b5c <_dtoa_r+0xb04>
 8007b78:	9b03      	ldr	r3, [sp, #12]
 8007b7a:	9302      	str	r3, [sp, #8]
 8007b7c:	9d01      	ldr	r5, [sp, #4]
 8007b7e:	ee18 0a10 	vmov	r0, s16
 8007b82:	4631      	mov	r1, r6
 8007b84:	f7ff f9dc 	bl	8006f40 <quorem>
 8007b88:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007b8c:	9b01      	ldr	r3, [sp, #4]
 8007b8e:	f805 ab01 	strb.w	sl, [r5], #1
 8007b92:	1aea      	subs	r2, r5, r3
 8007b94:	9b02      	ldr	r3, [sp, #8]
 8007b96:	4293      	cmp	r3, r2
 8007b98:	dd09      	ble.n	8007bae <_dtoa_r+0xb56>
 8007b9a:	ee18 1a10 	vmov	r1, s16
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	220a      	movs	r2, #10
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	f000 fd40 	bl	8008628 <__multadd>
 8007ba8:	ee08 0a10 	vmov	s16, r0
 8007bac:	e7e7      	b.n	8007b7e <_dtoa_r+0xb26>
 8007bae:	9b02      	ldr	r3, [sp, #8]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	bfc8      	it	gt
 8007bb4:	461d      	movgt	r5, r3
 8007bb6:	9b01      	ldr	r3, [sp, #4]
 8007bb8:	bfd8      	it	le
 8007bba:	2501      	movle	r5, #1
 8007bbc:	441d      	add	r5, r3
 8007bbe:	f04f 0800 	mov.w	r8, #0
 8007bc2:	ee18 1a10 	vmov	r1, s16
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f000 ff27 	bl	8008a1c <__lshift>
 8007bce:	4631      	mov	r1, r6
 8007bd0:	ee08 0a10 	vmov	s16, r0
 8007bd4:	f000 ff92 	bl	8008afc <__mcmp>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	dc91      	bgt.n	8007b00 <_dtoa_r+0xaa8>
 8007bdc:	d102      	bne.n	8007be4 <_dtoa_r+0xb8c>
 8007bde:	f01a 0f01 	tst.w	sl, #1
 8007be2:	d18d      	bne.n	8007b00 <_dtoa_r+0xaa8>
 8007be4:	462b      	mov	r3, r5
 8007be6:	461d      	mov	r5, r3
 8007be8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bec:	2a30      	cmp	r2, #48	; 0x30
 8007bee:	d0fa      	beq.n	8007be6 <_dtoa_r+0xb8e>
 8007bf0:	e6d7      	b.n	80079a2 <_dtoa_r+0x94a>
 8007bf2:	9a01      	ldr	r2, [sp, #4]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d184      	bne.n	8007b02 <_dtoa_r+0xaaa>
 8007bf8:	9b00      	ldr	r3, [sp, #0]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	2331      	movs	r3, #49	; 0x31
 8007c00:	7013      	strb	r3, [r2, #0]
 8007c02:	e6ce      	b.n	80079a2 <_dtoa_r+0x94a>
 8007c04:	4b09      	ldr	r3, [pc, #36]	; (8007c2c <_dtoa_r+0xbd4>)
 8007c06:	f7ff ba95 	b.w	8007134 <_dtoa_r+0xdc>
 8007c0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f47f aa6e 	bne.w	80070ee <_dtoa_r+0x96>
 8007c12:	4b07      	ldr	r3, [pc, #28]	; (8007c30 <_dtoa_r+0xbd8>)
 8007c14:	f7ff ba8e 	b.w	8007134 <_dtoa_r+0xdc>
 8007c18:	9b02      	ldr	r3, [sp, #8]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	dcae      	bgt.n	8007b7c <_dtoa_r+0xb24>
 8007c1e:	9b06      	ldr	r3, [sp, #24]
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	f73f aea8 	bgt.w	8007976 <_dtoa_r+0x91e>
 8007c26:	e7a9      	b.n	8007b7c <_dtoa_r+0xb24>
 8007c28:	08009ec8 	.word	0x08009ec8
 8007c2c:	08009ccc 	.word	0x08009ccc
 8007c30:	08009e49 	.word	0x08009e49

08007c34 <std>:
 8007c34:	2300      	movs	r3, #0
 8007c36:	b510      	push	{r4, lr}
 8007c38:	4604      	mov	r4, r0
 8007c3a:	e9c0 3300 	strd	r3, r3, [r0]
 8007c3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c42:	6083      	str	r3, [r0, #8]
 8007c44:	8181      	strh	r1, [r0, #12]
 8007c46:	6643      	str	r3, [r0, #100]	; 0x64
 8007c48:	81c2      	strh	r2, [r0, #14]
 8007c4a:	6183      	str	r3, [r0, #24]
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	2208      	movs	r2, #8
 8007c50:	305c      	adds	r0, #92	; 0x5c
 8007c52:	f7fd fb01 	bl	8005258 <memset>
 8007c56:	4b05      	ldr	r3, [pc, #20]	; (8007c6c <std+0x38>)
 8007c58:	6263      	str	r3, [r4, #36]	; 0x24
 8007c5a:	4b05      	ldr	r3, [pc, #20]	; (8007c70 <std+0x3c>)
 8007c5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c5e:	4b05      	ldr	r3, [pc, #20]	; (8007c74 <std+0x40>)
 8007c60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c62:	4b05      	ldr	r3, [pc, #20]	; (8007c78 <std+0x44>)
 8007c64:	6224      	str	r4, [r4, #32]
 8007c66:	6323      	str	r3, [r4, #48]	; 0x30
 8007c68:	bd10      	pop	{r4, pc}
 8007c6a:	bf00      	nop
 8007c6c:	08009461 	.word	0x08009461
 8007c70:	08009483 	.word	0x08009483
 8007c74:	080094bb 	.word	0x080094bb
 8007c78:	080094df 	.word	0x080094df

08007c7c <_cleanup_r>:
 8007c7c:	4901      	ldr	r1, [pc, #4]	; (8007c84 <_cleanup_r+0x8>)
 8007c7e:	f000 b8af 	b.w	8007de0 <_fwalk_reent>
 8007c82:	bf00      	nop
 8007c84:	08009839 	.word	0x08009839

08007c88 <__sfmoreglue>:
 8007c88:	b570      	push	{r4, r5, r6, lr}
 8007c8a:	2268      	movs	r2, #104	; 0x68
 8007c8c:	1e4d      	subs	r5, r1, #1
 8007c8e:	4355      	muls	r5, r2
 8007c90:	460e      	mov	r6, r1
 8007c92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c96:	f7fd fb69 	bl	800536c <_malloc_r>
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	b140      	cbz	r0, 8007cb0 <__sfmoreglue+0x28>
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	e9c0 1600 	strd	r1, r6, [r0]
 8007ca4:	300c      	adds	r0, #12
 8007ca6:	60a0      	str	r0, [r4, #8]
 8007ca8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007cac:	f7fd fad4 	bl	8005258 <memset>
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	bd70      	pop	{r4, r5, r6, pc}

08007cb4 <__sfp_lock_acquire>:
 8007cb4:	4801      	ldr	r0, [pc, #4]	; (8007cbc <__sfp_lock_acquire+0x8>)
 8007cb6:	f000 bc26 	b.w	8008506 <__retarget_lock_acquire_recursive>
 8007cba:	bf00      	nop
 8007cbc:	20000461 	.word	0x20000461

08007cc0 <__sfp_lock_release>:
 8007cc0:	4801      	ldr	r0, [pc, #4]	; (8007cc8 <__sfp_lock_release+0x8>)
 8007cc2:	f000 bc21 	b.w	8008508 <__retarget_lock_release_recursive>
 8007cc6:	bf00      	nop
 8007cc8:	20000461 	.word	0x20000461

08007ccc <__sinit_lock_acquire>:
 8007ccc:	4801      	ldr	r0, [pc, #4]	; (8007cd4 <__sinit_lock_acquire+0x8>)
 8007cce:	f000 bc1a 	b.w	8008506 <__retarget_lock_acquire_recursive>
 8007cd2:	bf00      	nop
 8007cd4:	20000462 	.word	0x20000462

08007cd8 <__sinit_lock_release>:
 8007cd8:	4801      	ldr	r0, [pc, #4]	; (8007ce0 <__sinit_lock_release+0x8>)
 8007cda:	f000 bc15 	b.w	8008508 <__retarget_lock_release_recursive>
 8007cde:	bf00      	nop
 8007ce0:	20000462 	.word	0x20000462

08007ce4 <__sinit>:
 8007ce4:	b510      	push	{r4, lr}
 8007ce6:	4604      	mov	r4, r0
 8007ce8:	f7ff fff0 	bl	8007ccc <__sinit_lock_acquire>
 8007cec:	69a3      	ldr	r3, [r4, #24]
 8007cee:	b11b      	cbz	r3, 8007cf8 <__sinit+0x14>
 8007cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cf4:	f7ff bff0 	b.w	8007cd8 <__sinit_lock_release>
 8007cf8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007cfc:	6523      	str	r3, [r4, #80]	; 0x50
 8007cfe:	4b13      	ldr	r3, [pc, #76]	; (8007d4c <__sinit+0x68>)
 8007d00:	4a13      	ldr	r2, [pc, #76]	; (8007d50 <__sinit+0x6c>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d06:	42a3      	cmp	r3, r4
 8007d08:	bf04      	itt	eq
 8007d0a:	2301      	moveq	r3, #1
 8007d0c:	61a3      	streq	r3, [r4, #24]
 8007d0e:	4620      	mov	r0, r4
 8007d10:	f000 f820 	bl	8007d54 <__sfp>
 8007d14:	6060      	str	r0, [r4, #4]
 8007d16:	4620      	mov	r0, r4
 8007d18:	f000 f81c 	bl	8007d54 <__sfp>
 8007d1c:	60a0      	str	r0, [r4, #8]
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f000 f818 	bl	8007d54 <__sfp>
 8007d24:	2200      	movs	r2, #0
 8007d26:	60e0      	str	r0, [r4, #12]
 8007d28:	2104      	movs	r1, #4
 8007d2a:	6860      	ldr	r0, [r4, #4]
 8007d2c:	f7ff ff82 	bl	8007c34 <std>
 8007d30:	68a0      	ldr	r0, [r4, #8]
 8007d32:	2201      	movs	r2, #1
 8007d34:	2109      	movs	r1, #9
 8007d36:	f7ff ff7d 	bl	8007c34 <std>
 8007d3a:	68e0      	ldr	r0, [r4, #12]
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	2112      	movs	r1, #18
 8007d40:	f7ff ff78 	bl	8007c34 <std>
 8007d44:	2301      	movs	r3, #1
 8007d46:	61a3      	str	r3, [r4, #24]
 8007d48:	e7d2      	b.n	8007cf0 <__sinit+0xc>
 8007d4a:	bf00      	nop
 8007d4c:	08009cb8 	.word	0x08009cb8
 8007d50:	08007c7d 	.word	0x08007c7d

08007d54 <__sfp>:
 8007d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d56:	4607      	mov	r7, r0
 8007d58:	f7ff ffac 	bl	8007cb4 <__sfp_lock_acquire>
 8007d5c:	4b1e      	ldr	r3, [pc, #120]	; (8007dd8 <__sfp+0x84>)
 8007d5e:	681e      	ldr	r6, [r3, #0]
 8007d60:	69b3      	ldr	r3, [r6, #24]
 8007d62:	b913      	cbnz	r3, 8007d6a <__sfp+0x16>
 8007d64:	4630      	mov	r0, r6
 8007d66:	f7ff ffbd 	bl	8007ce4 <__sinit>
 8007d6a:	3648      	adds	r6, #72	; 0x48
 8007d6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d70:	3b01      	subs	r3, #1
 8007d72:	d503      	bpl.n	8007d7c <__sfp+0x28>
 8007d74:	6833      	ldr	r3, [r6, #0]
 8007d76:	b30b      	cbz	r3, 8007dbc <__sfp+0x68>
 8007d78:	6836      	ldr	r6, [r6, #0]
 8007d7a:	e7f7      	b.n	8007d6c <__sfp+0x18>
 8007d7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d80:	b9d5      	cbnz	r5, 8007db8 <__sfp+0x64>
 8007d82:	4b16      	ldr	r3, [pc, #88]	; (8007ddc <__sfp+0x88>)
 8007d84:	60e3      	str	r3, [r4, #12]
 8007d86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d8a:	6665      	str	r5, [r4, #100]	; 0x64
 8007d8c:	f000 fbba 	bl	8008504 <__retarget_lock_init_recursive>
 8007d90:	f7ff ff96 	bl	8007cc0 <__sfp_lock_release>
 8007d94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d9c:	6025      	str	r5, [r4, #0]
 8007d9e:	61a5      	str	r5, [r4, #24]
 8007da0:	2208      	movs	r2, #8
 8007da2:	4629      	mov	r1, r5
 8007da4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007da8:	f7fd fa56 	bl	8005258 <memset>
 8007dac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007db0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007db4:	4620      	mov	r0, r4
 8007db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007db8:	3468      	adds	r4, #104	; 0x68
 8007dba:	e7d9      	b.n	8007d70 <__sfp+0x1c>
 8007dbc:	2104      	movs	r1, #4
 8007dbe:	4638      	mov	r0, r7
 8007dc0:	f7ff ff62 	bl	8007c88 <__sfmoreglue>
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	6030      	str	r0, [r6, #0]
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	d1d5      	bne.n	8007d78 <__sfp+0x24>
 8007dcc:	f7ff ff78 	bl	8007cc0 <__sfp_lock_release>
 8007dd0:	230c      	movs	r3, #12
 8007dd2:	603b      	str	r3, [r7, #0]
 8007dd4:	e7ee      	b.n	8007db4 <__sfp+0x60>
 8007dd6:	bf00      	nop
 8007dd8:	08009cb8 	.word	0x08009cb8
 8007ddc:	ffff0001 	.word	0xffff0001

08007de0 <_fwalk_reent>:
 8007de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de4:	4606      	mov	r6, r0
 8007de6:	4688      	mov	r8, r1
 8007de8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007dec:	2700      	movs	r7, #0
 8007dee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007df2:	f1b9 0901 	subs.w	r9, r9, #1
 8007df6:	d505      	bpl.n	8007e04 <_fwalk_reent+0x24>
 8007df8:	6824      	ldr	r4, [r4, #0]
 8007dfa:	2c00      	cmp	r4, #0
 8007dfc:	d1f7      	bne.n	8007dee <_fwalk_reent+0xe>
 8007dfe:	4638      	mov	r0, r7
 8007e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e04:	89ab      	ldrh	r3, [r5, #12]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d907      	bls.n	8007e1a <_fwalk_reent+0x3a>
 8007e0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	d003      	beq.n	8007e1a <_fwalk_reent+0x3a>
 8007e12:	4629      	mov	r1, r5
 8007e14:	4630      	mov	r0, r6
 8007e16:	47c0      	blx	r8
 8007e18:	4307      	orrs	r7, r0
 8007e1a:	3568      	adds	r5, #104	; 0x68
 8007e1c:	e7e9      	b.n	8007df2 <_fwalk_reent+0x12>

08007e1e <rshift>:
 8007e1e:	6903      	ldr	r3, [r0, #16]
 8007e20:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007e24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e28:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007e2c:	f100 0414 	add.w	r4, r0, #20
 8007e30:	dd45      	ble.n	8007ebe <rshift+0xa0>
 8007e32:	f011 011f 	ands.w	r1, r1, #31
 8007e36:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007e3a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007e3e:	d10c      	bne.n	8007e5a <rshift+0x3c>
 8007e40:	f100 0710 	add.w	r7, r0, #16
 8007e44:	4629      	mov	r1, r5
 8007e46:	42b1      	cmp	r1, r6
 8007e48:	d334      	bcc.n	8007eb4 <rshift+0x96>
 8007e4a:	1a9b      	subs	r3, r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	1eea      	subs	r2, r5, #3
 8007e50:	4296      	cmp	r6, r2
 8007e52:	bf38      	it	cc
 8007e54:	2300      	movcc	r3, #0
 8007e56:	4423      	add	r3, r4
 8007e58:	e015      	b.n	8007e86 <rshift+0x68>
 8007e5a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007e5e:	f1c1 0820 	rsb	r8, r1, #32
 8007e62:	40cf      	lsrs	r7, r1
 8007e64:	f105 0e04 	add.w	lr, r5, #4
 8007e68:	46a1      	mov	r9, r4
 8007e6a:	4576      	cmp	r6, lr
 8007e6c:	46f4      	mov	ip, lr
 8007e6e:	d815      	bhi.n	8007e9c <rshift+0x7e>
 8007e70:	1a9a      	subs	r2, r3, r2
 8007e72:	0092      	lsls	r2, r2, #2
 8007e74:	3a04      	subs	r2, #4
 8007e76:	3501      	adds	r5, #1
 8007e78:	42ae      	cmp	r6, r5
 8007e7a:	bf38      	it	cc
 8007e7c:	2200      	movcc	r2, #0
 8007e7e:	18a3      	adds	r3, r4, r2
 8007e80:	50a7      	str	r7, [r4, r2]
 8007e82:	b107      	cbz	r7, 8007e86 <rshift+0x68>
 8007e84:	3304      	adds	r3, #4
 8007e86:	1b1a      	subs	r2, r3, r4
 8007e88:	42a3      	cmp	r3, r4
 8007e8a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007e8e:	bf08      	it	eq
 8007e90:	2300      	moveq	r3, #0
 8007e92:	6102      	str	r2, [r0, #16]
 8007e94:	bf08      	it	eq
 8007e96:	6143      	streq	r3, [r0, #20]
 8007e98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e9c:	f8dc c000 	ldr.w	ip, [ip]
 8007ea0:	fa0c fc08 	lsl.w	ip, ip, r8
 8007ea4:	ea4c 0707 	orr.w	r7, ip, r7
 8007ea8:	f849 7b04 	str.w	r7, [r9], #4
 8007eac:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007eb0:	40cf      	lsrs	r7, r1
 8007eb2:	e7da      	b.n	8007e6a <rshift+0x4c>
 8007eb4:	f851 cb04 	ldr.w	ip, [r1], #4
 8007eb8:	f847 cf04 	str.w	ip, [r7, #4]!
 8007ebc:	e7c3      	b.n	8007e46 <rshift+0x28>
 8007ebe:	4623      	mov	r3, r4
 8007ec0:	e7e1      	b.n	8007e86 <rshift+0x68>

08007ec2 <__hexdig_fun>:
 8007ec2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007ec6:	2b09      	cmp	r3, #9
 8007ec8:	d802      	bhi.n	8007ed0 <__hexdig_fun+0xe>
 8007eca:	3820      	subs	r0, #32
 8007ecc:	b2c0      	uxtb	r0, r0
 8007ece:	4770      	bx	lr
 8007ed0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007ed4:	2b05      	cmp	r3, #5
 8007ed6:	d801      	bhi.n	8007edc <__hexdig_fun+0x1a>
 8007ed8:	3847      	subs	r0, #71	; 0x47
 8007eda:	e7f7      	b.n	8007ecc <__hexdig_fun+0xa>
 8007edc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007ee0:	2b05      	cmp	r3, #5
 8007ee2:	d801      	bhi.n	8007ee8 <__hexdig_fun+0x26>
 8007ee4:	3827      	subs	r0, #39	; 0x27
 8007ee6:	e7f1      	b.n	8007ecc <__hexdig_fun+0xa>
 8007ee8:	2000      	movs	r0, #0
 8007eea:	4770      	bx	lr

08007eec <__gethex>:
 8007eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef0:	ed2d 8b02 	vpush	{d8}
 8007ef4:	b089      	sub	sp, #36	; 0x24
 8007ef6:	ee08 0a10 	vmov	s16, r0
 8007efa:	9304      	str	r3, [sp, #16]
 8007efc:	4bb4      	ldr	r3, [pc, #720]	; (80081d0 <__gethex+0x2e4>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	4618      	mov	r0, r3
 8007f04:	468b      	mov	fp, r1
 8007f06:	4690      	mov	r8, r2
 8007f08:	f7f8 f96a 	bl	80001e0 <strlen>
 8007f0c:	9b01      	ldr	r3, [sp, #4]
 8007f0e:	f8db 2000 	ldr.w	r2, [fp]
 8007f12:	4403      	add	r3, r0
 8007f14:	4682      	mov	sl, r0
 8007f16:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007f1a:	9305      	str	r3, [sp, #20]
 8007f1c:	1c93      	adds	r3, r2, #2
 8007f1e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007f22:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007f26:	32fe      	adds	r2, #254	; 0xfe
 8007f28:	18d1      	adds	r1, r2, r3
 8007f2a:	461f      	mov	r7, r3
 8007f2c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007f30:	9100      	str	r1, [sp, #0]
 8007f32:	2830      	cmp	r0, #48	; 0x30
 8007f34:	d0f8      	beq.n	8007f28 <__gethex+0x3c>
 8007f36:	f7ff ffc4 	bl	8007ec2 <__hexdig_fun>
 8007f3a:	4604      	mov	r4, r0
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	d13a      	bne.n	8007fb6 <__gethex+0xca>
 8007f40:	9901      	ldr	r1, [sp, #4]
 8007f42:	4652      	mov	r2, sl
 8007f44:	4638      	mov	r0, r7
 8007f46:	f001 face 	bl	80094e6 <strncmp>
 8007f4a:	4605      	mov	r5, r0
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	d168      	bne.n	8008022 <__gethex+0x136>
 8007f50:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007f54:	eb07 060a 	add.w	r6, r7, sl
 8007f58:	f7ff ffb3 	bl	8007ec2 <__hexdig_fun>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	d062      	beq.n	8008026 <__gethex+0x13a>
 8007f60:	4633      	mov	r3, r6
 8007f62:	7818      	ldrb	r0, [r3, #0]
 8007f64:	2830      	cmp	r0, #48	; 0x30
 8007f66:	461f      	mov	r7, r3
 8007f68:	f103 0301 	add.w	r3, r3, #1
 8007f6c:	d0f9      	beq.n	8007f62 <__gethex+0x76>
 8007f6e:	f7ff ffa8 	bl	8007ec2 <__hexdig_fun>
 8007f72:	2301      	movs	r3, #1
 8007f74:	fab0 f480 	clz	r4, r0
 8007f78:	0964      	lsrs	r4, r4, #5
 8007f7a:	4635      	mov	r5, r6
 8007f7c:	9300      	str	r3, [sp, #0]
 8007f7e:	463a      	mov	r2, r7
 8007f80:	4616      	mov	r6, r2
 8007f82:	3201      	adds	r2, #1
 8007f84:	7830      	ldrb	r0, [r6, #0]
 8007f86:	f7ff ff9c 	bl	8007ec2 <__hexdig_fun>
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	d1f8      	bne.n	8007f80 <__gethex+0x94>
 8007f8e:	9901      	ldr	r1, [sp, #4]
 8007f90:	4652      	mov	r2, sl
 8007f92:	4630      	mov	r0, r6
 8007f94:	f001 faa7 	bl	80094e6 <strncmp>
 8007f98:	b980      	cbnz	r0, 8007fbc <__gethex+0xd0>
 8007f9a:	b94d      	cbnz	r5, 8007fb0 <__gethex+0xc4>
 8007f9c:	eb06 050a 	add.w	r5, r6, sl
 8007fa0:	462a      	mov	r2, r5
 8007fa2:	4616      	mov	r6, r2
 8007fa4:	3201      	adds	r2, #1
 8007fa6:	7830      	ldrb	r0, [r6, #0]
 8007fa8:	f7ff ff8b 	bl	8007ec2 <__hexdig_fun>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d1f8      	bne.n	8007fa2 <__gethex+0xb6>
 8007fb0:	1bad      	subs	r5, r5, r6
 8007fb2:	00ad      	lsls	r5, r5, #2
 8007fb4:	e004      	b.n	8007fc0 <__gethex+0xd4>
 8007fb6:	2400      	movs	r4, #0
 8007fb8:	4625      	mov	r5, r4
 8007fba:	e7e0      	b.n	8007f7e <__gethex+0x92>
 8007fbc:	2d00      	cmp	r5, #0
 8007fbe:	d1f7      	bne.n	8007fb0 <__gethex+0xc4>
 8007fc0:	7833      	ldrb	r3, [r6, #0]
 8007fc2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007fc6:	2b50      	cmp	r3, #80	; 0x50
 8007fc8:	d13b      	bne.n	8008042 <__gethex+0x156>
 8007fca:	7873      	ldrb	r3, [r6, #1]
 8007fcc:	2b2b      	cmp	r3, #43	; 0x2b
 8007fce:	d02c      	beq.n	800802a <__gethex+0x13e>
 8007fd0:	2b2d      	cmp	r3, #45	; 0x2d
 8007fd2:	d02e      	beq.n	8008032 <__gethex+0x146>
 8007fd4:	1c71      	adds	r1, r6, #1
 8007fd6:	f04f 0900 	mov.w	r9, #0
 8007fda:	7808      	ldrb	r0, [r1, #0]
 8007fdc:	f7ff ff71 	bl	8007ec2 <__hexdig_fun>
 8007fe0:	1e43      	subs	r3, r0, #1
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	2b18      	cmp	r3, #24
 8007fe6:	d82c      	bhi.n	8008042 <__gethex+0x156>
 8007fe8:	f1a0 0210 	sub.w	r2, r0, #16
 8007fec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007ff0:	f7ff ff67 	bl	8007ec2 <__hexdig_fun>
 8007ff4:	1e43      	subs	r3, r0, #1
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b18      	cmp	r3, #24
 8007ffa:	d91d      	bls.n	8008038 <__gethex+0x14c>
 8007ffc:	f1b9 0f00 	cmp.w	r9, #0
 8008000:	d000      	beq.n	8008004 <__gethex+0x118>
 8008002:	4252      	negs	r2, r2
 8008004:	4415      	add	r5, r2
 8008006:	f8cb 1000 	str.w	r1, [fp]
 800800a:	b1e4      	cbz	r4, 8008046 <__gethex+0x15a>
 800800c:	9b00      	ldr	r3, [sp, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	bf14      	ite	ne
 8008012:	2700      	movne	r7, #0
 8008014:	2706      	moveq	r7, #6
 8008016:	4638      	mov	r0, r7
 8008018:	b009      	add	sp, #36	; 0x24
 800801a:	ecbd 8b02 	vpop	{d8}
 800801e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008022:	463e      	mov	r6, r7
 8008024:	4625      	mov	r5, r4
 8008026:	2401      	movs	r4, #1
 8008028:	e7ca      	b.n	8007fc0 <__gethex+0xd4>
 800802a:	f04f 0900 	mov.w	r9, #0
 800802e:	1cb1      	adds	r1, r6, #2
 8008030:	e7d3      	b.n	8007fda <__gethex+0xee>
 8008032:	f04f 0901 	mov.w	r9, #1
 8008036:	e7fa      	b.n	800802e <__gethex+0x142>
 8008038:	230a      	movs	r3, #10
 800803a:	fb03 0202 	mla	r2, r3, r2, r0
 800803e:	3a10      	subs	r2, #16
 8008040:	e7d4      	b.n	8007fec <__gethex+0x100>
 8008042:	4631      	mov	r1, r6
 8008044:	e7df      	b.n	8008006 <__gethex+0x11a>
 8008046:	1bf3      	subs	r3, r6, r7
 8008048:	3b01      	subs	r3, #1
 800804a:	4621      	mov	r1, r4
 800804c:	2b07      	cmp	r3, #7
 800804e:	dc0b      	bgt.n	8008068 <__gethex+0x17c>
 8008050:	ee18 0a10 	vmov	r0, s16
 8008054:	f000 fa86 	bl	8008564 <_Balloc>
 8008058:	4604      	mov	r4, r0
 800805a:	b940      	cbnz	r0, 800806e <__gethex+0x182>
 800805c:	4b5d      	ldr	r3, [pc, #372]	; (80081d4 <__gethex+0x2e8>)
 800805e:	4602      	mov	r2, r0
 8008060:	21de      	movs	r1, #222	; 0xde
 8008062:	485d      	ldr	r0, [pc, #372]	; (80081d8 <__gethex+0x2ec>)
 8008064:	f001 fb34 	bl	80096d0 <__assert_func>
 8008068:	3101      	adds	r1, #1
 800806a:	105b      	asrs	r3, r3, #1
 800806c:	e7ee      	b.n	800804c <__gethex+0x160>
 800806e:	f100 0914 	add.w	r9, r0, #20
 8008072:	f04f 0b00 	mov.w	fp, #0
 8008076:	f1ca 0301 	rsb	r3, sl, #1
 800807a:	f8cd 9008 	str.w	r9, [sp, #8]
 800807e:	f8cd b000 	str.w	fp, [sp]
 8008082:	9306      	str	r3, [sp, #24]
 8008084:	42b7      	cmp	r7, r6
 8008086:	d340      	bcc.n	800810a <__gethex+0x21e>
 8008088:	9802      	ldr	r0, [sp, #8]
 800808a:	9b00      	ldr	r3, [sp, #0]
 800808c:	f840 3b04 	str.w	r3, [r0], #4
 8008090:	eba0 0009 	sub.w	r0, r0, r9
 8008094:	1080      	asrs	r0, r0, #2
 8008096:	0146      	lsls	r6, r0, #5
 8008098:	6120      	str	r0, [r4, #16]
 800809a:	4618      	mov	r0, r3
 800809c:	f000 fb54 	bl	8008748 <__hi0bits>
 80080a0:	1a30      	subs	r0, r6, r0
 80080a2:	f8d8 6000 	ldr.w	r6, [r8]
 80080a6:	42b0      	cmp	r0, r6
 80080a8:	dd63      	ble.n	8008172 <__gethex+0x286>
 80080aa:	1b87      	subs	r7, r0, r6
 80080ac:	4639      	mov	r1, r7
 80080ae:	4620      	mov	r0, r4
 80080b0:	f000 fef8 	bl	8008ea4 <__any_on>
 80080b4:	4682      	mov	sl, r0
 80080b6:	b1a8      	cbz	r0, 80080e4 <__gethex+0x1f8>
 80080b8:	1e7b      	subs	r3, r7, #1
 80080ba:	1159      	asrs	r1, r3, #5
 80080bc:	f003 021f 	and.w	r2, r3, #31
 80080c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80080c4:	f04f 0a01 	mov.w	sl, #1
 80080c8:	fa0a f202 	lsl.w	r2, sl, r2
 80080cc:	420a      	tst	r2, r1
 80080ce:	d009      	beq.n	80080e4 <__gethex+0x1f8>
 80080d0:	4553      	cmp	r3, sl
 80080d2:	dd05      	ble.n	80080e0 <__gethex+0x1f4>
 80080d4:	1eb9      	subs	r1, r7, #2
 80080d6:	4620      	mov	r0, r4
 80080d8:	f000 fee4 	bl	8008ea4 <__any_on>
 80080dc:	2800      	cmp	r0, #0
 80080de:	d145      	bne.n	800816c <__gethex+0x280>
 80080e0:	f04f 0a02 	mov.w	sl, #2
 80080e4:	4639      	mov	r1, r7
 80080e6:	4620      	mov	r0, r4
 80080e8:	f7ff fe99 	bl	8007e1e <rshift>
 80080ec:	443d      	add	r5, r7
 80080ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80080f2:	42ab      	cmp	r3, r5
 80080f4:	da4c      	bge.n	8008190 <__gethex+0x2a4>
 80080f6:	ee18 0a10 	vmov	r0, s16
 80080fa:	4621      	mov	r1, r4
 80080fc:	f000 fa72 	bl	80085e4 <_Bfree>
 8008100:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008102:	2300      	movs	r3, #0
 8008104:	6013      	str	r3, [r2, #0]
 8008106:	27a3      	movs	r7, #163	; 0xa3
 8008108:	e785      	b.n	8008016 <__gethex+0x12a>
 800810a:	1e73      	subs	r3, r6, #1
 800810c:	9a05      	ldr	r2, [sp, #20]
 800810e:	9303      	str	r3, [sp, #12]
 8008110:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008114:	4293      	cmp	r3, r2
 8008116:	d019      	beq.n	800814c <__gethex+0x260>
 8008118:	f1bb 0f20 	cmp.w	fp, #32
 800811c:	d107      	bne.n	800812e <__gethex+0x242>
 800811e:	9b02      	ldr	r3, [sp, #8]
 8008120:	9a00      	ldr	r2, [sp, #0]
 8008122:	f843 2b04 	str.w	r2, [r3], #4
 8008126:	9302      	str	r3, [sp, #8]
 8008128:	2300      	movs	r3, #0
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	469b      	mov	fp, r3
 800812e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008132:	f7ff fec6 	bl	8007ec2 <__hexdig_fun>
 8008136:	9b00      	ldr	r3, [sp, #0]
 8008138:	f000 000f 	and.w	r0, r0, #15
 800813c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008140:	4303      	orrs	r3, r0
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	f10b 0b04 	add.w	fp, fp, #4
 8008148:	9b03      	ldr	r3, [sp, #12]
 800814a:	e00d      	b.n	8008168 <__gethex+0x27c>
 800814c:	9b03      	ldr	r3, [sp, #12]
 800814e:	9a06      	ldr	r2, [sp, #24]
 8008150:	4413      	add	r3, r2
 8008152:	42bb      	cmp	r3, r7
 8008154:	d3e0      	bcc.n	8008118 <__gethex+0x22c>
 8008156:	4618      	mov	r0, r3
 8008158:	9901      	ldr	r1, [sp, #4]
 800815a:	9307      	str	r3, [sp, #28]
 800815c:	4652      	mov	r2, sl
 800815e:	f001 f9c2 	bl	80094e6 <strncmp>
 8008162:	9b07      	ldr	r3, [sp, #28]
 8008164:	2800      	cmp	r0, #0
 8008166:	d1d7      	bne.n	8008118 <__gethex+0x22c>
 8008168:	461e      	mov	r6, r3
 800816a:	e78b      	b.n	8008084 <__gethex+0x198>
 800816c:	f04f 0a03 	mov.w	sl, #3
 8008170:	e7b8      	b.n	80080e4 <__gethex+0x1f8>
 8008172:	da0a      	bge.n	800818a <__gethex+0x29e>
 8008174:	1a37      	subs	r7, r6, r0
 8008176:	4621      	mov	r1, r4
 8008178:	ee18 0a10 	vmov	r0, s16
 800817c:	463a      	mov	r2, r7
 800817e:	f000 fc4d 	bl	8008a1c <__lshift>
 8008182:	1bed      	subs	r5, r5, r7
 8008184:	4604      	mov	r4, r0
 8008186:	f100 0914 	add.w	r9, r0, #20
 800818a:	f04f 0a00 	mov.w	sl, #0
 800818e:	e7ae      	b.n	80080ee <__gethex+0x202>
 8008190:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008194:	42a8      	cmp	r0, r5
 8008196:	dd72      	ble.n	800827e <__gethex+0x392>
 8008198:	1b45      	subs	r5, r0, r5
 800819a:	42ae      	cmp	r6, r5
 800819c:	dc36      	bgt.n	800820c <__gethex+0x320>
 800819e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d02a      	beq.n	80081fc <__gethex+0x310>
 80081a6:	2b03      	cmp	r3, #3
 80081a8:	d02c      	beq.n	8008204 <__gethex+0x318>
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d11c      	bne.n	80081e8 <__gethex+0x2fc>
 80081ae:	42ae      	cmp	r6, r5
 80081b0:	d11a      	bne.n	80081e8 <__gethex+0x2fc>
 80081b2:	2e01      	cmp	r6, #1
 80081b4:	d112      	bne.n	80081dc <__gethex+0x2f0>
 80081b6:	9a04      	ldr	r2, [sp, #16]
 80081b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80081bc:	6013      	str	r3, [r2, #0]
 80081be:	2301      	movs	r3, #1
 80081c0:	6123      	str	r3, [r4, #16]
 80081c2:	f8c9 3000 	str.w	r3, [r9]
 80081c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081c8:	2762      	movs	r7, #98	; 0x62
 80081ca:	601c      	str	r4, [r3, #0]
 80081cc:	e723      	b.n	8008016 <__gethex+0x12a>
 80081ce:	bf00      	nop
 80081d0:	08009fa4 	.word	0x08009fa4
 80081d4:	08009ec8 	.word	0x08009ec8
 80081d8:	08009f3c 	.word	0x08009f3c
 80081dc:	1e71      	subs	r1, r6, #1
 80081de:	4620      	mov	r0, r4
 80081e0:	f000 fe60 	bl	8008ea4 <__any_on>
 80081e4:	2800      	cmp	r0, #0
 80081e6:	d1e6      	bne.n	80081b6 <__gethex+0x2ca>
 80081e8:	ee18 0a10 	vmov	r0, s16
 80081ec:	4621      	mov	r1, r4
 80081ee:	f000 f9f9 	bl	80085e4 <_Bfree>
 80081f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80081f4:	2300      	movs	r3, #0
 80081f6:	6013      	str	r3, [r2, #0]
 80081f8:	2750      	movs	r7, #80	; 0x50
 80081fa:	e70c      	b.n	8008016 <__gethex+0x12a>
 80081fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1f2      	bne.n	80081e8 <__gethex+0x2fc>
 8008202:	e7d8      	b.n	80081b6 <__gethex+0x2ca>
 8008204:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1d5      	bne.n	80081b6 <__gethex+0x2ca>
 800820a:	e7ed      	b.n	80081e8 <__gethex+0x2fc>
 800820c:	1e6f      	subs	r7, r5, #1
 800820e:	f1ba 0f00 	cmp.w	sl, #0
 8008212:	d131      	bne.n	8008278 <__gethex+0x38c>
 8008214:	b127      	cbz	r7, 8008220 <__gethex+0x334>
 8008216:	4639      	mov	r1, r7
 8008218:	4620      	mov	r0, r4
 800821a:	f000 fe43 	bl	8008ea4 <__any_on>
 800821e:	4682      	mov	sl, r0
 8008220:	117b      	asrs	r3, r7, #5
 8008222:	2101      	movs	r1, #1
 8008224:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008228:	f007 071f 	and.w	r7, r7, #31
 800822c:	fa01 f707 	lsl.w	r7, r1, r7
 8008230:	421f      	tst	r7, r3
 8008232:	4629      	mov	r1, r5
 8008234:	4620      	mov	r0, r4
 8008236:	bf18      	it	ne
 8008238:	f04a 0a02 	orrne.w	sl, sl, #2
 800823c:	1b76      	subs	r6, r6, r5
 800823e:	f7ff fdee 	bl	8007e1e <rshift>
 8008242:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008246:	2702      	movs	r7, #2
 8008248:	f1ba 0f00 	cmp.w	sl, #0
 800824c:	d048      	beq.n	80082e0 <__gethex+0x3f4>
 800824e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008252:	2b02      	cmp	r3, #2
 8008254:	d015      	beq.n	8008282 <__gethex+0x396>
 8008256:	2b03      	cmp	r3, #3
 8008258:	d017      	beq.n	800828a <__gethex+0x39e>
 800825a:	2b01      	cmp	r3, #1
 800825c:	d109      	bne.n	8008272 <__gethex+0x386>
 800825e:	f01a 0f02 	tst.w	sl, #2
 8008262:	d006      	beq.n	8008272 <__gethex+0x386>
 8008264:	f8d9 0000 	ldr.w	r0, [r9]
 8008268:	ea4a 0a00 	orr.w	sl, sl, r0
 800826c:	f01a 0f01 	tst.w	sl, #1
 8008270:	d10e      	bne.n	8008290 <__gethex+0x3a4>
 8008272:	f047 0710 	orr.w	r7, r7, #16
 8008276:	e033      	b.n	80082e0 <__gethex+0x3f4>
 8008278:	f04f 0a01 	mov.w	sl, #1
 800827c:	e7d0      	b.n	8008220 <__gethex+0x334>
 800827e:	2701      	movs	r7, #1
 8008280:	e7e2      	b.n	8008248 <__gethex+0x35c>
 8008282:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008284:	f1c3 0301 	rsb	r3, r3, #1
 8008288:	9315      	str	r3, [sp, #84]	; 0x54
 800828a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800828c:	2b00      	cmp	r3, #0
 800828e:	d0f0      	beq.n	8008272 <__gethex+0x386>
 8008290:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008294:	f104 0314 	add.w	r3, r4, #20
 8008298:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800829c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80082a0:	f04f 0c00 	mov.w	ip, #0
 80082a4:	4618      	mov	r0, r3
 80082a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80082aa:	f1b2 3fff 	cmp.w	r2, #4294967295
 80082ae:	d01c      	beq.n	80082ea <__gethex+0x3fe>
 80082b0:	3201      	adds	r2, #1
 80082b2:	6002      	str	r2, [r0, #0]
 80082b4:	2f02      	cmp	r7, #2
 80082b6:	f104 0314 	add.w	r3, r4, #20
 80082ba:	d13f      	bne.n	800833c <__gethex+0x450>
 80082bc:	f8d8 2000 	ldr.w	r2, [r8]
 80082c0:	3a01      	subs	r2, #1
 80082c2:	42b2      	cmp	r2, r6
 80082c4:	d10a      	bne.n	80082dc <__gethex+0x3f0>
 80082c6:	1171      	asrs	r1, r6, #5
 80082c8:	2201      	movs	r2, #1
 80082ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80082ce:	f006 061f 	and.w	r6, r6, #31
 80082d2:	fa02 f606 	lsl.w	r6, r2, r6
 80082d6:	421e      	tst	r6, r3
 80082d8:	bf18      	it	ne
 80082da:	4617      	movne	r7, r2
 80082dc:	f047 0720 	orr.w	r7, r7, #32
 80082e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082e2:	601c      	str	r4, [r3, #0]
 80082e4:	9b04      	ldr	r3, [sp, #16]
 80082e6:	601d      	str	r5, [r3, #0]
 80082e8:	e695      	b.n	8008016 <__gethex+0x12a>
 80082ea:	4299      	cmp	r1, r3
 80082ec:	f843 cc04 	str.w	ip, [r3, #-4]
 80082f0:	d8d8      	bhi.n	80082a4 <__gethex+0x3b8>
 80082f2:	68a3      	ldr	r3, [r4, #8]
 80082f4:	459b      	cmp	fp, r3
 80082f6:	db19      	blt.n	800832c <__gethex+0x440>
 80082f8:	6861      	ldr	r1, [r4, #4]
 80082fa:	ee18 0a10 	vmov	r0, s16
 80082fe:	3101      	adds	r1, #1
 8008300:	f000 f930 	bl	8008564 <_Balloc>
 8008304:	4681      	mov	r9, r0
 8008306:	b918      	cbnz	r0, 8008310 <__gethex+0x424>
 8008308:	4b1a      	ldr	r3, [pc, #104]	; (8008374 <__gethex+0x488>)
 800830a:	4602      	mov	r2, r0
 800830c:	2184      	movs	r1, #132	; 0x84
 800830e:	e6a8      	b.n	8008062 <__gethex+0x176>
 8008310:	6922      	ldr	r2, [r4, #16]
 8008312:	3202      	adds	r2, #2
 8008314:	f104 010c 	add.w	r1, r4, #12
 8008318:	0092      	lsls	r2, r2, #2
 800831a:	300c      	adds	r0, #12
 800831c:	f000 f907 	bl	800852e <memcpy>
 8008320:	4621      	mov	r1, r4
 8008322:	ee18 0a10 	vmov	r0, s16
 8008326:	f000 f95d 	bl	80085e4 <_Bfree>
 800832a:	464c      	mov	r4, r9
 800832c:	6923      	ldr	r3, [r4, #16]
 800832e:	1c5a      	adds	r2, r3, #1
 8008330:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008334:	6122      	str	r2, [r4, #16]
 8008336:	2201      	movs	r2, #1
 8008338:	615a      	str	r2, [r3, #20]
 800833a:	e7bb      	b.n	80082b4 <__gethex+0x3c8>
 800833c:	6922      	ldr	r2, [r4, #16]
 800833e:	455a      	cmp	r2, fp
 8008340:	dd0b      	ble.n	800835a <__gethex+0x46e>
 8008342:	2101      	movs	r1, #1
 8008344:	4620      	mov	r0, r4
 8008346:	f7ff fd6a 	bl	8007e1e <rshift>
 800834a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800834e:	3501      	adds	r5, #1
 8008350:	42ab      	cmp	r3, r5
 8008352:	f6ff aed0 	blt.w	80080f6 <__gethex+0x20a>
 8008356:	2701      	movs	r7, #1
 8008358:	e7c0      	b.n	80082dc <__gethex+0x3f0>
 800835a:	f016 061f 	ands.w	r6, r6, #31
 800835e:	d0fa      	beq.n	8008356 <__gethex+0x46a>
 8008360:	4453      	add	r3, sl
 8008362:	f1c6 0620 	rsb	r6, r6, #32
 8008366:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800836a:	f000 f9ed 	bl	8008748 <__hi0bits>
 800836e:	42b0      	cmp	r0, r6
 8008370:	dbe7      	blt.n	8008342 <__gethex+0x456>
 8008372:	e7f0      	b.n	8008356 <__gethex+0x46a>
 8008374:	08009ec8 	.word	0x08009ec8

08008378 <L_shift>:
 8008378:	f1c2 0208 	rsb	r2, r2, #8
 800837c:	0092      	lsls	r2, r2, #2
 800837e:	b570      	push	{r4, r5, r6, lr}
 8008380:	f1c2 0620 	rsb	r6, r2, #32
 8008384:	6843      	ldr	r3, [r0, #4]
 8008386:	6804      	ldr	r4, [r0, #0]
 8008388:	fa03 f506 	lsl.w	r5, r3, r6
 800838c:	432c      	orrs	r4, r5
 800838e:	40d3      	lsrs	r3, r2
 8008390:	6004      	str	r4, [r0, #0]
 8008392:	f840 3f04 	str.w	r3, [r0, #4]!
 8008396:	4288      	cmp	r0, r1
 8008398:	d3f4      	bcc.n	8008384 <L_shift+0xc>
 800839a:	bd70      	pop	{r4, r5, r6, pc}

0800839c <__match>:
 800839c:	b530      	push	{r4, r5, lr}
 800839e:	6803      	ldr	r3, [r0, #0]
 80083a0:	3301      	adds	r3, #1
 80083a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083a6:	b914      	cbnz	r4, 80083ae <__match+0x12>
 80083a8:	6003      	str	r3, [r0, #0]
 80083aa:	2001      	movs	r0, #1
 80083ac:	bd30      	pop	{r4, r5, pc}
 80083ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80083b6:	2d19      	cmp	r5, #25
 80083b8:	bf98      	it	ls
 80083ba:	3220      	addls	r2, #32
 80083bc:	42a2      	cmp	r2, r4
 80083be:	d0f0      	beq.n	80083a2 <__match+0x6>
 80083c0:	2000      	movs	r0, #0
 80083c2:	e7f3      	b.n	80083ac <__match+0x10>

080083c4 <__hexnan>:
 80083c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c8:	680b      	ldr	r3, [r1, #0]
 80083ca:	115e      	asrs	r6, r3, #5
 80083cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80083d0:	f013 031f 	ands.w	r3, r3, #31
 80083d4:	b087      	sub	sp, #28
 80083d6:	bf18      	it	ne
 80083d8:	3604      	addne	r6, #4
 80083da:	2500      	movs	r5, #0
 80083dc:	1f37      	subs	r7, r6, #4
 80083de:	4690      	mov	r8, r2
 80083e0:	6802      	ldr	r2, [r0, #0]
 80083e2:	9301      	str	r3, [sp, #4]
 80083e4:	4682      	mov	sl, r0
 80083e6:	f846 5c04 	str.w	r5, [r6, #-4]
 80083ea:	46b9      	mov	r9, r7
 80083ec:	463c      	mov	r4, r7
 80083ee:	9502      	str	r5, [sp, #8]
 80083f0:	46ab      	mov	fp, r5
 80083f2:	7851      	ldrb	r1, [r2, #1]
 80083f4:	1c53      	adds	r3, r2, #1
 80083f6:	9303      	str	r3, [sp, #12]
 80083f8:	b341      	cbz	r1, 800844c <__hexnan+0x88>
 80083fa:	4608      	mov	r0, r1
 80083fc:	9205      	str	r2, [sp, #20]
 80083fe:	9104      	str	r1, [sp, #16]
 8008400:	f7ff fd5f 	bl	8007ec2 <__hexdig_fun>
 8008404:	2800      	cmp	r0, #0
 8008406:	d14f      	bne.n	80084a8 <__hexnan+0xe4>
 8008408:	9904      	ldr	r1, [sp, #16]
 800840a:	9a05      	ldr	r2, [sp, #20]
 800840c:	2920      	cmp	r1, #32
 800840e:	d818      	bhi.n	8008442 <__hexnan+0x7e>
 8008410:	9b02      	ldr	r3, [sp, #8]
 8008412:	459b      	cmp	fp, r3
 8008414:	dd13      	ble.n	800843e <__hexnan+0x7a>
 8008416:	454c      	cmp	r4, r9
 8008418:	d206      	bcs.n	8008428 <__hexnan+0x64>
 800841a:	2d07      	cmp	r5, #7
 800841c:	dc04      	bgt.n	8008428 <__hexnan+0x64>
 800841e:	462a      	mov	r2, r5
 8008420:	4649      	mov	r1, r9
 8008422:	4620      	mov	r0, r4
 8008424:	f7ff ffa8 	bl	8008378 <L_shift>
 8008428:	4544      	cmp	r4, r8
 800842a:	d950      	bls.n	80084ce <__hexnan+0x10a>
 800842c:	2300      	movs	r3, #0
 800842e:	f1a4 0904 	sub.w	r9, r4, #4
 8008432:	f844 3c04 	str.w	r3, [r4, #-4]
 8008436:	f8cd b008 	str.w	fp, [sp, #8]
 800843a:	464c      	mov	r4, r9
 800843c:	461d      	mov	r5, r3
 800843e:	9a03      	ldr	r2, [sp, #12]
 8008440:	e7d7      	b.n	80083f2 <__hexnan+0x2e>
 8008442:	2929      	cmp	r1, #41	; 0x29
 8008444:	d156      	bne.n	80084f4 <__hexnan+0x130>
 8008446:	3202      	adds	r2, #2
 8008448:	f8ca 2000 	str.w	r2, [sl]
 800844c:	f1bb 0f00 	cmp.w	fp, #0
 8008450:	d050      	beq.n	80084f4 <__hexnan+0x130>
 8008452:	454c      	cmp	r4, r9
 8008454:	d206      	bcs.n	8008464 <__hexnan+0xa0>
 8008456:	2d07      	cmp	r5, #7
 8008458:	dc04      	bgt.n	8008464 <__hexnan+0xa0>
 800845a:	462a      	mov	r2, r5
 800845c:	4649      	mov	r1, r9
 800845e:	4620      	mov	r0, r4
 8008460:	f7ff ff8a 	bl	8008378 <L_shift>
 8008464:	4544      	cmp	r4, r8
 8008466:	d934      	bls.n	80084d2 <__hexnan+0x10e>
 8008468:	f1a8 0204 	sub.w	r2, r8, #4
 800846c:	4623      	mov	r3, r4
 800846e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008472:	f842 1f04 	str.w	r1, [r2, #4]!
 8008476:	429f      	cmp	r7, r3
 8008478:	d2f9      	bcs.n	800846e <__hexnan+0xaa>
 800847a:	1b3b      	subs	r3, r7, r4
 800847c:	f023 0303 	bic.w	r3, r3, #3
 8008480:	3304      	adds	r3, #4
 8008482:	3401      	adds	r4, #1
 8008484:	3e03      	subs	r6, #3
 8008486:	42b4      	cmp	r4, r6
 8008488:	bf88      	it	hi
 800848a:	2304      	movhi	r3, #4
 800848c:	4443      	add	r3, r8
 800848e:	2200      	movs	r2, #0
 8008490:	f843 2b04 	str.w	r2, [r3], #4
 8008494:	429f      	cmp	r7, r3
 8008496:	d2fb      	bcs.n	8008490 <__hexnan+0xcc>
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	b91b      	cbnz	r3, 80084a4 <__hexnan+0xe0>
 800849c:	4547      	cmp	r7, r8
 800849e:	d127      	bne.n	80084f0 <__hexnan+0x12c>
 80084a0:	2301      	movs	r3, #1
 80084a2:	603b      	str	r3, [r7, #0]
 80084a4:	2005      	movs	r0, #5
 80084a6:	e026      	b.n	80084f6 <__hexnan+0x132>
 80084a8:	3501      	adds	r5, #1
 80084aa:	2d08      	cmp	r5, #8
 80084ac:	f10b 0b01 	add.w	fp, fp, #1
 80084b0:	dd06      	ble.n	80084c0 <__hexnan+0xfc>
 80084b2:	4544      	cmp	r4, r8
 80084b4:	d9c3      	bls.n	800843e <__hexnan+0x7a>
 80084b6:	2300      	movs	r3, #0
 80084b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80084bc:	2501      	movs	r5, #1
 80084be:	3c04      	subs	r4, #4
 80084c0:	6822      	ldr	r2, [r4, #0]
 80084c2:	f000 000f 	and.w	r0, r0, #15
 80084c6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80084ca:	6022      	str	r2, [r4, #0]
 80084cc:	e7b7      	b.n	800843e <__hexnan+0x7a>
 80084ce:	2508      	movs	r5, #8
 80084d0:	e7b5      	b.n	800843e <__hexnan+0x7a>
 80084d2:	9b01      	ldr	r3, [sp, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d0df      	beq.n	8008498 <__hexnan+0xd4>
 80084d8:	f04f 32ff 	mov.w	r2, #4294967295
 80084dc:	f1c3 0320 	rsb	r3, r3, #32
 80084e0:	fa22 f303 	lsr.w	r3, r2, r3
 80084e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80084e8:	401a      	ands	r2, r3
 80084ea:	f846 2c04 	str.w	r2, [r6, #-4]
 80084ee:	e7d3      	b.n	8008498 <__hexnan+0xd4>
 80084f0:	3f04      	subs	r7, #4
 80084f2:	e7d1      	b.n	8008498 <__hexnan+0xd4>
 80084f4:	2004      	movs	r0, #4
 80084f6:	b007      	add	sp, #28
 80084f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080084fc <_localeconv_r>:
 80084fc:	4800      	ldr	r0, [pc, #0]	; (8008500 <_localeconv_r+0x4>)
 80084fe:	4770      	bx	lr
 8008500:	20000204 	.word	0x20000204

08008504 <__retarget_lock_init_recursive>:
 8008504:	4770      	bx	lr

08008506 <__retarget_lock_acquire_recursive>:
 8008506:	4770      	bx	lr

08008508 <__retarget_lock_release_recursive>:
 8008508:	4770      	bx	lr

0800850a <__ascii_mbtowc>:
 800850a:	b082      	sub	sp, #8
 800850c:	b901      	cbnz	r1, 8008510 <__ascii_mbtowc+0x6>
 800850e:	a901      	add	r1, sp, #4
 8008510:	b142      	cbz	r2, 8008524 <__ascii_mbtowc+0x1a>
 8008512:	b14b      	cbz	r3, 8008528 <__ascii_mbtowc+0x1e>
 8008514:	7813      	ldrb	r3, [r2, #0]
 8008516:	600b      	str	r3, [r1, #0]
 8008518:	7812      	ldrb	r2, [r2, #0]
 800851a:	1e10      	subs	r0, r2, #0
 800851c:	bf18      	it	ne
 800851e:	2001      	movne	r0, #1
 8008520:	b002      	add	sp, #8
 8008522:	4770      	bx	lr
 8008524:	4610      	mov	r0, r2
 8008526:	e7fb      	b.n	8008520 <__ascii_mbtowc+0x16>
 8008528:	f06f 0001 	mvn.w	r0, #1
 800852c:	e7f8      	b.n	8008520 <__ascii_mbtowc+0x16>

0800852e <memcpy>:
 800852e:	440a      	add	r2, r1
 8008530:	4291      	cmp	r1, r2
 8008532:	f100 33ff 	add.w	r3, r0, #4294967295
 8008536:	d100      	bne.n	800853a <memcpy+0xc>
 8008538:	4770      	bx	lr
 800853a:	b510      	push	{r4, lr}
 800853c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008540:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008544:	4291      	cmp	r1, r2
 8008546:	d1f9      	bne.n	800853c <memcpy+0xe>
 8008548:	bd10      	pop	{r4, pc}
	...

0800854c <__malloc_lock>:
 800854c:	4801      	ldr	r0, [pc, #4]	; (8008554 <__malloc_lock+0x8>)
 800854e:	f7ff bfda 	b.w	8008506 <__retarget_lock_acquire_recursive>
 8008552:	bf00      	nop
 8008554:	20000460 	.word	0x20000460

08008558 <__malloc_unlock>:
 8008558:	4801      	ldr	r0, [pc, #4]	; (8008560 <__malloc_unlock+0x8>)
 800855a:	f7ff bfd5 	b.w	8008508 <__retarget_lock_release_recursive>
 800855e:	bf00      	nop
 8008560:	20000460 	.word	0x20000460

08008564 <_Balloc>:
 8008564:	b570      	push	{r4, r5, r6, lr}
 8008566:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008568:	4604      	mov	r4, r0
 800856a:	460d      	mov	r5, r1
 800856c:	b976      	cbnz	r6, 800858c <_Balloc+0x28>
 800856e:	2010      	movs	r0, #16
 8008570:	f7fc fe50 	bl	8005214 <malloc>
 8008574:	4602      	mov	r2, r0
 8008576:	6260      	str	r0, [r4, #36]	; 0x24
 8008578:	b920      	cbnz	r0, 8008584 <_Balloc+0x20>
 800857a:	4b18      	ldr	r3, [pc, #96]	; (80085dc <_Balloc+0x78>)
 800857c:	4818      	ldr	r0, [pc, #96]	; (80085e0 <_Balloc+0x7c>)
 800857e:	2166      	movs	r1, #102	; 0x66
 8008580:	f001 f8a6 	bl	80096d0 <__assert_func>
 8008584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008588:	6006      	str	r6, [r0, #0]
 800858a:	60c6      	str	r6, [r0, #12]
 800858c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800858e:	68f3      	ldr	r3, [r6, #12]
 8008590:	b183      	cbz	r3, 80085b4 <_Balloc+0x50>
 8008592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800859a:	b9b8      	cbnz	r0, 80085cc <_Balloc+0x68>
 800859c:	2101      	movs	r1, #1
 800859e:	fa01 f605 	lsl.w	r6, r1, r5
 80085a2:	1d72      	adds	r2, r6, #5
 80085a4:	0092      	lsls	r2, r2, #2
 80085a6:	4620      	mov	r0, r4
 80085a8:	f7fc fe5e 	bl	8005268 <_calloc_r>
 80085ac:	b160      	cbz	r0, 80085c8 <_Balloc+0x64>
 80085ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085b2:	e00e      	b.n	80085d2 <_Balloc+0x6e>
 80085b4:	2221      	movs	r2, #33	; 0x21
 80085b6:	2104      	movs	r1, #4
 80085b8:	4620      	mov	r0, r4
 80085ba:	f7fc fe55 	bl	8005268 <_calloc_r>
 80085be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085c0:	60f0      	str	r0, [r6, #12]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1e4      	bne.n	8008592 <_Balloc+0x2e>
 80085c8:	2000      	movs	r0, #0
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	6802      	ldr	r2, [r0, #0]
 80085ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085d2:	2300      	movs	r3, #0
 80085d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085d8:	e7f7      	b.n	80085ca <_Balloc+0x66>
 80085da:	bf00      	nop
 80085dc:	08009e56 	.word	0x08009e56
 80085e0:	08009fb8 	.word	0x08009fb8

080085e4 <_Bfree>:
 80085e4:	b570      	push	{r4, r5, r6, lr}
 80085e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80085e8:	4605      	mov	r5, r0
 80085ea:	460c      	mov	r4, r1
 80085ec:	b976      	cbnz	r6, 800860c <_Bfree+0x28>
 80085ee:	2010      	movs	r0, #16
 80085f0:	f7fc fe10 	bl	8005214 <malloc>
 80085f4:	4602      	mov	r2, r0
 80085f6:	6268      	str	r0, [r5, #36]	; 0x24
 80085f8:	b920      	cbnz	r0, 8008604 <_Bfree+0x20>
 80085fa:	4b09      	ldr	r3, [pc, #36]	; (8008620 <_Bfree+0x3c>)
 80085fc:	4809      	ldr	r0, [pc, #36]	; (8008624 <_Bfree+0x40>)
 80085fe:	218a      	movs	r1, #138	; 0x8a
 8008600:	f001 f866 	bl	80096d0 <__assert_func>
 8008604:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008608:	6006      	str	r6, [r0, #0]
 800860a:	60c6      	str	r6, [r0, #12]
 800860c:	b13c      	cbz	r4, 800861e <_Bfree+0x3a>
 800860e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008610:	6862      	ldr	r2, [r4, #4]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008618:	6021      	str	r1, [r4, #0]
 800861a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800861e:	bd70      	pop	{r4, r5, r6, pc}
 8008620:	08009e56 	.word	0x08009e56
 8008624:	08009fb8 	.word	0x08009fb8

08008628 <__multadd>:
 8008628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800862c:	690d      	ldr	r5, [r1, #16]
 800862e:	4607      	mov	r7, r0
 8008630:	460c      	mov	r4, r1
 8008632:	461e      	mov	r6, r3
 8008634:	f101 0c14 	add.w	ip, r1, #20
 8008638:	2000      	movs	r0, #0
 800863a:	f8dc 3000 	ldr.w	r3, [ip]
 800863e:	b299      	uxth	r1, r3
 8008640:	fb02 6101 	mla	r1, r2, r1, r6
 8008644:	0c1e      	lsrs	r6, r3, #16
 8008646:	0c0b      	lsrs	r3, r1, #16
 8008648:	fb02 3306 	mla	r3, r2, r6, r3
 800864c:	b289      	uxth	r1, r1
 800864e:	3001      	adds	r0, #1
 8008650:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008654:	4285      	cmp	r5, r0
 8008656:	f84c 1b04 	str.w	r1, [ip], #4
 800865a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800865e:	dcec      	bgt.n	800863a <__multadd+0x12>
 8008660:	b30e      	cbz	r6, 80086a6 <__multadd+0x7e>
 8008662:	68a3      	ldr	r3, [r4, #8]
 8008664:	42ab      	cmp	r3, r5
 8008666:	dc19      	bgt.n	800869c <__multadd+0x74>
 8008668:	6861      	ldr	r1, [r4, #4]
 800866a:	4638      	mov	r0, r7
 800866c:	3101      	adds	r1, #1
 800866e:	f7ff ff79 	bl	8008564 <_Balloc>
 8008672:	4680      	mov	r8, r0
 8008674:	b928      	cbnz	r0, 8008682 <__multadd+0x5a>
 8008676:	4602      	mov	r2, r0
 8008678:	4b0c      	ldr	r3, [pc, #48]	; (80086ac <__multadd+0x84>)
 800867a:	480d      	ldr	r0, [pc, #52]	; (80086b0 <__multadd+0x88>)
 800867c:	21b5      	movs	r1, #181	; 0xb5
 800867e:	f001 f827 	bl	80096d0 <__assert_func>
 8008682:	6922      	ldr	r2, [r4, #16]
 8008684:	3202      	adds	r2, #2
 8008686:	f104 010c 	add.w	r1, r4, #12
 800868a:	0092      	lsls	r2, r2, #2
 800868c:	300c      	adds	r0, #12
 800868e:	f7ff ff4e 	bl	800852e <memcpy>
 8008692:	4621      	mov	r1, r4
 8008694:	4638      	mov	r0, r7
 8008696:	f7ff ffa5 	bl	80085e4 <_Bfree>
 800869a:	4644      	mov	r4, r8
 800869c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086a0:	3501      	adds	r5, #1
 80086a2:	615e      	str	r6, [r3, #20]
 80086a4:	6125      	str	r5, [r4, #16]
 80086a6:	4620      	mov	r0, r4
 80086a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ac:	08009ec8 	.word	0x08009ec8
 80086b0:	08009fb8 	.word	0x08009fb8

080086b4 <__s2b>:
 80086b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086b8:	460c      	mov	r4, r1
 80086ba:	4615      	mov	r5, r2
 80086bc:	461f      	mov	r7, r3
 80086be:	2209      	movs	r2, #9
 80086c0:	3308      	adds	r3, #8
 80086c2:	4606      	mov	r6, r0
 80086c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80086c8:	2100      	movs	r1, #0
 80086ca:	2201      	movs	r2, #1
 80086cc:	429a      	cmp	r2, r3
 80086ce:	db09      	blt.n	80086e4 <__s2b+0x30>
 80086d0:	4630      	mov	r0, r6
 80086d2:	f7ff ff47 	bl	8008564 <_Balloc>
 80086d6:	b940      	cbnz	r0, 80086ea <__s2b+0x36>
 80086d8:	4602      	mov	r2, r0
 80086da:	4b19      	ldr	r3, [pc, #100]	; (8008740 <__s2b+0x8c>)
 80086dc:	4819      	ldr	r0, [pc, #100]	; (8008744 <__s2b+0x90>)
 80086de:	21ce      	movs	r1, #206	; 0xce
 80086e0:	f000 fff6 	bl	80096d0 <__assert_func>
 80086e4:	0052      	lsls	r2, r2, #1
 80086e6:	3101      	adds	r1, #1
 80086e8:	e7f0      	b.n	80086cc <__s2b+0x18>
 80086ea:	9b08      	ldr	r3, [sp, #32]
 80086ec:	6143      	str	r3, [r0, #20]
 80086ee:	2d09      	cmp	r5, #9
 80086f0:	f04f 0301 	mov.w	r3, #1
 80086f4:	6103      	str	r3, [r0, #16]
 80086f6:	dd16      	ble.n	8008726 <__s2b+0x72>
 80086f8:	f104 0909 	add.w	r9, r4, #9
 80086fc:	46c8      	mov	r8, r9
 80086fe:	442c      	add	r4, r5
 8008700:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008704:	4601      	mov	r1, r0
 8008706:	3b30      	subs	r3, #48	; 0x30
 8008708:	220a      	movs	r2, #10
 800870a:	4630      	mov	r0, r6
 800870c:	f7ff ff8c 	bl	8008628 <__multadd>
 8008710:	45a0      	cmp	r8, r4
 8008712:	d1f5      	bne.n	8008700 <__s2b+0x4c>
 8008714:	f1a5 0408 	sub.w	r4, r5, #8
 8008718:	444c      	add	r4, r9
 800871a:	1b2d      	subs	r5, r5, r4
 800871c:	1963      	adds	r3, r4, r5
 800871e:	42bb      	cmp	r3, r7
 8008720:	db04      	blt.n	800872c <__s2b+0x78>
 8008722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008726:	340a      	adds	r4, #10
 8008728:	2509      	movs	r5, #9
 800872a:	e7f6      	b.n	800871a <__s2b+0x66>
 800872c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008730:	4601      	mov	r1, r0
 8008732:	3b30      	subs	r3, #48	; 0x30
 8008734:	220a      	movs	r2, #10
 8008736:	4630      	mov	r0, r6
 8008738:	f7ff ff76 	bl	8008628 <__multadd>
 800873c:	e7ee      	b.n	800871c <__s2b+0x68>
 800873e:	bf00      	nop
 8008740:	08009ec8 	.word	0x08009ec8
 8008744:	08009fb8 	.word	0x08009fb8

08008748 <__hi0bits>:
 8008748:	0c03      	lsrs	r3, r0, #16
 800874a:	041b      	lsls	r3, r3, #16
 800874c:	b9d3      	cbnz	r3, 8008784 <__hi0bits+0x3c>
 800874e:	0400      	lsls	r0, r0, #16
 8008750:	2310      	movs	r3, #16
 8008752:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008756:	bf04      	itt	eq
 8008758:	0200      	lsleq	r0, r0, #8
 800875a:	3308      	addeq	r3, #8
 800875c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008760:	bf04      	itt	eq
 8008762:	0100      	lsleq	r0, r0, #4
 8008764:	3304      	addeq	r3, #4
 8008766:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800876a:	bf04      	itt	eq
 800876c:	0080      	lsleq	r0, r0, #2
 800876e:	3302      	addeq	r3, #2
 8008770:	2800      	cmp	r0, #0
 8008772:	db05      	blt.n	8008780 <__hi0bits+0x38>
 8008774:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008778:	f103 0301 	add.w	r3, r3, #1
 800877c:	bf08      	it	eq
 800877e:	2320      	moveq	r3, #32
 8008780:	4618      	mov	r0, r3
 8008782:	4770      	bx	lr
 8008784:	2300      	movs	r3, #0
 8008786:	e7e4      	b.n	8008752 <__hi0bits+0xa>

08008788 <__lo0bits>:
 8008788:	6803      	ldr	r3, [r0, #0]
 800878a:	f013 0207 	ands.w	r2, r3, #7
 800878e:	4601      	mov	r1, r0
 8008790:	d00b      	beq.n	80087aa <__lo0bits+0x22>
 8008792:	07da      	lsls	r2, r3, #31
 8008794:	d423      	bmi.n	80087de <__lo0bits+0x56>
 8008796:	0798      	lsls	r0, r3, #30
 8008798:	bf49      	itett	mi
 800879a:	085b      	lsrmi	r3, r3, #1
 800879c:	089b      	lsrpl	r3, r3, #2
 800879e:	2001      	movmi	r0, #1
 80087a0:	600b      	strmi	r3, [r1, #0]
 80087a2:	bf5c      	itt	pl
 80087a4:	600b      	strpl	r3, [r1, #0]
 80087a6:	2002      	movpl	r0, #2
 80087a8:	4770      	bx	lr
 80087aa:	b298      	uxth	r0, r3
 80087ac:	b9a8      	cbnz	r0, 80087da <__lo0bits+0x52>
 80087ae:	0c1b      	lsrs	r3, r3, #16
 80087b0:	2010      	movs	r0, #16
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	b90a      	cbnz	r2, 80087ba <__lo0bits+0x32>
 80087b6:	3008      	adds	r0, #8
 80087b8:	0a1b      	lsrs	r3, r3, #8
 80087ba:	071a      	lsls	r2, r3, #28
 80087bc:	bf04      	itt	eq
 80087be:	091b      	lsreq	r3, r3, #4
 80087c0:	3004      	addeq	r0, #4
 80087c2:	079a      	lsls	r2, r3, #30
 80087c4:	bf04      	itt	eq
 80087c6:	089b      	lsreq	r3, r3, #2
 80087c8:	3002      	addeq	r0, #2
 80087ca:	07da      	lsls	r2, r3, #31
 80087cc:	d403      	bmi.n	80087d6 <__lo0bits+0x4e>
 80087ce:	085b      	lsrs	r3, r3, #1
 80087d0:	f100 0001 	add.w	r0, r0, #1
 80087d4:	d005      	beq.n	80087e2 <__lo0bits+0x5a>
 80087d6:	600b      	str	r3, [r1, #0]
 80087d8:	4770      	bx	lr
 80087da:	4610      	mov	r0, r2
 80087dc:	e7e9      	b.n	80087b2 <__lo0bits+0x2a>
 80087de:	2000      	movs	r0, #0
 80087e0:	4770      	bx	lr
 80087e2:	2020      	movs	r0, #32
 80087e4:	4770      	bx	lr
	...

080087e8 <__i2b>:
 80087e8:	b510      	push	{r4, lr}
 80087ea:	460c      	mov	r4, r1
 80087ec:	2101      	movs	r1, #1
 80087ee:	f7ff feb9 	bl	8008564 <_Balloc>
 80087f2:	4602      	mov	r2, r0
 80087f4:	b928      	cbnz	r0, 8008802 <__i2b+0x1a>
 80087f6:	4b05      	ldr	r3, [pc, #20]	; (800880c <__i2b+0x24>)
 80087f8:	4805      	ldr	r0, [pc, #20]	; (8008810 <__i2b+0x28>)
 80087fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80087fe:	f000 ff67 	bl	80096d0 <__assert_func>
 8008802:	2301      	movs	r3, #1
 8008804:	6144      	str	r4, [r0, #20]
 8008806:	6103      	str	r3, [r0, #16]
 8008808:	bd10      	pop	{r4, pc}
 800880a:	bf00      	nop
 800880c:	08009ec8 	.word	0x08009ec8
 8008810:	08009fb8 	.word	0x08009fb8

08008814 <__multiply>:
 8008814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008818:	4691      	mov	r9, r2
 800881a:	690a      	ldr	r2, [r1, #16]
 800881c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008820:	429a      	cmp	r2, r3
 8008822:	bfb8      	it	lt
 8008824:	460b      	movlt	r3, r1
 8008826:	460c      	mov	r4, r1
 8008828:	bfbc      	itt	lt
 800882a:	464c      	movlt	r4, r9
 800882c:	4699      	movlt	r9, r3
 800882e:	6927      	ldr	r7, [r4, #16]
 8008830:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008834:	68a3      	ldr	r3, [r4, #8]
 8008836:	6861      	ldr	r1, [r4, #4]
 8008838:	eb07 060a 	add.w	r6, r7, sl
 800883c:	42b3      	cmp	r3, r6
 800883e:	b085      	sub	sp, #20
 8008840:	bfb8      	it	lt
 8008842:	3101      	addlt	r1, #1
 8008844:	f7ff fe8e 	bl	8008564 <_Balloc>
 8008848:	b930      	cbnz	r0, 8008858 <__multiply+0x44>
 800884a:	4602      	mov	r2, r0
 800884c:	4b44      	ldr	r3, [pc, #272]	; (8008960 <__multiply+0x14c>)
 800884e:	4845      	ldr	r0, [pc, #276]	; (8008964 <__multiply+0x150>)
 8008850:	f240 115d 	movw	r1, #349	; 0x15d
 8008854:	f000 ff3c 	bl	80096d0 <__assert_func>
 8008858:	f100 0514 	add.w	r5, r0, #20
 800885c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008860:	462b      	mov	r3, r5
 8008862:	2200      	movs	r2, #0
 8008864:	4543      	cmp	r3, r8
 8008866:	d321      	bcc.n	80088ac <__multiply+0x98>
 8008868:	f104 0314 	add.w	r3, r4, #20
 800886c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008870:	f109 0314 	add.w	r3, r9, #20
 8008874:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008878:	9202      	str	r2, [sp, #8]
 800887a:	1b3a      	subs	r2, r7, r4
 800887c:	3a15      	subs	r2, #21
 800887e:	f022 0203 	bic.w	r2, r2, #3
 8008882:	3204      	adds	r2, #4
 8008884:	f104 0115 	add.w	r1, r4, #21
 8008888:	428f      	cmp	r7, r1
 800888a:	bf38      	it	cc
 800888c:	2204      	movcc	r2, #4
 800888e:	9201      	str	r2, [sp, #4]
 8008890:	9a02      	ldr	r2, [sp, #8]
 8008892:	9303      	str	r3, [sp, #12]
 8008894:	429a      	cmp	r2, r3
 8008896:	d80c      	bhi.n	80088b2 <__multiply+0x9e>
 8008898:	2e00      	cmp	r6, #0
 800889a:	dd03      	ble.n	80088a4 <__multiply+0x90>
 800889c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d05a      	beq.n	800895a <__multiply+0x146>
 80088a4:	6106      	str	r6, [r0, #16]
 80088a6:	b005      	add	sp, #20
 80088a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ac:	f843 2b04 	str.w	r2, [r3], #4
 80088b0:	e7d8      	b.n	8008864 <__multiply+0x50>
 80088b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80088b6:	f1ba 0f00 	cmp.w	sl, #0
 80088ba:	d024      	beq.n	8008906 <__multiply+0xf2>
 80088bc:	f104 0e14 	add.w	lr, r4, #20
 80088c0:	46a9      	mov	r9, r5
 80088c2:	f04f 0c00 	mov.w	ip, #0
 80088c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80088ca:	f8d9 1000 	ldr.w	r1, [r9]
 80088ce:	fa1f fb82 	uxth.w	fp, r2
 80088d2:	b289      	uxth	r1, r1
 80088d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80088d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80088dc:	f8d9 2000 	ldr.w	r2, [r9]
 80088e0:	4461      	add	r1, ip
 80088e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80088e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80088ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80088ee:	b289      	uxth	r1, r1
 80088f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80088f4:	4577      	cmp	r7, lr
 80088f6:	f849 1b04 	str.w	r1, [r9], #4
 80088fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80088fe:	d8e2      	bhi.n	80088c6 <__multiply+0xb2>
 8008900:	9a01      	ldr	r2, [sp, #4]
 8008902:	f845 c002 	str.w	ip, [r5, r2]
 8008906:	9a03      	ldr	r2, [sp, #12]
 8008908:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800890c:	3304      	adds	r3, #4
 800890e:	f1b9 0f00 	cmp.w	r9, #0
 8008912:	d020      	beq.n	8008956 <__multiply+0x142>
 8008914:	6829      	ldr	r1, [r5, #0]
 8008916:	f104 0c14 	add.w	ip, r4, #20
 800891a:	46ae      	mov	lr, r5
 800891c:	f04f 0a00 	mov.w	sl, #0
 8008920:	f8bc b000 	ldrh.w	fp, [ip]
 8008924:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008928:	fb09 220b 	mla	r2, r9, fp, r2
 800892c:	4492      	add	sl, r2
 800892e:	b289      	uxth	r1, r1
 8008930:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008934:	f84e 1b04 	str.w	r1, [lr], #4
 8008938:	f85c 2b04 	ldr.w	r2, [ip], #4
 800893c:	f8be 1000 	ldrh.w	r1, [lr]
 8008940:	0c12      	lsrs	r2, r2, #16
 8008942:	fb09 1102 	mla	r1, r9, r2, r1
 8008946:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800894a:	4567      	cmp	r7, ip
 800894c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008950:	d8e6      	bhi.n	8008920 <__multiply+0x10c>
 8008952:	9a01      	ldr	r2, [sp, #4]
 8008954:	50a9      	str	r1, [r5, r2]
 8008956:	3504      	adds	r5, #4
 8008958:	e79a      	b.n	8008890 <__multiply+0x7c>
 800895a:	3e01      	subs	r6, #1
 800895c:	e79c      	b.n	8008898 <__multiply+0x84>
 800895e:	bf00      	nop
 8008960:	08009ec8 	.word	0x08009ec8
 8008964:	08009fb8 	.word	0x08009fb8

08008968 <__pow5mult>:
 8008968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800896c:	4615      	mov	r5, r2
 800896e:	f012 0203 	ands.w	r2, r2, #3
 8008972:	4606      	mov	r6, r0
 8008974:	460f      	mov	r7, r1
 8008976:	d007      	beq.n	8008988 <__pow5mult+0x20>
 8008978:	4c25      	ldr	r4, [pc, #148]	; (8008a10 <__pow5mult+0xa8>)
 800897a:	3a01      	subs	r2, #1
 800897c:	2300      	movs	r3, #0
 800897e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008982:	f7ff fe51 	bl	8008628 <__multadd>
 8008986:	4607      	mov	r7, r0
 8008988:	10ad      	asrs	r5, r5, #2
 800898a:	d03d      	beq.n	8008a08 <__pow5mult+0xa0>
 800898c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800898e:	b97c      	cbnz	r4, 80089b0 <__pow5mult+0x48>
 8008990:	2010      	movs	r0, #16
 8008992:	f7fc fc3f 	bl	8005214 <malloc>
 8008996:	4602      	mov	r2, r0
 8008998:	6270      	str	r0, [r6, #36]	; 0x24
 800899a:	b928      	cbnz	r0, 80089a8 <__pow5mult+0x40>
 800899c:	4b1d      	ldr	r3, [pc, #116]	; (8008a14 <__pow5mult+0xac>)
 800899e:	481e      	ldr	r0, [pc, #120]	; (8008a18 <__pow5mult+0xb0>)
 80089a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80089a4:	f000 fe94 	bl	80096d0 <__assert_func>
 80089a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089ac:	6004      	str	r4, [r0, #0]
 80089ae:	60c4      	str	r4, [r0, #12]
 80089b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80089b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089b8:	b94c      	cbnz	r4, 80089ce <__pow5mult+0x66>
 80089ba:	f240 2171 	movw	r1, #625	; 0x271
 80089be:	4630      	mov	r0, r6
 80089c0:	f7ff ff12 	bl	80087e8 <__i2b>
 80089c4:	2300      	movs	r3, #0
 80089c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80089ca:	4604      	mov	r4, r0
 80089cc:	6003      	str	r3, [r0, #0]
 80089ce:	f04f 0900 	mov.w	r9, #0
 80089d2:	07eb      	lsls	r3, r5, #31
 80089d4:	d50a      	bpl.n	80089ec <__pow5mult+0x84>
 80089d6:	4639      	mov	r1, r7
 80089d8:	4622      	mov	r2, r4
 80089da:	4630      	mov	r0, r6
 80089dc:	f7ff ff1a 	bl	8008814 <__multiply>
 80089e0:	4639      	mov	r1, r7
 80089e2:	4680      	mov	r8, r0
 80089e4:	4630      	mov	r0, r6
 80089e6:	f7ff fdfd 	bl	80085e4 <_Bfree>
 80089ea:	4647      	mov	r7, r8
 80089ec:	106d      	asrs	r5, r5, #1
 80089ee:	d00b      	beq.n	8008a08 <__pow5mult+0xa0>
 80089f0:	6820      	ldr	r0, [r4, #0]
 80089f2:	b938      	cbnz	r0, 8008a04 <__pow5mult+0x9c>
 80089f4:	4622      	mov	r2, r4
 80089f6:	4621      	mov	r1, r4
 80089f8:	4630      	mov	r0, r6
 80089fa:	f7ff ff0b 	bl	8008814 <__multiply>
 80089fe:	6020      	str	r0, [r4, #0]
 8008a00:	f8c0 9000 	str.w	r9, [r0]
 8008a04:	4604      	mov	r4, r0
 8008a06:	e7e4      	b.n	80089d2 <__pow5mult+0x6a>
 8008a08:	4638      	mov	r0, r7
 8008a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a0e:	bf00      	nop
 8008a10:	0800a108 	.word	0x0800a108
 8008a14:	08009e56 	.word	0x08009e56
 8008a18:	08009fb8 	.word	0x08009fb8

08008a1c <__lshift>:
 8008a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a20:	460c      	mov	r4, r1
 8008a22:	6849      	ldr	r1, [r1, #4]
 8008a24:	6923      	ldr	r3, [r4, #16]
 8008a26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a2a:	68a3      	ldr	r3, [r4, #8]
 8008a2c:	4607      	mov	r7, r0
 8008a2e:	4691      	mov	r9, r2
 8008a30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a34:	f108 0601 	add.w	r6, r8, #1
 8008a38:	42b3      	cmp	r3, r6
 8008a3a:	db0b      	blt.n	8008a54 <__lshift+0x38>
 8008a3c:	4638      	mov	r0, r7
 8008a3e:	f7ff fd91 	bl	8008564 <_Balloc>
 8008a42:	4605      	mov	r5, r0
 8008a44:	b948      	cbnz	r0, 8008a5a <__lshift+0x3e>
 8008a46:	4602      	mov	r2, r0
 8008a48:	4b2a      	ldr	r3, [pc, #168]	; (8008af4 <__lshift+0xd8>)
 8008a4a:	482b      	ldr	r0, [pc, #172]	; (8008af8 <__lshift+0xdc>)
 8008a4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008a50:	f000 fe3e 	bl	80096d0 <__assert_func>
 8008a54:	3101      	adds	r1, #1
 8008a56:	005b      	lsls	r3, r3, #1
 8008a58:	e7ee      	b.n	8008a38 <__lshift+0x1c>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f100 0114 	add.w	r1, r0, #20
 8008a60:	f100 0210 	add.w	r2, r0, #16
 8008a64:	4618      	mov	r0, r3
 8008a66:	4553      	cmp	r3, sl
 8008a68:	db37      	blt.n	8008ada <__lshift+0xbe>
 8008a6a:	6920      	ldr	r0, [r4, #16]
 8008a6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a70:	f104 0314 	add.w	r3, r4, #20
 8008a74:	f019 091f 	ands.w	r9, r9, #31
 8008a78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a7c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008a80:	d02f      	beq.n	8008ae2 <__lshift+0xc6>
 8008a82:	f1c9 0e20 	rsb	lr, r9, #32
 8008a86:	468a      	mov	sl, r1
 8008a88:	f04f 0c00 	mov.w	ip, #0
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	fa02 f209 	lsl.w	r2, r2, r9
 8008a92:	ea42 020c 	orr.w	r2, r2, ip
 8008a96:	f84a 2b04 	str.w	r2, [sl], #4
 8008a9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a9e:	4298      	cmp	r0, r3
 8008aa0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008aa4:	d8f2      	bhi.n	8008a8c <__lshift+0x70>
 8008aa6:	1b03      	subs	r3, r0, r4
 8008aa8:	3b15      	subs	r3, #21
 8008aaa:	f023 0303 	bic.w	r3, r3, #3
 8008aae:	3304      	adds	r3, #4
 8008ab0:	f104 0215 	add.w	r2, r4, #21
 8008ab4:	4290      	cmp	r0, r2
 8008ab6:	bf38      	it	cc
 8008ab8:	2304      	movcc	r3, #4
 8008aba:	f841 c003 	str.w	ip, [r1, r3]
 8008abe:	f1bc 0f00 	cmp.w	ip, #0
 8008ac2:	d001      	beq.n	8008ac8 <__lshift+0xac>
 8008ac4:	f108 0602 	add.w	r6, r8, #2
 8008ac8:	3e01      	subs	r6, #1
 8008aca:	4638      	mov	r0, r7
 8008acc:	612e      	str	r6, [r5, #16]
 8008ace:	4621      	mov	r1, r4
 8008ad0:	f7ff fd88 	bl	80085e4 <_Bfree>
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ada:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ade:	3301      	adds	r3, #1
 8008ae0:	e7c1      	b.n	8008a66 <__lshift+0x4a>
 8008ae2:	3904      	subs	r1, #4
 8008ae4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ae8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008aec:	4298      	cmp	r0, r3
 8008aee:	d8f9      	bhi.n	8008ae4 <__lshift+0xc8>
 8008af0:	e7ea      	b.n	8008ac8 <__lshift+0xac>
 8008af2:	bf00      	nop
 8008af4:	08009ec8 	.word	0x08009ec8
 8008af8:	08009fb8 	.word	0x08009fb8

08008afc <__mcmp>:
 8008afc:	b530      	push	{r4, r5, lr}
 8008afe:	6902      	ldr	r2, [r0, #16]
 8008b00:	690c      	ldr	r4, [r1, #16]
 8008b02:	1b12      	subs	r2, r2, r4
 8008b04:	d10e      	bne.n	8008b24 <__mcmp+0x28>
 8008b06:	f100 0314 	add.w	r3, r0, #20
 8008b0a:	3114      	adds	r1, #20
 8008b0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008b10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008b14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008b18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008b1c:	42a5      	cmp	r5, r4
 8008b1e:	d003      	beq.n	8008b28 <__mcmp+0x2c>
 8008b20:	d305      	bcc.n	8008b2e <__mcmp+0x32>
 8008b22:	2201      	movs	r2, #1
 8008b24:	4610      	mov	r0, r2
 8008b26:	bd30      	pop	{r4, r5, pc}
 8008b28:	4283      	cmp	r3, r0
 8008b2a:	d3f3      	bcc.n	8008b14 <__mcmp+0x18>
 8008b2c:	e7fa      	b.n	8008b24 <__mcmp+0x28>
 8008b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b32:	e7f7      	b.n	8008b24 <__mcmp+0x28>

08008b34 <__mdiff>:
 8008b34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b38:	460c      	mov	r4, r1
 8008b3a:	4606      	mov	r6, r0
 8008b3c:	4611      	mov	r1, r2
 8008b3e:	4620      	mov	r0, r4
 8008b40:	4690      	mov	r8, r2
 8008b42:	f7ff ffdb 	bl	8008afc <__mcmp>
 8008b46:	1e05      	subs	r5, r0, #0
 8008b48:	d110      	bne.n	8008b6c <__mdiff+0x38>
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	4630      	mov	r0, r6
 8008b4e:	f7ff fd09 	bl	8008564 <_Balloc>
 8008b52:	b930      	cbnz	r0, 8008b62 <__mdiff+0x2e>
 8008b54:	4b3a      	ldr	r3, [pc, #232]	; (8008c40 <__mdiff+0x10c>)
 8008b56:	4602      	mov	r2, r0
 8008b58:	f240 2132 	movw	r1, #562	; 0x232
 8008b5c:	4839      	ldr	r0, [pc, #228]	; (8008c44 <__mdiff+0x110>)
 8008b5e:	f000 fdb7 	bl	80096d0 <__assert_func>
 8008b62:	2301      	movs	r3, #1
 8008b64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b6c:	bfa4      	itt	ge
 8008b6e:	4643      	movge	r3, r8
 8008b70:	46a0      	movge	r8, r4
 8008b72:	4630      	mov	r0, r6
 8008b74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008b78:	bfa6      	itte	ge
 8008b7a:	461c      	movge	r4, r3
 8008b7c:	2500      	movge	r5, #0
 8008b7e:	2501      	movlt	r5, #1
 8008b80:	f7ff fcf0 	bl	8008564 <_Balloc>
 8008b84:	b920      	cbnz	r0, 8008b90 <__mdiff+0x5c>
 8008b86:	4b2e      	ldr	r3, [pc, #184]	; (8008c40 <__mdiff+0x10c>)
 8008b88:	4602      	mov	r2, r0
 8008b8a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008b8e:	e7e5      	b.n	8008b5c <__mdiff+0x28>
 8008b90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008b94:	6926      	ldr	r6, [r4, #16]
 8008b96:	60c5      	str	r5, [r0, #12]
 8008b98:	f104 0914 	add.w	r9, r4, #20
 8008b9c:	f108 0514 	add.w	r5, r8, #20
 8008ba0:	f100 0e14 	add.w	lr, r0, #20
 8008ba4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008ba8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008bac:	f108 0210 	add.w	r2, r8, #16
 8008bb0:	46f2      	mov	sl, lr
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008bb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008bbc:	fa1f f883 	uxth.w	r8, r3
 8008bc0:	fa11 f18b 	uxtah	r1, r1, fp
 8008bc4:	0c1b      	lsrs	r3, r3, #16
 8008bc6:	eba1 0808 	sub.w	r8, r1, r8
 8008bca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008bce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008bd2:	fa1f f888 	uxth.w	r8, r8
 8008bd6:	1419      	asrs	r1, r3, #16
 8008bd8:	454e      	cmp	r6, r9
 8008bda:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008bde:	f84a 3b04 	str.w	r3, [sl], #4
 8008be2:	d8e7      	bhi.n	8008bb4 <__mdiff+0x80>
 8008be4:	1b33      	subs	r3, r6, r4
 8008be6:	3b15      	subs	r3, #21
 8008be8:	f023 0303 	bic.w	r3, r3, #3
 8008bec:	3304      	adds	r3, #4
 8008bee:	3415      	adds	r4, #21
 8008bf0:	42a6      	cmp	r6, r4
 8008bf2:	bf38      	it	cc
 8008bf4:	2304      	movcc	r3, #4
 8008bf6:	441d      	add	r5, r3
 8008bf8:	4473      	add	r3, lr
 8008bfa:	469e      	mov	lr, r3
 8008bfc:	462e      	mov	r6, r5
 8008bfe:	4566      	cmp	r6, ip
 8008c00:	d30e      	bcc.n	8008c20 <__mdiff+0xec>
 8008c02:	f10c 0203 	add.w	r2, ip, #3
 8008c06:	1b52      	subs	r2, r2, r5
 8008c08:	f022 0203 	bic.w	r2, r2, #3
 8008c0c:	3d03      	subs	r5, #3
 8008c0e:	45ac      	cmp	ip, r5
 8008c10:	bf38      	it	cc
 8008c12:	2200      	movcc	r2, #0
 8008c14:	441a      	add	r2, r3
 8008c16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008c1a:	b17b      	cbz	r3, 8008c3c <__mdiff+0x108>
 8008c1c:	6107      	str	r7, [r0, #16]
 8008c1e:	e7a3      	b.n	8008b68 <__mdiff+0x34>
 8008c20:	f856 8b04 	ldr.w	r8, [r6], #4
 8008c24:	fa11 f288 	uxtah	r2, r1, r8
 8008c28:	1414      	asrs	r4, r2, #16
 8008c2a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008c2e:	b292      	uxth	r2, r2
 8008c30:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008c34:	f84e 2b04 	str.w	r2, [lr], #4
 8008c38:	1421      	asrs	r1, r4, #16
 8008c3a:	e7e0      	b.n	8008bfe <__mdiff+0xca>
 8008c3c:	3f01      	subs	r7, #1
 8008c3e:	e7ea      	b.n	8008c16 <__mdiff+0xe2>
 8008c40:	08009ec8 	.word	0x08009ec8
 8008c44:	08009fb8 	.word	0x08009fb8

08008c48 <__ulp>:
 8008c48:	b082      	sub	sp, #8
 8008c4a:	ed8d 0b00 	vstr	d0, [sp]
 8008c4e:	9b01      	ldr	r3, [sp, #4]
 8008c50:	4912      	ldr	r1, [pc, #72]	; (8008c9c <__ulp+0x54>)
 8008c52:	4019      	ands	r1, r3
 8008c54:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008c58:	2900      	cmp	r1, #0
 8008c5a:	dd05      	ble.n	8008c68 <__ulp+0x20>
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	460b      	mov	r3, r1
 8008c60:	ec43 2b10 	vmov	d0, r2, r3
 8008c64:	b002      	add	sp, #8
 8008c66:	4770      	bx	lr
 8008c68:	4249      	negs	r1, r1
 8008c6a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008c6e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008c72:	f04f 0200 	mov.w	r2, #0
 8008c76:	f04f 0300 	mov.w	r3, #0
 8008c7a:	da04      	bge.n	8008c86 <__ulp+0x3e>
 8008c7c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008c80:	fa41 f300 	asr.w	r3, r1, r0
 8008c84:	e7ec      	b.n	8008c60 <__ulp+0x18>
 8008c86:	f1a0 0114 	sub.w	r1, r0, #20
 8008c8a:	291e      	cmp	r1, #30
 8008c8c:	bfda      	itte	le
 8008c8e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008c92:	fa20 f101 	lsrle.w	r1, r0, r1
 8008c96:	2101      	movgt	r1, #1
 8008c98:	460a      	mov	r2, r1
 8008c9a:	e7e1      	b.n	8008c60 <__ulp+0x18>
 8008c9c:	7ff00000 	.word	0x7ff00000

08008ca0 <__b2d>:
 8008ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca2:	6905      	ldr	r5, [r0, #16]
 8008ca4:	f100 0714 	add.w	r7, r0, #20
 8008ca8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008cac:	1f2e      	subs	r6, r5, #4
 8008cae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f7ff fd48 	bl	8008748 <__hi0bits>
 8008cb8:	f1c0 0320 	rsb	r3, r0, #32
 8008cbc:	280a      	cmp	r0, #10
 8008cbe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008d3c <__b2d+0x9c>
 8008cc2:	600b      	str	r3, [r1, #0]
 8008cc4:	dc14      	bgt.n	8008cf0 <__b2d+0x50>
 8008cc6:	f1c0 0e0b 	rsb	lr, r0, #11
 8008cca:	fa24 f10e 	lsr.w	r1, r4, lr
 8008cce:	42b7      	cmp	r7, r6
 8008cd0:	ea41 030c 	orr.w	r3, r1, ip
 8008cd4:	bf34      	ite	cc
 8008cd6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008cda:	2100      	movcs	r1, #0
 8008cdc:	3015      	adds	r0, #21
 8008cde:	fa04 f000 	lsl.w	r0, r4, r0
 8008ce2:	fa21 f10e 	lsr.w	r1, r1, lr
 8008ce6:	ea40 0201 	orr.w	r2, r0, r1
 8008cea:	ec43 2b10 	vmov	d0, r2, r3
 8008cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cf0:	42b7      	cmp	r7, r6
 8008cf2:	bf3a      	itte	cc
 8008cf4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008cf8:	f1a5 0608 	subcc.w	r6, r5, #8
 8008cfc:	2100      	movcs	r1, #0
 8008cfe:	380b      	subs	r0, #11
 8008d00:	d017      	beq.n	8008d32 <__b2d+0x92>
 8008d02:	f1c0 0c20 	rsb	ip, r0, #32
 8008d06:	fa04 f500 	lsl.w	r5, r4, r0
 8008d0a:	42be      	cmp	r6, r7
 8008d0c:	fa21 f40c 	lsr.w	r4, r1, ip
 8008d10:	ea45 0504 	orr.w	r5, r5, r4
 8008d14:	bf8c      	ite	hi
 8008d16:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008d1a:	2400      	movls	r4, #0
 8008d1c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008d20:	fa01 f000 	lsl.w	r0, r1, r0
 8008d24:	fa24 f40c 	lsr.w	r4, r4, ip
 8008d28:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008d2c:	ea40 0204 	orr.w	r2, r0, r4
 8008d30:	e7db      	b.n	8008cea <__b2d+0x4a>
 8008d32:	ea44 030c 	orr.w	r3, r4, ip
 8008d36:	460a      	mov	r2, r1
 8008d38:	e7d7      	b.n	8008cea <__b2d+0x4a>
 8008d3a:	bf00      	nop
 8008d3c:	3ff00000 	.word	0x3ff00000

08008d40 <__d2b>:
 8008d40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d44:	4689      	mov	r9, r1
 8008d46:	2101      	movs	r1, #1
 8008d48:	ec57 6b10 	vmov	r6, r7, d0
 8008d4c:	4690      	mov	r8, r2
 8008d4e:	f7ff fc09 	bl	8008564 <_Balloc>
 8008d52:	4604      	mov	r4, r0
 8008d54:	b930      	cbnz	r0, 8008d64 <__d2b+0x24>
 8008d56:	4602      	mov	r2, r0
 8008d58:	4b25      	ldr	r3, [pc, #148]	; (8008df0 <__d2b+0xb0>)
 8008d5a:	4826      	ldr	r0, [pc, #152]	; (8008df4 <__d2b+0xb4>)
 8008d5c:	f240 310a 	movw	r1, #778	; 0x30a
 8008d60:	f000 fcb6 	bl	80096d0 <__assert_func>
 8008d64:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008d68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d6c:	bb35      	cbnz	r5, 8008dbc <__d2b+0x7c>
 8008d6e:	2e00      	cmp	r6, #0
 8008d70:	9301      	str	r3, [sp, #4]
 8008d72:	d028      	beq.n	8008dc6 <__d2b+0x86>
 8008d74:	4668      	mov	r0, sp
 8008d76:	9600      	str	r6, [sp, #0]
 8008d78:	f7ff fd06 	bl	8008788 <__lo0bits>
 8008d7c:	9900      	ldr	r1, [sp, #0]
 8008d7e:	b300      	cbz	r0, 8008dc2 <__d2b+0x82>
 8008d80:	9a01      	ldr	r2, [sp, #4]
 8008d82:	f1c0 0320 	rsb	r3, r0, #32
 8008d86:	fa02 f303 	lsl.w	r3, r2, r3
 8008d8a:	430b      	orrs	r3, r1
 8008d8c:	40c2      	lsrs	r2, r0
 8008d8e:	6163      	str	r3, [r4, #20]
 8008d90:	9201      	str	r2, [sp, #4]
 8008d92:	9b01      	ldr	r3, [sp, #4]
 8008d94:	61a3      	str	r3, [r4, #24]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	bf14      	ite	ne
 8008d9a:	2202      	movne	r2, #2
 8008d9c:	2201      	moveq	r2, #1
 8008d9e:	6122      	str	r2, [r4, #16]
 8008da0:	b1d5      	cbz	r5, 8008dd8 <__d2b+0x98>
 8008da2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008da6:	4405      	add	r5, r0
 8008da8:	f8c9 5000 	str.w	r5, [r9]
 8008dac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008db0:	f8c8 0000 	str.w	r0, [r8]
 8008db4:	4620      	mov	r0, r4
 8008db6:	b003      	add	sp, #12
 8008db8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008dc0:	e7d5      	b.n	8008d6e <__d2b+0x2e>
 8008dc2:	6161      	str	r1, [r4, #20]
 8008dc4:	e7e5      	b.n	8008d92 <__d2b+0x52>
 8008dc6:	a801      	add	r0, sp, #4
 8008dc8:	f7ff fcde 	bl	8008788 <__lo0bits>
 8008dcc:	9b01      	ldr	r3, [sp, #4]
 8008dce:	6163      	str	r3, [r4, #20]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	6122      	str	r2, [r4, #16]
 8008dd4:	3020      	adds	r0, #32
 8008dd6:	e7e3      	b.n	8008da0 <__d2b+0x60>
 8008dd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ddc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008de0:	f8c9 0000 	str.w	r0, [r9]
 8008de4:	6918      	ldr	r0, [r3, #16]
 8008de6:	f7ff fcaf 	bl	8008748 <__hi0bits>
 8008dea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008dee:	e7df      	b.n	8008db0 <__d2b+0x70>
 8008df0:	08009ec8 	.word	0x08009ec8
 8008df4:	08009fb8 	.word	0x08009fb8

08008df8 <__ratio>:
 8008df8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dfc:	4688      	mov	r8, r1
 8008dfe:	4669      	mov	r1, sp
 8008e00:	4681      	mov	r9, r0
 8008e02:	f7ff ff4d 	bl	8008ca0 <__b2d>
 8008e06:	a901      	add	r1, sp, #4
 8008e08:	4640      	mov	r0, r8
 8008e0a:	ec55 4b10 	vmov	r4, r5, d0
 8008e0e:	f7ff ff47 	bl	8008ca0 <__b2d>
 8008e12:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e16:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008e1a:	eba3 0c02 	sub.w	ip, r3, r2
 8008e1e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008e22:	1a9b      	subs	r3, r3, r2
 8008e24:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008e28:	ec51 0b10 	vmov	r0, r1, d0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	bfd6      	itet	le
 8008e30:	460a      	movle	r2, r1
 8008e32:	462a      	movgt	r2, r5
 8008e34:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008e38:	468b      	mov	fp, r1
 8008e3a:	462f      	mov	r7, r5
 8008e3c:	bfd4      	ite	le
 8008e3e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008e42:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008e46:	4620      	mov	r0, r4
 8008e48:	ee10 2a10 	vmov	r2, s0
 8008e4c:	465b      	mov	r3, fp
 8008e4e:	4639      	mov	r1, r7
 8008e50:	f7f7 fd04 	bl	800085c <__aeabi_ddiv>
 8008e54:	ec41 0b10 	vmov	d0, r0, r1
 8008e58:	b003      	add	sp, #12
 8008e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e5e <__copybits>:
 8008e5e:	3901      	subs	r1, #1
 8008e60:	b570      	push	{r4, r5, r6, lr}
 8008e62:	1149      	asrs	r1, r1, #5
 8008e64:	6914      	ldr	r4, [r2, #16]
 8008e66:	3101      	adds	r1, #1
 8008e68:	f102 0314 	add.w	r3, r2, #20
 8008e6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008e70:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008e74:	1f05      	subs	r5, r0, #4
 8008e76:	42a3      	cmp	r3, r4
 8008e78:	d30c      	bcc.n	8008e94 <__copybits+0x36>
 8008e7a:	1aa3      	subs	r3, r4, r2
 8008e7c:	3b11      	subs	r3, #17
 8008e7e:	f023 0303 	bic.w	r3, r3, #3
 8008e82:	3211      	adds	r2, #17
 8008e84:	42a2      	cmp	r2, r4
 8008e86:	bf88      	it	hi
 8008e88:	2300      	movhi	r3, #0
 8008e8a:	4418      	add	r0, r3
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	4288      	cmp	r0, r1
 8008e90:	d305      	bcc.n	8008e9e <__copybits+0x40>
 8008e92:	bd70      	pop	{r4, r5, r6, pc}
 8008e94:	f853 6b04 	ldr.w	r6, [r3], #4
 8008e98:	f845 6f04 	str.w	r6, [r5, #4]!
 8008e9c:	e7eb      	b.n	8008e76 <__copybits+0x18>
 8008e9e:	f840 3b04 	str.w	r3, [r0], #4
 8008ea2:	e7f4      	b.n	8008e8e <__copybits+0x30>

08008ea4 <__any_on>:
 8008ea4:	f100 0214 	add.w	r2, r0, #20
 8008ea8:	6900      	ldr	r0, [r0, #16]
 8008eaa:	114b      	asrs	r3, r1, #5
 8008eac:	4298      	cmp	r0, r3
 8008eae:	b510      	push	{r4, lr}
 8008eb0:	db11      	blt.n	8008ed6 <__any_on+0x32>
 8008eb2:	dd0a      	ble.n	8008eca <__any_on+0x26>
 8008eb4:	f011 011f 	ands.w	r1, r1, #31
 8008eb8:	d007      	beq.n	8008eca <__any_on+0x26>
 8008eba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008ebe:	fa24 f001 	lsr.w	r0, r4, r1
 8008ec2:	fa00 f101 	lsl.w	r1, r0, r1
 8008ec6:	428c      	cmp	r4, r1
 8008ec8:	d10b      	bne.n	8008ee2 <__any_on+0x3e>
 8008eca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d803      	bhi.n	8008eda <__any_on+0x36>
 8008ed2:	2000      	movs	r0, #0
 8008ed4:	bd10      	pop	{r4, pc}
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	e7f7      	b.n	8008eca <__any_on+0x26>
 8008eda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ede:	2900      	cmp	r1, #0
 8008ee0:	d0f5      	beq.n	8008ece <__any_on+0x2a>
 8008ee2:	2001      	movs	r0, #1
 8008ee4:	e7f6      	b.n	8008ed4 <__any_on+0x30>

08008ee6 <__ssputs_r>:
 8008ee6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eea:	688e      	ldr	r6, [r1, #8]
 8008eec:	429e      	cmp	r6, r3
 8008eee:	4682      	mov	sl, r0
 8008ef0:	460c      	mov	r4, r1
 8008ef2:	4690      	mov	r8, r2
 8008ef4:	461f      	mov	r7, r3
 8008ef6:	d838      	bhi.n	8008f6a <__ssputs_r+0x84>
 8008ef8:	898a      	ldrh	r2, [r1, #12]
 8008efa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008efe:	d032      	beq.n	8008f66 <__ssputs_r+0x80>
 8008f00:	6825      	ldr	r5, [r4, #0]
 8008f02:	6909      	ldr	r1, [r1, #16]
 8008f04:	eba5 0901 	sub.w	r9, r5, r1
 8008f08:	6965      	ldr	r5, [r4, #20]
 8008f0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f12:	3301      	adds	r3, #1
 8008f14:	444b      	add	r3, r9
 8008f16:	106d      	asrs	r5, r5, #1
 8008f18:	429d      	cmp	r5, r3
 8008f1a:	bf38      	it	cc
 8008f1c:	461d      	movcc	r5, r3
 8008f1e:	0553      	lsls	r3, r2, #21
 8008f20:	d531      	bpl.n	8008f86 <__ssputs_r+0xa0>
 8008f22:	4629      	mov	r1, r5
 8008f24:	f7fc fa22 	bl	800536c <_malloc_r>
 8008f28:	4606      	mov	r6, r0
 8008f2a:	b950      	cbnz	r0, 8008f42 <__ssputs_r+0x5c>
 8008f2c:	230c      	movs	r3, #12
 8008f2e:	f8ca 3000 	str.w	r3, [sl]
 8008f32:	89a3      	ldrh	r3, [r4, #12]
 8008f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f38:	81a3      	strh	r3, [r4, #12]
 8008f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f42:	6921      	ldr	r1, [r4, #16]
 8008f44:	464a      	mov	r2, r9
 8008f46:	f7ff faf2 	bl	800852e <memcpy>
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f54:	81a3      	strh	r3, [r4, #12]
 8008f56:	6126      	str	r6, [r4, #16]
 8008f58:	6165      	str	r5, [r4, #20]
 8008f5a:	444e      	add	r6, r9
 8008f5c:	eba5 0509 	sub.w	r5, r5, r9
 8008f60:	6026      	str	r6, [r4, #0]
 8008f62:	60a5      	str	r5, [r4, #8]
 8008f64:	463e      	mov	r6, r7
 8008f66:	42be      	cmp	r6, r7
 8008f68:	d900      	bls.n	8008f6c <__ssputs_r+0x86>
 8008f6a:	463e      	mov	r6, r7
 8008f6c:	6820      	ldr	r0, [r4, #0]
 8008f6e:	4632      	mov	r2, r6
 8008f70:	4641      	mov	r1, r8
 8008f72:	f7fc f957 	bl	8005224 <memmove>
 8008f76:	68a3      	ldr	r3, [r4, #8]
 8008f78:	1b9b      	subs	r3, r3, r6
 8008f7a:	60a3      	str	r3, [r4, #8]
 8008f7c:	6823      	ldr	r3, [r4, #0]
 8008f7e:	4433      	add	r3, r6
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	2000      	movs	r0, #0
 8008f84:	e7db      	b.n	8008f3e <__ssputs_r+0x58>
 8008f86:	462a      	mov	r2, r5
 8008f88:	f000 fd1c 	bl	80099c4 <_realloc_r>
 8008f8c:	4606      	mov	r6, r0
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d1e1      	bne.n	8008f56 <__ssputs_r+0x70>
 8008f92:	6921      	ldr	r1, [r4, #16]
 8008f94:	4650      	mov	r0, sl
 8008f96:	f7fc f97d 	bl	8005294 <_free_r>
 8008f9a:	e7c7      	b.n	8008f2c <__ssputs_r+0x46>

08008f9c <_svfiprintf_r>:
 8008f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa0:	4698      	mov	r8, r3
 8008fa2:	898b      	ldrh	r3, [r1, #12]
 8008fa4:	061b      	lsls	r3, r3, #24
 8008fa6:	b09d      	sub	sp, #116	; 0x74
 8008fa8:	4607      	mov	r7, r0
 8008faa:	460d      	mov	r5, r1
 8008fac:	4614      	mov	r4, r2
 8008fae:	d50e      	bpl.n	8008fce <_svfiprintf_r+0x32>
 8008fb0:	690b      	ldr	r3, [r1, #16]
 8008fb2:	b963      	cbnz	r3, 8008fce <_svfiprintf_r+0x32>
 8008fb4:	2140      	movs	r1, #64	; 0x40
 8008fb6:	f7fc f9d9 	bl	800536c <_malloc_r>
 8008fba:	6028      	str	r0, [r5, #0]
 8008fbc:	6128      	str	r0, [r5, #16]
 8008fbe:	b920      	cbnz	r0, 8008fca <_svfiprintf_r+0x2e>
 8008fc0:	230c      	movs	r3, #12
 8008fc2:	603b      	str	r3, [r7, #0]
 8008fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc8:	e0d1      	b.n	800916e <_svfiprintf_r+0x1d2>
 8008fca:	2340      	movs	r3, #64	; 0x40
 8008fcc:	616b      	str	r3, [r5, #20]
 8008fce:	2300      	movs	r3, #0
 8008fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8008fd2:	2320      	movs	r3, #32
 8008fd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fdc:	2330      	movs	r3, #48	; 0x30
 8008fde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009188 <_svfiprintf_r+0x1ec>
 8008fe2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fe6:	f04f 0901 	mov.w	r9, #1
 8008fea:	4623      	mov	r3, r4
 8008fec:	469a      	mov	sl, r3
 8008fee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ff2:	b10a      	cbz	r2, 8008ff8 <_svfiprintf_r+0x5c>
 8008ff4:	2a25      	cmp	r2, #37	; 0x25
 8008ff6:	d1f9      	bne.n	8008fec <_svfiprintf_r+0x50>
 8008ff8:	ebba 0b04 	subs.w	fp, sl, r4
 8008ffc:	d00b      	beq.n	8009016 <_svfiprintf_r+0x7a>
 8008ffe:	465b      	mov	r3, fp
 8009000:	4622      	mov	r2, r4
 8009002:	4629      	mov	r1, r5
 8009004:	4638      	mov	r0, r7
 8009006:	f7ff ff6e 	bl	8008ee6 <__ssputs_r>
 800900a:	3001      	adds	r0, #1
 800900c:	f000 80aa 	beq.w	8009164 <_svfiprintf_r+0x1c8>
 8009010:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009012:	445a      	add	r2, fp
 8009014:	9209      	str	r2, [sp, #36]	; 0x24
 8009016:	f89a 3000 	ldrb.w	r3, [sl]
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 80a2 	beq.w	8009164 <_svfiprintf_r+0x1c8>
 8009020:	2300      	movs	r3, #0
 8009022:	f04f 32ff 	mov.w	r2, #4294967295
 8009026:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800902a:	f10a 0a01 	add.w	sl, sl, #1
 800902e:	9304      	str	r3, [sp, #16]
 8009030:	9307      	str	r3, [sp, #28]
 8009032:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009036:	931a      	str	r3, [sp, #104]	; 0x68
 8009038:	4654      	mov	r4, sl
 800903a:	2205      	movs	r2, #5
 800903c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009040:	4851      	ldr	r0, [pc, #324]	; (8009188 <_svfiprintf_r+0x1ec>)
 8009042:	f7f7 f8d5 	bl	80001f0 <memchr>
 8009046:	9a04      	ldr	r2, [sp, #16]
 8009048:	b9d8      	cbnz	r0, 8009082 <_svfiprintf_r+0xe6>
 800904a:	06d0      	lsls	r0, r2, #27
 800904c:	bf44      	itt	mi
 800904e:	2320      	movmi	r3, #32
 8009050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009054:	0711      	lsls	r1, r2, #28
 8009056:	bf44      	itt	mi
 8009058:	232b      	movmi	r3, #43	; 0x2b
 800905a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800905e:	f89a 3000 	ldrb.w	r3, [sl]
 8009062:	2b2a      	cmp	r3, #42	; 0x2a
 8009064:	d015      	beq.n	8009092 <_svfiprintf_r+0xf6>
 8009066:	9a07      	ldr	r2, [sp, #28]
 8009068:	4654      	mov	r4, sl
 800906a:	2000      	movs	r0, #0
 800906c:	f04f 0c0a 	mov.w	ip, #10
 8009070:	4621      	mov	r1, r4
 8009072:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009076:	3b30      	subs	r3, #48	; 0x30
 8009078:	2b09      	cmp	r3, #9
 800907a:	d94e      	bls.n	800911a <_svfiprintf_r+0x17e>
 800907c:	b1b0      	cbz	r0, 80090ac <_svfiprintf_r+0x110>
 800907e:	9207      	str	r2, [sp, #28]
 8009080:	e014      	b.n	80090ac <_svfiprintf_r+0x110>
 8009082:	eba0 0308 	sub.w	r3, r0, r8
 8009086:	fa09 f303 	lsl.w	r3, r9, r3
 800908a:	4313      	orrs	r3, r2
 800908c:	9304      	str	r3, [sp, #16]
 800908e:	46a2      	mov	sl, r4
 8009090:	e7d2      	b.n	8009038 <_svfiprintf_r+0x9c>
 8009092:	9b03      	ldr	r3, [sp, #12]
 8009094:	1d19      	adds	r1, r3, #4
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	9103      	str	r1, [sp, #12]
 800909a:	2b00      	cmp	r3, #0
 800909c:	bfbb      	ittet	lt
 800909e:	425b      	neglt	r3, r3
 80090a0:	f042 0202 	orrlt.w	r2, r2, #2
 80090a4:	9307      	strge	r3, [sp, #28]
 80090a6:	9307      	strlt	r3, [sp, #28]
 80090a8:	bfb8      	it	lt
 80090aa:	9204      	strlt	r2, [sp, #16]
 80090ac:	7823      	ldrb	r3, [r4, #0]
 80090ae:	2b2e      	cmp	r3, #46	; 0x2e
 80090b0:	d10c      	bne.n	80090cc <_svfiprintf_r+0x130>
 80090b2:	7863      	ldrb	r3, [r4, #1]
 80090b4:	2b2a      	cmp	r3, #42	; 0x2a
 80090b6:	d135      	bne.n	8009124 <_svfiprintf_r+0x188>
 80090b8:	9b03      	ldr	r3, [sp, #12]
 80090ba:	1d1a      	adds	r2, r3, #4
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	9203      	str	r2, [sp, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	bfb8      	it	lt
 80090c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80090c8:	3402      	adds	r4, #2
 80090ca:	9305      	str	r3, [sp, #20]
 80090cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009198 <_svfiprintf_r+0x1fc>
 80090d0:	7821      	ldrb	r1, [r4, #0]
 80090d2:	2203      	movs	r2, #3
 80090d4:	4650      	mov	r0, sl
 80090d6:	f7f7 f88b 	bl	80001f0 <memchr>
 80090da:	b140      	cbz	r0, 80090ee <_svfiprintf_r+0x152>
 80090dc:	2340      	movs	r3, #64	; 0x40
 80090de:	eba0 000a 	sub.w	r0, r0, sl
 80090e2:	fa03 f000 	lsl.w	r0, r3, r0
 80090e6:	9b04      	ldr	r3, [sp, #16]
 80090e8:	4303      	orrs	r3, r0
 80090ea:	3401      	adds	r4, #1
 80090ec:	9304      	str	r3, [sp, #16]
 80090ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f2:	4826      	ldr	r0, [pc, #152]	; (800918c <_svfiprintf_r+0x1f0>)
 80090f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090f8:	2206      	movs	r2, #6
 80090fa:	f7f7 f879 	bl	80001f0 <memchr>
 80090fe:	2800      	cmp	r0, #0
 8009100:	d038      	beq.n	8009174 <_svfiprintf_r+0x1d8>
 8009102:	4b23      	ldr	r3, [pc, #140]	; (8009190 <_svfiprintf_r+0x1f4>)
 8009104:	bb1b      	cbnz	r3, 800914e <_svfiprintf_r+0x1b2>
 8009106:	9b03      	ldr	r3, [sp, #12]
 8009108:	3307      	adds	r3, #7
 800910a:	f023 0307 	bic.w	r3, r3, #7
 800910e:	3308      	adds	r3, #8
 8009110:	9303      	str	r3, [sp, #12]
 8009112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009114:	4433      	add	r3, r6
 8009116:	9309      	str	r3, [sp, #36]	; 0x24
 8009118:	e767      	b.n	8008fea <_svfiprintf_r+0x4e>
 800911a:	fb0c 3202 	mla	r2, ip, r2, r3
 800911e:	460c      	mov	r4, r1
 8009120:	2001      	movs	r0, #1
 8009122:	e7a5      	b.n	8009070 <_svfiprintf_r+0xd4>
 8009124:	2300      	movs	r3, #0
 8009126:	3401      	adds	r4, #1
 8009128:	9305      	str	r3, [sp, #20]
 800912a:	4619      	mov	r1, r3
 800912c:	f04f 0c0a 	mov.w	ip, #10
 8009130:	4620      	mov	r0, r4
 8009132:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009136:	3a30      	subs	r2, #48	; 0x30
 8009138:	2a09      	cmp	r2, #9
 800913a:	d903      	bls.n	8009144 <_svfiprintf_r+0x1a8>
 800913c:	2b00      	cmp	r3, #0
 800913e:	d0c5      	beq.n	80090cc <_svfiprintf_r+0x130>
 8009140:	9105      	str	r1, [sp, #20]
 8009142:	e7c3      	b.n	80090cc <_svfiprintf_r+0x130>
 8009144:	fb0c 2101 	mla	r1, ip, r1, r2
 8009148:	4604      	mov	r4, r0
 800914a:	2301      	movs	r3, #1
 800914c:	e7f0      	b.n	8009130 <_svfiprintf_r+0x194>
 800914e:	ab03      	add	r3, sp, #12
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	462a      	mov	r2, r5
 8009154:	4b0f      	ldr	r3, [pc, #60]	; (8009194 <_svfiprintf_r+0x1f8>)
 8009156:	a904      	add	r1, sp, #16
 8009158:	4638      	mov	r0, r7
 800915a:	f7fc fa1b 	bl	8005594 <_printf_float>
 800915e:	1c42      	adds	r2, r0, #1
 8009160:	4606      	mov	r6, r0
 8009162:	d1d6      	bne.n	8009112 <_svfiprintf_r+0x176>
 8009164:	89ab      	ldrh	r3, [r5, #12]
 8009166:	065b      	lsls	r3, r3, #25
 8009168:	f53f af2c 	bmi.w	8008fc4 <_svfiprintf_r+0x28>
 800916c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800916e:	b01d      	add	sp, #116	; 0x74
 8009170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009174:	ab03      	add	r3, sp, #12
 8009176:	9300      	str	r3, [sp, #0]
 8009178:	462a      	mov	r2, r5
 800917a:	4b06      	ldr	r3, [pc, #24]	; (8009194 <_svfiprintf_r+0x1f8>)
 800917c:	a904      	add	r1, sp, #16
 800917e:	4638      	mov	r0, r7
 8009180:	f7fc fcac 	bl	8005adc <_printf_i>
 8009184:	e7eb      	b.n	800915e <_svfiprintf_r+0x1c2>
 8009186:	bf00      	nop
 8009188:	0800a114 	.word	0x0800a114
 800918c:	0800a11e 	.word	0x0800a11e
 8009190:	08005595 	.word	0x08005595
 8009194:	08008ee7 	.word	0x08008ee7
 8009198:	0800a11a 	.word	0x0800a11a

0800919c <__sfputc_r>:
 800919c:	6893      	ldr	r3, [r2, #8]
 800919e:	3b01      	subs	r3, #1
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	b410      	push	{r4}
 80091a4:	6093      	str	r3, [r2, #8]
 80091a6:	da08      	bge.n	80091ba <__sfputc_r+0x1e>
 80091a8:	6994      	ldr	r4, [r2, #24]
 80091aa:	42a3      	cmp	r3, r4
 80091ac:	db01      	blt.n	80091b2 <__sfputc_r+0x16>
 80091ae:	290a      	cmp	r1, #10
 80091b0:	d103      	bne.n	80091ba <__sfputc_r+0x1e>
 80091b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091b6:	f000 b9ab 	b.w	8009510 <__swbuf_r>
 80091ba:	6813      	ldr	r3, [r2, #0]
 80091bc:	1c58      	adds	r0, r3, #1
 80091be:	6010      	str	r0, [r2, #0]
 80091c0:	7019      	strb	r1, [r3, #0]
 80091c2:	4608      	mov	r0, r1
 80091c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <__sfputs_r>:
 80091ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091cc:	4606      	mov	r6, r0
 80091ce:	460f      	mov	r7, r1
 80091d0:	4614      	mov	r4, r2
 80091d2:	18d5      	adds	r5, r2, r3
 80091d4:	42ac      	cmp	r4, r5
 80091d6:	d101      	bne.n	80091dc <__sfputs_r+0x12>
 80091d8:	2000      	movs	r0, #0
 80091da:	e007      	b.n	80091ec <__sfputs_r+0x22>
 80091dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091e0:	463a      	mov	r2, r7
 80091e2:	4630      	mov	r0, r6
 80091e4:	f7ff ffda 	bl	800919c <__sfputc_r>
 80091e8:	1c43      	adds	r3, r0, #1
 80091ea:	d1f3      	bne.n	80091d4 <__sfputs_r+0xa>
 80091ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091f0 <_vfiprintf_r>:
 80091f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f4:	460d      	mov	r5, r1
 80091f6:	b09d      	sub	sp, #116	; 0x74
 80091f8:	4614      	mov	r4, r2
 80091fa:	4698      	mov	r8, r3
 80091fc:	4606      	mov	r6, r0
 80091fe:	b118      	cbz	r0, 8009208 <_vfiprintf_r+0x18>
 8009200:	6983      	ldr	r3, [r0, #24]
 8009202:	b90b      	cbnz	r3, 8009208 <_vfiprintf_r+0x18>
 8009204:	f7fe fd6e 	bl	8007ce4 <__sinit>
 8009208:	4b89      	ldr	r3, [pc, #548]	; (8009430 <_vfiprintf_r+0x240>)
 800920a:	429d      	cmp	r5, r3
 800920c:	d11b      	bne.n	8009246 <_vfiprintf_r+0x56>
 800920e:	6875      	ldr	r5, [r6, #4]
 8009210:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009212:	07d9      	lsls	r1, r3, #31
 8009214:	d405      	bmi.n	8009222 <_vfiprintf_r+0x32>
 8009216:	89ab      	ldrh	r3, [r5, #12]
 8009218:	059a      	lsls	r2, r3, #22
 800921a:	d402      	bmi.n	8009222 <_vfiprintf_r+0x32>
 800921c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800921e:	f7ff f972 	bl	8008506 <__retarget_lock_acquire_recursive>
 8009222:	89ab      	ldrh	r3, [r5, #12]
 8009224:	071b      	lsls	r3, r3, #28
 8009226:	d501      	bpl.n	800922c <_vfiprintf_r+0x3c>
 8009228:	692b      	ldr	r3, [r5, #16]
 800922a:	b9eb      	cbnz	r3, 8009268 <_vfiprintf_r+0x78>
 800922c:	4629      	mov	r1, r5
 800922e:	4630      	mov	r0, r6
 8009230:	f000 f9e0 	bl	80095f4 <__swsetup_r>
 8009234:	b1c0      	cbz	r0, 8009268 <_vfiprintf_r+0x78>
 8009236:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009238:	07dc      	lsls	r4, r3, #31
 800923a:	d50e      	bpl.n	800925a <_vfiprintf_r+0x6a>
 800923c:	f04f 30ff 	mov.w	r0, #4294967295
 8009240:	b01d      	add	sp, #116	; 0x74
 8009242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009246:	4b7b      	ldr	r3, [pc, #492]	; (8009434 <_vfiprintf_r+0x244>)
 8009248:	429d      	cmp	r5, r3
 800924a:	d101      	bne.n	8009250 <_vfiprintf_r+0x60>
 800924c:	68b5      	ldr	r5, [r6, #8]
 800924e:	e7df      	b.n	8009210 <_vfiprintf_r+0x20>
 8009250:	4b79      	ldr	r3, [pc, #484]	; (8009438 <_vfiprintf_r+0x248>)
 8009252:	429d      	cmp	r5, r3
 8009254:	bf08      	it	eq
 8009256:	68f5      	ldreq	r5, [r6, #12]
 8009258:	e7da      	b.n	8009210 <_vfiprintf_r+0x20>
 800925a:	89ab      	ldrh	r3, [r5, #12]
 800925c:	0598      	lsls	r0, r3, #22
 800925e:	d4ed      	bmi.n	800923c <_vfiprintf_r+0x4c>
 8009260:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009262:	f7ff f951 	bl	8008508 <__retarget_lock_release_recursive>
 8009266:	e7e9      	b.n	800923c <_vfiprintf_r+0x4c>
 8009268:	2300      	movs	r3, #0
 800926a:	9309      	str	r3, [sp, #36]	; 0x24
 800926c:	2320      	movs	r3, #32
 800926e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009272:	f8cd 800c 	str.w	r8, [sp, #12]
 8009276:	2330      	movs	r3, #48	; 0x30
 8009278:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800943c <_vfiprintf_r+0x24c>
 800927c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009280:	f04f 0901 	mov.w	r9, #1
 8009284:	4623      	mov	r3, r4
 8009286:	469a      	mov	sl, r3
 8009288:	f813 2b01 	ldrb.w	r2, [r3], #1
 800928c:	b10a      	cbz	r2, 8009292 <_vfiprintf_r+0xa2>
 800928e:	2a25      	cmp	r2, #37	; 0x25
 8009290:	d1f9      	bne.n	8009286 <_vfiprintf_r+0x96>
 8009292:	ebba 0b04 	subs.w	fp, sl, r4
 8009296:	d00b      	beq.n	80092b0 <_vfiprintf_r+0xc0>
 8009298:	465b      	mov	r3, fp
 800929a:	4622      	mov	r2, r4
 800929c:	4629      	mov	r1, r5
 800929e:	4630      	mov	r0, r6
 80092a0:	f7ff ff93 	bl	80091ca <__sfputs_r>
 80092a4:	3001      	adds	r0, #1
 80092a6:	f000 80aa 	beq.w	80093fe <_vfiprintf_r+0x20e>
 80092aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092ac:	445a      	add	r2, fp
 80092ae:	9209      	str	r2, [sp, #36]	; 0x24
 80092b0:	f89a 3000 	ldrb.w	r3, [sl]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f000 80a2 	beq.w	80093fe <_vfiprintf_r+0x20e>
 80092ba:	2300      	movs	r3, #0
 80092bc:	f04f 32ff 	mov.w	r2, #4294967295
 80092c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092c4:	f10a 0a01 	add.w	sl, sl, #1
 80092c8:	9304      	str	r3, [sp, #16]
 80092ca:	9307      	str	r3, [sp, #28]
 80092cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092d0:	931a      	str	r3, [sp, #104]	; 0x68
 80092d2:	4654      	mov	r4, sl
 80092d4:	2205      	movs	r2, #5
 80092d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092da:	4858      	ldr	r0, [pc, #352]	; (800943c <_vfiprintf_r+0x24c>)
 80092dc:	f7f6 ff88 	bl	80001f0 <memchr>
 80092e0:	9a04      	ldr	r2, [sp, #16]
 80092e2:	b9d8      	cbnz	r0, 800931c <_vfiprintf_r+0x12c>
 80092e4:	06d1      	lsls	r1, r2, #27
 80092e6:	bf44      	itt	mi
 80092e8:	2320      	movmi	r3, #32
 80092ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092ee:	0713      	lsls	r3, r2, #28
 80092f0:	bf44      	itt	mi
 80092f2:	232b      	movmi	r3, #43	; 0x2b
 80092f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092f8:	f89a 3000 	ldrb.w	r3, [sl]
 80092fc:	2b2a      	cmp	r3, #42	; 0x2a
 80092fe:	d015      	beq.n	800932c <_vfiprintf_r+0x13c>
 8009300:	9a07      	ldr	r2, [sp, #28]
 8009302:	4654      	mov	r4, sl
 8009304:	2000      	movs	r0, #0
 8009306:	f04f 0c0a 	mov.w	ip, #10
 800930a:	4621      	mov	r1, r4
 800930c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009310:	3b30      	subs	r3, #48	; 0x30
 8009312:	2b09      	cmp	r3, #9
 8009314:	d94e      	bls.n	80093b4 <_vfiprintf_r+0x1c4>
 8009316:	b1b0      	cbz	r0, 8009346 <_vfiprintf_r+0x156>
 8009318:	9207      	str	r2, [sp, #28]
 800931a:	e014      	b.n	8009346 <_vfiprintf_r+0x156>
 800931c:	eba0 0308 	sub.w	r3, r0, r8
 8009320:	fa09 f303 	lsl.w	r3, r9, r3
 8009324:	4313      	orrs	r3, r2
 8009326:	9304      	str	r3, [sp, #16]
 8009328:	46a2      	mov	sl, r4
 800932a:	e7d2      	b.n	80092d2 <_vfiprintf_r+0xe2>
 800932c:	9b03      	ldr	r3, [sp, #12]
 800932e:	1d19      	adds	r1, r3, #4
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	9103      	str	r1, [sp, #12]
 8009334:	2b00      	cmp	r3, #0
 8009336:	bfbb      	ittet	lt
 8009338:	425b      	neglt	r3, r3
 800933a:	f042 0202 	orrlt.w	r2, r2, #2
 800933e:	9307      	strge	r3, [sp, #28]
 8009340:	9307      	strlt	r3, [sp, #28]
 8009342:	bfb8      	it	lt
 8009344:	9204      	strlt	r2, [sp, #16]
 8009346:	7823      	ldrb	r3, [r4, #0]
 8009348:	2b2e      	cmp	r3, #46	; 0x2e
 800934a:	d10c      	bne.n	8009366 <_vfiprintf_r+0x176>
 800934c:	7863      	ldrb	r3, [r4, #1]
 800934e:	2b2a      	cmp	r3, #42	; 0x2a
 8009350:	d135      	bne.n	80093be <_vfiprintf_r+0x1ce>
 8009352:	9b03      	ldr	r3, [sp, #12]
 8009354:	1d1a      	adds	r2, r3, #4
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	9203      	str	r2, [sp, #12]
 800935a:	2b00      	cmp	r3, #0
 800935c:	bfb8      	it	lt
 800935e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009362:	3402      	adds	r4, #2
 8009364:	9305      	str	r3, [sp, #20]
 8009366:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800944c <_vfiprintf_r+0x25c>
 800936a:	7821      	ldrb	r1, [r4, #0]
 800936c:	2203      	movs	r2, #3
 800936e:	4650      	mov	r0, sl
 8009370:	f7f6 ff3e 	bl	80001f0 <memchr>
 8009374:	b140      	cbz	r0, 8009388 <_vfiprintf_r+0x198>
 8009376:	2340      	movs	r3, #64	; 0x40
 8009378:	eba0 000a 	sub.w	r0, r0, sl
 800937c:	fa03 f000 	lsl.w	r0, r3, r0
 8009380:	9b04      	ldr	r3, [sp, #16]
 8009382:	4303      	orrs	r3, r0
 8009384:	3401      	adds	r4, #1
 8009386:	9304      	str	r3, [sp, #16]
 8009388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800938c:	482c      	ldr	r0, [pc, #176]	; (8009440 <_vfiprintf_r+0x250>)
 800938e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009392:	2206      	movs	r2, #6
 8009394:	f7f6 ff2c 	bl	80001f0 <memchr>
 8009398:	2800      	cmp	r0, #0
 800939a:	d03f      	beq.n	800941c <_vfiprintf_r+0x22c>
 800939c:	4b29      	ldr	r3, [pc, #164]	; (8009444 <_vfiprintf_r+0x254>)
 800939e:	bb1b      	cbnz	r3, 80093e8 <_vfiprintf_r+0x1f8>
 80093a0:	9b03      	ldr	r3, [sp, #12]
 80093a2:	3307      	adds	r3, #7
 80093a4:	f023 0307 	bic.w	r3, r3, #7
 80093a8:	3308      	adds	r3, #8
 80093aa:	9303      	str	r3, [sp, #12]
 80093ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ae:	443b      	add	r3, r7
 80093b0:	9309      	str	r3, [sp, #36]	; 0x24
 80093b2:	e767      	b.n	8009284 <_vfiprintf_r+0x94>
 80093b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80093b8:	460c      	mov	r4, r1
 80093ba:	2001      	movs	r0, #1
 80093bc:	e7a5      	b.n	800930a <_vfiprintf_r+0x11a>
 80093be:	2300      	movs	r3, #0
 80093c0:	3401      	adds	r4, #1
 80093c2:	9305      	str	r3, [sp, #20]
 80093c4:	4619      	mov	r1, r3
 80093c6:	f04f 0c0a 	mov.w	ip, #10
 80093ca:	4620      	mov	r0, r4
 80093cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093d0:	3a30      	subs	r2, #48	; 0x30
 80093d2:	2a09      	cmp	r2, #9
 80093d4:	d903      	bls.n	80093de <_vfiprintf_r+0x1ee>
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d0c5      	beq.n	8009366 <_vfiprintf_r+0x176>
 80093da:	9105      	str	r1, [sp, #20]
 80093dc:	e7c3      	b.n	8009366 <_vfiprintf_r+0x176>
 80093de:	fb0c 2101 	mla	r1, ip, r1, r2
 80093e2:	4604      	mov	r4, r0
 80093e4:	2301      	movs	r3, #1
 80093e6:	e7f0      	b.n	80093ca <_vfiprintf_r+0x1da>
 80093e8:	ab03      	add	r3, sp, #12
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	462a      	mov	r2, r5
 80093ee:	4b16      	ldr	r3, [pc, #88]	; (8009448 <_vfiprintf_r+0x258>)
 80093f0:	a904      	add	r1, sp, #16
 80093f2:	4630      	mov	r0, r6
 80093f4:	f7fc f8ce 	bl	8005594 <_printf_float>
 80093f8:	4607      	mov	r7, r0
 80093fa:	1c78      	adds	r0, r7, #1
 80093fc:	d1d6      	bne.n	80093ac <_vfiprintf_r+0x1bc>
 80093fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009400:	07d9      	lsls	r1, r3, #31
 8009402:	d405      	bmi.n	8009410 <_vfiprintf_r+0x220>
 8009404:	89ab      	ldrh	r3, [r5, #12]
 8009406:	059a      	lsls	r2, r3, #22
 8009408:	d402      	bmi.n	8009410 <_vfiprintf_r+0x220>
 800940a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800940c:	f7ff f87c 	bl	8008508 <__retarget_lock_release_recursive>
 8009410:	89ab      	ldrh	r3, [r5, #12]
 8009412:	065b      	lsls	r3, r3, #25
 8009414:	f53f af12 	bmi.w	800923c <_vfiprintf_r+0x4c>
 8009418:	9809      	ldr	r0, [sp, #36]	; 0x24
 800941a:	e711      	b.n	8009240 <_vfiprintf_r+0x50>
 800941c:	ab03      	add	r3, sp, #12
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	462a      	mov	r2, r5
 8009422:	4b09      	ldr	r3, [pc, #36]	; (8009448 <_vfiprintf_r+0x258>)
 8009424:	a904      	add	r1, sp, #16
 8009426:	4630      	mov	r0, r6
 8009428:	f7fc fb58 	bl	8005adc <_printf_i>
 800942c:	e7e4      	b.n	80093f8 <_vfiprintf_r+0x208>
 800942e:	bf00      	nop
 8009430:	08009efc 	.word	0x08009efc
 8009434:	08009f1c 	.word	0x08009f1c
 8009438:	08009edc 	.word	0x08009edc
 800943c:	0800a114 	.word	0x0800a114
 8009440:	0800a11e 	.word	0x0800a11e
 8009444:	08005595 	.word	0x08005595
 8009448:	080091cb 	.word	0x080091cb
 800944c:	0800a11a 	.word	0x0800a11a

08009450 <nan>:
 8009450:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009458 <nan+0x8>
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	00000000 	.word	0x00000000
 800945c:	7ff80000 	.word	0x7ff80000

08009460 <__sread>:
 8009460:	b510      	push	{r4, lr}
 8009462:	460c      	mov	r4, r1
 8009464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009468:	f000 fadc 	bl	8009a24 <_read_r>
 800946c:	2800      	cmp	r0, #0
 800946e:	bfab      	itete	ge
 8009470:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009472:	89a3      	ldrhlt	r3, [r4, #12]
 8009474:	181b      	addge	r3, r3, r0
 8009476:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800947a:	bfac      	ite	ge
 800947c:	6563      	strge	r3, [r4, #84]	; 0x54
 800947e:	81a3      	strhlt	r3, [r4, #12]
 8009480:	bd10      	pop	{r4, pc}

08009482 <__swrite>:
 8009482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009486:	461f      	mov	r7, r3
 8009488:	898b      	ldrh	r3, [r1, #12]
 800948a:	05db      	lsls	r3, r3, #23
 800948c:	4605      	mov	r5, r0
 800948e:	460c      	mov	r4, r1
 8009490:	4616      	mov	r6, r2
 8009492:	d505      	bpl.n	80094a0 <__swrite+0x1e>
 8009494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009498:	2302      	movs	r3, #2
 800949a:	2200      	movs	r2, #0
 800949c:	f000 fa1a 	bl	80098d4 <_lseek_r>
 80094a0:	89a3      	ldrh	r3, [r4, #12]
 80094a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094aa:	81a3      	strh	r3, [r4, #12]
 80094ac:	4632      	mov	r2, r6
 80094ae:	463b      	mov	r3, r7
 80094b0:	4628      	mov	r0, r5
 80094b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094b6:	f000 b88b 	b.w	80095d0 <_write_r>

080094ba <__sseek>:
 80094ba:	b510      	push	{r4, lr}
 80094bc:	460c      	mov	r4, r1
 80094be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c2:	f000 fa07 	bl	80098d4 <_lseek_r>
 80094c6:	1c43      	adds	r3, r0, #1
 80094c8:	89a3      	ldrh	r3, [r4, #12]
 80094ca:	bf15      	itete	ne
 80094cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80094ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094d6:	81a3      	strheq	r3, [r4, #12]
 80094d8:	bf18      	it	ne
 80094da:	81a3      	strhne	r3, [r4, #12]
 80094dc:	bd10      	pop	{r4, pc}

080094de <__sclose>:
 80094de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e2:	f000 b913 	b.w	800970c <_close_r>

080094e6 <strncmp>:
 80094e6:	b510      	push	{r4, lr}
 80094e8:	b17a      	cbz	r2, 800950a <strncmp+0x24>
 80094ea:	4603      	mov	r3, r0
 80094ec:	3901      	subs	r1, #1
 80094ee:	1884      	adds	r4, r0, r2
 80094f0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80094f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80094f8:	4290      	cmp	r0, r2
 80094fa:	d101      	bne.n	8009500 <strncmp+0x1a>
 80094fc:	42a3      	cmp	r3, r4
 80094fe:	d101      	bne.n	8009504 <strncmp+0x1e>
 8009500:	1a80      	subs	r0, r0, r2
 8009502:	bd10      	pop	{r4, pc}
 8009504:	2800      	cmp	r0, #0
 8009506:	d1f3      	bne.n	80094f0 <strncmp+0xa>
 8009508:	e7fa      	b.n	8009500 <strncmp+0x1a>
 800950a:	4610      	mov	r0, r2
 800950c:	e7f9      	b.n	8009502 <strncmp+0x1c>
	...

08009510 <__swbuf_r>:
 8009510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009512:	460e      	mov	r6, r1
 8009514:	4614      	mov	r4, r2
 8009516:	4605      	mov	r5, r0
 8009518:	b118      	cbz	r0, 8009522 <__swbuf_r+0x12>
 800951a:	6983      	ldr	r3, [r0, #24]
 800951c:	b90b      	cbnz	r3, 8009522 <__swbuf_r+0x12>
 800951e:	f7fe fbe1 	bl	8007ce4 <__sinit>
 8009522:	4b21      	ldr	r3, [pc, #132]	; (80095a8 <__swbuf_r+0x98>)
 8009524:	429c      	cmp	r4, r3
 8009526:	d12b      	bne.n	8009580 <__swbuf_r+0x70>
 8009528:	686c      	ldr	r4, [r5, #4]
 800952a:	69a3      	ldr	r3, [r4, #24]
 800952c:	60a3      	str	r3, [r4, #8]
 800952e:	89a3      	ldrh	r3, [r4, #12]
 8009530:	071a      	lsls	r2, r3, #28
 8009532:	d52f      	bpl.n	8009594 <__swbuf_r+0x84>
 8009534:	6923      	ldr	r3, [r4, #16]
 8009536:	b36b      	cbz	r3, 8009594 <__swbuf_r+0x84>
 8009538:	6923      	ldr	r3, [r4, #16]
 800953a:	6820      	ldr	r0, [r4, #0]
 800953c:	1ac0      	subs	r0, r0, r3
 800953e:	6963      	ldr	r3, [r4, #20]
 8009540:	b2f6      	uxtb	r6, r6
 8009542:	4283      	cmp	r3, r0
 8009544:	4637      	mov	r7, r6
 8009546:	dc04      	bgt.n	8009552 <__swbuf_r+0x42>
 8009548:	4621      	mov	r1, r4
 800954a:	4628      	mov	r0, r5
 800954c:	f000 f974 	bl	8009838 <_fflush_r>
 8009550:	bb30      	cbnz	r0, 80095a0 <__swbuf_r+0x90>
 8009552:	68a3      	ldr	r3, [r4, #8]
 8009554:	3b01      	subs	r3, #1
 8009556:	60a3      	str	r3, [r4, #8]
 8009558:	6823      	ldr	r3, [r4, #0]
 800955a:	1c5a      	adds	r2, r3, #1
 800955c:	6022      	str	r2, [r4, #0]
 800955e:	701e      	strb	r6, [r3, #0]
 8009560:	6963      	ldr	r3, [r4, #20]
 8009562:	3001      	adds	r0, #1
 8009564:	4283      	cmp	r3, r0
 8009566:	d004      	beq.n	8009572 <__swbuf_r+0x62>
 8009568:	89a3      	ldrh	r3, [r4, #12]
 800956a:	07db      	lsls	r3, r3, #31
 800956c:	d506      	bpl.n	800957c <__swbuf_r+0x6c>
 800956e:	2e0a      	cmp	r6, #10
 8009570:	d104      	bne.n	800957c <__swbuf_r+0x6c>
 8009572:	4621      	mov	r1, r4
 8009574:	4628      	mov	r0, r5
 8009576:	f000 f95f 	bl	8009838 <_fflush_r>
 800957a:	b988      	cbnz	r0, 80095a0 <__swbuf_r+0x90>
 800957c:	4638      	mov	r0, r7
 800957e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009580:	4b0a      	ldr	r3, [pc, #40]	; (80095ac <__swbuf_r+0x9c>)
 8009582:	429c      	cmp	r4, r3
 8009584:	d101      	bne.n	800958a <__swbuf_r+0x7a>
 8009586:	68ac      	ldr	r4, [r5, #8]
 8009588:	e7cf      	b.n	800952a <__swbuf_r+0x1a>
 800958a:	4b09      	ldr	r3, [pc, #36]	; (80095b0 <__swbuf_r+0xa0>)
 800958c:	429c      	cmp	r4, r3
 800958e:	bf08      	it	eq
 8009590:	68ec      	ldreq	r4, [r5, #12]
 8009592:	e7ca      	b.n	800952a <__swbuf_r+0x1a>
 8009594:	4621      	mov	r1, r4
 8009596:	4628      	mov	r0, r5
 8009598:	f000 f82c 	bl	80095f4 <__swsetup_r>
 800959c:	2800      	cmp	r0, #0
 800959e:	d0cb      	beq.n	8009538 <__swbuf_r+0x28>
 80095a0:	f04f 37ff 	mov.w	r7, #4294967295
 80095a4:	e7ea      	b.n	800957c <__swbuf_r+0x6c>
 80095a6:	bf00      	nop
 80095a8:	08009efc 	.word	0x08009efc
 80095ac:	08009f1c 	.word	0x08009f1c
 80095b0:	08009edc 	.word	0x08009edc

080095b4 <__ascii_wctomb>:
 80095b4:	b149      	cbz	r1, 80095ca <__ascii_wctomb+0x16>
 80095b6:	2aff      	cmp	r2, #255	; 0xff
 80095b8:	bf85      	ittet	hi
 80095ba:	238a      	movhi	r3, #138	; 0x8a
 80095bc:	6003      	strhi	r3, [r0, #0]
 80095be:	700a      	strbls	r2, [r1, #0]
 80095c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80095c4:	bf98      	it	ls
 80095c6:	2001      	movls	r0, #1
 80095c8:	4770      	bx	lr
 80095ca:	4608      	mov	r0, r1
 80095cc:	4770      	bx	lr
	...

080095d0 <_write_r>:
 80095d0:	b538      	push	{r3, r4, r5, lr}
 80095d2:	4d07      	ldr	r5, [pc, #28]	; (80095f0 <_write_r+0x20>)
 80095d4:	4604      	mov	r4, r0
 80095d6:	4608      	mov	r0, r1
 80095d8:	4611      	mov	r1, r2
 80095da:	2200      	movs	r2, #0
 80095dc:	602a      	str	r2, [r5, #0]
 80095de:	461a      	mov	r2, r3
 80095e0:	f7f7 fdb8 	bl	8001154 <_write>
 80095e4:	1c43      	adds	r3, r0, #1
 80095e6:	d102      	bne.n	80095ee <_write_r+0x1e>
 80095e8:	682b      	ldr	r3, [r5, #0]
 80095ea:	b103      	cbz	r3, 80095ee <_write_r+0x1e>
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	bd38      	pop	{r3, r4, r5, pc}
 80095f0:	20000464 	.word	0x20000464

080095f4 <__swsetup_r>:
 80095f4:	4b32      	ldr	r3, [pc, #200]	; (80096c0 <__swsetup_r+0xcc>)
 80095f6:	b570      	push	{r4, r5, r6, lr}
 80095f8:	681d      	ldr	r5, [r3, #0]
 80095fa:	4606      	mov	r6, r0
 80095fc:	460c      	mov	r4, r1
 80095fe:	b125      	cbz	r5, 800960a <__swsetup_r+0x16>
 8009600:	69ab      	ldr	r3, [r5, #24]
 8009602:	b913      	cbnz	r3, 800960a <__swsetup_r+0x16>
 8009604:	4628      	mov	r0, r5
 8009606:	f7fe fb6d 	bl	8007ce4 <__sinit>
 800960a:	4b2e      	ldr	r3, [pc, #184]	; (80096c4 <__swsetup_r+0xd0>)
 800960c:	429c      	cmp	r4, r3
 800960e:	d10f      	bne.n	8009630 <__swsetup_r+0x3c>
 8009610:	686c      	ldr	r4, [r5, #4]
 8009612:	89a3      	ldrh	r3, [r4, #12]
 8009614:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009618:	0719      	lsls	r1, r3, #28
 800961a:	d42c      	bmi.n	8009676 <__swsetup_r+0x82>
 800961c:	06dd      	lsls	r5, r3, #27
 800961e:	d411      	bmi.n	8009644 <__swsetup_r+0x50>
 8009620:	2309      	movs	r3, #9
 8009622:	6033      	str	r3, [r6, #0]
 8009624:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009628:	81a3      	strh	r3, [r4, #12]
 800962a:	f04f 30ff 	mov.w	r0, #4294967295
 800962e:	e03e      	b.n	80096ae <__swsetup_r+0xba>
 8009630:	4b25      	ldr	r3, [pc, #148]	; (80096c8 <__swsetup_r+0xd4>)
 8009632:	429c      	cmp	r4, r3
 8009634:	d101      	bne.n	800963a <__swsetup_r+0x46>
 8009636:	68ac      	ldr	r4, [r5, #8]
 8009638:	e7eb      	b.n	8009612 <__swsetup_r+0x1e>
 800963a:	4b24      	ldr	r3, [pc, #144]	; (80096cc <__swsetup_r+0xd8>)
 800963c:	429c      	cmp	r4, r3
 800963e:	bf08      	it	eq
 8009640:	68ec      	ldreq	r4, [r5, #12]
 8009642:	e7e6      	b.n	8009612 <__swsetup_r+0x1e>
 8009644:	0758      	lsls	r0, r3, #29
 8009646:	d512      	bpl.n	800966e <__swsetup_r+0x7a>
 8009648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800964a:	b141      	cbz	r1, 800965e <__swsetup_r+0x6a>
 800964c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009650:	4299      	cmp	r1, r3
 8009652:	d002      	beq.n	800965a <__swsetup_r+0x66>
 8009654:	4630      	mov	r0, r6
 8009656:	f7fb fe1d 	bl	8005294 <_free_r>
 800965a:	2300      	movs	r3, #0
 800965c:	6363      	str	r3, [r4, #52]	; 0x34
 800965e:	89a3      	ldrh	r3, [r4, #12]
 8009660:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009664:	81a3      	strh	r3, [r4, #12]
 8009666:	2300      	movs	r3, #0
 8009668:	6063      	str	r3, [r4, #4]
 800966a:	6923      	ldr	r3, [r4, #16]
 800966c:	6023      	str	r3, [r4, #0]
 800966e:	89a3      	ldrh	r3, [r4, #12]
 8009670:	f043 0308 	orr.w	r3, r3, #8
 8009674:	81a3      	strh	r3, [r4, #12]
 8009676:	6923      	ldr	r3, [r4, #16]
 8009678:	b94b      	cbnz	r3, 800968e <__swsetup_r+0x9a>
 800967a:	89a3      	ldrh	r3, [r4, #12]
 800967c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009684:	d003      	beq.n	800968e <__swsetup_r+0x9a>
 8009686:	4621      	mov	r1, r4
 8009688:	4630      	mov	r0, r6
 800968a:	f000 f95b 	bl	8009944 <__smakebuf_r>
 800968e:	89a0      	ldrh	r0, [r4, #12]
 8009690:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009694:	f010 0301 	ands.w	r3, r0, #1
 8009698:	d00a      	beq.n	80096b0 <__swsetup_r+0xbc>
 800969a:	2300      	movs	r3, #0
 800969c:	60a3      	str	r3, [r4, #8]
 800969e:	6963      	ldr	r3, [r4, #20]
 80096a0:	425b      	negs	r3, r3
 80096a2:	61a3      	str	r3, [r4, #24]
 80096a4:	6923      	ldr	r3, [r4, #16]
 80096a6:	b943      	cbnz	r3, 80096ba <__swsetup_r+0xc6>
 80096a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80096ac:	d1ba      	bne.n	8009624 <__swsetup_r+0x30>
 80096ae:	bd70      	pop	{r4, r5, r6, pc}
 80096b0:	0781      	lsls	r1, r0, #30
 80096b2:	bf58      	it	pl
 80096b4:	6963      	ldrpl	r3, [r4, #20]
 80096b6:	60a3      	str	r3, [r4, #8]
 80096b8:	e7f4      	b.n	80096a4 <__swsetup_r+0xb0>
 80096ba:	2000      	movs	r0, #0
 80096bc:	e7f7      	b.n	80096ae <__swsetup_r+0xba>
 80096be:	bf00      	nop
 80096c0:	200000ac 	.word	0x200000ac
 80096c4:	08009efc 	.word	0x08009efc
 80096c8:	08009f1c 	.word	0x08009f1c
 80096cc:	08009edc 	.word	0x08009edc

080096d0 <__assert_func>:
 80096d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096d2:	4614      	mov	r4, r2
 80096d4:	461a      	mov	r2, r3
 80096d6:	4b09      	ldr	r3, [pc, #36]	; (80096fc <__assert_func+0x2c>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4605      	mov	r5, r0
 80096dc:	68d8      	ldr	r0, [r3, #12]
 80096de:	b14c      	cbz	r4, 80096f4 <__assert_func+0x24>
 80096e0:	4b07      	ldr	r3, [pc, #28]	; (8009700 <__assert_func+0x30>)
 80096e2:	9100      	str	r1, [sp, #0]
 80096e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096e8:	4906      	ldr	r1, [pc, #24]	; (8009704 <__assert_func+0x34>)
 80096ea:	462b      	mov	r3, r5
 80096ec:	f000 f8e0 	bl	80098b0 <fiprintf>
 80096f0:	f000 f9aa 	bl	8009a48 <abort>
 80096f4:	4b04      	ldr	r3, [pc, #16]	; (8009708 <__assert_func+0x38>)
 80096f6:	461c      	mov	r4, r3
 80096f8:	e7f3      	b.n	80096e2 <__assert_func+0x12>
 80096fa:	bf00      	nop
 80096fc:	200000ac 	.word	0x200000ac
 8009700:	0800a125 	.word	0x0800a125
 8009704:	0800a132 	.word	0x0800a132
 8009708:	0800a160 	.word	0x0800a160

0800970c <_close_r>:
 800970c:	b538      	push	{r3, r4, r5, lr}
 800970e:	4d06      	ldr	r5, [pc, #24]	; (8009728 <_close_r+0x1c>)
 8009710:	2300      	movs	r3, #0
 8009712:	4604      	mov	r4, r0
 8009714:	4608      	mov	r0, r1
 8009716:	602b      	str	r3, [r5, #0]
 8009718:	f7f9 f87f 	bl	800281a <_close>
 800971c:	1c43      	adds	r3, r0, #1
 800971e:	d102      	bne.n	8009726 <_close_r+0x1a>
 8009720:	682b      	ldr	r3, [r5, #0]
 8009722:	b103      	cbz	r3, 8009726 <_close_r+0x1a>
 8009724:	6023      	str	r3, [r4, #0]
 8009726:	bd38      	pop	{r3, r4, r5, pc}
 8009728:	20000464 	.word	0x20000464

0800972c <__sflush_r>:
 800972c:	898a      	ldrh	r2, [r1, #12]
 800972e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009732:	4605      	mov	r5, r0
 8009734:	0710      	lsls	r0, r2, #28
 8009736:	460c      	mov	r4, r1
 8009738:	d458      	bmi.n	80097ec <__sflush_r+0xc0>
 800973a:	684b      	ldr	r3, [r1, #4]
 800973c:	2b00      	cmp	r3, #0
 800973e:	dc05      	bgt.n	800974c <__sflush_r+0x20>
 8009740:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009742:	2b00      	cmp	r3, #0
 8009744:	dc02      	bgt.n	800974c <__sflush_r+0x20>
 8009746:	2000      	movs	r0, #0
 8009748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800974c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800974e:	2e00      	cmp	r6, #0
 8009750:	d0f9      	beq.n	8009746 <__sflush_r+0x1a>
 8009752:	2300      	movs	r3, #0
 8009754:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009758:	682f      	ldr	r7, [r5, #0]
 800975a:	602b      	str	r3, [r5, #0]
 800975c:	d032      	beq.n	80097c4 <__sflush_r+0x98>
 800975e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009760:	89a3      	ldrh	r3, [r4, #12]
 8009762:	075a      	lsls	r2, r3, #29
 8009764:	d505      	bpl.n	8009772 <__sflush_r+0x46>
 8009766:	6863      	ldr	r3, [r4, #4]
 8009768:	1ac0      	subs	r0, r0, r3
 800976a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800976c:	b10b      	cbz	r3, 8009772 <__sflush_r+0x46>
 800976e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009770:	1ac0      	subs	r0, r0, r3
 8009772:	2300      	movs	r3, #0
 8009774:	4602      	mov	r2, r0
 8009776:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009778:	6a21      	ldr	r1, [r4, #32]
 800977a:	4628      	mov	r0, r5
 800977c:	47b0      	blx	r6
 800977e:	1c43      	adds	r3, r0, #1
 8009780:	89a3      	ldrh	r3, [r4, #12]
 8009782:	d106      	bne.n	8009792 <__sflush_r+0x66>
 8009784:	6829      	ldr	r1, [r5, #0]
 8009786:	291d      	cmp	r1, #29
 8009788:	d82c      	bhi.n	80097e4 <__sflush_r+0xb8>
 800978a:	4a2a      	ldr	r2, [pc, #168]	; (8009834 <__sflush_r+0x108>)
 800978c:	40ca      	lsrs	r2, r1
 800978e:	07d6      	lsls	r6, r2, #31
 8009790:	d528      	bpl.n	80097e4 <__sflush_r+0xb8>
 8009792:	2200      	movs	r2, #0
 8009794:	6062      	str	r2, [r4, #4]
 8009796:	04d9      	lsls	r1, r3, #19
 8009798:	6922      	ldr	r2, [r4, #16]
 800979a:	6022      	str	r2, [r4, #0]
 800979c:	d504      	bpl.n	80097a8 <__sflush_r+0x7c>
 800979e:	1c42      	adds	r2, r0, #1
 80097a0:	d101      	bne.n	80097a6 <__sflush_r+0x7a>
 80097a2:	682b      	ldr	r3, [r5, #0]
 80097a4:	b903      	cbnz	r3, 80097a8 <__sflush_r+0x7c>
 80097a6:	6560      	str	r0, [r4, #84]	; 0x54
 80097a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097aa:	602f      	str	r7, [r5, #0]
 80097ac:	2900      	cmp	r1, #0
 80097ae:	d0ca      	beq.n	8009746 <__sflush_r+0x1a>
 80097b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097b4:	4299      	cmp	r1, r3
 80097b6:	d002      	beq.n	80097be <__sflush_r+0x92>
 80097b8:	4628      	mov	r0, r5
 80097ba:	f7fb fd6b 	bl	8005294 <_free_r>
 80097be:	2000      	movs	r0, #0
 80097c0:	6360      	str	r0, [r4, #52]	; 0x34
 80097c2:	e7c1      	b.n	8009748 <__sflush_r+0x1c>
 80097c4:	6a21      	ldr	r1, [r4, #32]
 80097c6:	2301      	movs	r3, #1
 80097c8:	4628      	mov	r0, r5
 80097ca:	47b0      	blx	r6
 80097cc:	1c41      	adds	r1, r0, #1
 80097ce:	d1c7      	bne.n	8009760 <__sflush_r+0x34>
 80097d0:	682b      	ldr	r3, [r5, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d0c4      	beq.n	8009760 <__sflush_r+0x34>
 80097d6:	2b1d      	cmp	r3, #29
 80097d8:	d001      	beq.n	80097de <__sflush_r+0xb2>
 80097da:	2b16      	cmp	r3, #22
 80097dc:	d101      	bne.n	80097e2 <__sflush_r+0xb6>
 80097de:	602f      	str	r7, [r5, #0]
 80097e0:	e7b1      	b.n	8009746 <__sflush_r+0x1a>
 80097e2:	89a3      	ldrh	r3, [r4, #12]
 80097e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097e8:	81a3      	strh	r3, [r4, #12]
 80097ea:	e7ad      	b.n	8009748 <__sflush_r+0x1c>
 80097ec:	690f      	ldr	r7, [r1, #16]
 80097ee:	2f00      	cmp	r7, #0
 80097f0:	d0a9      	beq.n	8009746 <__sflush_r+0x1a>
 80097f2:	0793      	lsls	r3, r2, #30
 80097f4:	680e      	ldr	r6, [r1, #0]
 80097f6:	bf08      	it	eq
 80097f8:	694b      	ldreq	r3, [r1, #20]
 80097fa:	600f      	str	r7, [r1, #0]
 80097fc:	bf18      	it	ne
 80097fe:	2300      	movne	r3, #0
 8009800:	eba6 0807 	sub.w	r8, r6, r7
 8009804:	608b      	str	r3, [r1, #8]
 8009806:	f1b8 0f00 	cmp.w	r8, #0
 800980a:	dd9c      	ble.n	8009746 <__sflush_r+0x1a>
 800980c:	6a21      	ldr	r1, [r4, #32]
 800980e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009810:	4643      	mov	r3, r8
 8009812:	463a      	mov	r2, r7
 8009814:	4628      	mov	r0, r5
 8009816:	47b0      	blx	r6
 8009818:	2800      	cmp	r0, #0
 800981a:	dc06      	bgt.n	800982a <__sflush_r+0xfe>
 800981c:	89a3      	ldrh	r3, [r4, #12]
 800981e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009822:	81a3      	strh	r3, [r4, #12]
 8009824:	f04f 30ff 	mov.w	r0, #4294967295
 8009828:	e78e      	b.n	8009748 <__sflush_r+0x1c>
 800982a:	4407      	add	r7, r0
 800982c:	eba8 0800 	sub.w	r8, r8, r0
 8009830:	e7e9      	b.n	8009806 <__sflush_r+0xda>
 8009832:	bf00      	nop
 8009834:	20400001 	.word	0x20400001

08009838 <_fflush_r>:
 8009838:	b538      	push	{r3, r4, r5, lr}
 800983a:	690b      	ldr	r3, [r1, #16]
 800983c:	4605      	mov	r5, r0
 800983e:	460c      	mov	r4, r1
 8009840:	b913      	cbnz	r3, 8009848 <_fflush_r+0x10>
 8009842:	2500      	movs	r5, #0
 8009844:	4628      	mov	r0, r5
 8009846:	bd38      	pop	{r3, r4, r5, pc}
 8009848:	b118      	cbz	r0, 8009852 <_fflush_r+0x1a>
 800984a:	6983      	ldr	r3, [r0, #24]
 800984c:	b90b      	cbnz	r3, 8009852 <_fflush_r+0x1a>
 800984e:	f7fe fa49 	bl	8007ce4 <__sinit>
 8009852:	4b14      	ldr	r3, [pc, #80]	; (80098a4 <_fflush_r+0x6c>)
 8009854:	429c      	cmp	r4, r3
 8009856:	d11b      	bne.n	8009890 <_fflush_r+0x58>
 8009858:	686c      	ldr	r4, [r5, #4]
 800985a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d0ef      	beq.n	8009842 <_fflush_r+0xa>
 8009862:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009864:	07d0      	lsls	r0, r2, #31
 8009866:	d404      	bmi.n	8009872 <_fflush_r+0x3a>
 8009868:	0599      	lsls	r1, r3, #22
 800986a:	d402      	bmi.n	8009872 <_fflush_r+0x3a>
 800986c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800986e:	f7fe fe4a 	bl	8008506 <__retarget_lock_acquire_recursive>
 8009872:	4628      	mov	r0, r5
 8009874:	4621      	mov	r1, r4
 8009876:	f7ff ff59 	bl	800972c <__sflush_r>
 800987a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800987c:	07da      	lsls	r2, r3, #31
 800987e:	4605      	mov	r5, r0
 8009880:	d4e0      	bmi.n	8009844 <_fflush_r+0xc>
 8009882:	89a3      	ldrh	r3, [r4, #12]
 8009884:	059b      	lsls	r3, r3, #22
 8009886:	d4dd      	bmi.n	8009844 <_fflush_r+0xc>
 8009888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800988a:	f7fe fe3d 	bl	8008508 <__retarget_lock_release_recursive>
 800988e:	e7d9      	b.n	8009844 <_fflush_r+0xc>
 8009890:	4b05      	ldr	r3, [pc, #20]	; (80098a8 <_fflush_r+0x70>)
 8009892:	429c      	cmp	r4, r3
 8009894:	d101      	bne.n	800989a <_fflush_r+0x62>
 8009896:	68ac      	ldr	r4, [r5, #8]
 8009898:	e7df      	b.n	800985a <_fflush_r+0x22>
 800989a:	4b04      	ldr	r3, [pc, #16]	; (80098ac <_fflush_r+0x74>)
 800989c:	429c      	cmp	r4, r3
 800989e:	bf08      	it	eq
 80098a0:	68ec      	ldreq	r4, [r5, #12]
 80098a2:	e7da      	b.n	800985a <_fflush_r+0x22>
 80098a4:	08009efc 	.word	0x08009efc
 80098a8:	08009f1c 	.word	0x08009f1c
 80098ac:	08009edc 	.word	0x08009edc

080098b0 <fiprintf>:
 80098b0:	b40e      	push	{r1, r2, r3}
 80098b2:	b503      	push	{r0, r1, lr}
 80098b4:	4601      	mov	r1, r0
 80098b6:	ab03      	add	r3, sp, #12
 80098b8:	4805      	ldr	r0, [pc, #20]	; (80098d0 <fiprintf+0x20>)
 80098ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80098be:	6800      	ldr	r0, [r0, #0]
 80098c0:	9301      	str	r3, [sp, #4]
 80098c2:	f7ff fc95 	bl	80091f0 <_vfiprintf_r>
 80098c6:	b002      	add	sp, #8
 80098c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80098cc:	b003      	add	sp, #12
 80098ce:	4770      	bx	lr
 80098d0:	200000ac 	.word	0x200000ac

080098d4 <_lseek_r>:
 80098d4:	b538      	push	{r3, r4, r5, lr}
 80098d6:	4d07      	ldr	r5, [pc, #28]	; (80098f4 <_lseek_r+0x20>)
 80098d8:	4604      	mov	r4, r0
 80098da:	4608      	mov	r0, r1
 80098dc:	4611      	mov	r1, r2
 80098de:	2200      	movs	r2, #0
 80098e0:	602a      	str	r2, [r5, #0]
 80098e2:	461a      	mov	r2, r3
 80098e4:	f7f8 ffc0 	bl	8002868 <_lseek>
 80098e8:	1c43      	adds	r3, r0, #1
 80098ea:	d102      	bne.n	80098f2 <_lseek_r+0x1e>
 80098ec:	682b      	ldr	r3, [r5, #0]
 80098ee:	b103      	cbz	r3, 80098f2 <_lseek_r+0x1e>
 80098f0:	6023      	str	r3, [r4, #0]
 80098f2:	bd38      	pop	{r3, r4, r5, pc}
 80098f4:	20000464 	.word	0x20000464

080098f8 <__swhatbuf_r>:
 80098f8:	b570      	push	{r4, r5, r6, lr}
 80098fa:	460e      	mov	r6, r1
 80098fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009900:	2900      	cmp	r1, #0
 8009902:	b096      	sub	sp, #88	; 0x58
 8009904:	4614      	mov	r4, r2
 8009906:	461d      	mov	r5, r3
 8009908:	da08      	bge.n	800991c <__swhatbuf_r+0x24>
 800990a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800990e:	2200      	movs	r2, #0
 8009910:	602a      	str	r2, [r5, #0]
 8009912:	061a      	lsls	r2, r3, #24
 8009914:	d410      	bmi.n	8009938 <__swhatbuf_r+0x40>
 8009916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800991a:	e00e      	b.n	800993a <__swhatbuf_r+0x42>
 800991c:	466a      	mov	r2, sp
 800991e:	f000 f89b 	bl	8009a58 <_fstat_r>
 8009922:	2800      	cmp	r0, #0
 8009924:	dbf1      	blt.n	800990a <__swhatbuf_r+0x12>
 8009926:	9a01      	ldr	r2, [sp, #4]
 8009928:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800992c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009930:	425a      	negs	r2, r3
 8009932:	415a      	adcs	r2, r3
 8009934:	602a      	str	r2, [r5, #0]
 8009936:	e7ee      	b.n	8009916 <__swhatbuf_r+0x1e>
 8009938:	2340      	movs	r3, #64	; 0x40
 800993a:	2000      	movs	r0, #0
 800993c:	6023      	str	r3, [r4, #0]
 800993e:	b016      	add	sp, #88	; 0x58
 8009940:	bd70      	pop	{r4, r5, r6, pc}
	...

08009944 <__smakebuf_r>:
 8009944:	898b      	ldrh	r3, [r1, #12]
 8009946:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009948:	079d      	lsls	r5, r3, #30
 800994a:	4606      	mov	r6, r0
 800994c:	460c      	mov	r4, r1
 800994e:	d507      	bpl.n	8009960 <__smakebuf_r+0x1c>
 8009950:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009954:	6023      	str	r3, [r4, #0]
 8009956:	6123      	str	r3, [r4, #16]
 8009958:	2301      	movs	r3, #1
 800995a:	6163      	str	r3, [r4, #20]
 800995c:	b002      	add	sp, #8
 800995e:	bd70      	pop	{r4, r5, r6, pc}
 8009960:	ab01      	add	r3, sp, #4
 8009962:	466a      	mov	r2, sp
 8009964:	f7ff ffc8 	bl	80098f8 <__swhatbuf_r>
 8009968:	9900      	ldr	r1, [sp, #0]
 800996a:	4605      	mov	r5, r0
 800996c:	4630      	mov	r0, r6
 800996e:	f7fb fcfd 	bl	800536c <_malloc_r>
 8009972:	b948      	cbnz	r0, 8009988 <__smakebuf_r+0x44>
 8009974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009978:	059a      	lsls	r2, r3, #22
 800997a:	d4ef      	bmi.n	800995c <__smakebuf_r+0x18>
 800997c:	f023 0303 	bic.w	r3, r3, #3
 8009980:	f043 0302 	orr.w	r3, r3, #2
 8009984:	81a3      	strh	r3, [r4, #12]
 8009986:	e7e3      	b.n	8009950 <__smakebuf_r+0xc>
 8009988:	4b0d      	ldr	r3, [pc, #52]	; (80099c0 <__smakebuf_r+0x7c>)
 800998a:	62b3      	str	r3, [r6, #40]	; 0x28
 800998c:	89a3      	ldrh	r3, [r4, #12]
 800998e:	6020      	str	r0, [r4, #0]
 8009990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009994:	81a3      	strh	r3, [r4, #12]
 8009996:	9b00      	ldr	r3, [sp, #0]
 8009998:	6163      	str	r3, [r4, #20]
 800999a:	9b01      	ldr	r3, [sp, #4]
 800999c:	6120      	str	r0, [r4, #16]
 800999e:	b15b      	cbz	r3, 80099b8 <__smakebuf_r+0x74>
 80099a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099a4:	4630      	mov	r0, r6
 80099a6:	f000 f869 	bl	8009a7c <_isatty_r>
 80099aa:	b128      	cbz	r0, 80099b8 <__smakebuf_r+0x74>
 80099ac:	89a3      	ldrh	r3, [r4, #12]
 80099ae:	f023 0303 	bic.w	r3, r3, #3
 80099b2:	f043 0301 	orr.w	r3, r3, #1
 80099b6:	81a3      	strh	r3, [r4, #12]
 80099b8:	89a0      	ldrh	r0, [r4, #12]
 80099ba:	4305      	orrs	r5, r0
 80099bc:	81a5      	strh	r5, [r4, #12]
 80099be:	e7cd      	b.n	800995c <__smakebuf_r+0x18>
 80099c0:	08007c7d 	.word	0x08007c7d

080099c4 <_realloc_r>:
 80099c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099c8:	4680      	mov	r8, r0
 80099ca:	4614      	mov	r4, r2
 80099cc:	460e      	mov	r6, r1
 80099ce:	b921      	cbnz	r1, 80099da <_realloc_r+0x16>
 80099d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099d4:	4611      	mov	r1, r2
 80099d6:	f7fb bcc9 	b.w	800536c <_malloc_r>
 80099da:	b92a      	cbnz	r2, 80099e8 <_realloc_r+0x24>
 80099dc:	f7fb fc5a 	bl	8005294 <_free_r>
 80099e0:	4625      	mov	r5, r4
 80099e2:	4628      	mov	r0, r5
 80099e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099e8:	f000 f858 	bl	8009a9c <_malloc_usable_size_r>
 80099ec:	4284      	cmp	r4, r0
 80099ee:	4607      	mov	r7, r0
 80099f0:	d802      	bhi.n	80099f8 <_realloc_r+0x34>
 80099f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80099f6:	d812      	bhi.n	8009a1e <_realloc_r+0x5a>
 80099f8:	4621      	mov	r1, r4
 80099fa:	4640      	mov	r0, r8
 80099fc:	f7fb fcb6 	bl	800536c <_malloc_r>
 8009a00:	4605      	mov	r5, r0
 8009a02:	2800      	cmp	r0, #0
 8009a04:	d0ed      	beq.n	80099e2 <_realloc_r+0x1e>
 8009a06:	42bc      	cmp	r4, r7
 8009a08:	4622      	mov	r2, r4
 8009a0a:	4631      	mov	r1, r6
 8009a0c:	bf28      	it	cs
 8009a0e:	463a      	movcs	r2, r7
 8009a10:	f7fe fd8d 	bl	800852e <memcpy>
 8009a14:	4631      	mov	r1, r6
 8009a16:	4640      	mov	r0, r8
 8009a18:	f7fb fc3c 	bl	8005294 <_free_r>
 8009a1c:	e7e1      	b.n	80099e2 <_realloc_r+0x1e>
 8009a1e:	4635      	mov	r5, r6
 8009a20:	e7df      	b.n	80099e2 <_realloc_r+0x1e>
	...

08009a24 <_read_r>:
 8009a24:	b538      	push	{r3, r4, r5, lr}
 8009a26:	4d07      	ldr	r5, [pc, #28]	; (8009a44 <_read_r+0x20>)
 8009a28:	4604      	mov	r4, r0
 8009a2a:	4608      	mov	r0, r1
 8009a2c:	4611      	mov	r1, r2
 8009a2e:	2200      	movs	r2, #0
 8009a30:	602a      	str	r2, [r5, #0]
 8009a32:	461a      	mov	r2, r3
 8009a34:	f7f8 fed4 	bl	80027e0 <_read>
 8009a38:	1c43      	adds	r3, r0, #1
 8009a3a:	d102      	bne.n	8009a42 <_read_r+0x1e>
 8009a3c:	682b      	ldr	r3, [r5, #0]
 8009a3e:	b103      	cbz	r3, 8009a42 <_read_r+0x1e>
 8009a40:	6023      	str	r3, [r4, #0]
 8009a42:	bd38      	pop	{r3, r4, r5, pc}
 8009a44:	20000464 	.word	0x20000464

08009a48 <abort>:
 8009a48:	b508      	push	{r3, lr}
 8009a4a:	2006      	movs	r0, #6
 8009a4c:	f000 f856 	bl	8009afc <raise>
 8009a50:	2001      	movs	r0, #1
 8009a52:	f7f8 febb 	bl	80027cc <_exit>
	...

08009a58 <_fstat_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	4d07      	ldr	r5, [pc, #28]	; (8009a78 <_fstat_r+0x20>)
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	4604      	mov	r4, r0
 8009a60:	4608      	mov	r0, r1
 8009a62:	4611      	mov	r1, r2
 8009a64:	602b      	str	r3, [r5, #0]
 8009a66:	f7f8 fee4 	bl	8002832 <_fstat>
 8009a6a:	1c43      	adds	r3, r0, #1
 8009a6c:	d102      	bne.n	8009a74 <_fstat_r+0x1c>
 8009a6e:	682b      	ldr	r3, [r5, #0]
 8009a70:	b103      	cbz	r3, 8009a74 <_fstat_r+0x1c>
 8009a72:	6023      	str	r3, [r4, #0]
 8009a74:	bd38      	pop	{r3, r4, r5, pc}
 8009a76:	bf00      	nop
 8009a78:	20000464 	.word	0x20000464

08009a7c <_isatty_r>:
 8009a7c:	b538      	push	{r3, r4, r5, lr}
 8009a7e:	4d06      	ldr	r5, [pc, #24]	; (8009a98 <_isatty_r+0x1c>)
 8009a80:	2300      	movs	r3, #0
 8009a82:	4604      	mov	r4, r0
 8009a84:	4608      	mov	r0, r1
 8009a86:	602b      	str	r3, [r5, #0]
 8009a88:	f7f8 fee3 	bl	8002852 <_isatty>
 8009a8c:	1c43      	adds	r3, r0, #1
 8009a8e:	d102      	bne.n	8009a96 <_isatty_r+0x1a>
 8009a90:	682b      	ldr	r3, [r5, #0]
 8009a92:	b103      	cbz	r3, 8009a96 <_isatty_r+0x1a>
 8009a94:	6023      	str	r3, [r4, #0]
 8009a96:	bd38      	pop	{r3, r4, r5, pc}
 8009a98:	20000464 	.word	0x20000464

08009a9c <_malloc_usable_size_r>:
 8009a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aa0:	1f18      	subs	r0, r3, #4
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	bfbc      	itt	lt
 8009aa6:	580b      	ldrlt	r3, [r1, r0]
 8009aa8:	18c0      	addlt	r0, r0, r3
 8009aaa:	4770      	bx	lr

08009aac <_raise_r>:
 8009aac:	291f      	cmp	r1, #31
 8009aae:	b538      	push	{r3, r4, r5, lr}
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	460d      	mov	r5, r1
 8009ab4:	d904      	bls.n	8009ac0 <_raise_r+0x14>
 8009ab6:	2316      	movs	r3, #22
 8009ab8:	6003      	str	r3, [r0, #0]
 8009aba:	f04f 30ff 	mov.w	r0, #4294967295
 8009abe:	bd38      	pop	{r3, r4, r5, pc}
 8009ac0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009ac2:	b112      	cbz	r2, 8009aca <_raise_r+0x1e>
 8009ac4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ac8:	b94b      	cbnz	r3, 8009ade <_raise_r+0x32>
 8009aca:	4620      	mov	r0, r4
 8009acc:	f000 f830 	bl	8009b30 <_getpid_r>
 8009ad0:	462a      	mov	r2, r5
 8009ad2:	4601      	mov	r1, r0
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ada:	f000 b817 	b.w	8009b0c <_kill_r>
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d00a      	beq.n	8009af8 <_raise_r+0x4c>
 8009ae2:	1c59      	adds	r1, r3, #1
 8009ae4:	d103      	bne.n	8009aee <_raise_r+0x42>
 8009ae6:	2316      	movs	r3, #22
 8009ae8:	6003      	str	r3, [r0, #0]
 8009aea:	2001      	movs	r0, #1
 8009aec:	e7e7      	b.n	8009abe <_raise_r+0x12>
 8009aee:	2400      	movs	r4, #0
 8009af0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009af4:	4628      	mov	r0, r5
 8009af6:	4798      	blx	r3
 8009af8:	2000      	movs	r0, #0
 8009afa:	e7e0      	b.n	8009abe <_raise_r+0x12>

08009afc <raise>:
 8009afc:	4b02      	ldr	r3, [pc, #8]	; (8009b08 <raise+0xc>)
 8009afe:	4601      	mov	r1, r0
 8009b00:	6818      	ldr	r0, [r3, #0]
 8009b02:	f7ff bfd3 	b.w	8009aac <_raise_r>
 8009b06:	bf00      	nop
 8009b08:	200000ac 	.word	0x200000ac

08009b0c <_kill_r>:
 8009b0c:	b538      	push	{r3, r4, r5, lr}
 8009b0e:	4d07      	ldr	r5, [pc, #28]	; (8009b2c <_kill_r+0x20>)
 8009b10:	2300      	movs	r3, #0
 8009b12:	4604      	mov	r4, r0
 8009b14:	4608      	mov	r0, r1
 8009b16:	4611      	mov	r1, r2
 8009b18:	602b      	str	r3, [r5, #0]
 8009b1a:	f7f8 fe47 	bl	80027ac <_kill>
 8009b1e:	1c43      	adds	r3, r0, #1
 8009b20:	d102      	bne.n	8009b28 <_kill_r+0x1c>
 8009b22:	682b      	ldr	r3, [r5, #0]
 8009b24:	b103      	cbz	r3, 8009b28 <_kill_r+0x1c>
 8009b26:	6023      	str	r3, [r4, #0]
 8009b28:	bd38      	pop	{r3, r4, r5, pc}
 8009b2a:	bf00      	nop
 8009b2c:	20000464 	.word	0x20000464

08009b30 <_getpid_r>:
 8009b30:	f7f8 be34 	b.w	800279c <_getpid>
 8009b34:	0000      	movs	r0, r0
	...

08009b38 <ceil>:
 8009b38:	ec51 0b10 	vmov	r0, r1, d0
 8009b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b40:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009b44:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009b48:	2e13      	cmp	r6, #19
 8009b4a:	ee10 5a10 	vmov	r5, s0
 8009b4e:	ee10 8a10 	vmov	r8, s0
 8009b52:	460c      	mov	r4, r1
 8009b54:	dc30      	bgt.n	8009bb8 <ceil+0x80>
 8009b56:	2e00      	cmp	r6, #0
 8009b58:	da12      	bge.n	8009b80 <ceil+0x48>
 8009b5a:	a335      	add	r3, pc, #212	; (adr r3, 8009c30 <ceil+0xf8>)
 8009b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b60:	f7f6 fb9c 	bl	800029c <__adddf3>
 8009b64:	2200      	movs	r2, #0
 8009b66:	2300      	movs	r3, #0
 8009b68:	f7f6 ffde 	bl	8000b28 <__aeabi_dcmpgt>
 8009b6c:	b128      	cbz	r0, 8009b7a <ceil+0x42>
 8009b6e:	2c00      	cmp	r4, #0
 8009b70:	db55      	blt.n	8009c1e <ceil+0xe6>
 8009b72:	432c      	orrs	r4, r5
 8009b74:	d057      	beq.n	8009c26 <ceil+0xee>
 8009b76:	4c30      	ldr	r4, [pc, #192]	; (8009c38 <ceil+0x100>)
 8009b78:	2500      	movs	r5, #0
 8009b7a:	4621      	mov	r1, r4
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	e025      	b.n	8009bcc <ceil+0x94>
 8009b80:	4f2e      	ldr	r7, [pc, #184]	; (8009c3c <ceil+0x104>)
 8009b82:	4137      	asrs	r7, r6
 8009b84:	ea01 0307 	and.w	r3, r1, r7
 8009b88:	4303      	orrs	r3, r0
 8009b8a:	d01f      	beq.n	8009bcc <ceil+0x94>
 8009b8c:	a328      	add	r3, pc, #160	; (adr r3, 8009c30 <ceil+0xf8>)
 8009b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b92:	f7f6 fb83 	bl	800029c <__adddf3>
 8009b96:	2200      	movs	r2, #0
 8009b98:	2300      	movs	r3, #0
 8009b9a:	f7f6 ffc5 	bl	8000b28 <__aeabi_dcmpgt>
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	d0eb      	beq.n	8009b7a <ceil+0x42>
 8009ba2:	2c00      	cmp	r4, #0
 8009ba4:	bfc2      	ittt	gt
 8009ba6:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8009baa:	fa43 f606 	asrgt.w	r6, r3, r6
 8009bae:	19a4      	addgt	r4, r4, r6
 8009bb0:	ea24 0407 	bic.w	r4, r4, r7
 8009bb4:	2500      	movs	r5, #0
 8009bb6:	e7e0      	b.n	8009b7a <ceil+0x42>
 8009bb8:	2e33      	cmp	r6, #51	; 0x33
 8009bba:	dd0b      	ble.n	8009bd4 <ceil+0x9c>
 8009bbc:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009bc0:	d104      	bne.n	8009bcc <ceil+0x94>
 8009bc2:	ee10 2a10 	vmov	r2, s0
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	f7f6 fb68 	bl	800029c <__adddf3>
 8009bcc:	ec41 0b10 	vmov	d0, r0, r1
 8009bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bd4:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bdc:	fa23 f707 	lsr.w	r7, r3, r7
 8009be0:	4207      	tst	r7, r0
 8009be2:	d0f3      	beq.n	8009bcc <ceil+0x94>
 8009be4:	a312      	add	r3, pc, #72	; (adr r3, 8009c30 <ceil+0xf8>)
 8009be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bea:	f7f6 fb57 	bl	800029c <__adddf3>
 8009bee:	2200      	movs	r2, #0
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	f7f6 ff99 	bl	8000b28 <__aeabi_dcmpgt>
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	d0bf      	beq.n	8009b7a <ceil+0x42>
 8009bfa:	2c00      	cmp	r4, #0
 8009bfc:	dd02      	ble.n	8009c04 <ceil+0xcc>
 8009bfe:	2e14      	cmp	r6, #20
 8009c00:	d103      	bne.n	8009c0a <ceil+0xd2>
 8009c02:	3401      	adds	r4, #1
 8009c04:	ea25 0507 	bic.w	r5, r5, r7
 8009c08:	e7b7      	b.n	8009b7a <ceil+0x42>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009c10:	fa03 f606 	lsl.w	r6, r3, r6
 8009c14:	4435      	add	r5, r6
 8009c16:	4545      	cmp	r5, r8
 8009c18:	bf38      	it	cc
 8009c1a:	18e4      	addcc	r4, r4, r3
 8009c1c:	e7f2      	b.n	8009c04 <ceil+0xcc>
 8009c1e:	2500      	movs	r5, #0
 8009c20:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009c24:	e7a9      	b.n	8009b7a <ceil+0x42>
 8009c26:	4625      	mov	r5, r4
 8009c28:	e7a7      	b.n	8009b7a <ceil+0x42>
 8009c2a:	bf00      	nop
 8009c2c:	f3af 8000 	nop.w
 8009c30:	8800759c 	.word	0x8800759c
 8009c34:	7e37e43c 	.word	0x7e37e43c
 8009c38:	3ff00000 	.word	0x3ff00000
 8009c3c:	000fffff 	.word	0x000fffff

08009c40 <_init>:
 8009c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c42:	bf00      	nop
 8009c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c46:	bc08      	pop	{r3}
 8009c48:	469e      	mov	lr, r3
 8009c4a:	4770      	bx	lr

08009c4c <_fini>:
 8009c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4e:	bf00      	nop
 8009c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c52:	bc08      	pop	{r3}
 8009c54:	469e      	mov	lr, r3
 8009c56:	4770      	bx	lr
